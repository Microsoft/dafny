--solver-plugin: File x does not exist

Description:
  Verify the program.

Usage:
  Dafny verify [<file>...] [options]

Arguments:
  <file>  Dafny input files and/or a Dafny project file []

Options:
  --boogie-filter <pattern>                    (experimental) Only check proofs whose Boogie name is matched by pattern <p>. This option may be specified multiple times to match multiple patterns. The pattern <p> may contain * wildcards which match any character zero or more times. If you are unsure of how Boogie names are generated, please pre- and postfix your pattern with a wildcard to enable matching on Dafny proof names.
  --relax-definite-assignment                  Allow variables to be read before they are assigned, but only if they have an auto-initializable type or if they are ghost and have a nonempty type.
  --verification-time-limit <seconds>          Limit the number of seconds spent trying to verify each procedure
  --verify-included-files                      Verify code in included files.
  --manual-lemma-induction                     Turn off automatic induction for lemmas.
  --solver-path <solver-path>                  Can be used to specify a custom SMT solver to use for verifying Dafny proofs.
  --disable-nonlinear-arithmetic               (experimental, will be replaced in the future)
                                               Reduce Dafny's knowledge of non-linear arithmetic (*,/,%).
  
                                               Results in more manual work, but also produces more predictable behavior.
  --isolate-assertions                         Verify each assertion in isolation.
  --boogie <arguments>                         Specify arguments that are passed to Boogie, a tool used to verify Dafny programs.
  --log-format <configuration>                 Logs verification results using the given test result format. The currently supported formats are `trx`, `csv`, and `text`. These are: the XML-based format commonly used for test results for .NET languages, a custom CSV schema, and a textual format meant for human consumption. You can provide configuration using the same string format as when using the --logger option for dotnet test, such as: --format "trx;LogFileName=<...>");
  
                                               The `trx` and `csv` formats automatically choose an output file name by default, and print the name of this file to the console. The `text` format prints its output to the console by default, but can send output to a file given the `LogFileName` option.
  
                                               The `text` format also includes a more detailed breakdown of what assertions appear in each assertion batch. When combined with the isolate-assertions option, it will provide approximate time and resource use costs for each assertion, allowing identification of especially expensive assertions.
  --resource-limit <resource-limit>            Specify the maximum resource limit (rlimit) value to pass to Z3. A resource limit is a deterministic alternative to a time limit. The output produced by `--log-format csv` includes the resource use of each proof effort, which you can use to determine an appropriate limit for your program. Multiplied by 1000 before sending to Z3.
  --solver-plugin <solver-plugin>              Dafny uses Boogie as part of its verification process. This option allows customising that part using a Boogie plugin. More information about Boogie can be found at https://github.com/boogie-org/boogie. Information on how to construct Boogie plugins can be found by looking at the code in https://github.com/boogie-org/boogie/blob/v2.16.3/Source/Provers/SMTLib/ProverUtil.cs#L316
  --error-limit <error-limit>                  Set the maximum number of errors to report (0 for unlimited). [default: 5]
  --show-snippets                              Show a source code snippet for each Dafny message.
  --warn-as-errors                             Treat warnings as errors.
  --warn-shadowing                             Emits a warning if the name of a declared variable caused another variable to be shadowed.
  --warn-missing-constructor-parentheses       Emits a warning when a constructor name in a case pattern is not followed by parentheses.
  --track-print-effects                        A compiled method, constructor, or iterator is allowed to have print effects only if it is marked with {{:print}}.
  --stdin                                      Read standard input and treat it as an input .dfy file. [default: False]
  --cores <count>                              Run the Dafny verifier using <n> cores, or using <XX%> of the machine's logical cores. [default: 8]
  --library <library>                          The contents of this file and any files it includes can be referenced from other files as if they were included. 
                                               However, these contents are skipped during code generation and verification.
                                               This option is useful in a diamond dependency situation, 
                                               to prevent code from the bottom dependency from being generated more than once.
                                               The value may be a comma-separated list of files and folders.
  --plugin <path-to-one-assembly[,argument]*>  (experimental) One path to an assembly that contains at least one
                                               instantiatable class extending Microsoft.Dafny.Plugin.Rewriter. It
                                               can also extend Microsoft.Dafny.Plugins.PluginConfiguration to
                                               receive arguments. More information about what plugins do and how
                                               to define them:
  
                                               https://github.com/dafny-lang/dafny/blob/master/Source/DafnyLanguageServer/README.md#about-plugins
  --prelude <file>                             Choose the Dafny prelude file.
  --function-syntax <version>                  The syntax for functions changed from Dafny version 3 to version 4. This switch controls access to the new syntax, and also provides a mode to help with migration.
  
                                               3 - Compiled functions are written `function method` and `predicate method`. Ghost functions are written `function` and `predicate`.
                                               4 - Compiled functions are written `function` and `predicate`. Ghost functions are written `ghost function` and `ghost predicate`.
                                               migration3to4 - Compiled functions are written `function method` and `predicate method`. Ghost functions are written `ghost function` and `ghost predicate`. To migrate from version 3 to version 4, use this flag on your version 3 program. This will give flag all occurrences of `function` and `predicate` as parsing errors. These are ghost functions, so change those into the new syntax `ghost function` and `ghost predicate`. Then, start using --functionSyntax:4. This will flag all occurrences of `function method` and `predicate method` as parsing errors. So, change those to just `function` and `predicate`. Now, your program uses version 4 syntax and has the exact same meaning as your previous version 3 program.
                                               experimentalDefaultGhost - Like migration3to4, but allow `function` and `predicate` as alternatives to declaring ghost functions and predicates, respectively.
                                               experimentalDefaultCompiled - Like migration3to4, but allow `function` and `predicate` as alternatives to declaring compiled
                                                   functions and predicates, respectively.
                                               experimentalPredicateAlwaysGhost - Compiled functions are written `function`. Ghost functions are written `ghost function`. Predicates are always ghost and are written `predicate`. [default: 4]
  --quantifier-syntax <version>                The syntax for quantification domains is changing from Dafny version 3 to version 4, more specifically where quantifier ranges (|
                                               <Range>) are allowed. This switch gives early access to the new syntax.
  
                                               3 - Ranges are only allowed after all quantified variables are declared. 
                                                   (e.g. set x, y | 0 <= x < |s| && y in s[x] && 0 <= y :: y)
                                               4 - Ranges are allowed after each quantified variable declaration.
                                                   (e.g. set x | 0 <= x < |s|, y <- s[x] | 0 <= y :: y)
  
                                               Note that quantifier variable domains (<- <Domain>) are available in both syntax versions. [default: Version4]
  --unicode-char                               false - The char type represents any UTF-16 code unit.
                                               true - The char type represents any Unicode scalar value. [default: True]
  --use-basename-for-filename                  When parsing use basename of file for tokens instead of the path supplied on the command line
  -?, -h, --help                               Show help and usage information
  --help-internal                              Show help and usage information, including options designed for developing the Dafny language and toolchain.



