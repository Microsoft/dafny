// Dafny 3.9.0.41003
// Command Line Options: /useBaseNameForFileName /vcsCores:2 /compileVerbose:0 /timeLimit:300 /compile:3 /Users/remywillems/SourceCode/dafny/Test/hofs/VectorUpdate.dfy
// VectorUpdate.dfy

method VectorUpdate<A>(N: int, a: array<A>, f: (int, A) ~> A)
  requires N == a.Length
  requires forall j: int {:trigger a[j]} :: 0 <= j < N ==> f.requires(j, a[j])
  requires forall j: int {:trigger a[j]} :: 0 <= j < N ==> a !in f.reads(j, a[j])
  modifies a
  ensures forall j: int {:trigger old(a[j])} {:trigger a[j]} :: 0 <= j < N ==> a[j] == f(j, old(a[j]))
  decreases N, a
{
  var i := 0;
  while i < N
    invariant 0 <= i <= N
    invariant forall j: int {:trigger a[j]} :: i <= j < N ==> f.requires(j, a[j])
    invariant forall j: int {:trigger old(a[j])} :: 0 <= j < N ==> f.requires(j, old(a[j]))
    invariant forall j: int {:trigger a[j]} :: i <= j < N ==> a !in f.reads(j, a[j])
    invariant forall j: int {:trigger old(a[j])} {:trigger a[j]} :: i <= j < N ==> a[j] == old(a[j])
    invariant forall j: int {:trigger old(a[j])} {:trigger a[j]} :: 0 <= j < i ==> a[j] == f(j, old(a[j]))
    decreases N - i
  {
    a[i] := f(i, a[i]);
    i := i + 1;
  }
}

method VectorUpdate'<A>(a: array<A>, f: (int, A) ~> A)
  requires forall j: int {:trigger a[j]} :: (0 <= j < a.Length ==> a !in f.reads(j, a[j])) && (0 <= j < a.Length ==> f.requires(j, a[j]))
  modifies a
  ensures forall j: int {:trigger old(a[j])} {:trigger a[j]} :: 0 <= j < a.Length ==> a[j] == f(j, old(a[j]))
  decreases a
{
  var i := 0;
  while i < a.Length
    invariant 0 <= i <= a.Length
    invariant forall j: int {:trigger old(a[j])} {:trigger a[j]} :: i <= j < a.Length ==> a[j] == old(a[j])
    invariant forall j: int {:trigger old(a[j])} {:trigger a[j]} :: 0 <= j < i ==> a[j] == f(j, old(a[j]))
    decreases a.Length - i
  {
    a[i] := f(i, a[i]);
    i := i + 1;
  }
}

method VectorUpdate''<A>(a: array<A>, f: (int, A) ~> A)
  requires forall j: int {:trigger a[j]} :: (0 <= j < a.Length ==> a !in f.reads(j, a[j])) && (0 <= j < a.Length ==> f.requires(j, a[j]))
  modifies a
  ensures forall j: int {:trigger old(a[j])} {:trigger a[j]} :: 0 <= j < a.Length ==> a[j] == f(j, old(a[j]))
  decreases a
{
  forall i: int | 0 <= i < a.Length {
    a[i] := f(i, a[i]);
  }
}

method {:timeLimitMultiplier 3} /*{:_timeLimit 900}*/ Main()
{
  var v := new int[10];
  VectorUpdate(10, v, (i: int, _: int) => i);
  PrintArray(v);
  VectorUpdate(10, v, (_: int, x: int) => x + 1);
  PrintArray(v);
  VectorUpdate(10, v, (_: int, x: int) requires x != 0 => 100 / x);
  PrintArray(v);
  var u := new int[10];
  VectorUpdate(10, u, (i: int, _: int) requires 0 <= i < 10 reads v => v[i]);
  PrintArray(u);
  var z := new int[9];
  VectorUpdate(9, z, (i: int, _: int) requires 0 <= i < 9 reads u => u[i] + u[i + 1]);
  PrintArray(z);
  assert z[8] == 21;
}

method PrintArray(a: array<int>)
  decreases a
{
  var i := 0;
  while i < a.Length
    decreases a.Length - i
  {
    if i != 0 {
      print ", ";
    }
    print a[i];
    i := i + 1;
  }
  print "\n";
}
