<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
      <OutputType>Library</OutputType>
      <AssemblyName>DafnyRuntime</AssemblyName>
      <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
      <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
      <DefineConstants>TRACE;ISDAFNYRUNTIMELIB</DefineConstants>
      <TargetFrameworks>netstandard2.0;net452</TargetFrameworks>
      <LangVersion>7.3</LangVersion>
      <PackageLicenseExpression>MIT</PackageLicenseExpression>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Runtime.Numerics" Version="4.3.0" />
    <PackageReference Include="System.Collections.Immutable" Version="1.7.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- TODO: why does this need to be here as well as DafnyPipeline? -->
    <Compile Update="DafnyRuntime.cs">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Compile>
    <Content Include="DafnyRuntime.js" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="DafnyRuntimeGo\DafnyRuntime.go" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="DafnyRuntimeGo\DafnyRuntimeFromDafny.go" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="DafnyRuntime.h" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="DafnyRuntime.py" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="DafnyRuntimeJava\build\libs\DafnyRuntime.jar" Link="DafnyRuntime.jar" CopyToOutputDirectory="PreserveNewest" />

    <!--
    This project depends on DafnyDriver, but only as a CLI tool rather than a direct C# dependency.
    We need to build DafnyDriver before this package, but we can't add a direct project dependency
    because this project needs to build on older frameworks.
    Instead we just use `dotnet run` on DafnyDriver.csproj, WITHOUT passing no-build as
    we'd otherwise like to. We rely on dotnet handling concurrent requests to build
    a project reasonably well.
    -->
  </ItemGroup>

  <ItemGroup>
    <DafnyRuntimeJavaInputFile Include="./DafnyRuntimeJava/**/*.*" />
    <DafnyRuntimeJavaInputFile Remove="./DafnyRuntimeJava/build/**/*.*" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="DafnyRuntimeJava\build\libs" />
  </ItemGroup>
  <PropertyGroup>
    <DafnyRuntimeJar>DafnyRuntimeJava/build/libs/DafnyRuntime.jar</DafnyRuntimeJar>
  </PropertyGroup>
  <Target Name="BuildDafnyRuntimeJar" AfterTargets="ResolveReferences" BeforeTargets="CoreCompile" Inputs="$(MSBuildProjectFile);@(DafnyRuntimeJavaInputFile)" Outputs="$(DafnyRuntimeJar)">
    
    <Message Text="Compiling DafnyRuntimeJava to $(DafnyRuntimeJar)..." Importance="high" />
    <!-- For some reason the DafnyRuntime.jar was often not (yet?) created after this Target was run, leading to build failures. 
       We've removed the 'clean' step that was before 'build', so the DafnyRuntime.jar from a previous run can be used. -->
    <Exec WorkingDirectory="DafnyRuntimeJava" Condition="!$([MSBuild]::IsOSPlatform('Windows'))" Command="./gradlew build" />
    <Exec WorkingDirectory="DafnyRuntimeJava" Condition="$([MSBuild]::IsOSPlatform('Windows'))" Command="./gradlew.bat build" />
    <ItemGroup>
      <!-- Register the generated file to be deleted when cleaning -->
      <FileWrites Include="$(DafnyRuntimeJar)" />
    </ItemGroup>
  </Target>

<!--  <Target Name="BuildDafnyRuntimeToGo" AfterTargets="ResolveReferences" BeforeTargets="CoreCompile">-->
<!--    <Exec WorkingDirectory="DafnyRuntimeDafny" Command="make go" ConsoleToMSBuild="true" />-->
<!--  </Target>-->

</Project>
