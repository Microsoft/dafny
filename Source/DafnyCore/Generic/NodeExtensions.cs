using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Dafny;

public static class NodeExtensions {

  public static IEnumerable<INode> Descendants(this INode node) {
    return node.Children.Concat(node.Children.SelectMany(n => n.Descendants()));
  }

  public static INode FindNode(this INode node, Uri uri, DafnyPosition position) {
    return node.FindNodeChain(uri, position, null)?.Data;
  }

  public static LList<INode> FindNodeChain(this INode node, Uri uri, DafnyPosition position) {
    return FindNodeChain(node, uri, position, null);
  }

  private static LList<INode> FindNodeChain(this INode node, Uri uri, DafnyPosition position, LList<INode> parent) {
    if (node.Tok.Uri != null) {
      if (node.Tok.Uri == uri) {
        return node.FindNodeChain(position, parent);
      }

      return null;
    }

    var newParent = new LList<INode>(node, parent);
    foreach (var child in node.Children) {
      var result = child.FindNodeChain(uri, position, newParent);
      if (result != null) {
        return result;
      }
    }

    return null;
  }

  public static LList<INode> FindNodeChain(this INode node, DafnyPosition position) {
    return FindNodeChain(node, position, new LList<INode>(node, null));
  }

  private static LList<INode> FindNodeChain(this INode node, DafnyPosition position, LList<INode> parent) {
    if (node.Tok is AutoGeneratedToken || !node.RangeToken.ToDafnyRange().Contains(position)) {
      return null;
    }

    var newParent = new LList<INode>(node, parent);
    foreach (var child in node.Children) {
      var result = child.FindNodeChain(position, newParent);
      if (result != null) {
        return result;
      }
    }

    return new LList<INode>(node, parent);
  }
}