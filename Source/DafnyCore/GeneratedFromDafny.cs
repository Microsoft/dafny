// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out1;
      _out1 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out1;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> __accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(BigInteger.One);
          i = _in0;
          goto TAIL_CALL_START;
        } else {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(Dafny.ISequence<Dafny.Rune> __source) {
      Dafny.ISequence<Dafny.Rune> s = __source;
      return (((new BigInteger((s).Count)).Sign == 1) && (!((new BigInteger((s).Count)) > (BigInteger.One)) || (((s).Select(BigInteger.Zero)) != (new Dafny.Rune('0'))))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((s).Count)), true, (((_forall_var_0) => {
        BigInteger i = (BigInteger)_forall_var_0;
        return !(((i).Sign != -1) && ((i) < (new BigInteger((s).Count)))) || ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((s).Select(i)));
      }))))(s));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> body;
      Dafny.ISequence<Dafny.Rune> _out2;
      _out2 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      body = _out2;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger i;
      i = BigInteger.Zero;
      while ((i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _10_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source0 = (body).Select(i);
        if (_source0.is_Module) {
          DAST._IModule _11___mcc_h0 = _source0.dtor_Module_a0;
          DAST._IModule _12_m = _11___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = DCOMP.COMP.GenModule(_12_m, containingPath);
          _10_generated = _out3;
        } else if (_source0.is_Class) {
          DAST._IClass _13___mcc_h1 = _source0.dtor_Class_a0;
          DAST._IClass _14_c = _13___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out4;
          _out4 = DCOMP.COMP.GenClass(_14_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_14_c).dtor_name)));
          _10_generated = _out4;
        } else if (_source0.is_Trait) {
          DAST._ITrait _15___mcc_h2 = _source0.dtor_Trait_a0;
          DAST._ITrait _16_t = _15___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out5;
          _out5 = DCOMP.COMP.GenTrait(_16_t, containingPath);
          _10_generated = _out5;
        } else if (_source0.is_Newtype) {
          DAST._INewtype _17___mcc_h3 = _source0.dtor_Newtype_a0;
          DAST._INewtype _18_n = _17___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out6;
          _out6 = DCOMP.COMP.GenNewtype(_18_n);
          _10_generated = _out6;
        } else {
          DAST._IDatatype _19___mcc_h4 = _source0.dtor_Datatype_a0;
          DAST._IDatatype _20_d = _19___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out7;
          _out7 = DCOMP.COMP.GenDatatype(_20_d);
          _10_generated = _out7;
        }
        if ((i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _10_generated);
        i = (i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _21_tpI;
      _21_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_21_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _22_tp;
          _22_tp = (@params).Select(_21_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_22_tp));
          Dafny.ISequence<Dafny.Rune> _23_genTp;
          Dafny.ISequence<Dafny.Rune> _out8;
          _out8 = DCOMP.COMP.GenType(_22_tp, false, false);
          _23_genTp = _out8;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _24_baseConstraints;
          _24_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _23_genTp), _24_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _23_genTp), _24_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _23_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _21_tpI = (_21_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _25_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _26_typeParams;
      Dafny.ISequence<Dafny.Rune> _27_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _28_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _29_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _30_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _31_erasedParams;
      Dafny.ISet<DAST._IType> _out9;
      Dafny.ISequence<Dafny.Rune> _out10;
      Dafny.ISequence<Dafny.Rune> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Dafny.ISequence<Dafny.Rune> _out13;
      Dafny.ISequence<Dafny.Rune> _out14;
      Dafny.ISequence<Dafny.Rune> _out15;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out9, out _out10, out _out11, out _out12, out _out13, out _out14, out _out15);
      _25_typeParamsSet = _out9;
      _26_typeParams = _out10;
      _27_constrainedTypeParams = _out11;
      _28_whereConstraints = _out12;
      _29_constrainedEraseParams = _out13;
      _30_unerasedParams = _out14;
      _31_erasedParams = _out15;
      Dafny.ISequence<Dafny.Rune> _32_fields;
      _32_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _33_fieldInits;
      _33_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _34_fieldI;
      _34_fieldI = BigInteger.Zero;
      while ((_34_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _35_field;
        _35_field = ((c).dtor_fields).Select(_34_fieldI);
        Dafny.ISequence<Dafny.Rune> _36_fieldType;
        Dafny.ISequence<Dafny.Rune> _out16;
        _out16 = DCOMP.COMP.GenType(((_35_field).dtor_formal).dtor_typ, false, false);
        _36_fieldType = _out16;
        _32_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_32_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_35_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _36_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source1 = (_35_field).dtor_defaultValue;
        if (_source1.is_Some) {
          DAST._IExpression _37___mcc_h0 = _source1.dtor_Some_a0;
          DAST._IExpression _38_e = _37___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _39_eStr;
            bool _40___v1;
            bool _41___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _42___v3;
            Dafny.ISequence<Dafny.Rune> _out17;
            bool _out18;
            bool _out19;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out20;
            DCOMP.COMP.GenExpr(_38_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out17, out _out18, out _out19, out _out20);
            _39_eStr = _out17;
            _40___v1 = _out18;
            _41___v2 = _out19;
            _42___v3 = _out20;
            _33_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_33_fieldInits, DCOMP.__default.escapeIdent(((_35_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _39_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _33_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_33_fieldInits, DCOMP.__default.escapeIdent(((_35_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _34_fieldI = (_34_fieldI) + (BigInteger.One);
      }
      BigInteger _43_typeParamI;
      _43_typeParamI = BigInteger.Zero;
      while ((_43_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _44_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out21;
        _out21 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_43_typeParamI), false, false);
        _44_tpeGen = _out21;
        _32_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_32_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_43_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _44_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _33_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_33_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_43_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _43_typeParamI = (_43_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _32_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _45_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _46_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out23;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _25_typeParamsSet, out _out22, out _out23);
      _45_implBody = _out22;
      _46_traitBodies = _out23;
      _45_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _33_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _45_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _27_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), _28_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _45_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _47_i;
        _47_i = BigInteger.Zero;
        while ((_47_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _48_superClass;
          _48_superClass = ((c).dtor_superClasses).Select(_47_i);
          DAST._IType _source2 = _48_superClass;
          if (_source2.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _49___mcc_h1 = _source2.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _50___mcc_h2 = _source2.dtor_typeArgs;
            DAST._IResolvedType _51___mcc_h3 = _source2.dtor_resolved;
            DAST._IResolvedType _source3 = _51___mcc_h3;
            if (_source3.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _52___mcc_h7 = _source3.dtor_path;
            } else if (_source3.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _53___mcc_h9 = _source3.dtor_path;
              Dafny.ISequence<DAST._IType> _54_typeArgs = _50___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _55_traitPath = _49___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _56_pathStr;
                Dafny.ISequence<Dafny.Rune> _out24;
                _out24 = DCOMP.COMP.GenPath(_55_traitPath);
                _56_pathStr = _out24;
                Dafny.ISequence<Dafny.Rune> _57_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out25;
                _out25 = DCOMP.COMP.GenTypeArgs(_54_typeArgs, false, false);
                _57_typeArgs = _out25;
                Dafny.ISequence<Dafny.Rune> _58_body;
                _58_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_46_traitBodies).Contains(_55_traitPath)) {
                  _58_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_46_traitBodies, _55_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _59_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out26;
                _out26 = DCOMP.COMP.GenPath(path);
                _59_genSelfPath = _out26;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _27_constrainedTypeParams), _56_pathStr), _57_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _59_genSelfPath), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _28_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _58_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _60___mcc_h11 = _source3.dtor_Newtype_a0;
            }
          } else if (_source2.is_Nullable) {
            DAST._IType _61___mcc_h13 = _source2.dtor_Nullable_a0;
          } else if (_source2.is_Tuple) {
            Dafny.ISequence<DAST._IType> _62___mcc_h15 = _source2.dtor_Tuple_a0;
          } else if (_source2.is_Array) {
            DAST._IType _63___mcc_h17 = _source2.dtor_element;
            BigInteger _64___mcc_h18 = _source2.dtor_dims;
          } else if (_source2.is_Seq) {
            DAST._IType _65___mcc_h21 = _source2.dtor_element;
          } else if (_source2.is_Set) {
            DAST._IType _66___mcc_h23 = _source2.dtor_element;
          } else if (_source2.is_Multiset) {
            DAST._IType _67___mcc_h25 = _source2.dtor_element;
          } else if (_source2.is_Map) {
            DAST._IType _68___mcc_h27 = _source2.dtor_key;
            DAST._IType _69___mcc_h28 = _source2.dtor_value;
          } else if (_source2.is_Arrow) {
            Dafny.ISequence<DAST._IType> _70___mcc_h31 = _source2.dtor_args;
            DAST._IType _71___mcc_h32 = _source2.dtor_result;
          } else if (_source2.is_Primitive) {
            DAST._IPrimitive _72___mcc_h35 = _source2.dtor_Primitive_a0;
          } else if (_source2.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _73___mcc_h37 = _source2.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _74___mcc_h39 = _source2.dtor_TypeArg_a0;
          }
          _47_i = (_47_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _75_defaultImpl;
      _75_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _27_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), _28_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _75_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_75_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _75_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_75_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _75_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_75_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _75_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_75_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _76_printImpl;
      _76_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _27_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _76_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_76_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _77_ptrPartialEqImpl;
      _77_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _77_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_77_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _77_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_77_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _77_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_77_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _78_identEraseImpls;
      _78_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _27_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _31_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _78_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_78_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _29_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _30_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _26_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _75_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _76_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _77_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _78_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _79_typeParamsSet;
      _79_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _80_typeParams;
      _80_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _81_tpI;
      _81_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _80_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_81_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _82_tp;
          _82_tp = ((t).dtor_typeParams).Select(_81_tpI);
          _79_typeParamsSet = Dafny.Set<DAST._IType>.Union(_79_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_82_tp));
          Dafny.ISequence<Dafny.Rune> _83_genTp;
          Dafny.ISequence<Dafny.Rune> _out27;
          _out27 = DCOMP.COMP.GenType(_82_tp, false, false);
          _83_genTp = _out27;
          _80_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_80_typeParams, _83_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _81_tpI = (_81_tpI) + (BigInteger.One);
        }
        _80_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_80_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _84_fullPath;
      _84_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _85_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _86___v6;
      Dafny.ISequence<Dafny.Rune> _out28;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out29;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_84_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_84_fullPath)), _79_typeParamsSet, out _out28, out _out29);
      _85_implBody = _out28;
      _86___v6 = _out29;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _80_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _85_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _87_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _88_typeParams;
      Dafny.ISequence<Dafny.Rune> _89_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _90_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _91___v7;
      Dafny.ISequence<Dafny.Rune> _92___v8;
      Dafny.ISequence<Dafny.Rune> _93___v9;
      Dafny.ISet<DAST._IType> _out30;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.ISequence<Dafny.Rune> _out32;
      Dafny.ISequence<Dafny.Rune> _out33;
      Dafny.ISequence<Dafny.Rune> _out34;
      Dafny.ISequence<Dafny.Rune> _out35;
      Dafny.ISequence<Dafny.Rune> _out36;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out30, out _out31, out _out32, out _out33, out _out34, out _out35, out _out36);
      _87_typeParamsSet = _out30;
      _88_typeParams = _out31;
      _89_constrainedTypeParams = _out32;
      _90_whereConstraints = _out33;
      _91___v7 = _out34;
      _92___v8 = _out35;
      _93___v9 = _out36;
      Dafny.ISequence<Dafny.Rune> _94_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out37;
      _out37 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _94_underlyingType = _out37;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _94_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _89_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _94_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _89_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _94_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _89_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _89_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), _90_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source4 = (c).dtor_witnessExpr;
      if (_source4.is_Some) {
        DAST._IExpression _95___mcc_h0 = _source4.dtor_Some_a0;
        DAST._IExpression _96_e = _95___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _97_eStr;
          bool _98___v10;
          bool _99___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _100___v12;
          Dafny.ISequence<Dafny.Rune> _out38;
          bool _out39;
          bool _out40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out41;
          DCOMP.COMP.GenExpr(_96_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out38, out _out39, out _out40, out _out41);
          _97_eStr = _out38;
          _98___v10 = _out39;
          _99___v11 = _out40;
          _100___v12 = _out41;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _97_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _89_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _89_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _94_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _101_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _102_typeParams;
      Dafny.ISequence<Dafny.Rune> _103_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _104_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _105_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _106_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _107_erasedParams;
      Dafny.ISet<DAST._IType> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out42, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48);
      _101_typeParamsSet = _out42;
      _102_typeParams = _out43;
      _103_constrainedTypeParams = _out44;
      _104_whereConstraints = _out45;
      _105_constrainedEraseParams = _out46;
      _106_unerasedParams = _out47;
      _107_erasedParams = _out48;
      Dafny.ISequence<Dafny.Rune> _108_ctors;
      _108_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _109_i;
      _109_i = BigInteger.Zero;
      while ((_109_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _110_ctor;
        _110_ctor = ((c).dtor_ctors).Select(_109_i);
        Dafny.ISequence<Dafny.Rune> _111_ctorBody;
        _111_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_110_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _112_j;
        _112_j = BigInteger.Zero;
        while ((_112_j) < (new BigInteger(((_110_ctor).dtor_args).Count))) {
          DAST._IFormal _113_formal;
          _113_formal = ((_110_ctor).dtor_args).Select(_112_j);
          Dafny.ISequence<Dafny.Rune> _114_formalType;
          Dafny.ISequence<Dafny.Rune> _out49;
          _out49 = DCOMP.COMP.GenType((_113_formal).dtor_typ, false, false);
          _114_formalType = _out49;
          if ((c).dtor_isCo) {
            _111_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_111_ctorBody, DCOMP.__default.escapeIdent((_113_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _114_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _111_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_111_ctorBody, DCOMP.__default.escapeIdent((_113_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _114_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _112_j = (_112_j) + (BigInteger.One);
        }
        _111_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_111_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _108_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_108_ctors, _111_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _109_i = (_109_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _115_selfPath;
      _115_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _116_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _117_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out51;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_115_selfPath)), _101_typeParamsSet, out _out50, out _out51);
      _116_implBody = _out50;
      _117_traitBodies = _out51;
      _109_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _118_emittedFields;
      _118_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_109_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _119_ctor;
        _119_ctor = ((c).dtor_ctors).Select(_109_i);
        BigInteger _120_j;
        _120_j = BigInteger.Zero;
        while ((_120_j) < (new BigInteger(((_119_ctor).dtor_args).Count))) {
          DAST._IFormal _121_formal;
          _121_formal = ((_119_ctor).dtor_args).Select(_120_j);
          if (!((_118_emittedFields).Contains((_121_formal).dtor_name))) {
            _118_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_118_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_121_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _122_formalType;
            Dafny.ISequence<Dafny.Rune> _out52;
            _out52 = DCOMP.COMP.GenType((_121_formal).dtor_typ, false, false);
            _122_formalType = _out52;
            Dafny.ISequence<Dafny.Rune> _123_methodBody;
            _123_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _124_k;
            _124_k = BigInteger.Zero;
            while ((_124_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _125_ctor2;
              _125_ctor2 = ((c).dtor_ctors).Select(_124_k);
              Dafny.ISequence<Dafny.Rune> _126_ctorMatch;
              _126_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_125_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _127_l;
              _127_l = BigInteger.Zero;
              bool _128_hasMatchingField;
              _128_hasMatchingField = false;
              while ((_127_l) < (new BigInteger(((_125_ctor2).dtor_args).Count))) {
                DAST._IFormal _129_formal2;
                _129_formal2 = ((_125_ctor2).dtor_args).Select(_127_l);
                if (((_121_formal).dtor_name).Equals((_129_formal2).dtor_name)) {
                  _128_hasMatchingField = true;
                }
                _126_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_126_ctorMatch, DCOMP.__default.escapeIdent((_129_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _127_l = (_127_l) + (BigInteger.One);
              }
              if (_128_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _126_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_126_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_121_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _126_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_126_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_121_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _126_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_126_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _123_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_123_methodBody, _126_ctorMatch);
              _124_k = (_124_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _123_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _123_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_123_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _116_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_116_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_121_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _122_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _123_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _120_j = (_120_j) + (BigInteger.One);
        }
        _109_i = (_109_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _108_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_108_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _130_typeI;
        _130_typeI = BigInteger.Zero;
        while ((_130_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_130_typeI).Sign == 1) {
            _108_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_108_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _131_genTp;
          Dafny.ISequence<Dafny.Rune> _out53;
          _out53 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_130_typeI), false, false);
          _131_genTp = _out53;
          _108_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_108_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _131_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _130_typeI = (_130_typeI) + (BigInteger.One);
        }
        _108_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_108_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _132_enumBody;
      _132_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _102_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _108_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _103_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _102_typeParams), _104_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _116_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _133_identEraseImpls;
      _133_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _103_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _102_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _107_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _133_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_133_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _105_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _106_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _102_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _134_printImpl;
      _134_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _103_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _102_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _109_i = BigInteger.Zero;
      while ((_109_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _135_ctor;
        _135_ctor = ((c).dtor_ctors).Select(_109_i);
        Dafny.ISequence<Dafny.Rune> _136_ctorMatch;
        _136_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_135_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _137_modulePrefix;
        _137_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _138_printRhs;
        _138_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _137_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_135_ctor).dtor_name), (((_135_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _139_j;
        _139_j = BigInteger.Zero;
        while ((_139_j) < (new BigInteger(((_135_ctor).dtor_args).Count))) {
          DAST._IFormal _140_formal;
          _140_formal = ((_135_ctor).dtor_args).Select(_139_j);
          _136_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_136_ctorMatch, DCOMP.__default.escapeIdent((_140_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_139_j).Sign == 1) {
            _138_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_138_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _138_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_138_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_140_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _139_j = (_139_j) + (BigInteger.One);
        }
        _136_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_136_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_135_ctor).dtor_hasAnyArgs) {
          _138_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_138_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _138_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_138_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _134_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_134_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _136_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _138_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _109_i = (_109_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _134_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_134_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _134_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_134_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _141_defaultImpl;
      _141_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _141_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _103_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _102_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _109_i = BigInteger.Zero;
        while ((_109_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _142_formal;
          _142_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_109_i);
          _141_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_141_defaultImpl, DCOMP.__default.escapeIdent((_142_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _109_i = (_109_i) + (BigInteger.One);
        }
        _141_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_141_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_132_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _133_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _134_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _141_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _143_i;
        _143_i = BigInteger.Zero;
        while ((_143_i) < (new BigInteger((p).Count))) {
          if ((_143_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_143_i))));
          _143_i = (_143_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _144_i;
        _144_i = BigInteger.Zero;
        while ((_144_i) < (new BigInteger((args).Count))) {
          if ((_144_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _145_genTp;
          Dafny.ISequence<Dafny.Rune> _out54;
          _out54 = DCOMP.COMP.GenType((args).Select(_144_i), inBinding, inFn);
          _145_genTp = _out54;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _145_genTp);
          _144_i = (_144_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source5 = c;
      if (_source5.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _146___mcc_h0 = _source5.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _147___mcc_h1 = _source5.dtor_typeArgs;
        DAST._IResolvedType _148___mcc_h2 = _source5.dtor_resolved;
        DAST._IResolvedType _149_resolved = _148___mcc_h2;
        Dafny.ISequence<DAST._IType> _150_args = _147___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _151_p = _146___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out55;
        _out55 = DCOMP.COMP.GenPath(_151_p);
        s = _out55;
        Dafny.ISequence<Dafny.Rune> _152_typeArgs;
        Dafny.ISequence<Dafny.Rune> _out56;
        _out56 = DCOMP.COMP.GenTypeArgs(_150_args, inBinding, inFn);
        _152_typeArgs = _out56;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _152_typeArgs);
        DAST._IResolvedType _source6 = _149_resolved;
        if (_source6.is_Datatype) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _153___mcc_h18 = _source6.dtor_path;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        } else if (_source6.is_Trait) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _154___mcc_h20 = _source6.dtor_path;
          if ((_151_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
          } else {
            if (inBinding) {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
            }
          }
        } else {
          DAST._IType _155___mcc_h22 = _source6.dtor_Newtype_a0;
        }
      } else if (_source5.is_Nullable) {
        DAST._IType _156___mcc_h3 = _source5.dtor_Nullable_a0;
        DAST._IType _157_inner = _156___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _158_innerStr;
        Dafny.ISequence<Dafny.Rune> _out57;
        _out57 = DCOMP.COMP.GenType(_157_inner, inBinding, inFn);
        _158_innerStr = _out57;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _158_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Tuple) {
        Dafny.ISequence<DAST._IType> _159___mcc_h4 = _source5.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _160_types = _159___mcc_h4;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
        BigInteger _hi0 = new BigInteger((_160_types).Count);
        for (BigInteger _161_i = BigInteger.Zero; _161_i < _hi0; _161_i++) {
          if ((_161_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
          }
          Dafny.ISequence<Dafny.Rune> _162_generated;
          Dafny.ISequence<Dafny.Rune> _out58;
          _out58 = DCOMP.COMP.GenType((_160_types).Select(_161_i), inBinding, inFn);
          _162_generated = _out58;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _162_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source5.is_Array) {
        DAST._IType _163___mcc_h5 = _source5.dtor_element;
        BigInteger _164___mcc_h6 = _source5.dtor_dims;
        BigInteger _165_dims = _164___mcc_h6;
        DAST._IType _166_element = _163___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _167_elemStr;
        Dafny.ISequence<Dafny.Rune> _out59;
        _out59 = DCOMP.COMP.GenType(_166_element, inBinding, inFn);
        _167_elemStr = _out59;
        s = _167_elemStr;
        BigInteger _hi1 = _165_dims;
        for (BigInteger _168_i = BigInteger.Zero; _168_i < _hi1; _168_i++) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
        }
      } else if (_source5.is_Seq) {
        DAST._IType _169___mcc_h7 = _source5.dtor_element;
        DAST._IType _170_element = _169___mcc_h7;
        Dafny.ISequence<Dafny.Rune> _171_elemStr;
        Dafny.ISequence<Dafny.Rune> _out60;
        _out60 = DCOMP.COMP.GenType(_170_element, inBinding, inFn);
        _171_elemStr = _out60;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _171_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Set) {
        DAST._IType _172___mcc_h8 = _source5.dtor_element;
        DAST._IType _173_element = _172___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _174_elemStr;
        Dafny.ISequence<Dafny.Rune> _out61;
        _out61 = DCOMP.COMP.GenType(_173_element, inBinding, inFn);
        _174_elemStr = _out61;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _174_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Multiset) {
        DAST._IType _175___mcc_h9 = _source5.dtor_element;
        DAST._IType _176_element = _175___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _177_elemStr;
        Dafny.ISequence<Dafny.Rune> _out62;
        _out62 = DCOMP.COMP.GenType(_176_element, inBinding, inFn);
        _177_elemStr = _out62;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _177_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
      } else if (_source5.is_Map) {
        DAST._IType _178___mcc_h10 = _source5.dtor_key;
        DAST._IType _179___mcc_h11 = _source5.dtor_value;
        DAST._IType _180_value = _179___mcc_h11;
        DAST._IType _181_key = _178___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _182_keyStr;
        Dafny.ISequence<Dafny.Rune> _out63;
        _out63 = DCOMP.COMP.GenType(_181_key, inBinding, inFn);
        _182_keyStr = _out63;
        Dafny.ISequence<Dafny.Rune> _183_valueStr;
        Dafny.ISequence<Dafny.Rune> _out64;
        _out64 = DCOMP.COMP.GenType(_180_value, inBinding, inFn);
        _183_valueStr = _out64;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _182_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _183_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Arrow) {
        Dafny.ISequence<DAST._IType> _184___mcc_h12 = _source5.dtor_args;
        DAST._IType _185___mcc_h13 = _source5.dtor_result;
        DAST._IType _186_result = _185___mcc_h13;
        Dafny.ISequence<DAST._IType> _187_args = _184___mcc_h12;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
        BigInteger _hi2 = new BigInteger((_187_args).Count);
        for (BigInteger _188_i = BigInteger.Zero; _188_i < _hi2; _188_i++) {
          if ((_188_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _189_generated;
          Dafny.ISequence<Dafny.Rune> _out65;
          _out65 = DCOMP.COMP.GenType((_187_args).Select(_188_i), inBinding, true);
          _189_generated = _out65;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _189_generated);
        }
        Dafny.ISequence<Dafny.Rune> _190_resultType;
        Dafny.ISequence<Dafny.Rune> _out66;
        _out66 = DCOMP.COMP.GenType(_186_result, inBinding, (inFn) || (inBinding));
        _190_resultType = _out66;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _190_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
      } else if (_source5.is_Primitive) {
        DAST._IPrimitive _191___mcc_h14 = _source5.dtor_Primitive_a0;
        DAST._IPrimitive _192_p = _191___mcc_h14;
        DAST._IPrimitive _source7 = _192_p;
        if (_source7.is_Int) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
        } else if (_source7.is_Real) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
        } else if (_source7.is_String) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
        } else if (_source7.is_Bool) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
        } else {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
        }
      } else if (_source5.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _193___mcc_h15 = _source5.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _194_v = _193___mcc_h15;
        s = _194_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _195___mcc_h16 = _source5.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source8 = _195___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _196___mcc_h17 = _source8;
        Dafny.ISequence<Dafny.Rune> _197_name = _196___mcc_h17;
        s = DCOMP.__default.escapeIdent(_197_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _198_i;
      _198_i = BigInteger.Zero;
      while ((_198_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source9 = (body).Select(_198_i);
        DAST._IMethod _199___mcc_h0 = _source9;
        DAST._IMethod _200_m = _199___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source10 = (_200_m).dtor_overridingPath;
          if (_source10.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _201___mcc_h1 = _source10.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _202_p = _201___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _203_existing;
              _203_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_202_p)) {
                _203_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _202_p);
              }
              if ((new BigInteger((_203_existing).Count)).Sign == 1) {
                _203_existing = Dafny.Sequence<Dafny.Rune>.Concat(_203_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _204_genMethod;
              Dafny.ISequence<Dafny.Rune> _out67;
              _out67 = DCOMP.COMP.GenMethod(_200_m, true, enclosingType, enclosingTypeParams);
              _204_genMethod = _out67;
              _203_existing = Dafny.Sequence<Dafny.Rune>.Concat(_203_existing, _204_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_202_p, _203_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _205_generated;
              Dafny.ISequence<Dafny.Rune> _out68;
              _out68 = DCOMP.COMP.GenMethod(_200_m, forTrait, enclosingType, enclosingTypeParams);
              _205_generated = _out68;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _205_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _198_i = (_198_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _206_i;
      _206_i = BigInteger.Zero;
      while ((_206_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _207_param;
        _207_param = (@params).Select(_206_i);
        Dafny.ISequence<Dafny.Rune> _208_paramType;
        Dafny.ISequence<Dafny.Rune> _out69;
        _out69 = DCOMP.COMP.GenType((_207_param).dtor_typ, false, false);
        _208_paramType = _out69;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_207_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _208_paramType);
        if ((_206_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _206_i = (_206_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _209_params;
      Dafny.ISequence<Dafny.Rune> _out70;
      _out70 = DCOMP.COMP.GenParams((m).dtor_params);
      _209_params = _out70;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _210_paramNames;
      _210_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _211_paramI;
      _211_paramI = BigInteger.Zero;
      while ((_211_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _210_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_210_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_211_paramI)).dtor_name));
        _211_paramI = (_211_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _209_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _209_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _212_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(enclosingType, false, false);
          _212_enclosingTypeString = _out71;
          _209_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _212_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _209_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _213_retType;
      _213_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _214_typeI;
      _214_typeI = BigInteger.Zero;
      while ((_214_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_214_typeI).Sign == 1) {
          _213_retType = Dafny.Sequence<Dafny.Rune>.Concat(_213_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _215_typeString;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_214_typeI), false, false);
        _215_typeString = _out72;
        _213_retType = Dafny.Sequence<Dafny.Rune>.Concat(_213_retType, _215_typeString);
        _214_typeI = (_214_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _213_retType = Dafny.Sequence<Dafny.Rune>.Concat(_213_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _216_typeParamsFiltered;
      _216_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _217_typeParamI;
      _217_typeParamI = BigInteger.Zero;
      while ((_217_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _218_typeParam;
        _218_typeParam = ((m).dtor_typeParams).Select(_217_typeParamI);
        if (!((enclosingTypeParams).Contains(_218_typeParam))) {
          _216_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_216_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_218_typeParam));
        }
        _217_typeParamI = (_217_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _219_whereClauses;
      _219_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_216_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _219_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_219_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _220_i;
        _220_i = BigInteger.Zero;
        while ((_220_i) < (new BigInteger((_216_typeParamsFiltered).Count))) {
          if ((_220_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _219_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_219_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _221_typeString;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType((_216_typeParamsFiltered).Select(_220_i), false, false);
          _221_typeString = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _221_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _221_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _219_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_219_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _221_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _220_i = (_220_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _209_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _213_retType), _219_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _222_earlyReturn;
        _222_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source11 = (m).dtor_outVars;
        if (_source11.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _223___mcc_h0 = _source11.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _224_outVars = _223___mcc_h0;
          {
            _222_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _225_outI;
            _225_outI = BigInteger.Zero;
            while ((_225_outI) < (new BigInteger((_224_outVars).Count))) {
              if ((_225_outI).Sign == 1) {
                _222_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_222_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _226_outVar;
              _226_outVar = (_224_outVars).Select(_225_outI);
              _222_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_222_earlyReturn, DCOMP.__default.escapeIdent((_226_outVar)));
              _225_outI = (_225_outI) + (BigInteger.One);
            }
            _222_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_222_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _227_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _228___v15;
        Dafny.ISequence<Dafny.Rune> _out74;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out75;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _210_paramNames, true, _222_earlyReturn, out _out74, out _out75);
        _227_body = _out74;
        _228___v15 = _out75;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _227_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _229_declarations;
      _229_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _230_i;
      _230_i = BigInteger.Zero;
      while ((_230_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _231_stmt;
        _231_stmt = (stmts).Select(_230_i);
        Dafny.ISequence<Dafny.Rune> _232_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _233_recIdents;
        Dafny.ISequence<Dafny.Rune> _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmt(_231_stmt, selfIdent, @params, (isLast) && ((_230_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out76, out _out77);
        _232_stmtString = _out76;
        _233_recIdents = _out77;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_233_recIdents, _229_declarations));
        DAST._IStatement _source12 = _231_stmt;
        if (_source12.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _234___mcc_h0 = _source12.dtor_name;
          DAST._IType _235___mcc_h1 = _source12.dtor_typ;
          DAST._IOptional<DAST._IExpression> _236___mcc_h2 = _source12.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _237_name = _234___mcc_h0;
          {
            _229_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_229_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_237_name));
          }
        } else if (_source12.is_Assign) {
          DAST._IAssignLhs _238___mcc_h6 = _source12.dtor_lhs;
          DAST._IExpression _239___mcc_h7 = _source12.dtor_value;
        } else if (_source12.is_If) {
          DAST._IExpression _240___mcc_h10 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _241___mcc_h11 = _source12.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _242___mcc_h12 = _source12.dtor_els;
        } else if (_source12.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _243___mcc_h16 = _source12.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _244___mcc_h17 = _source12.dtor_body;
        } else if (_source12.is_While) {
          DAST._IExpression _245___mcc_h20 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _246___mcc_h21 = _source12.dtor_body;
        } else if (_source12.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _247___mcc_h24 = _source12.dtor_boundName;
          DAST._IType _248___mcc_h25 = _source12.dtor_boundType;
          DAST._IExpression _249___mcc_h26 = _source12.dtor_over;
          Dafny.ISequence<DAST._IStatement> _250___mcc_h27 = _source12.dtor_body;
        } else if (_source12.is_Call) {
          DAST._IExpression _251___mcc_h32 = _source12.dtor_on;
          Dafny.ISequence<Dafny.Rune> _252___mcc_h33 = _source12.dtor_name;
          Dafny.ISequence<DAST._IType> _253___mcc_h34 = _source12.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _254___mcc_h35 = _source12.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _255___mcc_h36 = _source12.dtor_outs;
        } else if (_source12.is_Return) {
          DAST._IExpression _256___mcc_h42 = _source12.dtor_expr;
        } else if (_source12.is_EarlyReturn) {
        } else if (_source12.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _257___mcc_h44 = _source12.dtor_toLabel;
        } else if (_source12.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _258___mcc_h46 = _source12.dtor_body;
        } else if (_source12.is_JumpTailCallStart) {
        } else if (_source12.is_Halt) {
        } else {
          DAST._IExpression _259___mcc_h48 = _source12.dtor_Print_a0;
        }
        if ((_230_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _232_stmtString);
        _230_i = (_230_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source13 = lhs;
      if (_source13.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _260___mcc_h0 = _source13.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source14 = _260___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _261___mcc_h1 = _source14;
        Dafny.ISequence<Dafny.Rune> _262_id = _261___mcc_h1;
        {
          if ((@params).Contains(_262_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_262_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_262_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_262_id);
          needsIIFE = false;
        }
      } else if (_source13.is_Select) {
        DAST._IExpression _263___mcc_h2 = _source13.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _264___mcc_h3 = _source13.dtor_field;
        Dafny.ISequence<Dafny.Rune> _265_field = _264___mcc_h3;
        DAST._IExpression _266_on = _263___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _267_onExpr;
          bool _268_onOwned;
          bool _269_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _270_recIdents;
          Dafny.ISequence<Dafny.Rune> _out78;
          bool _out79;
          bool _out80;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out81;
          DCOMP.COMP.GenExpr(_266_on, selfIdent, @params, false, out _out78, out _out79, out _out80, out _out81);
          _267_onExpr = _out78;
          _268_onOwned = _out79;
          _269_onErased = _out80;
          _270_recIdents = _out81;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _267_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _265_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _270_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _271___mcc_h4 = _source13.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _272___mcc_h5 = _source13.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _273_indices = _272___mcc_h5;
        DAST._IExpression _274_on = _271___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _275_onExpr;
          bool _276_onOwned;
          bool _277_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _278_recIdents;
          Dafny.ISequence<Dafny.Rune> _out82;
          bool _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_274_on, selfIdent, @params, false, out _out82, out _out83, out _out84, out _out85);
          _275_onExpr = _out82;
          _276_onOwned = _out83;
          _277_onErased = _out84;
          _278_recIdents = _out85;
          readIdents = _278_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _279_i;
          _279_i = BigInteger.Zero;
          while ((_279_i) < (new BigInteger((_273_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _280_idx;
            bool _281___v19;
            bool _282_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _283_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out86;
            bool _out87;
            bool _out88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out89;
            DCOMP.COMP.GenExpr((_273_indices).Select(_279_i), selfIdent, @params, true, out _out86, out _out87, out _out88, out _out89);
            _280_idx = _out86;
            _281___v19 = _out87;
            _282_idxErased = _out88;
            _283_recIdentsIdx = _out89;
            if (!(_282_idxErased)) {
              _280_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _280_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_279_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _280_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _283_recIdentsIdx);
            _279_i = (_279_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _275_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _279_i = BigInteger.Zero;
          while ((_279_i) < (new BigInteger((_273_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_279_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _279_i = (_279_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source15 = stmt;
      if (_source15.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _284___mcc_h0 = _source15.dtor_name;
        DAST._IType _285___mcc_h1 = _source15.dtor_typ;
        DAST._IOptional<DAST._IExpression> _286___mcc_h2 = _source15.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source16 = _286___mcc_h2;
        if (_source16.is_Some) {
          DAST._IExpression _287___mcc_h3 = _source16.dtor_Some_a0;
          DAST._IExpression _288_expression = _287___mcc_h3;
          DAST._IType _289_typ = _285___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _290_name = _284___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _291_typeString;
            Dafny.ISequence<Dafny.Rune> _out90;
            _out90 = DCOMP.COMP.GenType(_289_typ, true, false);
            _291_typeString = _out90;
            Dafny.ISequence<Dafny.Rune> _292_expr;
            bool _293___v20;
            bool _294_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _295_recIdents;
            Dafny.ISequence<Dafny.Rune> _out91;
            bool _out92;
            bool _out93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
            DCOMP.COMP.GenExpr(_288_expression, selfIdent, @params, true, out _out91, out _out92, out _out93, out _out94);
            _292_expr = _out91;
            _293___v20 = _out92;
            _294_recErased = _out93;
            _295_recIdents = _out94;
            if (!(_294_recErased)) {
              _292_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _292_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _292_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _291_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _292_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_290_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _291_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _292_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _295_recIdents;
          }
        } else {
          DAST._IType _296_typ = _285___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _297_name = _284___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _298_typeString;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType(_296_typ, true, false);
            _298_typeString = _out95;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_297_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _298_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source15.is_Assign) {
        DAST._IAssignLhs _299___mcc_h4 = _source15.dtor_lhs;
        DAST._IExpression _300___mcc_h5 = _source15.dtor_value;
        DAST._IExpression _301_expression = _300___mcc_h5;
        DAST._IAssignLhs _302_lhs = _299___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _303_lhsGen;
          bool _304_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _305_recIdents;
          Dafny.ISequence<Dafny.Rune> _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenAssignLhs(_302_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out96, out _out97, out _out98);
          _303_lhsGen = _out96;
          _304_needsIIFE = _out97;
          _305_recIdents = _out98;
          Dafny.ISequence<Dafny.Rune> _306_exprGen;
          bool _307___v21;
          bool _308_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _309_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out99;
          bool _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_301_expression, selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
          _306_exprGen = _out99;
          _307___v21 = _out100;
          _308_exprErased = _out101;
          _309_exprIdents = _out102;
          if (!(_308_exprErased)) {
            _306_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _306_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _306_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _306_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_304_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _306_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _303_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_303_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _306_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_305_recIdents, _309_exprIdents);
        }
      } else if (_source15.is_If) {
        DAST._IExpression _310___mcc_h6 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _311___mcc_h7 = _source15.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _312___mcc_h8 = _source15.dtor_els;
        Dafny.ISequence<DAST._IStatement> _313_els = _312___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _314_thn = _311___mcc_h7;
        DAST._IExpression _315_cond = _310___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _316_condString;
          bool _317___v22;
          bool _318_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _319_recIdents;
          Dafny.ISequence<Dafny.Rune> _out103;
          bool _out104;
          bool _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenExpr(_315_cond, selfIdent, @params, true, out _out103, out _out104, out _out105, out _out106);
          _316_condString = _out103;
          _317___v22 = _out104;
          _318_condErased = _out105;
          _319_recIdents = _out106;
          if (!(_318_condErased)) {
            _316_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _316_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _319_recIdents;
          Dafny.ISequence<Dafny.Rune> _320_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _321_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_314_thn, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _320_thnString = _out107;
          _321_thnIdents = _out108;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _321_thnIdents);
          Dafny.ISequence<Dafny.Rune> _322_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _323_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenStmts(_313_els, selfIdent, @params, isLast, earlyReturn, out _out109, out _out110);
          _322_elsString = _out109;
          _323_elsIdents = _out110;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _323_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _316_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _320_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _322_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _324___mcc_h9 = _source15.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _325___mcc_h10 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _326_body = _325___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _327_lbl = _324___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _328_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _329_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
          DCOMP.COMP.GenStmts(_326_body, selfIdent, @params, isLast, earlyReturn, out _out111, out _out112);
          _328_bodyString = _out111;
          _329_bodyIdents = _out112;
          readIdents = _329_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _327_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _328_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_While) {
        DAST._IExpression _330___mcc_h11 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _331___mcc_h12 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _332_body = _331___mcc_h12;
        DAST._IExpression _333_cond = _330___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _334_condString;
          bool _335___v23;
          bool _336_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _337_recIdents;
          Dafny.ISequence<Dafny.Rune> _out113;
          bool _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_333_cond, selfIdent, @params, true, out _out113, out _out114, out _out115, out _out116);
          _334_condString = _out113;
          _335___v23 = _out114;
          _336_condErased = _out115;
          _337_recIdents = _out116;
          if (!(_336_condErased)) {
            _334_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _334_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _337_recIdents;
          Dafny.ISequence<Dafny.Rune> _338_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _339_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenStmts(_332_body, selfIdent, @params, false, earlyReturn, out _out117, out _out118);
          _338_bodyString = _out117;
          _339_bodyIdents = _out118;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _339_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _334_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _338_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _340___mcc_h13 = _source15.dtor_boundName;
        DAST._IType _341___mcc_h14 = _source15.dtor_boundType;
        DAST._IExpression _342___mcc_h15 = _source15.dtor_over;
        Dafny.ISequence<DAST._IStatement> _343___mcc_h16 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _344_body = _343___mcc_h16;
        DAST._IExpression _345_over = _342___mcc_h15;
        DAST._IType _346_boundType = _341___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _347_boundName = _340___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _348_overString;
          bool _349___v24;
          bool _350_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _351_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_345_over, selfIdent, @params, true, out _out119, out _out120, out _out121, out _out122);
          _348_overString = _out119;
          _349___v24 = _out120;
          _350_overErased = _out121;
          _351_recIdents = _out122;
          Dafny.ISequence<Dafny.Rune> _352_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out123;
          _out123 = DCOMP.COMP.GenType(_346_boundType, false, false);
          _352_boundTypeStr = _out123;
          readIdents = _351_recIdents;
          Dafny.ISequence<Dafny.Rune> _353_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _354_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_344_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_347_boundName)), false, earlyReturn, out _out124, out _out125);
          _353_bodyString = _out124;
          _354_bodyIdents = _out125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _354_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_347_boundName));
          Dafny.ISequence<Dafny.Rune> _355_unerasedIter;
          _355_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_350_overErased) {
            _355_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _352_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _355_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _348_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_347_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _355_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _353_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Call) {
        DAST._IExpression _356___mcc_h17 = _source15.dtor_on;
        Dafny.ISequence<Dafny.Rune> _357___mcc_h18 = _source15.dtor_name;
        Dafny.ISequence<DAST._IType> _358___mcc_h19 = _source15.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _359___mcc_h20 = _source15.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _360___mcc_h21 = _source15.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _361_maybeOutVars = _360___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _362_args = _359___mcc_h20;
        Dafny.ISequence<DAST._IType> _363_typeArgs = _358___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _364_name = _357___mcc_h18;
        DAST._IExpression _365_on = _356___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _366_typeArgString;
          _366_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_363_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _367_typeI;
            _367_typeI = BigInteger.Zero;
            _366_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_367_typeI) < (new BigInteger((_363_typeArgs).Count))) {
              if ((_367_typeI).Sign == 1) {
                _366_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_366_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _368_typeString;
              Dafny.ISequence<Dafny.Rune> _out126;
              _out126 = DCOMP.COMP.GenType((_363_typeArgs).Select(_367_typeI), false, false);
              _368_typeString = _out126;
              _366_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_366_typeArgString, _368_typeString);
              _367_typeI = (_367_typeI) + (BigInteger.One);
            }
            _366_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_366_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _369_argString;
          _369_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _370_i;
          _370_i = BigInteger.Zero;
          while ((_370_i) < (new BigInteger((_362_args).Count))) {
            if ((_370_i).Sign == 1) {
              _369_argString = Dafny.Sequence<Dafny.Rune>.Concat(_369_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _371_argExpr;
            bool _372_isOwned;
            bool _373_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _374_argIdents;
            Dafny.ISequence<Dafny.Rune> _out127;
            bool _out128;
            bool _out129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out130;
            DCOMP.COMP.GenExpr((_362_args).Select(_370_i), selfIdent, @params, false, out _out127, out _out128, out _out129, out _out130);
            _371_argExpr = _out127;
            _372_isOwned = _out128;
            _373_argErased = _out129;
            _374_argIdents = _out130;
            if (_373_argErased) {
              _371_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _371_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_372_isOwned) {
              _371_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _371_argExpr);
            }
            _369_argString = Dafny.Sequence<Dafny.Rune>.Concat(_369_argString, _371_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _374_argIdents);
            _370_i = (_370_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _375_enclosingString;
          bool _376___v25;
          bool _377___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _378_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out131;
          bool _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_365_on, selfIdent, @params, false, out _out131, out _out132, out _out133, out _out134);
          _375_enclosingString = _out131;
          _376___v25 = _out132;
          _377___v26 = _out133;
          _378_enclosingIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _378_enclosingIdents);
          DAST._IExpression _source17 = _365_on;
          if (_source17.is_Literal) {
            DAST._ILiteral _379___mcc_h26 = _source17.dtor_Literal_a0;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _380___mcc_h28 = _source17.dtor_Ident_a0;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _381___mcc_h30 = _source17.dtor_Companion_a0;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_375_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source17.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _382___mcc_h32 = _source17.dtor_Tuple_a0;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _383___mcc_h34 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _384___mcc_h35 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _385___mcc_h36 = _source17.dtor_args;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _386___mcc_h40 = _source17.dtor_dims;
            DAST._IType _387___mcc_h41 = _source17.dtor_typ;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _388___mcc_h44 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _389___mcc_h45 = _source17.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _390___mcc_h46 = _source17.dtor_variant;
            bool _391___mcc_h47 = _source17.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _392___mcc_h48 = _source17.dtor_contents;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Convert) {
            DAST._IExpression _393___mcc_h54 = _source17.dtor_value;
            DAST._IType _394___mcc_h55 = _source17.dtor_from;
            DAST._IType _395___mcc_h56 = _source17.dtor_typ;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqConstruct) {
            DAST._IExpression _396___mcc_h60 = _source17.dtor_length;
            DAST._IExpression _397___mcc_h61 = _source17.dtor_elem;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _398___mcc_h64 = _source17.dtor_elements;
            DAST._IType _399___mcc_h65 = _source17.dtor_typ;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _400___mcc_h68 = _source17.dtor_elements;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _401___mcc_h70 = _source17.dtor_mapElems;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_This) {
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ite) {
            DAST._IExpression _402___mcc_h72 = _source17.dtor_cond;
            DAST._IExpression _403___mcc_h73 = _source17.dtor_thn;
            DAST._IExpression _404___mcc_h74 = _source17.dtor_els;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_UnOp) {
            DAST._IUnaryOp _405___mcc_h78 = _source17.dtor_unOp;
            DAST._IExpression _406___mcc_h79 = _source17.dtor_expr;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BinOp) {
            DAST._IBinOp _407___mcc_h82 = _source17.dtor_op;
            DAST._IExpression _408___mcc_h83 = _source17.dtor_left;
            DAST._IExpression _409___mcc_h84 = _source17.dtor_right;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_ArrayLen) {
            DAST._IExpression _410___mcc_h88 = _source17.dtor_expr;
            BigInteger _411___mcc_h89 = _source17.dtor_dim;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Select) {
            DAST._IExpression _412___mcc_h92 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _413___mcc_h93 = _source17.dtor_field;
            bool _414___mcc_h94 = _source17.dtor_isConstant;
            bool _415___mcc_h95 = _source17.dtor_onDatatype;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SelectFn) {
            DAST._IExpression _416___mcc_h100 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _417___mcc_h101 = _source17.dtor_field;
            bool _418___mcc_h102 = _source17.dtor_onDatatype;
            bool _419___mcc_h103 = _source17.dtor_isStatic;
            BigInteger _420___mcc_h104 = _source17.dtor_arity;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Index) {
            DAST._IExpression _421___mcc_h110 = _source17.dtor_expr;
            DAST._ICollKind _422___mcc_h111 = _source17.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _423___mcc_h112 = _source17.dtor_indices;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IndexRange) {
            DAST._IExpression _424___mcc_h116 = _source17.dtor_expr;
            bool _425___mcc_h117 = _source17.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _426___mcc_h118 = _source17.dtor_low;
            DAST._IOptional<DAST._IExpression> _427___mcc_h119 = _source17.dtor_high;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TupleSelect) {
            DAST._IExpression _428___mcc_h124 = _source17.dtor_expr;
            BigInteger _429___mcc_h125 = _source17.dtor_index;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Call) {
            DAST._IExpression _430___mcc_h128 = _source17.dtor_on;
            Dafny.ISequence<Dafny.Rune> _431___mcc_h129 = _source17.dtor_name;
            Dafny.ISequence<DAST._IType> _432___mcc_h130 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _433___mcc_h131 = _source17.dtor_args;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _434___mcc_h136 = _source17.dtor_params;
            DAST._IType _435___mcc_h137 = _source17.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _436___mcc_h138 = _source17.dtor_body;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _437___mcc_h142 = _source17.dtor_values;
            DAST._IType _438___mcc_h143 = _source17.dtor_retType;
            DAST._IExpression _439___mcc_h144 = _source17.dtor_expr;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _440___mcc_h148 = _source17.dtor_name;
            DAST._IType _441___mcc_h149 = _source17.dtor_typ;
            DAST._IExpression _442___mcc_h150 = _source17.dtor_value;
            DAST._IExpression _443___mcc_h151 = _source17.dtor_iifeBody;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Apply) {
            DAST._IExpression _444___mcc_h156 = _source17.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _445___mcc_h157 = _source17.dtor_args;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TypeTest) {
            DAST._IExpression _446___mcc_h160 = _source17.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _447___mcc_h161 = _source17.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _448___mcc_h162 = _source17.dtor_variant;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_InitializationValue) {
            DAST._IType _449___mcc_h166 = _source17.dtor_typ;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BoolBoundedPool) {
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetBoundedPool) {
            DAST._IExpression _450___mcc_h168 = _source17.dtor_of;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqBoundedPool) {
            DAST._IExpression _451___mcc_h170 = _source17.dtor_of;
            bool _452___mcc_h171 = _source17.dtor_includeDuplicates;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _453___mcc_h174 = _source17.dtor_lo;
            DAST._IExpression _454___mcc_h175 = _source17.dtor_hi;
            {
              _375_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _375_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _455_receiver;
          _455_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source18 = _361_maybeOutVars;
          if (_source18.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _456___mcc_h178 = _source18.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _457_outVars = _456___mcc_h178;
            {
              if ((new BigInteger((_457_outVars).Count)) > (BigInteger.One)) {
                _455_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _458_outI;
              _458_outI = BigInteger.Zero;
              while ((_458_outI) < (new BigInteger((_457_outVars).Count))) {
                if ((_458_outI).Sign == 1) {
                  _455_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_455_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _459_outVar;
                _459_outVar = (_457_outVars).Select(_458_outI);
                _455_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_455_receiver, (_459_outVar));
                _458_outI = (_458_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_457_outVars).Count)) > (BigInteger.One)) {
                _455_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_455_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_455_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_455_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _375_enclosingString), DCOMP.__default.escapeIdent(_364_name)), _366_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _369_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source15.is_Return) {
        DAST._IExpression _460___mcc_h22 = _source15.dtor_expr;
        DAST._IExpression _461_expr = _460___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _462_exprString;
          bool _463___v29;
          bool _464_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _465_recIdents;
          Dafny.ISequence<Dafny.Rune> _out135;
          bool _out136;
          bool _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenExpr(_461_expr, selfIdent, @params, true, out _out135, out _out136, out _out137, out _out138);
          _462_exprString = _out135;
          _463___v29 = _out136;
          _464_recErased = _out137;
          _465_recIdents = _out138;
          _462_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _462_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _465_recIdents;
          if (isLast) {
            generated = _462_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _462_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source15.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _466___mcc_h23 = _source15.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _467_toLabel = _466___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source19 = _467_toLabel;
          if (_source19.is_Some) {
            Dafny.ISequence<Dafny.Rune> _468___mcc_h179 = _source19.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _469_lbl = _468___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _469_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _470___mcc_h24 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _471_body = _470___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _472_paramI;
          _472_paramI = BigInteger.Zero;
          while ((_472_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _473_param;
            _473_param = (@params).Select(_472_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_473_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_473_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _472_paramI = (_472_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _474_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _475_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out140;
          DCOMP.COMP.GenStmts(_471_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out139, out _out140);
          _474_bodyString = _out139;
          _475_bodyIdents = _out140;
          readIdents = _475_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _474_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _476___mcc_h25 = _source15.dtor_Print_a0;
        DAST._IExpression _477_e = _476___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _478_printedExpr;
          bool _479_isOwned;
          bool _480___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _481_recIdents;
          Dafny.ISequence<Dafny.Rune> _out141;
          bool _out142;
          bool _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenExpr(_477_e, selfIdent, @params, false, out _out141, out _out142, out _out143, out _out144);
          _478_printedExpr = _out141;
          _479_isOwned = _out142;
          _480___v30 = _out143;
          _481_recIdents = _out144;
          if (_479_isOwned) {
            _478_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _478_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _478_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _481_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source20 = e;
      if (_source20.is_Literal) {
        DAST._ILiteral _482___mcc_h0 = _source20.dtor_Literal_a0;
        DAST._ILiteral _source21 = _482___mcc_h0;
        if (_source21.is_BoolLiteral) {
          bool _483___mcc_h1 = _source21.dtor_BoolLiteral_a0;
          if ((_483___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source21.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _484___mcc_h2 = _source21.dtor_IntLiteral_a0;
          DAST._IType _485___mcc_h3 = _source21.dtor_IntLiteral_a1;
          DAST._IType _486_t = _485___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _487_i = _484___mcc_h2;
          {
            DAST._IType _source22 = _486_t;
            if (_source22.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _488___mcc_h237 = _source22.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _489___mcc_h238 = _source22.dtor_typeArgs;
              DAST._IResolvedType _490___mcc_h239 = _source22.dtor_resolved;
              DAST._IType _491_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _492_genType;
                Dafny.ISequence<Dafny.Rune> _out145;
                _out145 = DCOMP.COMP.GenType(_491_o, false, false);
                _492_genType = _out145;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _492_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Nullable) {
              DAST._IType _493___mcc_h243 = _source22.dtor_Nullable_a0;
              DAST._IType _494_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _495_genType;
                Dafny.ISequence<Dafny.Rune> _out146;
                _out146 = DCOMP.COMP.GenType(_494_o, false, false);
                _495_genType = _out146;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _495_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Tuple) {
              Dafny.ISequence<DAST._IType> _496___mcc_h245 = _source22.dtor_Tuple_a0;
              DAST._IType _497_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _498_genType;
                Dafny.ISequence<Dafny.Rune> _out147;
                _out147 = DCOMP.COMP.GenType(_497_o, false, false);
                _498_genType = _out147;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _498_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Array) {
              DAST._IType _499___mcc_h247 = _source22.dtor_element;
              BigInteger _500___mcc_h248 = _source22.dtor_dims;
              DAST._IType _501_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _502_genType;
                Dafny.ISequence<Dafny.Rune> _out148;
                _out148 = DCOMP.COMP.GenType(_501_o, false, false);
                _502_genType = _out148;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _502_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Seq) {
              DAST._IType _503___mcc_h251 = _source22.dtor_element;
              DAST._IType _504_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _505_genType;
                Dafny.ISequence<Dafny.Rune> _out149;
                _out149 = DCOMP.COMP.GenType(_504_o, false, false);
                _505_genType = _out149;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _505_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Set) {
              DAST._IType _506___mcc_h253 = _source22.dtor_element;
              DAST._IType _507_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _508_genType;
                Dafny.ISequence<Dafny.Rune> _out150;
                _out150 = DCOMP.COMP.GenType(_507_o, false, false);
                _508_genType = _out150;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _508_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Multiset) {
              DAST._IType _509___mcc_h255 = _source22.dtor_element;
              DAST._IType _510_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _511_genType;
                Dafny.ISequence<Dafny.Rune> _out151;
                _out151 = DCOMP.COMP.GenType(_510_o, false, false);
                _511_genType = _out151;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _511_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Map) {
              DAST._IType _512___mcc_h257 = _source22.dtor_key;
              DAST._IType _513___mcc_h258 = _source22.dtor_value;
              DAST._IType _514_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _515_genType;
                Dafny.ISequence<Dafny.Rune> _out152;
                _out152 = DCOMP.COMP.GenType(_514_o, false, false);
                _515_genType = _out152;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _515_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Arrow) {
              Dafny.ISequence<DAST._IType> _516___mcc_h261 = _source22.dtor_args;
              DAST._IType _517___mcc_h262 = _source22.dtor_result;
              DAST._IType _518_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _519_genType;
                Dafny.ISequence<Dafny.Rune> _out153;
                _out153 = DCOMP.COMP.GenType(_518_o, false, false);
                _519_genType = _out153;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _519_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Primitive) {
              DAST._IPrimitive _520___mcc_h265 = _source22.dtor_Primitive_a0;
              DAST._IPrimitive _source23 = _520___mcc_h265;
              if (_source23.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source23.is_Real) {
                DAST._IType _521_o = _486_t;
                {
                  Dafny.ISequence<Dafny.Rune> _522_genType;
                  Dafny.ISequence<Dafny.Rune> _out154;
                  _out154 = DCOMP.COMP.GenType(_521_o, false, false);
                  _522_genType = _out154;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _522_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_String) {
                DAST._IType _523_o = _486_t;
                {
                  Dafny.ISequence<Dafny.Rune> _524_genType;
                  Dafny.ISequence<Dafny.Rune> _out155;
                  _out155 = DCOMP.COMP.GenType(_523_o, false, false);
                  _524_genType = _out155;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _524_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_Bool) {
                DAST._IType _525_o = _486_t;
                {
                  Dafny.ISequence<Dafny.Rune> _526_genType;
                  Dafny.ISequence<Dafny.Rune> _out156;
                  _out156 = DCOMP.COMP.GenType(_525_o, false, false);
                  _526_genType = _out156;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _526_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _527_o = _486_t;
                {
                  Dafny.ISequence<Dafny.Rune> _528_genType;
                  Dafny.ISequence<Dafny.Rune> _out157;
                  _out157 = DCOMP.COMP.GenType(_527_o, false, false);
                  _528_genType = _out157;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _528_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source22.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _529___mcc_h267 = _source22.dtor_Passthrough_a0;
              DAST._IType _530_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _531_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_530_o, false, false);
                _531_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _531_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _532___mcc_h269 = _source22.dtor_TypeArg_a0;
              DAST._IType _533_o = _486_t;
              {
                Dafny.ISequence<Dafny.Rune> _534_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_533_o, false, false);
                _534_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _487_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _534_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _535___mcc_h4 = _source21.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _536___mcc_h5 = _source21.dtor_DecLiteral_a1;
          DAST._IType _537___mcc_h6 = _source21.dtor_DecLiteral_a2;
          DAST._IType _538_t = _537___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _539_d = _536___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _540_n = _535___mcc_h4;
          {
            DAST._IType _source24 = _538_t;
            if (_source24.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _541___mcc_h271 = _source24.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _542___mcc_h272 = _source24.dtor_typeArgs;
              DAST._IResolvedType _543___mcc_h273 = _source24.dtor_resolved;
              DAST._IType _544_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _545_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_544_o, false, false);
                _545_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _545_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Nullable) {
              DAST._IType _546___mcc_h277 = _source24.dtor_Nullable_a0;
              DAST._IType _547_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _548_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_547_o, false, false);
                _548_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _548_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Tuple) {
              Dafny.ISequence<DAST._IType> _549___mcc_h279 = _source24.dtor_Tuple_a0;
              DAST._IType _550_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _551_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_550_o, false, false);
                _551_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _551_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Array) {
              DAST._IType _552___mcc_h281 = _source24.dtor_element;
              BigInteger _553___mcc_h282 = _source24.dtor_dims;
              DAST._IType _554_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _555_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_554_o, false, false);
                _555_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _555_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Seq) {
              DAST._IType _556___mcc_h285 = _source24.dtor_element;
              DAST._IType _557_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _558_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_557_o, false, false);
                _558_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _558_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Set) {
              DAST._IType _559___mcc_h287 = _source24.dtor_element;
              DAST._IType _560_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _561_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_560_o, false, false);
                _561_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _561_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Multiset) {
              DAST._IType _562___mcc_h289 = _source24.dtor_element;
              DAST._IType _563_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _564_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_563_o, false, false);
                _564_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _564_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Map) {
              DAST._IType _565___mcc_h291 = _source24.dtor_key;
              DAST._IType _566___mcc_h292 = _source24.dtor_value;
              DAST._IType _567_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _568_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_567_o, false, false);
                _568_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _568_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Arrow) {
              Dafny.ISequence<DAST._IType> _569___mcc_h295 = _source24.dtor_args;
              DAST._IType _570___mcc_h296 = _source24.dtor_result;
              DAST._IType _571_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _572_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_571_o, false, false);
                _572_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _572_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Primitive) {
              DAST._IPrimitive _573___mcc_h299 = _source24.dtor_Primitive_a0;
              DAST._IPrimitive _source25 = _573___mcc_h299;
              if (_source25.is_Int) {
                DAST._IType _574_o = _538_t;
                {
                  Dafny.ISequence<Dafny.Rune> _575_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_574_o, false, false);
                  _575_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _575_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source25.is_String) {
                DAST._IType _576_o = _538_t;
                {
                  Dafny.ISequence<Dafny.Rune> _577_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_576_o, false, false);
                  _577_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _577_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Bool) {
                DAST._IType _578_o = _538_t;
                {
                  Dafny.ISequence<Dafny.Rune> _579_genType;
                  Dafny.ISequence<Dafny.Rune> _out171;
                  _out171 = DCOMP.COMP.GenType(_578_o, false, false);
                  _579_genType = _out171;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _579_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _580_o = _538_t;
                {
                  Dafny.ISequence<Dafny.Rune> _581_genType;
                  Dafny.ISequence<Dafny.Rune> _out172;
                  _out172 = DCOMP.COMP.GenType(_580_o, false, false);
                  _581_genType = _out172;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _581_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source24.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _582___mcc_h301 = _source24.dtor_Passthrough_a0;
              DAST._IType _583_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _584_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_583_o, false, false);
                _584_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _584_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _585___mcc_h303 = _source24.dtor_TypeArg_a0;
              DAST._IType _586_o = _538_t;
              {
                Dafny.ISequence<Dafny.Rune> _587_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_586_o, false, false);
                _587_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _540_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _539_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _587_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _588___mcc_h7 = _source21.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _589_l = _588___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _589_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_CharLiteral) {
          Dafny.Rune _590___mcc_h8 = _source21.dtor_CharLiteral_a0;
          Dafny.Rune _591_c = _590___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_591_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _592___mcc_h9 = _source21.dtor_Null_a0;
          DAST._IType _593_tpe = _592___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _594_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out175;
            _out175 = DCOMP.COMP.GenType(_593_tpe, false, false);
            _594_tpeGen = _out175;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _594_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source20.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _595___mcc_h10 = _source20.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _596_name = _595___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_596_name);
          if (!((@params).Contains(_596_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_596_name);
        }
      } else if (_source20.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _597___mcc_h11 = _source20.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _598_path = _597___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out176;
          _out176 = DCOMP.COMP.GenPath(_598_path);
          s = _out176;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _599___mcc_h12 = _source20.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _600_values = _599___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _601_i;
          _601_i = BigInteger.Zero;
          while ((_601_i) < (new BigInteger((_600_values).Count))) {
            if ((_601_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _602_recursiveGen;
            bool _603___v31;
            bool _604_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _605_recIdents;
            Dafny.ISequence<Dafny.Rune> _out177;
            bool _out178;
            bool _out179;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out180;
            DCOMP.COMP.GenExpr((_600_values).Select(_601_i), selfIdent, @params, true, out _out177, out _out178, out _out179, out _out180);
            _602_recursiveGen = _out177;
            _603___v31 = _out178;
            _604_isErased = _out179;
            _605_recIdents = _out180;
            if (_604_isErased) {
              _602_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _602_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _602_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _605_recIdents);
            _601_i = (_601_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _606___mcc_h13 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _607___mcc_h14 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _608___mcc_h15 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _609_args = _608___mcc_h15;
        Dafny.ISequence<DAST._IType> _610_typeArgs = _607___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _611_path = _606___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _612_path;
          Dafny.ISequence<Dafny.Rune> _out181;
          _out181 = DCOMP.COMP.GenPath(_611_path);
          _612_path = _out181;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _612_path);
          if ((new BigInteger((_610_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _613_i;
            _613_i = BigInteger.Zero;
            while ((_613_i) < (new BigInteger((_610_typeArgs).Count))) {
              if ((_613_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _614_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_610_typeArgs).Select(_613_i), false, false);
              _614_typeString = _out182;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _614_typeString);
              _613_i = (_613_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _615_i;
          _615_i = BigInteger.Zero;
          while ((_615_i) < (new BigInteger((_609_args).Count))) {
            if ((_615_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _616_recursiveGen;
            bool _617___v32;
            bool _618_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _619_recIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_609_args).Select(_615_i), selfIdent, @params, true, out _out183, out _out184, out _out185, out _out186);
            _616_recursiveGen = _out183;
            _617___v32 = _out184;
            _618_isErased = _out185;
            _619_recIdents = _out186;
            if (_618_isErased) {
              _616_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _616_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _616_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _619_recIdents);
            _615_i = (_615_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source20.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _620___mcc_h16 = _source20.dtor_dims;
        DAST._IType _621___mcc_h17 = _source20.dtor_typ;
        DAST._IType _622_typ = _621___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _623_dims = _620___mcc_h16;
        {
          BigInteger _624_i;
          _624_i = (new BigInteger((_623_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _625_genTyp;
          Dafny.ISequence<Dafny.Rune> _out187;
          _out187 = DCOMP.COMP.GenType(_622_typ, false, false);
          _625_genTyp = _out187;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _625_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_624_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _626_recursiveGen;
            bool _627___v33;
            bool _628_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _629_recIdents;
            Dafny.ISequence<Dafny.Rune> _out188;
            bool _out189;
            bool _out190;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
            DCOMP.COMP.GenExpr((_623_dims).Select(_624_i), selfIdent, @params, true, out _out188, out _out189, out _out190, out _out191);
            _626_recursiveGen = _out188;
            _627___v33 = _out189;
            _628_isErased = _out190;
            _629_recIdents = _out191;
            if (!(_628_isErased)) {
              _626_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _626_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _626_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _629_recIdents);
            _624_i = (_624_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _630___mcc_h18 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _631___mcc_h19 = _source20.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _632___mcc_h20 = _source20.dtor_variant;
        bool _633___mcc_h21 = _source20.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _634___mcc_h22 = _source20.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _635_values = _634___mcc_h22;
        bool _636_isCo = _633___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _637_variant = _632___mcc_h20;
        Dafny.ISequence<DAST._IType> _638_typeArgs = _631___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _639_path = _630___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _640_path;
          Dafny.ISequence<Dafny.Rune> _out192;
          _out192 = DCOMP.COMP.GenPath(_639_path);
          _640_path = _out192;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _640_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_638_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _641_i;
            _641_i = BigInteger.Zero;
            while ((_641_i) < (new BigInteger((_638_typeArgs).Count))) {
              if ((_641_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _642_typeString;
              Dafny.ISequence<Dafny.Rune> _out193;
              _out193 = DCOMP.COMP.GenType((_638_typeArgs).Select(_641_i), false, false);
              _642_typeString = _out193;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _642_typeString);
              _641_i = (_641_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_637_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _643_i;
          _643_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_643_i) < (new BigInteger((_635_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_635_values).Select(_643_i);
            Dafny.ISequence<Dafny.Rune> _644_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _645_value = _let_tmp_rhs0.dtor__1;
            if ((_643_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_636_isCo) {
              Dafny.ISequence<Dafny.Rune> _646_recursiveGen;
              bool _647___v34;
              bool _648_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _649_recIdents;
              Dafny.ISequence<Dafny.Rune> _out194;
              bool _out195;
              bool _out196;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out197;
              DCOMP.COMP.GenExpr(_645_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out194, out _out195, out _out196, out _out197);
              _646_recursiveGen = _out194;
              _647___v34 = _out195;
              _648_isErased = _out196;
              _649_recIdents = _out197;
              if (!(_648_isErased)) {
                _646_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _646_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _649_recIdents);
              Dafny.ISequence<Dafny.Rune> _650_allReadCloned;
              _650_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_649_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _651_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_649_recIdents).Elements) {
                  _651_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_649_recIdents).Contains(_651_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1236)");
              after__ASSIGN_SUCH_THAT_0:;
                _650_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_650_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_651_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_651_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _649_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_649_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_651_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_644_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _650_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _652_recursiveGen;
              bool _653___v35;
              bool _654_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _655_recIdents;
              Dafny.ISequence<Dafny.Rune> _out198;
              bool _out199;
              bool _out200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out201;
              DCOMP.COMP.GenExpr(_645_value, selfIdent, @params, true, out _out198, out _out199, out _out200, out _out201);
              _652_recursiveGen = _out198;
              _653___v35 = _out199;
              _654_isErased = _out200;
              _655_recIdents = _out201;
              if (!(_654_isErased)) {
                _652_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _652_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_644_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _655_recIdents);
            }
            _643_i = (_643_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Convert) {
        DAST._IExpression _656___mcc_h23 = _source20.dtor_value;
        DAST._IType _657___mcc_h24 = _source20.dtor_from;
        DAST._IType _658___mcc_h25 = _source20.dtor_typ;
        DAST._IType _659_toTpe = _658___mcc_h25;
        DAST._IType _660_fromTpe = _657___mcc_h24;
        DAST._IExpression _661_expr = _656___mcc_h23;
        {
          if (object.Equals(_660_fromTpe, _659_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _662_recursiveGen;
            bool _663_recOwned;
            bool _664_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _665_recIdents;
            Dafny.ISequence<Dafny.Rune> _out202;
            bool _out203;
            bool _out204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
            DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out202, out _out203, out _out204, out _out205);
            _662_recursiveGen = _out202;
            _663_recOwned = _out203;
            _664_recErased = _out204;
            _665_recIdents = _out205;
            s = _662_recursiveGen;
            isOwned = _663_recOwned;
            isErased = _664_recErased;
            readIdents = _665_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source26 = _System.Tuple2<DAST._IType, DAST._IType>.create(_660_fromTpe, _659_toTpe);
            DAST._IType _666___mcc_h305 = _source26.dtor__0;
            DAST._IType _667___mcc_h306 = _source26.dtor__1;
            DAST._IType _source27 = _666___mcc_h305;
            if (_source27.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _668___mcc_h309 = _source27.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _669___mcc_h310 = _source27.dtor_typeArgs;
              DAST._IResolvedType _670___mcc_h311 = _source27.dtor_resolved;
              DAST._IResolvedType _source28 = _670___mcc_h311;
              if (_source28.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _671___mcc_h321 = _source28.dtor_path;
                DAST._IType _source29 = _667___mcc_h306;
                if (_source29.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _672___mcc_h325 = _source29.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _673___mcc_h326 = _source29.dtor_typeArgs;
                  DAST._IResolvedType _674___mcc_h327 = _source29.dtor_resolved;
                  DAST._IResolvedType _source30 = _674___mcc_h327;
                  if (_source30.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _675___mcc_h331 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _676_recursiveGen;
                      bool _677_recOwned;
                      bool _678_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _679_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out206;
                      bool _out207;
                      bool _out208;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208, out _out209);
                      _676_recursiveGen = _out206;
                      _677_recOwned = _out207;
                      _678_recErased = _out208;
                      _679_recIdents = _out209;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _677_recOwned;
                      isErased = _678_recErased;
                      readIdents = _679_recIdents;
                    }
                  } else if (_source30.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _680___mcc_h333 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _681_recursiveGen;
                      bool _682_recOwned;
                      bool _683_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _684_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out210;
                      bool _out211;
                      bool _out212;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out213;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out210, out _out211, out _out212, out _out213);
                      _681_recursiveGen = _out210;
                      _682_recOwned = _out211;
                      _683_recErased = _out212;
                      _684_recIdents = _out213;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _681_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _682_recOwned;
                      isErased = _683_recErased;
                      readIdents = _684_recIdents;
                    }
                  } else {
                    DAST._IType _685___mcc_h335 = _source30.dtor_Newtype_a0;
                    DAST._IType _686_b = _685___mcc_h335;
                    {
                      if (object.Equals(_660_fromTpe, _686_b)) {
                        Dafny.ISequence<Dafny.Rune> _687_recursiveGen;
                        bool _688_recOwned;
                        bool _689_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _690_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out214;
                        bool _out215;
                        bool _out216;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out214, out _out215, out _out216, out _out217);
                        _687_recursiveGen = _out214;
                        _688_recOwned = _out215;
                        _689_recErased = _out216;
                        _690_recIdents = _out217;
                        Dafny.ISequence<Dafny.Rune> _691_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out218;
                        _out218 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _691_rhsType = _out218;
                        Dafny.ISequence<Dafny.Rune> _692_uneraseFn;
                        _692_uneraseFn = ((_688_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _691_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _692_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _687_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _688_recOwned;
                        isErased = false;
                        readIdents = _690_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out219;
                        bool _out220;
                        bool _out221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _686_b), _686_b, _659_toTpe), selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                        s = _out219;
                        isOwned = _out220;
                        isErased = _out221;
                        readIdents = _out222;
                      }
                    }
                  }
                } else if (_source29.is_Nullable) {
                  DAST._IType _693___mcc_h337 = _source29.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _694_recursiveGen;
                    bool _695_recOwned;
                    bool _696_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _697_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out223;
                    bool _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                    _694_recursiveGen = _out223;
                    _695_recOwned = _out224;
                    _696_recErased = _out225;
                    _697_recIdents = _out226;
                    if (!(_695_recOwned)) {
                      _694_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_694_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _694_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _696_recErased;
                    readIdents = _697_recIdents;
                  }
                } else if (_source29.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _698___mcc_h339 = _source29.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _699_recursiveGen;
                    bool _700_recOwned;
                    bool _701_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _702_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out227;
                    bool _out228;
                    bool _out229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                    _699_recursiveGen = _out227;
                    _700_recOwned = _out228;
                    _701_recErased = _out229;
                    _702_recIdents = _out230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _700_recOwned;
                    isErased = _701_recErased;
                    readIdents = _702_recIdents;
                  }
                } else if (_source29.is_Array) {
                  DAST._IType _703___mcc_h341 = _source29.dtor_element;
                  BigInteger _704___mcc_h342 = _source29.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _705_recursiveGen;
                    bool _706_recOwned;
                    bool _707_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _708_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out231;
                    bool _out232;
                    bool _out233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out231, out _out232, out _out233, out _out234);
                    _705_recursiveGen = _out231;
                    _706_recOwned = _out232;
                    _707_recErased = _out233;
                    _708_recIdents = _out234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _706_recOwned;
                    isErased = _707_recErased;
                    readIdents = _708_recIdents;
                  }
                } else if (_source29.is_Seq) {
                  DAST._IType _709___mcc_h345 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _710_recursiveGen;
                    bool _711_recOwned;
                    bool _712_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _713_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out235;
                    bool _out236;
                    bool _out237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out235, out _out236, out _out237, out _out238);
                    _710_recursiveGen = _out235;
                    _711_recOwned = _out236;
                    _712_recErased = _out237;
                    _713_recIdents = _out238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _710_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _711_recOwned;
                    isErased = _712_recErased;
                    readIdents = _713_recIdents;
                  }
                } else if (_source29.is_Set) {
                  DAST._IType _714___mcc_h347 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _715_recursiveGen;
                    bool _716_recOwned;
                    bool _717_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _718_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out239;
                    bool _out240;
                    bool _out241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
                    _715_recursiveGen = _out239;
                    _716_recOwned = _out240;
                    _717_recErased = _out241;
                    _718_recIdents = _out242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _716_recOwned;
                    isErased = _717_recErased;
                    readIdents = _718_recIdents;
                  }
                } else if (_source29.is_Multiset) {
                  DAST._IType _719___mcc_h349 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _720_recursiveGen;
                    bool _721_recOwned;
                    bool _722_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _723_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out243;
                    bool _out244;
                    bool _out245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                    _720_recursiveGen = _out243;
                    _721_recOwned = _out244;
                    _722_recErased = _out245;
                    _723_recIdents = _out246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _721_recOwned;
                    isErased = _722_recErased;
                    readIdents = _723_recIdents;
                  }
                } else if (_source29.is_Map) {
                  DAST._IType _724___mcc_h351 = _source29.dtor_key;
                  DAST._IType _725___mcc_h352 = _source29.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _726_recursiveGen;
                    bool _727_recOwned;
                    bool _728_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _729_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out247;
                    bool _out248;
                    bool _out249;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                    _726_recursiveGen = _out247;
                    _727_recOwned = _out248;
                    _728_recErased = _out249;
                    _729_recIdents = _out250;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _727_recOwned;
                    isErased = _728_recErased;
                    readIdents = _729_recIdents;
                  }
                } else if (_source29.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _730___mcc_h355 = _source29.dtor_args;
                  DAST._IType _731___mcc_h356 = _source29.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _732_recursiveGen;
                    bool _733_recOwned;
                    bool _734_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _735_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out251;
                    bool _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                    _732_recursiveGen = _out251;
                    _733_recOwned = _out252;
                    _734_recErased = _out253;
                    _735_recIdents = _out254;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _732_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _733_recOwned;
                    isErased = _734_recErased;
                    readIdents = _735_recIdents;
                  }
                } else if (_source29.is_Primitive) {
                  DAST._IPrimitive _736___mcc_h359 = _source29.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _737_recursiveGen;
                    bool _738_recOwned;
                    bool _739_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _740_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out255;
                    bool _out256;
                    bool _out257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out258;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257, out _out258);
                    _737_recursiveGen = _out255;
                    _738_recOwned = _out256;
                    _739_recErased = _out257;
                    _740_recIdents = _out258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _738_recOwned;
                    isErased = _739_recErased;
                    readIdents = _740_recIdents;
                  }
                } else if (_source29.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _741___mcc_h361 = _source29.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _742_recursiveGen;
                    bool _743_recOwned;
                    bool _744_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _745_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out259;
                    bool _out260;
                    bool _out261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out259, out _out260, out _out261, out _out262);
                    _742_recursiveGen = _out259;
                    _743_recOwned = _out260;
                    _744_recErased = _out261;
                    _745_recIdents = _out262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _743_recOwned;
                    isErased = _744_recErased;
                    readIdents = _745_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _746___mcc_h363 = _source29.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _747_recursiveGen;
                    bool _748_recOwned;
                    bool _749_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _750_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out263;
                    bool _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out263, out _out264, out _out265, out _out266);
                    _747_recursiveGen = _out263;
                    _748_recOwned = _out264;
                    _749_recErased = _out265;
                    _750_recIdents = _out266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _748_recOwned;
                    isErased = _749_recErased;
                    readIdents = _750_recIdents;
                  }
                }
              } else if (_source28.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _751___mcc_h365 = _source28.dtor_path;
                DAST._IType _source31 = _667___mcc_h306;
                if (_source31.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _752___mcc_h369 = _source31.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _753___mcc_h370 = _source31.dtor_typeArgs;
                  DAST._IResolvedType _754___mcc_h371 = _source31.dtor_resolved;
                  DAST._IResolvedType _source32 = _754___mcc_h371;
                  if (_source32.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _755___mcc_h375 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _756_recursiveGen;
                      bool _757_recOwned;
                      bool _758_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _759_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out267;
                      bool _out268;
                      bool _out269;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269, out _out270);
                      _756_recursiveGen = _out267;
                      _757_recOwned = _out268;
                      _758_recErased = _out269;
                      _759_recIdents = _out270;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _757_recOwned;
                      isErased = _758_recErased;
                      readIdents = _759_recIdents;
                    }
                  } else if (_source32.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _760___mcc_h377 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _761_recursiveGen;
                      bool _762_recOwned;
                      bool _763_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _764_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out271;
                      bool _out272;
                      bool _out273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
                      _761_recursiveGen = _out271;
                      _762_recOwned = _out272;
                      _763_recErased = _out273;
                      _764_recIdents = _out274;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _762_recOwned;
                      isErased = _763_recErased;
                      readIdents = _764_recIdents;
                    }
                  } else {
                    DAST._IType _765___mcc_h379 = _source32.dtor_Newtype_a0;
                    DAST._IType _766_b = _765___mcc_h379;
                    {
                      if (object.Equals(_660_fromTpe, _766_b)) {
                        Dafny.ISequence<Dafny.Rune> _767_recursiveGen;
                        bool _768_recOwned;
                        bool _769_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _770_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        _767_recursiveGen = _out275;
                        _768_recOwned = _out276;
                        _769_recErased = _out277;
                        _770_recIdents = _out278;
                        Dafny.ISequence<Dafny.Rune> _771_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out279;
                        _out279 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _771_rhsType = _out279;
                        Dafny.ISequence<Dafny.Rune> _772_uneraseFn;
                        _772_uneraseFn = ((_768_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _771_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _772_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _767_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _768_recOwned;
                        isErased = false;
                        readIdents = _770_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out280;
                        bool _out281;
                        bool _out282;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _766_b), _766_b, _659_toTpe), selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                        s = _out280;
                        isOwned = _out281;
                        isErased = _out282;
                        readIdents = _out283;
                      }
                    }
                  }
                } else if (_source31.is_Nullable) {
                  DAST._IType _773___mcc_h381 = _source31.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _774_recursiveGen;
                    bool _775_recOwned;
                    bool _776_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _777_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _774_recursiveGen = _out284;
                    _775_recOwned = _out285;
                    _776_recErased = _out286;
                    _777_recIdents = _out287;
                    if (!(_775_recOwned)) {
                      _774_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_774_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _774_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _776_recErased;
                    readIdents = _777_recIdents;
                  }
                } else if (_source31.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _778___mcc_h383 = _source31.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _779_recursiveGen;
                    bool _780_recOwned;
                    bool _781_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _782_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _779_recursiveGen = _out288;
                    _780_recOwned = _out289;
                    _781_recErased = _out290;
                    _782_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _780_recOwned;
                    isErased = _781_recErased;
                    readIdents = _782_recIdents;
                  }
                } else if (_source31.is_Array) {
                  DAST._IType _783___mcc_h385 = _source31.dtor_element;
                  BigInteger _784___mcc_h386 = _source31.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _785_recursiveGen;
                    bool _786_recOwned;
                    bool _787_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _788_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _785_recursiveGen = _out292;
                    _786_recOwned = _out293;
                    _787_recErased = _out294;
                    _788_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _785_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _786_recOwned;
                    isErased = _787_recErased;
                    readIdents = _788_recIdents;
                  }
                } else if (_source31.is_Seq) {
                  DAST._IType _789___mcc_h389 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _790_recursiveGen;
                    bool _791_recOwned;
                    bool _792_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _793_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _790_recursiveGen = _out296;
                    _791_recOwned = _out297;
                    _792_recErased = _out298;
                    _793_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _791_recOwned;
                    isErased = _792_recErased;
                    readIdents = _793_recIdents;
                  }
                } else if (_source31.is_Set) {
                  DAST._IType _794___mcc_h391 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _795_recursiveGen;
                    bool _796_recOwned;
                    bool _797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _795_recursiveGen = _out300;
                    _796_recOwned = _out301;
                    _797_recErased = _out302;
                    _798_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _796_recOwned;
                    isErased = _797_recErased;
                    readIdents = _798_recIdents;
                  }
                } else if (_source31.is_Multiset) {
                  DAST._IType _799___mcc_h393 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _800_recursiveGen;
                    bool _801_recOwned;
                    bool _802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out304;
                    bool _out305;
                    bool _out306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                    _800_recursiveGen = _out304;
                    _801_recOwned = _out305;
                    _802_recErased = _out306;
                    _803_recIdents = _out307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _801_recOwned;
                    isErased = _802_recErased;
                    readIdents = _803_recIdents;
                  }
                } else if (_source31.is_Map) {
                  DAST._IType _804___mcc_h395 = _source31.dtor_key;
                  DAST._IType _805___mcc_h396 = _source31.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _806_recursiveGen;
                    bool _807_recOwned;
                    bool _808_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _809_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out308;
                    bool _out309;
                    bool _out310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                    _806_recursiveGen = _out308;
                    _807_recOwned = _out309;
                    _808_recErased = _out310;
                    _809_recIdents = _out311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _807_recOwned;
                    isErased = _808_recErased;
                    readIdents = _809_recIdents;
                  }
                } else if (_source31.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _810___mcc_h399 = _source31.dtor_args;
                  DAST._IType _811___mcc_h400 = _source31.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _812_recursiveGen;
                    bool _813_recOwned;
                    bool _814_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _815_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out312;
                    bool _out313;
                    bool _out314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                    _812_recursiveGen = _out312;
                    _813_recOwned = _out313;
                    _814_recErased = _out314;
                    _815_recIdents = _out315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _812_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _813_recOwned;
                    isErased = _814_recErased;
                    readIdents = _815_recIdents;
                  }
                } else if (_source31.is_Primitive) {
                  DAST._IPrimitive _816___mcc_h403 = _source31.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _817_recursiveGen;
                    bool _818_recOwned;
                    bool _819_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _820_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out316;
                    bool _out317;
                    bool _out318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                    _817_recursiveGen = _out316;
                    _818_recOwned = _out317;
                    _819_recErased = _out318;
                    _820_recIdents = _out319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _818_recOwned;
                    isErased = _819_recErased;
                    readIdents = _820_recIdents;
                  }
                } else if (_source31.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _821___mcc_h405 = _source31.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _822_recursiveGen;
                    bool _823_recOwned;
                    bool _824_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _825_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _822_recursiveGen = _out320;
                    _823_recOwned = _out321;
                    _824_recErased = _out322;
                    _825_recIdents = _out323;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _823_recOwned;
                    isErased = _824_recErased;
                    readIdents = _825_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _826___mcc_h407 = _source31.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _827_recursiveGen;
                    bool _828_recOwned;
                    bool _829_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _830_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _827_recursiveGen = _out324;
                    _828_recOwned = _out325;
                    _829_recErased = _out326;
                    _830_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _828_recOwned;
                    isErased = _829_recErased;
                    readIdents = _830_recIdents;
                  }
                }
              } else {
                DAST._IType _831___mcc_h409 = _source28.dtor_Newtype_a0;
                DAST._IType _source33 = _667___mcc_h306;
                if (_source33.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _832___mcc_h413 = _source33.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _833___mcc_h414 = _source33.dtor_typeArgs;
                  DAST._IResolvedType _834___mcc_h415 = _source33.dtor_resolved;
                  DAST._IResolvedType _source34 = _834___mcc_h415;
                  if (_source34.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _835___mcc_h422 = _source34.dtor_path;
                    DAST._IType _836_b = _831___mcc_h409;
                    {
                      if (object.Equals(_836_b, _659_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _837_recursiveGen;
                        bool _838_recOwned;
                        bool _839_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _840_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out328;
                        bool _out329;
                        bool _out330;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                        _837_recursiveGen = _out328;
                        _838_recOwned = _out329;
                        _839_recErased = _out330;
                        _840_recIdents = _out331;
                        Dafny.ISequence<Dafny.Rune> _841_uneraseFn;
                        _841_uneraseFn = ((_838_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _841_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _837_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _838_recOwned;
                        isErased = true;
                        readIdents = _840_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out332;
                        bool _out333;
                        bool _out334;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _836_b), _836_b, _659_toTpe), selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                        s = _out332;
                        isOwned = _out333;
                        isErased = _out334;
                        readIdents = _out335;
                      }
                    }
                  } else if (_source34.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _842___mcc_h425 = _source34.dtor_path;
                    DAST._IType _843_b = _831___mcc_h409;
                    {
                      if (object.Equals(_843_b, _659_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _844_recursiveGen;
                        bool _845_recOwned;
                        bool _846_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _847_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        _844_recursiveGen = _out336;
                        _845_recOwned = _out337;
                        _846_recErased = _out338;
                        _847_recIdents = _out339;
                        Dafny.ISequence<Dafny.Rune> _848_uneraseFn;
                        _848_uneraseFn = ((_845_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _848_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _844_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _845_recOwned;
                        isErased = true;
                        readIdents = _847_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out340;
                        bool _out341;
                        bool _out342;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _843_b), _843_b, _659_toTpe), selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                        s = _out340;
                        isOwned = _out341;
                        isErased = _out342;
                        readIdents = _out343;
                      }
                    }
                  } else {
                    DAST._IType _849___mcc_h428 = _source34.dtor_Newtype_a0;
                    DAST._IType _850_b = _849___mcc_h428;
                    {
                      if (object.Equals(_660_fromTpe, _850_b)) {
                        Dafny.ISequence<Dafny.Rune> _851_recursiveGen;
                        bool _852_recOwned;
                        bool _853_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _854_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out344;
                        bool _out345;
                        bool _out346;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                        _851_recursiveGen = _out344;
                        _852_recOwned = _out345;
                        _853_recErased = _out346;
                        _854_recIdents = _out347;
                        Dafny.ISequence<Dafny.Rune> _855_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out348;
                        _out348 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _855_rhsType = _out348;
                        Dafny.ISequence<Dafny.Rune> _856_uneraseFn;
                        _856_uneraseFn = ((_852_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _855_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _856_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _851_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _852_recOwned;
                        isErased = false;
                        readIdents = _854_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _850_b), _850_b, _659_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  }
                } else if (_source33.is_Nullable) {
                  DAST._IType _857___mcc_h431 = _source33.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _858_recursiveGen;
                    bool _859_recOwned;
                    bool _860_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _861_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _858_recursiveGen = _out353;
                    _859_recOwned = _out354;
                    _860_recErased = _out355;
                    _861_recIdents = _out356;
                    if (!(_859_recOwned)) {
                      _858_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_858_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _858_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _860_recErased;
                    readIdents = _861_recIdents;
                  }
                } else if (_source33.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _862___mcc_h434 = _source33.dtor_Tuple_a0;
                  DAST._IType _863_b = _831___mcc_h409;
                  {
                    if (object.Equals(_863_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _864_recursiveGen;
                      bool _865_recOwned;
                      bool _866_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _867_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out357;
                      bool _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                      _864_recursiveGen = _out357;
                      _865_recOwned = _out358;
                      _866_recErased = _out359;
                      _867_recIdents = _out360;
                      Dafny.ISequence<Dafny.Rune> _868_uneraseFn;
                      _868_uneraseFn = ((_865_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _868_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _864_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _865_recOwned;
                      isErased = true;
                      readIdents = _867_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out361;
                      bool _out362;
                      bool _out363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _863_b), _863_b, _659_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                      s = _out361;
                      isOwned = _out362;
                      isErased = _out363;
                      readIdents = _out364;
                    }
                  }
                } else if (_source33.is_Array) {
                  DAST._IType _869___mcc_h437 = _source33.dtor_element;
                  BigInteger _870___mcc_h438 = _source33.dtor_dims;
                  DAST._IType _871_b = _831___mcc_h409;
                  {
                    if (object.Equals(_871_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _872_recursiveGen;
                      bool _873_recOwned;
                      bool _874_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _875_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out365;
                      bool _out366;
                      bool _out367;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                      _872_recursiveGen = _out365;
                      _873_recOwned = _out366;
                      _874_recErased = _out367;
                      _875_recIdents = _out368;
                      Dafny.ISequence<Dafny.Rune> _876_uneraseFn;
                      _876_uneraseFn = ((_873_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _876_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _872_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _873_recOwned;
                      isErased = true;
                      readIdents = _875_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out369;
                      bool _out370;
                      bool _out371;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _871_b), _871_b, _659_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                      s = _out369;
                      isOwned = _out370;
                      isErased = _out371;
                      readIdents = _out372;
                    }
                  }
                } else if (_source33.is_Seq) {
                  DAST._IType _877___mcc_h443 = _source33.dtor_element;
                  DAST._IType _878_b = _831___mcc_h409;
                  {
                    if (object.Equals(_878_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _879_recursiveGen;
                      bool _880_recOwned;
                      bool _881_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _882_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out373;
                      bool _out374;
                      bool _out375;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                      _879_recursiveGen = _out373;
                      _880_recOwned = _out374;
                      _881_recErased = _out375;
                      _882_recIdents = _out376;
                      Dafny.ISequence<Dafny.Rune> _883_uneraseFn;
                      _883_uneraseFn = ((_880_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _883_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _880_recOwned;
                      isErased = true;
                      readIdents = _882_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out377;
                      bool _out378;
                      bool _out379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _878_b), _878_b, _659_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                      s = _out377;
                      isOwned = _out378;
                      isErased = _out379;
                      readIdents = _out380;
                    }
                  }
                } else if (_source33.is_Set) {
                  DAST._IType _884___mcc_h446 = _source33.dtor_element;
                  DAST._IType _885_b = _831___mcc_h409;
                  {
                    if (object.Equals(_885_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _886_recursiveGen;
                      bool _887_recOwned;
                      bool _888_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _889_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out381;
                      bool _out382;
                      bool _out383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                      _886_recursiveGen = _out381;
                      _887_recOwned = _out382;
                      _888_recErased = _out383;
                      _889_recIdents = _out384;
                      Dafny.ISequence<Dafny.Rune> _890_uneraseFn;
                      _890_uneraseFn = ((_887_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _890_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _887_recOwned;
                      isErased = true;
                      readIdents = _889_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out385;
                      bool _out386;
                      bool _out387;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _885_b), _885_b, _659_toTpe), selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                      s = _out385;
                      isOwned = _out386;
                      isErased = _out387;
                      readIdents = _out388;
                    }
                  }
                } else if (_source33.is_Multiset) {
                  DAST._IType _891___mcc_h449 = _source33.dtor_element;
                  DAST._IType _892_b = _831___mcc_h409;
                  {
                    if (object.Equals(_892_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _893_recursiveGen;
                      bool _894_recOwned;
                      bool _895_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _896_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out389;
                      bool _out390;
                      bool _out391;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                      _893_recursiveGen = _out389;
                      _894_recOwned = _out390;
                      _895_recErased = _out391;
                      _896_recIdents = _out392;
                      Dafny.ISequence<Dafny.Rune> _897_uneraseFn;
                      _897_uneraseFn = ((_894_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _897_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _893_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _894_recOwned;
                      isErased = true;
                      readIdents = _896_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out393;
                      bool _out394;
                      bool _out395;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _892_b), _892_b, _659_toTpe), selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                      s = _out393;
                      isOwned = _out394;
                      isErased = _out395;
                      readIdents = _out396;
                    }
                  }
                } else if (_source33.is_Map) {
                  DAST._IType _898___mcc_h452 = _source33.dtor_key;
                  DAST._IType _899___mcc_h453 = _source33.dtor_value;
                  DAST._IType _900_b = _831___mcc_h409;
                  {
                    if (object.Equals(_900_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _901_recursiveGen;
                      bool _902_recOwned;
                      bool _903_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _904_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out397;
                      bool _out398;
                      bool _out399;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                      _901_recursiveGen = _out397;
                      _902_recOwned = _out398;
                      _903_recErased = _out399;
                      _904_recIdents = _out400;
                      Dafny.ISequence<Dafny.Rune> _905_uneraseFn;
                      _905_uneraseFn = ((_902_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _905_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _902_recOwned;
                      isErased = true;
                      readIdents = _904_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out401;
                      bool _out402;
                      bool _out403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _900_b), _900_b, _659_toTpe), selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                      s = _out401;
                      isOwned = _out402;
                      isErased = _out403;
                      readIdents = _out404;
                    }
                  }
                } else if (_source33.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _906___mcc_h458 = _source33.dtor_args;
                  DAST._IType _907___mcc_h459 = _source33.dtor_result;
                  DAST._IType _908_b = _831___mcc_h409;
                  {
                    if (object.Equals(_908_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _909_recursiveGen;
                      bool _910_recOwned;
                      bool _911_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _912_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out405;
                      bool _out406;
                      bool _out407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                      _909_recursiveGen = _out405;
                      _910_recOwned = _out406;
                      _911_recErased = _out407;
                      _912_recIdents = _out408;
                      Dafny.ISequence<Dafny.Rune> _913_uneraseFn;
                      _913_uneraseFn = ((_910_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _913_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _910_recOwned;
                      isErased = true;
                      readIdents = _912_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out409;
                      bool _out410;
                      bool _out411;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _908_b), _908_b, _659_toTpe), selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                      s = _out409;
                      isOwned = _out410;
                      isErased = _out411;
                      readIdents = _out412;
                    }
                  }
                } else if (_source33.is_Primitive) {
                  DAST._IPrimitive _914___mcc_h464 = _source33.dtor_Primitive_a0;
                  DAST._IType _915_b = _831___mcc_h409;
                  {
                    if (object.Equals(_915_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _916_recursiveGen;
                      bool _917_recOwned;
                      bool _918_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _919_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _916_recursiveGen = _out413;
                      _917_recOwned = _out414;
                      _918_recErased = _out415;
                      _919_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _920_uneraseFn;
                      _920_uneraseFn = ((_917_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _920_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _916_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _917_recOwned;
                      isErased = true;
                      readIdents = _919_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _915_b), _915_b, _659_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source33.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _921___mcc_h467 = _source33.dtor_Passthrough_a0;
                  DAST._IType _922_b = _831___mcc_h409;
                  {
                    if (object.Equals(_922_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _923_recursiveGen;
                      bool _924_recOwned;
                      bool _925_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _926_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _923_recursiveGen = _out421;
                      _924_recOwned = _out422;
                      _925_recErased = _out423;
                      _926_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _927_uneraseFn;
                      _927_uneraseFn = ((_924_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _927_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _923_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _924_recOwned;
                      isErased = true;
                      readIdents = _926_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _922_b), _922_b, _659_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _928___mcc_h470 = _source33.dtor_TypeArg_a0;
                  DAST._IType _929_b = _831___mcc_h409;
                  {
                    if (object.Equals(_929_b, _659_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _930_recursiveGen;
                      bool _931_recOwned;
                      bool _932_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _933_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _930_recursiveGen = _out429;
                      _931_recOwned = _out430;
                      _932_recErased = _out431;
                      _933_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _934_uneraseFn;
                      _934_uneraseFn = ((_931_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _934_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _931_recOwned;
                      isErased = true;
                      readIdents = _933_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _929_b), _929_b, _659_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                }
              }
            } else if (_source27.is_Nullable) {
              DAST._IType _935___mcc_h473 = _source27.dtor_Nullable_a0;
              DAST._IType _source35 = _667___mcc_h306;
              if (_source35.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _936___mcc_h477 = _source35.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _937___mcc_h478 = _source35.dtor_typeArgs;
                DAST._IResolvedType _938___mcc_h479 = _source35.dtor_resolved;
                DAST._IResolvedType _source36 = _938___mcc_h479;
                if (_source36.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _939___mcc_h486 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _940_recursiveGen;
                    bool _941_recOwned;
                    bool _942_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _943_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out437;
                    bool _out438;
                    bool _out439;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                    _940_recursiveGen = _out437;
                    _941_recOwned = _out438;
                    _942_recErased = _out439;
                    _943_recIdents = _out440;
                    if (!(_941_recOwned)) {
                      _940_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_940_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_940_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _941_recOwned;
                    isErased = _942_recErased;
                    readIdents = _943_recIdents;
                  }
                } else if (_source36.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _944___mcc_h489 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _945_recursiveGen;
                    bool _946_recOwned;
                    bool _947_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _948_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out441;
                    bool _out442;
                    bool _out443;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                    _945_recursiveGen = _out441;
                    _946_recOwned = _out442;
                    _947_recErased = _out443;
                    _948_recIdents = _out444;
                    if (!(_946_recOwned)) {
                      _945_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_945_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_945_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _946_recOwned;
                    isErased = _947_recErased;
                    readIdents = _948_recIdents;
                  }
                } else {
                  DAST._IType _949___mcc_h492 = _source36.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _950_recursiveGen;
                    bool _951_recOwned;
                    bool _952_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _953_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out445;
                    bool _out446;
                    bool _out447;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                    _950_recursiveGen = _out445;
                    _951_recOwned = _out446;
                    _952_recErased = _out447;
                    _953_recIdents = _out448;
                    if (!(_951_recOwned)) {
                      _950_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_950_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_950_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _951_recOwned;
                    isErased = _952_recErased;
                    readIdents = _953_recIdents;
                  }
                }
              } else if (_source35.is_Nullable) {
                DAST._IType _954___mcc_h495 = _source35.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _955_recursiveGen;
                  bool _956_recOwned;
                  bool _957_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _958_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out449;
                  bool _out450;
                  bool _out451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                  _955_recursiveGen = _out449;
                  _956_recOwned = _out450;
                  _957_recErased = _out451;
                  _958_recIdents = _out452;
                  if (!(_956_recOwned)) {
                    _955_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_955_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_955_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _956_recOwned;
                  isErased = _957_recErased;
                  readIdents = _958_recIdents;
                }
              } else if (_source35.is_Tuple) {
                Dafny.ISequence<DAST._IType> _959___mcc_h498 = _source35.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _960_recursiveGen;
                  bool _961_recOwned;
                  bool _962_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _963_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out453;
                  bool _out454;
                  bool _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                  _960_recursiveGen = _out453;
                  _961_recOwned = _out454;
                  _962_recErased = _out455;
                  _963_recIdents = _out456;
                  if (!(_961_recOwned)) {
                    _960_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_960_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_960_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _961_recOwned;
                  isErased = _962_recErased;
                  readIdents = _963_recIdents;
                }
              } else if (_source35.is_Array) {
                DAST._IType _964___mcc_h501 = _source35.dtor_element;
                BigInteger _965___mcc_h502 = _source35.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _966_recursiveGen;
                  bool _967_recOwned;
                  bool _968_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _969_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out457;
                  bool _out458;
                  bool _out459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                  _966_recursiveGen = _out457;
                  _967_recOwned = _out458;
                  _968_recErased = _out459;
                  _969_recIdents = _out460;
                  if (!(_967_recOwned)) {
                    _966_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_966_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_966_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _967_recOwned;
                  isErased = _968_recErased;
                  readIdents = _969_recIdents;
                }
              } else if (_source35.is_Seq) {
                DAST._IType _970___mcc_h507 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _971_recursiveGen;
                  bool _972_recOwned;
                  bool _973_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _974_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out461;
                  bool _out462;
                  bool _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                  _971_recursiveGen = _out461;
                  _972_recOwned = _out462;
                  _973_recErased = _out463;
                  _974_recIdents = _out464;
                  if (!(_972_recOwned)) {
                    _971_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_971_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_971_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _972_recOwned;
                  isErased = _973_recErased;
                  readIdents = _974_recIdents;
                }
              } else if (_source35.is_Set) {
                DAST._IType _975___mcc_h510 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _976_recursiveGen;
                  bool _977_recOwned;
                  bool _978_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _979_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out465;
                  bool _out466;
                  bool _out467;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                  _976_recursiveGen = _out465;
                  _977_recOwned = _out466;
                  _978_recErased = _out467;
                  _979_recIdents = _out468;
                  if (!(_977_recOwned)) {
                    _976_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_976_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_976_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _977_recOwned;
                  isErased = _978_recErased;
                  readIdents = _979_recIdents;
                }
              } else if (_source35.is_Multiset) {
                DAST._IType _980___mcc_h513 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _981_recursiveGen;
                  bool _982_recOwned;
                  bool _983_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _984_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out469;
                  bool _out470;
                  bool _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                  _981_recursiveGen = _out469;
                  _982_recOwned = _out470;
                  _983_recErased = _out471;
                  _984_recIdents = _out472;
                  if (!(_982_recOwned)) {
                    _981_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_981_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_981_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _982_recOwned;
                  isErased = _983_recErased;
                  readIdents = _984_recIdents;
                }
              } else if (_source35.is_Map) {
                DAST._IType _985___mcc_h516 = _source35.dtor_key;
                DAST._IType _986___mcc_h517 = _source35.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _987_recursiveGen;
                  bool _988_recOwned;
                  bool _989_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _990_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out473;
                  bool _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                  _987_recursiveGen = _out473;
                  _988_recOwned = _out474;
                  _989_recErased = _out475;
                  _990_recIdents = _out476;
                  if (!(_988_recOwned)) {
                    _987_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_987_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_987_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _988_recOwned;
                  isErased = _989_recErased;
                  readIdents = _990_recIdents;
                }
              } else if (_source35.is_Arrow) {
                Dafny.ISequence<DAST._IType> _991___mcc_h522 = _source35.dtor_args;
                DAST._IType _992___mcc_h523 = _source35.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _993_recursiveGen;
                  bool _994_recOwned;
                  bool _995_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _996_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out477;
                  bool _out478;
                  bool _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                  _993_recursiveGen = _out477;
                  _994_recOwned = _out478;
                  _995_recErased = _out479;
                  _996_recIdents = _out480;
                  if (!(_994_recOwned)) {
                    _993_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_993_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_993_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _994_recOwned;
                  isErased = _995_recErased;
                  readIdents = _996_recIdents;
                }
              } else if (_source35.is_Primitive) {
                DAST._IPrimitive _997___mcc_h528 = _source35.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _998_recursiveGen;
                  bool _999_recOwned;
                  bool _1000_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1001_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out481;
                  bool _out482;
                  bool _out483;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                  _998_recursiveGen = _out481;
                  _999_recOwned = _out482;
                  _1000_recErased = _out483;
                  _1001_recIdents = _out484;
                  if (!(_999_recOwned)) {
                    _998_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_998_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_998_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _999_recOwned;
                  isErased = _1000_recErased;
                  readIdents = _1001_recIdents;
                }
              } else if (_source35.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1002___mcc_h531 = _source35.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1003_recursiveGen;
                  bool _1004_recOwned;
                  bool _1005_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1006_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out485;
                  bool _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                  _1003_recursiveGen = _out485;
                  _1004_recOwned = _out486;
                  _1005_recErased = _out487;
                  _1006_recIdents = _out488;
                  if (!(_1004_recOwned)) {
                    _1003_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1003_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1003_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1004_recOwned;
                  isErased = _1005_recErased;
                  readIdents = _1006_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1007___mcc_h534 = _source35.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1008_recursiveGen;
                  bool _1009_recOwned;
                  bool _1010_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1011_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out489;
                  bool _out490;
                  bool _out491;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                  _1008_recursiveGen = _out489;
                  _1009_recOwned = _out490;
                  _1010_recErased = _out491;
                  _1011_recIdents = _out492;
                  if (!(_1009_recOwned)) {
                    _1008_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1008_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1008_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1009_recOwned;
                  isErased = _1010_recErased;
                  readIdents = _1011_recIdents;
                }
              }
            } else if (_source27.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1012___mcc_h537 = _source27.dtor_Tuple_a0;
              DAST._IType _source37 = _667___mcc_h306;
              if (_source37.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1013___mcc_h541 = _source37.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1014___mcc_h542 = _source37.dtor_typeArgs;
                DAST._IResolvedType _1015___mcc_h543 = _source37.dtor_resolved;
                DAST._IResolvedType _source38 = _1015___mcc_h543;
                if (_source38.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1016___mcc_h547 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1017_recursiveGen;
                    bool _1018_recOwned;
                    bool _1019_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1020_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1017_recursiveGen = _out493;
                    _1018_recOwned = _out494;
                    _1019_recErased = _out495;
                    _1020_recIdents = _out496;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1018_recOwned;
                    isErased = _1019_recErased;
                    readIdents = _1020_recIdents;
                  }
                } else if (_source38.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1021___mcc_h549 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1022_recursiveGen;
                    bool _1023_recOwned;
                    bool _1024_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1025_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1022_recursiveGen = _out497;
                    _1023_recOwned = _out498;
                    _1024_recErased = _out499;
                    _1025_recIdents = _out500;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1023_recOwned;
                    isErased = _1024_recErased;
                    readIdents = _1025_recIdents;
                  }
                } else {
                  DAST._IType _1026___mcc_h551 = _source38.dtor_Newtype_a0;
                  DAST._IType _1027_b = _1026___mcc_h551;
                  {
                    if (object.Equals(_660_fromTpe, _1027_b)) {
                      Dafny.ISequence<Dafny.Rune> _1028_recursiveGen;
                      bool _1029_recOwned;
                      bool _1030_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1031_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out501;
                      bool _out502;
                      bool _out503;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                      _1028_recursiveGen = _out501;
                      _1029_recOwned = _out502;
                      _1030_recErased = _out503;
                      _1031_recIdents = _out504;
                      Dafny.ISequence<Dafny.Rune> _1032_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out505;
                      _out505 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1032_rhsType = _out505;
                      Dafny.ISequence<Dafny.Rune> _1033_uneraseFn;
                      _1033_uneraseFn = ((_1029_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1032_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1033_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1028_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1029_recOwned;
                      isErased = false;
                      readIdents = _1031_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out506;
                      bool _out507;
                      bool _out508;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1027_b), _1027_b, _659_toTpe), selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                      s = _out506;
                      isOwned = _out507;
                      isErased = _out508;
                      readIdents = _out509;
                    }
                  }
                }
              } else if (_source37.is_Nullable) {
                DAST._IType _1034___mcc_h553 = _source37.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1035_recursiveGen;
                  bool _1036_recOwned;
                  bool _1037_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1038_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1035_recursiveGen = _out510;
                  _1036_recOwned = _out511;
                  _1037_recErased = _out512;
                  _1038_recIdents = _out513;
                  if (!(_1036_recOwned)) {
                    _1035_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1035_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1035_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1037_recErased;
                  readIdents = _1038_recIdents;
                }
              } else if (_source37.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1039___mcc_h555 = _source37.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1040_recursiveGen;
                  bool _1041_recOwned;
                  bool _1042_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1043_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1040_recursiveGen = _out514;
                  _1041_recOwned = _out515;
                  _1042_recErased = _out516;
                  _1043_recIdents = _out517;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1040_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1041_recOwned;
                  isErased = _1042_recErased;
                  readIdents = _1043_recIdents;
                }
              } else if (_source37.is_Array) {
                DAST._IType _1044___mcc_h557 = _source37.dtor_element;
                BigInteger _1045___mcc_h558 = _source37.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1046_recursiveGen;
                  bool _1047_recOwned;
                  bool _1048_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1049_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1046_recursiveGen = _out518;
                  _1047_recOwned = _out519;
                  _1048_recErased = _out520;
                  _1049_recIdents = _out521;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1046_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1047_recOwned;
                  isErased = _1048_recErased;
                  readIdents = _1049_recIdents;
                }
              } else if (_source37.is_Seq) {
                DAST._IType _1050___mcc_h561 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1051_recursiveGen;
                  bool _1052_recOwned;
                  bool _1053_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1054_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1051_recursiveGen = _out522;
                  _1052_recOwned = _out523;
                  _1053_recErased = _out524;
                  _1054_recIdents = _out525;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1051_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1052_recOwned;
                  isErased = _1053_recErased;
                  readIdents = _1054_recIdents;
                }
              } else if (_source37.is_Set) {
                DAST._IType _1055___mcc_h563 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1056_recursiveGen;
                  bool _1057_recOwned;
                  bool _1058_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1059_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1056_recursiveGen = _out526;
                  _1057_recOwned = _out527;
                  _1058_recErased = _out528;
                  _1059_recIdents = _out529;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1056_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1057_recOwned;
                  isErased = _1058_recErased;
                  readIdents = _1059_recIdents;
                }
              } else if (_source37.is_Multiset) {
                DAST._IType _1060___mcc_h565 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1061_recursiveGen;
                  bool _1062_recOwned;
                  bool _1063_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1064_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out530;
                  bool _out531;
                  bool _out532;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                  _1061_recursiveGen = _out530;
                  _1062_recOwned = _out531;
                  _1063_recErased = _out532;
                  _1064_recIdents = _out533;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1061_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1062_recOwned;
                  isErased = _1063_recErased;
                  readIdents = _1064_recIdents;
                }
              } else if (_source37.is_Map) {
                DAST._IType _1065___mcc_h567 = _source37.dtor_key;
                DAST._IType _1066___mcc_h568 = _source37.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1067_recursiveGen;
                  bool _1068_recOwned;
                  bool _1069_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1070_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out534;
                  bool _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                  _1067_recursiveGen = _out534;
                  _1068_recOwned = _out535;
                  _1069_recErased = _out536;
                  _1070_recIdents = _out537;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1067_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1068_recOwned;
                  isErased = _1069_recErased;
                  readIdents = _1070_recIdents;
                }
              } else if (_source37.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1071___mcc_h571 = _source37.dtor_args;
                DAST._IType _1072___mcc_h572 = _source37.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1073_recursiveGen;
                  bool _1074_recOwned;
                  bool _1075_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1076_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out538;
                  bool _out539;
                  bool _out540;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                  _1073_recursiveGen = _out538;
                  _1074_recOwned = _out539;
                  _1075_recErased = _out540;
                  _1076_recIdents = _out541;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1073_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1074_recOwned;
                  isErased = _1075_recErased;
                  readIdents = _1076_recIdents;
                }
              } else if (_source37.is_Primitive) {
                DAST._IPrimitive _1077___mcc_h575 = _source37.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1078_recursiveGen;
                  bool _1079_recOwned;
                  bool _1080_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1081_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out542;
                  bool _out543;
                  bool _out544;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                  _1078_recursiveGen = _out542;
                  _1079_recOwned = _out543;
                  _1080_recErased = _out544;
                  _1081_recIdents = _out545;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1078_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1079_recOwned;
                  isErased = _1080_recErased;
                  readIdents = _1081_recIdents;
                }
              } else if (_source37.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1082___mcc_h577 = _source37.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1083_recursiveGen;
                  bool _1084_recOwned;
                  bool _1085_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1086_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _1083_recursiveGen = _out546;
                  _1084_recOwned = _out547;
                  _1085_recErased = _out548;
                  _1086_recIdents = _out549;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1083_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1084_recOwned;
                  isErased = _1085_recErased;
                  readIdents = _1086_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1087___mcc_h579 = _source37.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1088_recursiveGen;
                  bool _1089_recOwned;
                  bool _1090_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1091_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _1088_recursiveGen = _out550;
                  _1089_recOwned = _out551;
                  _1090_recErased = _out552;
                  _1091_recIdents = _out553;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1088_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1089_recOwned;
                  isErased = _1090_recErased;
                  readIdents = _1091_recIdents;
                }
              }
            } else if (_source27.is_Array) {
              DAST._IType _1092___mcc_h581 = _source27.dtor_element;
              BigInteger _1093___mcc_h582 = _source27.dtor_dims;
              DAST._IType _source39 = _667___mcc_h306;
              if (_source39.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1094___mcc_h589 = _source39.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1095___mcc_h590 = _source39.dtor_typeArgs;
                DAST._IResolvedType _1096___mcc_h591 = _source39.dtor_resolved;
                DAST._IResolvedType _source40 = _1096___mcc_h591;
                if (_source40.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1097___mcc_h595 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1098_recursiveGen;
                    bool _1099_recOwned;
                    bool _1100_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1101_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out554;
                    bool _out555;
                    bool _out556;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                    _1098_recursiveGen = _out554;
                    _1099_recOwned = _out555;
                    _1100_recErased = _out556;
                    _1101_recIdents = _out557;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1098_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1099_recOwned;
                    isErased = _1100_recErased;
                    readIdents = _1101_recIdents;
                  }
                } else if (_source40.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1102___mcc_h597 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1103_recursiveGen;
                    bool _1104_recOwned;
                    bool _1105_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1106_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out558;
                    bool _out559;
                    bool _out560;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                    _1103_recursiveGen = _out558;
                    _1104_recOwned = _out559;
                    _1105_recErased = _out560;
                    _1106_recIdents = _out561;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1103_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1104_recOwned;
                    isErased = _1105_recErased;
                    readIdents = _1106_recIdents;
                  }
                } else {
                  DAST._IType _1107___mcc_h599 = _source40.dtor_Newtype_a0;
                  DAST._IType _1108_b = _1107___mcc_h599;
                  {
                    if (object.Equals(_660_fromTpe, _1108_b)) {
                      Dafny.ISequence<Dafny.Rune> _1109_recursiveGen;
                      bool _1110_recOwned;
                      bool _1111_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1112_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      _1109_recursiveGen = _out562;
                      _1110_recOwned = _out563;
                      _1111_recErased = _out564;
                      _1112_recIdents = _out565;
                      Dafny.ISequence<Dafny.Rune> _1113_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out566;
                      _out566 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1113_rhsType = _out566;
                      Dafny.ISequence<Dafny.Rune> _1114_uneraseFn;
                      _1114_uneraseFn = ((_1110_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1113_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1114_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1109_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1110_recOwned;
                      isErased = false;
                      readIdents = _1112_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out567;
                      bool _out568;
                      bool _out569;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1108_b), _1108_b, _659_toTpe), selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                      s = _out567;
                      isOwned = _out568;
                      isErased = _out569;
                      readIdents = _out570;
                    }
                  }
                }
              } else if (_source39.is_Nullable) {
                DAST._IType _1115___mcc_h601 = _source39.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1116_recursiveGen;
                  bool _1117_recOwned;
                  bool _1118_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1119_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1116_recursiveGen = _out571;
                  _1117_recOwned = _out572;
                  _1118_recErased = _out573;
                  _1119_recIdents = _out574;
                  if (!(_1117_recOwned)) {
                    _1116_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1116_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1116_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1118_recErased;
                  readIdents = _1119_recIdents;
                }
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1120___mcc_h603 = _source39.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1121_recursiveGen;
                  bool _1122_recOwned;
                  bool _1123_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1124_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1121_recursiveGen = _out575;
                  _1122_recOwned = _out576;
                  _1123_recErased = _out577;
                  _1124_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1121_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1122_recOwned;
                  isErased = _1123_recErased;
                  readIdents = _1124_recIdents;
                }
              } else if (_source39.is_Array) {
                DAST._IType _1125___mcc_h605 = _source39.dtor_element;
                BigInteger _1126___mcc_h606 = _source39.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1127_recursiveGen;
                  bool _1128_recOwned;
                  bool _1129_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1130_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1127_recursiveGen = _out579;
                  _1128_recOwned = _out580;
                  _1129_recErased = _out581;
                  _1130_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1127_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1128_recOwned;
                  isErased = _1129_recErased;
                  readIdents = _1130_recIdents;
                }
              } else if (_source39.is_Seq) {
                DAST._IType _1131___mcc_h609 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1132_recursiveGen;
                  bool _1133_recOwned;
                  bool _1134_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1135_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1132_recursiveGen = _out583;
                  _1133_recOwned = _out584;
                  _1134_recErased = _out585;
                  _1135_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1132_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1133_recOwned;
                  isErased = _1134_recErased;
                  readIdents = _1135_recIdents;
                }
              } else if (_source39.is_Set) {
                DAST._IType _1136___mcc_h611 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1137_recursiveGen;
                  bool _1138_recOwned;
                  bool _1139_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1140_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1137_recursiveGen = _out587;
                  _1138_recOwned = _out588;
                  _1139_recErased = _out589;
                  _1140_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1138_recOwned;
                  isErased = _1139_recErased;
                  readIdents = _1140_recIdents;
                }
              } else if (_source39.is_Multiset) {
                DAST._IType _1141___mcc_h613 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1142_recursiveGen;
                  bool _1143_recOwned;
                  bool _1144_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1145_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out591;
                  bool _out592;
                  bool _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                  _1142_recursiveGen = _out591;
                  _1143_recOwned = _out592;
                  _1144_recErased = _out593;
                  _1145_recIdents = _out594;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1142_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1143_recOwned;
                  isErased = _1144_recErased;
                  readIdents = _1145_recIdents;
                }
              } else if (_source39.is_Map) {
                DAST._IType _1146___mcc_h615 = _source39.dtor_key;
                DAST._IType _1147___mcc_h616 = _source39.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1148_recursiveGen;
                  bool _1149_recOwned;
                  bool _1150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out595;
                  bool _out596;
                  bool _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                  _1148_recursiveGen = _out595;
                  _1149_recOwned = _out596;
                  _1150_recErased = _out597;
                  _1151_recIdents = _out598;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1149_recOwned;
                  isErased = _1150_recErased;
                  readIdents = _1151_recIdents;
                }
              } else if (_source39.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1152___mcc_h619 = _source39.dtor_args;
                DAST._IType _1153___mcc_h620 = _source39.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1154_recursiveGen;
                  bool _1155_recOwned;
                  bool _1156_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1157_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out599;
                  bool _out600;
                  bool _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                  _1154_recursiveGen = _out599;
                  _1155_recOwned = _out600;
                  _1156_recErased = _out601;
                  _1157_recIdents = _out602;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1154_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1155_recOwned;
                  isErased = _1156_recErased;
                  readIdents = _1157_recIdents;
                }
              } else if (_source39.is_Primitive) {
                DAST._IPrimitive _1158___mcc_h623 = _source39.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1159_recursiveGen;
                  bool _1160_recOwned;
                  bool _1161_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1162_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out603;
                  bool _out604;
                  bool _out605;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                  _1159_recursiveGen = _out603;
                  _1160_recOwned = _out604;
                  _1161_recErased = _out605;
                  _1162_recIdents = _out606;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1160_recOwned;
                  isErased = _1161_recErased;
                  readIdents = _1162_recIdents;
                }
              } else if (_source39.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1163___mcc_h625 = _source39.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1164_recursiveGen;
                  bool _1165_recOwned;
                  bool _1166_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1167_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _1164_recursiveGen = _out607;
                  _1165_recOwned = _out608;
                  _1166_recErased = _out609;
                  _1167_recIdents = _out610;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1164_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1165_recOwned;
                  isErased = _1166_recErased;
                  readIdents = _1167_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1168___mcc_h627 = _source39.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1169_recursiveGen;
                  bool _1170_recOwned;
                  bool _1171_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1172_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _1169_recursiveGen = _out611;
                  _1170_recOwned = _out612;
                  _1171_recErased = _out613;
                  _1172_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1169_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1170_recOwned;
                  isErased = _1171_recErased;
                  readIdents = _1172_recIdents;
                }
              }
            } else if (_source27.is_Seq) {
              DAST._IType _1173___mcc_h629 = _source27.dtor_element;
              DAST._IType _source41 = _667___mcc_h306;
              if (_source41.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1174___mcc_h633 = _source41.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1175___mcc_h634 = _source41.dtor_typeArgs;
                DAST._IResolvedType _1176___mcc_h635 = _source41.dtor_resolved;
                DAST._IResolvedType _source42 = _1176___mcc_h635;
                if (_source42.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1177___mcc_h639 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1178_recursiveGen;
                    bool _1179_recOwned;
                    bool _1180_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1181_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out615;
                    bool _out616;
                    bool _out617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                    _1178_recursiveGen = _out615;
                    _1179_recOwned = _out616;
                    _1180_recErased = _out617;
                    _1181_recIdents = _out618;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1179_recOwned;
                    isErased = _1180_recErased;
                    readIdents = _1181_recIdents;
                  }
                } else if (_source42.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1182___mcc_h641 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1183_recursiveGen;
                    bool _1184_recOwned;
                    bool _1185_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1186_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out619;
                    bool _out620;
                    bool _out621;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                    _1183_recursiveGen = _out619;
                    _1184_recOwned = _out620;
                    _1185_recErased = _out621;
                    _1186_recIdents = _out622;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1183_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1184_recOwned;
                    isErased = _1185_recErased;
                    readIdents = _1186_recIdents;
                  }
                } else {
                  DAST._IType _1187___mcc_h643 = _source42.dtor_Newtype_a0;
                  DAST._IType _1188_b = _1187___mcc_h643;
                  {
                    if (object.Equals(_660_fromTpe, _1188_b)) {
                      Dafny.ISequence<Dafny.Rune> _1189_recursiveGen;
                      bool _1190_recOwned;
                      bool _1191_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1192_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      _1189_recursiveGen = _out623;
                      _1190_recOwned = _out624;
                      _1191_recErased = _out625;
                      _1192_recIdents = _out626;
                      Dafny.ISequence<Dafny.Rune> _1193_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out627;
                      _out627 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1193_rhsType = _out627;
                      Dafny.ISequence<Dafny.Rune> _1194_uneraseFn;
                      _1194_uneraseFn = ((_1190_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1193_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1194_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1189_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1190_recOwned;
                      isErased = false;
                      readIdents = _1192_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out628;
                      bool _out629;
                      bool _out630;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1188_b), _1188_b, _659_toTpe), selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                      s = _out628;
                      isOwned = _out629;
                      isErased = _out630;
                      readIdents = _out631;
                    }
                  }
                }
              } else if (_source41.is_Nullable) {
                DAST._IType _1195___mcc_h645 = _source41.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1196_recursiveGen;
                  bool _1197_recOwned;
                  bool _1198_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1199_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1196_recursiveGen = _out632;
                  _1197_recOwned = _out633;
                  _1198_recErased = _out634;
                  _1199_recIdents = _out635;
                  if (!(_1197_recOwned)) {
                    _1196_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1196_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1198_recErased;
                  readIdents = _1199_recIdents;
                }
              } else if (_source41.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1200___mcc_h647 = _source41.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1201_recursiveGen;
                  bool _1202_recOwned;
                  bool _1203_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1204_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1201_recursiveGen = _out636;
                  _1202_recOwned = _out637;
                  _1203_recErased = _out638;
                  _1204_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1201_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1202_recOwned;
                  isErased = _1203_recErased;
                  readIdents = _1204_recIdents;
                }
              } else if (_source41.is_Array) {
                DAST._IType _1205___mcc_h649 = _source41.dtor_element;
                BigInteger _1206___mcc_h650 = _source41.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1207_recursiveGen;
                  bool _1208_recOwned;
                  bool _1209_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1210_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1207_recursiveGen = _out640;
                  _1208_recOwned = _out641;
                  _1209_recErased = _out642;
                  _1210_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1208_recOwned;
                  isErased = _1209_recErased;
                  readIdents = _1210_recIdents;
                }
              } else if (_source41.is_Seq) {
                DAST._IType _1211___mcc_h653 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1212_recursiveGen;
                  bool _1213_recOwned;
                  bool _1214_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1215_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1212_recursiveGen = _out644;
                  _1213_recOwned = _out645;
                  _1214_recErased = _out646;
                  _1215_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1212_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1213_recOwned;
                  isErased = _1214_recErased;
                  readIdents = _1215_recIdents;
                }
              } else if (_source41.is_Set) {
                DAST._IType _1216___mcc_h655 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1217_recursiveGen;
                  bool _1218_recOwned;
                  bool _1219_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1220_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1217_recursiveGen = _out648;
                  _1218_recOwned = _out649;
                  _1219_recErased = _out650;
                  _1220_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1218_recOwned;
                  isErased = _1219_recErased;
                  readIdents = _1220_recIdents;
                }
              } else if (_source41.is_Multiset) {
                DAST._IType _1221___mcc_h657 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1222_recursiveGen;
                  bool _1223_recOwned;
                  bool _1224_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1225_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out652;
                  bool _out653;
                  bool _out654;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                  _1222_recursiveGen = _out652;
                  _1223_recOwned = _out653;
                  _1224_recErased = _out654;
                  _1225_recIdents = _out655;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1222_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1223_recOwned;
                  isErased = _1224_recErased;
                  readIdents = _1225_recIdents;
                }
              } else if (_source41.is_Map) {
                DAST._IType _1226___mcc_h659 = _source41.dtor_key;
                DAST._IType _1227___mcc_h660 = _source41.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1228_recursiveGen;
                  bool _1229_recOwned;
                  bool _1230_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1231_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out656;
                  bool _out657;
                  bool _out658;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                  _1228_recursiveGen = _out656;
                  _1229_recOwned = _out657;
                  _1230_recErased = _out658;
                  _1231_recIdents = _out659;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1229_recOwned;
                  isErased = _1230_recErased;
                  readIdents = _1231_recIdents;
                }
              } else if (_source41.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1232___mcc_h663 = _source41.dtor_args;
                DAST._IType _1233___mcc_h664 = _source41.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1234_recursiveGen;
                  bool _1235_recOwned;
                  bool _1236_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1237_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out660;
                  bool _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                  _1234_recursiveGen = _out660;
                  _1235_recOwned = _out661;
                  _1236_recErased = _out662;
                  _1237_recIdents = _out663;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1234_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1235_recOwned;
                  isErased = _1236_recErased;
                  readIdents = _1237_recIdents;
                }
              } else if (_source41.is_Primitive) {
                DAST._IPrimitive _1238___mcc_h667 = _source41.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1239_recursiveGen;
                  bool _1240_recOwned;
                  bool _1241_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1242_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out664;
                  bool _out665;
                  bool _out666;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                  _1239_recursiveGen = _out664;
                  _1240_recOwned = _out665;
                  _1241_recErased = _out666;
                  _1242_recIdents = _out667;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1239_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1240_recOwned;
                  isErased = _1241_recErased;
                  readIdents = _1242_recIdents;
                }
              } else if (_source41.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1243___mcc_h669 = _source41.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1244_recursiveGen;
                  bool _1245_recOwned;
                  bool _1246_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1247_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _1244_recursiveGen = _out668;
                  _1245_recOwned = _out669;
                  _1246_recErased = _out670;
                  _1247_recIdents = _out671;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1245_recOwned;
                  isErased = _1246_recErased;
                  readIdents = _1247_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1248___mcc_h671 = _source41.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1249_recursiveGen;
                  bool _1250_recOwned;
                  bool _1251_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1252_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _1249_recursiveGen = _out672;
                  _1250_recOwned = _out673;
                  _1251_recErased = _out674;
                  _1252_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1249_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1250_recOwned;
                  isErased = _1251_recErased;
                  readIdents = _1252_recIdents;
                }
              }
            } else if (_source27.is_Set) {
              DAST._IType _1253___mcc_h673 = _source27.dtor_element;
              DAST._IType _source43 = _667___mcc_h306;
              if (_source43.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1254___mcc_h677 = _source43.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1255___mcc_h678 = _source43.dtor_typeArgs;
                DAST._IResolvedType _1256___mcc_h679 = _source43.dtor_resolved;
                DAST._IResolvedType _source44 = _1256___mcc_h679;
                if (_source44.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1257___mcc_h683 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1258_recursiveGen;
                    bool _1259_recOwned;
                    bool _1260_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1261_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out676;
                    bool _out677;
                    bool _out678;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                    _1258_recursiveGen = _out676;
                    _1259_recOwned = _out677;
                    _1260_recErased = _out678;
                    _1261_recIdents = _out679;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1259_recOwned;
                    isErased = _1260_recErased;
                    readIdents = _1261_recIdents;
                  }
                } else if (_source44.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1262___mcc_h685 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1263_recursiveGen;
                    bool _1264_recOwned;
                    bool _1265_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1266_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out680;
                    bool _out681;
                    bool _out682;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                    _1263_recursiveGen = _out680;
                    _1264_recOwned = _out681;
                    _1265_recErased = _out682;
                    _1266_recIdents = _out683;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1263_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1264_recOwned;
                    isErased = _1265_recErased;
                    readIdents = _1266_recIdents;
                  }
                } else {
                  DAST._IType _1267___mcc_h687 = _source44.dtor_Newtype_a0;
                  DAST._IType _1268_b = _1267___mcc_h687;
                  {
                    if (object.Equals(_660_fromTpe, _1268_b)) {
                      Dafny.ISequence<Dafny.Rune> _1269_recursiveGen;
                      bool _1270_recOwned;
                      bool _1271_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1272_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      _1269_recursiveGen = _out684;
                      _1270_recOwned = _out685;
                      _1271_recErased = _out686;
                      _1272_recIdents = _out687;
                      Dafny.ISequence<Dafny.Rune> _1273_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out688;
                      _out688 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1273_rhsType = _out688;
                      Dafny.ISequence<Dafny.Rune> _1274_uneraseFn;
                      _1274_uneraseFn = ((_1270_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1273_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1274_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1269_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1270_recOwned;
                      isErased = false;
                      readIdents = _1272_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out689;
                      bool _out690;
                      bool _out691;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1268_b), _1268_b, _659_toTpe), selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                      s = _out689;
                      isOwned = _out690;
                      isErased = _out691;
                      readIdents = _out692;
                    }
                  }
                }
              } else if (_source43.is_Nullable) {
                DAST._IType _1275___mcc_h689 = _source43.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1276_recursiveGen;
                  bool _1277_recOwned;
                  bool _1278_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1279_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1276_recursiveGen = _out693;
                  _1277_recOwned = _out694;
                  _1278_recErased = _out695;
                  _1279_recIdents = _out696;
                  if (!(_1277_recOwned)) {
                    _1276_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1276_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1276_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1278_recErased;
                  readIdents = _1279_recIdents;
                }
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1280___mcc_h691 = _source43.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1281_recursiveGen;
                  bool _1282_recOwned;
                  bool _1283_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1284_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1281_recursiveGen = _out697;
                  _1282_recOwned = _out698;
                  _1283_recErased = _out699;
                  _1284_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1281_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1282_recOwned;
                  isErased = _1283_recErased;
                  readIdents = _1284_recIdents;
                }
              } else if (_source43.is_Array) {
                DAST._IType _1285___mcc_h693 = _source43.dtor_element;
                BigInteger _1286___mcc_h694 = _source43.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1287_recursiveGen;
                  bool _1288_recOwned;
                  bool _1289_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1290_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1287_recursiveGen = _out701;
                  _1288_recOwned = _out702;
                  _1289_recErased = _out703;
                  _1290_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1287_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1288_recOwned;
                  isErased = _1289_recErased;
                  readIdents = _1290_recIdents;
                }
              } else if (_source43.is_Seq) {
                DAST._IType _1291___mcc_h697 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1292_recursiveGen;
                  bool _1293_recOwned;
                  bool _1294_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1295_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1292_recursiveGen = _out705;
                  _1293_recOwned = _out706;
                  _1294_recErased = _out707;
                  _1295_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1292_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1293_recOwned;
                  isErased = _1294_recErased;
                  readIdents = _1295_recIdents;
                }
              } else if (_source43.is_Set) {
                DAST._IType _1296___mcc_h699 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1297_recursiveGen;
                  bool _1298_recOwned;
                  bool _1299_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1300_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1297_recursiveGen = _out709;
                  _1298_recOwned = _out710;
                  _1299_recErased = _out711;
                  _1300_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1297_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1298_recOwned;
                  isErased = _1299_recErased;
                  readIdents = _1300_recIdents;
                }
              } else if (_source43.is_Multiset) {
                DAST._IType _1301___mcc_h701 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1302_recursiveGen;
                  bool _1303_recOwned;
                  bool _1304_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1305_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out713;
                  bool _out714;
                  bool _out715;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                  _1302_recursiveGen = _out713;
                  _1303_recOwned = _out714;
                  _1304_recErased = _out715;
                  _1305_recIdents = _out716;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1302_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1303_recOwned;
                  isErased = _1304_recErased;
                  readIdents = _1305_recIdents;
                }
              } else if (_source43.is_Map) {
                DAST._IType _1306___mcc_h703 = _source43.dtor_key;
                DAST._IType _1307___mcc_h704 = _source43.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1308_recursiveGen;
                  bool _1309_recOwned;
                  bool _1310_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1311_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out717;
                  bool _out718;
                  bool _out719;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                  _1308_recursiveGen = _out717;
                  _1309_recOwned = _out718;
                  _1310_recErased = _out719;
                  _1311_recIdents = _out720;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1308_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1309_recOwned;
                  isErased = _1310_recErased;
                  readIdents = _1311_recIdents;
                }
              } else if (_source43.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1312___mcc_h707 = _source43.dtor_args;
                DAST._IType _1313___mcc_h708 = _source43.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1314_recursiveGen;
                  bool _1315_recOwned;
                  bool _1316_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1317_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out721;
                  bool _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                  _1314_recursiveGen = _out721;
                  _1315_recOwned = _out722;
                  _1316_recErased = _out723;
                  _1317_recIdents = _out724;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1315_recOwned;
                  isErased = _1316_recErased;
                  readIdents = _1317_recIdents;
                }
              } else if (_source43.is_Primitive) {
                DAST._IPrimitive _1318___mcc_h711 = _source43.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1319_recursiveGen;
                  bool _1320_recOwned;
                  bool _1321_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1322_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out725;
                  bool _out726;
                  bool _out727;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                  _1319_recursiveGen = _out725;
                  _1320_recOwned = _out726;
                  _1321_recErased = _out727;
                  _1322_recIdents = _out728;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1320_recOwned;
                  isErased = _1321_recErased;
                  readIdents = _1322_recIdents;
                }
              } else if (_source43.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1323___mcc_h713 = _source43.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1324_recursiveGen;
                  bool _1325_recOwned;
                  bool _1326_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1327_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _1324_recursiveGen = _out729;
                  _1325_recOwned = _out730;
                  _1326_recErased = _out731;
                  _1327_recIdents = _out732;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1324_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1325_recOwned;
                  isErased = _1326_recErased;
                  readIdents = _1327_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1328___mcc_h715 = _source43.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1329_recursiveGen;
                  bool _1330_recOwned;
                  bool _1331_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1332_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _1329_recursiveGen = _out733;
                  _1330_recOwned = _out734;
                  _1331_recErased = _out735;
                  _1332_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1329_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1330_recOwned;
                  isErased = _1331_recErased;
                  readIdents = _1332_recIdents;
                }
              }
            } else if (_source27.is_Multiset) {
              DAST._IType _1333___mcc_h717 = _source27.dtor_element;
              DAST._IType _source45 = _667___mcc_h306;
              if (_source45.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1334___mcc_h721 = _source45.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1335___mcc_h722 = _source45.dtor_typeArgs;
                DAST._IResolvedType _1336___mcc_h723 = _source45.dtor_resolved;
                DAST._IResolvedType _source46 = _1336___mcc_h723;
                if (_source46.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1337___mcc_h727 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1338_recursiveGen;
                    bool _1339_recOwned;
                    bool _1340_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1341_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out737;
                    bool _out738;
                    bool _out739;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                    _1338_recursiveGen = _out737;
                    _1339_recOwned = _out738;
                    _1340_recErased = _out739;
                    _1341_recIdents = _out740;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1338_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1339_recOwned;
                    isErased = _1340_recErased;
                    readIdents = _1341_recIdents;
                  }
                } else if (_source46.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1342___mcc_h729 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1343_recursiveGen;
                    bool _1344_recOwned;
                    bool _1345_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1346_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out741;
                    bool _out742;
                    bool _out743;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                    _1343_recursiveGen = _out741;
                    _1344_recOwned = _out742;
                    _1345_recErased = _out743;
                    _1346_recIdents = _out744;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1344_recOwned;
                    isErased = _1345_recErased;
                    readIdents = _1346_recIdents;
                  }
                } else {
                  DAST._IType _1347___mcc_h731 = _source46.dtor_Newtype_a0;
                  DAST._IType _1348_b = _1347___mcc_h731;
                  {
                    if (object.Equals(_660_fromTpe, _1348_b)) {
                      Dafny.ISequence<Dafny.Rune> _1349_recursiveGen;
                      bool _1350_recOwned;
                      bool _1351_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1352_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      _1349_recursiveGen = _out745;
                      _1350_recOwned = _out746;
                      _1351_recErased = _out747;
                      _1352_recIdents = _out748;
                      Dafny.ISequence<Dafny.Rune> _1353_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out749;
                      _out749 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1353_rhsType = _out749;
                      Dafny.ISequence<Dafny.Rune> _1354_uneraseFn;
                      _1354_uneraseFn = ((_1350_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1353_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1354_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1349_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1350_recOwned;
                      isErased = false;
                      readIdents = _1352_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out750;
                      bool _out751;
                      bool _out752;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1348_b), _1348_b, _659_toTpe), selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                      s = _out750;
                      isOwned = _out751;
                      isErased = _out752;
                      readIdents = _out753;
                    }
                  }
                }
              } else if (_source45.is_Nullable) {
                DAST._IType _1355___mcc_h733 = _source45.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1356_recursiveGen;
                  bool _1357_recOwned;
                  bool _1358_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1359_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1356_recursiveGen = _out754;
                  _1357_recOwned = _out755;
                  _1358_recErased = _out756;
                  _1359_recIdents = _out757;
                  if (!(_1357_recOwned)) {
                    _1356_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1356_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1356_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1358_recErased;
                  readIdents = _1359_recIdents;
                }
              } else if (_source45.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1360___mcc_h735 = _source45.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1361_recursiveGen;
                  bool _1362_recOwned;
                  bool _1363_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1364_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1361_recursiveGen = _out758;
                  _1362_recOwned = _out759;
                  _1363_recErased = _out760;
                  _1364_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1361_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1362_recOwned;
                  isErased = _1363_recErased;
                  readIdents = _1364_recIdents;
                }
              } else if (_source45.is_Array) {
                DAST._IType _1365___mcc_h737 = _source45.dtor_element;
                BigInteger _1366___mcc_h738 = _source45.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1367_recursiveGen;
                  bool _1368_recOwned;
                  bool _1369_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1370_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1367_recursiveGen = _out762;
                  _1368_recOwned = _out763;
                  _1369_recErased = _out764;
                  _1370_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1367_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1368_recOwned;
                  isErased = _1369_recErased;
                  readIdents = _1370_recIdents;
                }
              } else if (_source45.is_Seq) {
                DAST._IType _1371___mcc_h741 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1372_recursiveGen;
                  bool _1373_recOwned;
                  bool _1374_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1375_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1372_recursiveGen = _out766;
                  _1373_recOwned = _out767;
                  _1374_recErased = _out768;
                  _1375_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1373_recOwned;
                  isErased = _1374_recErased;
                  readIdents = _1375_recIdents;
                }
              } else if (_source45.is_Set) {
                DAST._IType _1376___mcc_h743 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1377_recursiveGen;
                  bool _1378_recOwned;
                  bool _1379_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1380_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1377_recursiveGen = _out770;
                  _1378_recOwned = _out771;
                  _1379_recErased = _out772;
                  _1380_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1377_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1378_recOwned;
                  isErased = _1379_recErased;
                  readIdents = _1380_recIdents;
                }
              } else if (_source45.is_Multiset) {
                DAST._IType _1381___mcc_h745 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1382_recursiveGen;
                  bool _1383_recOwned;
                  bool _1384_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1385_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out774;
                  bool _out775;
                  bool _out776;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                  _1382_recursiveGen = _out774;
                  _1383_recOwned = _out775;
                  _1384_recErased = _out776;
                  _1385_recIdents = _out777;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1382_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1383_recOwned;
                  isErased = _1384_recErased;
                  readIdents = _1385_recIdents;
                }
              } else if (_source45.is_Map) {
                DAST._IType _1386___mcc_h747 = _source45.dtor_key;
                DAST._IType _1387___mcc_h748 = _source45.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1388_recursiveGen;
                  bool _1389_recOwned;
                  bool _1390_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1391_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out778;
                  bool _out779;
                  bool _out780;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                  _1388_recursiveGen = _out778;
                  _1389_recOwned = _out779;
                  _1390_recErased = _out780;
                  _1391_recIdents = _out781;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1388_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1389_recOwned;
                  isErased = _1390_recErased;
                  readIdents = _1391_recIdents;
                }
              } else if (_source45.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1392___mcc_h751 = _source45.dtor_args;
                DAST._IType _1393___mcc_h752 = _source45.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1394_recursiveGen;
                  bool _1395_recOwned;
                  bool _1396_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1397_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out782;
                  bool _out783;
                  bool _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                  _1394_recursiveGen = _out782;
                  _1395_recOwned = _out783;
                  _1396_recErased = _out784;
                  _1397_recIdents = _out785;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1394_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1395_recOwned;
                  isErased = _1396_recErased;
                  readIdents = _1397_recIdents;
                }
              } else if (_source45.is_Primitive) {
                DAST._IPrimitive _1398___mcc_h755 = _source45.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1399_recursiveGen;
                  bool _1400_recOwned;
                  bool _1401_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1402_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out786;
                  bool _out787;
                  bool _out788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                  _1399_recursiveGen = _out786;
                  _1400_recOwned = _out787;
                  _1401_recErased = _out788;
                  _1402_recIdents = _out789;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1399_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1400_recOwned;
                  isErased = _1401_recErased;
                  readIdents = _1402_recIdents;
                }
              } else if (_source45.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1403___mcc_h757 = _source45.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1404_recursiveGen;
                  bool _1405_recOwned;
                  bool _1406_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1407_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _1404_recursiveGen = _out790;
                  _1405_recOwned = _out791;
                  _1406_recErased = _out792;
                  _1407_recIdents = _out793;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1404_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1405_recOwned;
                  isErased = _1406_recErased;
                  readIdents = _1407_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1408___mcc_h759 = _source45.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1409_recursiveGen;
                  bool _1410_recOwned;
                  bool _1411_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1412_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _1409_recursiveGen = _out794;
                  _1410_recOwned = _out795;
                  _1411_recErased = _out796;
                  _1412_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1409_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1410_recOwned;
                  isErased = _1411_recErased;
                  readIdents = _1412_recIdents;
                }
              }
            } else if (_source27.is_Map) {
              DAST._IType _1413___mcc_h761 = _source27.dtor_key;
              DAST._IType _1414___mcc_h762 = _source27.dtor_value;
              DAST._IType _source47 = _667___mcc_h306;
              if (_source47.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1415___mcc_h769 = _source47.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1416___mcc_h770 = _source47.dtor_typeArgs;
                DAST._IResolvedType _1417___mcc_h771 = _source47.dtor_resolved;
                DAST._IResolvedType _source48 = _1417___mcc_h771;
                if (_source48.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1418___mcc_h775 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1419_recursiveGen;
                    bool _1420_recOwned;
                    bool _1421_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1422_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out798;
                    bool _out799;
                    bool _out800;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                    _1419_recursiveGen = _out798;
                    _1420_recOwned = _out799;
                    _1421_recErased = _out800;
                    _1422_recIdents = _out801;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1419_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1420_recOwned;
                    isErased = _1421_recErased;
                    readIdents = _1422_recIdents;
                  }
                } else if (_source48.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1423___mcc_h777 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1424_recursiveGen;
                    bool _1425_recOwned;
                    bool _1426_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1427_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out802;
                    bool _out803;
                    bool _out804;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                    _1424_recursiveGen = _out802;
                    _1425_recOwned = _out803;
                    _1426_recErased = _out804;
                    _1427_recIdents = _out805;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1425_recOwned;
                    isErased = _1426_recErased;
                    readIdents = _1427_recIdents;
                  }
                } else {
                  DAST._IType _1428___mcc_h779 = _source48.dtor_Newtype_a0;
                  DAST._IType _1429_b = _1428___mcc_h779;
                  {
                    if (object.Equals(_660_fromTpe, _1429_b)) {
                      Dafny.ISequence<Dafny.Rune> _1430_recursiveGen;
                      bool _1431_recOwned;
                      bool _1432_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1433_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      _1430_recursiveGen = _out806;
                      _1431_recOwned = _out807;
                      _1432_recErased = _out808;
                      _1433_recIdents = _out809;
                      Dafny.ISequence<Dafny.Rune> _1434_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out810;
                      _out810 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1434_rhsType = _out810;
                      Dafny.ISequence<Dafny.Rune> _1435_uneraseFn;
                      _1435_uneraseFn = ((_1431_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1434_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1435_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1430_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1431_recOwned;
                      isErased = false;
                      readIdents = _1433_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out811;
                      bool _out812;
                      bool _out813;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1429_b), _1429_b, _659_toTpe), selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                      s = _out811;
                      isOwned = _out812;
                      isErased = _out813;
                      readIdents = _out814;
                    }
                  }
                }
              } else if (_source47.is_Nullable) {
                DAST._IType _1436___mcc_h781 = _source47.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1437_recursiveGen;
                  bool _1438_recOwned;
                  bool _1439_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1440_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1437_recursiveGen = _out815;
                  _1438_recOwned = _out816;
                  _1439_recErased = _out817;
                  _1440_recIdents = _out818;
                  if (!(_1438_recOwned)) {
                    _1437_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1437_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1437_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1439_recErased;
                  readIdents = _1440_recIdents;
                }
              } else if (_source47.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1441___mcc_h783 = _source47.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1442_recursiveGen;
                  bool _1443_recOwned;
                  bool _1444_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1445_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1442_recursiveGen = _out819;
                  _1443_recOwned = _out820;
                  _1444_recErased = _out821;
                  _1445_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1442_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1443_recOwned;
                  isErased = _1444_recErased;
                  readIdents = _1445_recIdents;
                }
              } else if (_source47.is_Array) {
                DAST._IType _1446___mcc_h785 = _source47.dtor_element;
                BigInteger _1447___mcc_h786 = _source47.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1448_recursiveGen;
                  bool _1449_recOwned;
                  bool _1450_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1451_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1448_recursiveGen = _out823;
                  _1449_recOwned = _out824;
                  _1450_recErased = _out825;
                  _1451_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1448_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1449_recOwned;
                  isErased = _1450_recErased;
                  readIdents = _1451_recIdents;
                }
              } else if (_source47.is_Seq) {
                DAST._IType _1452___mcc_h789 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1453_recursiveGen;
                  bool _1454_recOwned;
                  bool _1455_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1456_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1453_recursiveGen = _out827;
                  _1454_recOwned = _out828;
                  _1455_recErased = _out829;
                  _1456_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1453_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1454_recOwned;
                  isErased = _1455_recErased;
                  readIdents = _1456_recIdents;
                }
              } else if (_source47.is_Set) {
                DAST._IType _1457___mcc_h791 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1458_recursiveGen;
                  bool _1459_recOwned;
                  bool _1460_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1461_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _1458_recursiveGen = _out831;
                  _1459_recOwned = _out832;
                  _1460_recErased = _out833;
                  _1461_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1458_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1459_recOwned;
                  isErased = _1460_recErased;
                  readIdents = _1461_recIdents;
                }
              } else if (_source47.is_Multiset) {
                DAST._IType _1462___mcc_h793 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1463_recursiveGen;
                  bool _1464_recOwned;
                  bool _1465_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1466_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out835;
                  bool _out836;
                  bool _out837;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                  _1463_recursiveGen = _out835;
                  _1464_recOwned = _out836;
                  _1465_recErased = _out837;
                  _1466_recIdents = _out838;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1463_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1464_recOwned;
                  isErased = _1465_recErased;
                  readIdents = _1466_recIdents;
                }
              } else if (_source47.is_Map) {
                DAST._IType _1467___mcc_h795 = _source47.dtor_key;
                DAST._IType _1468___mcc_h796 = _source47.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1469_recursiveGen;
                  bool _1470_recOwned;
                  bool _1471_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1472_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out839;
                  bool _out840;
                  bool _out841;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                  _1469_recursiveGen = _out839;
                  _1470_recOwned = _out840;
                  _1471_recErased = _out841;
                  _1472_recIdents = _out842;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1469_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1470_recOwned;
                  isErased = _1471_recErased;
                  readIdents = _1472_recIdents;
                }
              } else if (_source47.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1473___mcc_h799 = _source47.dtor_args;
                DAST._IType _1474___mcc_h800 = _source47.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1475_recursiveGen;
                  bool _1476_recOwned;
                  bool _1477_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1478_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out843;
                  bool _out844;
                  bool _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                  _1475_recursiveGen = _out843;
                  _1476_recOwned = _out844;
                  _1477_recErased = _out845;
                  _1478_recIdents = _out846;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1475_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1476_recOwned;
                  isErased = _1477_recErased;
                  readIdents = _1478_recIdents;
                }
              } else if (_source47.is_Primitive) {
                DAST._IPrimitive _1479___mcc_h803 = _source47.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1480_recursiveGen;
                  bool _1481_recOwned;
                  bool _1482_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1483_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out847;
                  bool _out848;
                  bool _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                  _1480_recursiveGen = _out847;
                  _1481_recOwned = _out848;
                  _1482_recErased = _out849;
                  _1483_recIdents = _out850;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1480_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1481_recOwned;
                  isErased = _1482_recErased;
                  readIdents = _1483_recIdents;
                }
              } else if (_source47.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1484___mcc_h805 = _source47.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1485_recursiveGen;
                  bool _1486_recOwned;
                  bool _1487_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1488_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _1485_recursiveGen = _out851;
                  _1486_recOwned = _out852;
                  _1487_recErased = _out853;
                  _1488_recIdents = _out854;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1485_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1486_recOwned;
                  isErased = _1487_recErased;
                  readIdents = _1488_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1489___mcc_h807 = _source47.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1490_recursiveGen;
                  bool _1491_recOwned;
                  bool _1492_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1493_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _1490_recursiveGen = _out855;
                  _1491_recOwned = _out856;
                  _1492_recErased = _out857;
                  _1493_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1490_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1491_recOwned;
                  isErased = _1492_recErased;
                  readIdents = _1493_recIdents;
                }
              }
            } else if (_source27.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1494___mcc_h809 = _source27.dtor_args;
              DAST._IType _1495___mcc_h810 = _source27.dtor_result;
              DAST._IType _source49 = _667___mcc_h306;
              if (_source49.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1496___mcc_h817 = _source49.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1497___mcc_h818 = _source49.dtor_typeArgs;
                DAST._IResolvedType _1498___mcc_h819 = _source49.dtor_resolved;
                DAST._IResolvedType _source50 = _1498___mcc_h819;
                if (_source50.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1499___mcc_h823 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1500_recursiveGen;
                    bool _1501_recOwned;
                    bool _1502_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1503_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out859;
                    bool _out860;
                    bool _out861;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                    _1500_recursiveGen = _out859;
                    _1501_recOwned = _out860;
                    _1502_recErased = _out861;
                    _1503_recIdents = _out862;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1500_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1501_recOwned;
                    isErased = _1502_recErased;
                    readIdents = _1503_recIdents;
                  }
                } else if (_source50.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1504___mcc_h825 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1505_recursiveGen;
                    bool _1506_recOwned;
                    bool _1507_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1508_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out863;
                    bool _out864;
                    bool _out865;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                    _1505_recursiveGen = _out863;
                    _1506_recOwned = _out864;
                    _1507_recErased = _out865;
                    _1508_recIdents = _out866;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1505_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1506_recOwned;
                    isErased = _1507_recErased;
                    readIdents = _1508_recIdents;
                  }
                } else {
                  DAST._IType _1509___mcc_h827 = _source50.dtor_Newtype_a0;
                  DAST._IType _1510_b = _1509___mcc_h827;
                  {
                    if (object.Equals(_660_fromTpe, _1510_b)) {
                      Dafny.ISequence<Dafny.Rune> _1511_recursiveGen;
                      bool _1512_recOwned;
                      bool _1513_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1514_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      _1511_recursiveGen = _out867;
                      _1512_recOwned = _out868;
                      _1513_recErased = _out869;
                      _1514_recIdents = _out870;
                      Dafny.ISequence<Dafny.Rune> _1515_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out871;
                      _out871 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1515_rhsType = _out871;
                      Dafny.ISequence<Dafny.Rune> _1516_uneraseFn;
                      _1516_uneraseFn = ((_1512_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1515_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1516_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1511_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1512_recOwned;
                      isErased = false;
                      readIdents = _1514_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out872;
                      bool _out873;
                      bool _out874;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1510_b), _1510_b, _659_toTpe), selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                      s = _out872;
                      isOwned = _out873;
                      isErased = _out874;
                      readIdents = _out875;
                    }
                  }
                }
              } else if (_source49.is_Nullable) {
                DAST._IType _1517___mcc_h829 = _source49.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1518_recursiveGen;
                  bool _1519_recOwned;
                  bool _1520_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1521_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _1518_recursiveGen = _out876;
                  _1519_recOwned = _out877;
                  _1520_recErased = _out878;
                  _1521_recIdents = _out879;
                  if (!(_1519_recOwned)) {
                    _1518_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1518_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1518_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1520_recErased;
                  readIdents = _1521_recIdents;
                }
              } else if (_source49.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1522___mcc_h831 = _source49.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1523_recursiveGen;
                  bool _1524_recOwned;
                  bool _1525_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1526_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _1523_recursiveGen = _out880;
                  _1524_recOwned = _out881;
                  _1525_recErased = _out882;
                  _1526_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1523_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1524_recOwned;
                  isErased = _1525_recErased;
                  readIdents = _1526_recIdents;
                }
              } else if (_source49.is_Array) {
                DAST._IType _1527___mcc_h833 = _source49.dtor_element;
                BigInteger _1528___mcc_h834 = _source49.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1529_recursiveGen;
                  bool _1530_recOwned;
                  bool _1531_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1532_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _1529_recursiveGen = _out884;
                  _1530_recOwned = _out885;
                  _1531_recErased = _out886;
                  _1532_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1529_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1530_recOwned;
                  isErased = _1531_recErased;
                  readIdents = _1532_recIdents;
                }
              } else if (_source49.is_Seq) {
                DAST._IType _1533___mcc_h837 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1534_recursiveGen;
                  bool _1535_recOwned;
                  bool _1536_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1537_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _1534_recursiveGen = _out888;
                  _1535_recOwned = _out889;
                  _1536_recErased = _out890;
                  _1537_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1534_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1535_recOwned;
                  isErased = _1536_recErased;
                  readIdents = _1537_recIdents;
                }
              } else if (_source49.is_Set) {
                DAST._IType _1538___mcc_h839 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1539_recursiveGen;
                  bool _1540_recOwned;
                  bool _1541_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1542_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _1539_recursiveGen = _out892;
                  _1540_recOwned = _out893;
                  _1541_recErased = _out894;
                  _1542_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1540_recOwned;
                  isErased = _1541_recErased;
                  readIdents = _1542_recIdents;
                }
              } else if (_source49.is_Multiset) {
                DAST._IType _1543___mcc_h841 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1544_recursiveGen;
                  bool _1545_recOwned;
                  bool _1546_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1547_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out896;
                  bool _out897;
                  bool _out898;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                  _1544_recursiveGen = _out896;
                  _1545_recOwned = _out897;
                  _1546_recErased = _out898;
                  _1547_recIdents = _out899;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1544_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1545_recOwned;
                  isErased = _1546_recErased;
                  readIdents = _1547_recIdents;
                }
              } else if (_source49.is_Map) {
                DAST._IType _1548___mcc_h843 = _source49.dtor_key;
                DAST._IType _1549___mcc_h844 = _source49.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1550_recursiveGen;
                  bool _1551_recOwned;
                  bool _1552_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1553_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out900;
                  bool _out901;
                  bool _out902;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                  _1550_recursiveGen = _out900;
                  _1551_recOwned = _out901;
                  _1552_recErased = _out902;
                  _1553_recIdents = _out903;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1551_recOwned;
                  isErased = _1552_recErased;
                  readIdents = _1553_recIdents;
                }
              } else if (_source49.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1554___mcc_h847 = _source49.dtor_args;
                DAST._IType _1555___mcc_h848 = _source49.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1556_recursiveGen;
                  bool _1557_recOwned;
                  bool _1558_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1559_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out904;
                  bool _out905;
                  bool _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                  _1556_recursiveGen = _out904;
                  _1557_recOwned = _out905;
                  _1558_recErased = _out906;
                  _1559_recIdents = _out907;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1557_recOwned;
                  isErased = _1558_recErased;
                  readIdents = _1559_recIdents;
                }
              } else if (_source49.is_Primitive) {
                DAST._IPrimitive _1560___mcc_h851 = _source49.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1561_recursiveGen;
                  bool _1562_recOwned;
                  bool _1563_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1564_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out908;
                  bool _out909;
                  bool _out910;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                  _1561_recursiveGen = _out908;
                  _1562_recOwned = _out909;
                  _1563_recErased = _out910;
                  _1564_recIdents = _out911;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1561_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1562_recOwned;
                  isErased = _1563_recErased;
                  readIdents = _1564_recIdents;
                }
              } else if (_source49.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1565___mcc_h853 = _source49.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1566_recursiveGen;
                  bool _1567_recOwned;
                  bool _1568_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1569_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _1566_recursiveGen = _out912;
                  _1567_recOwned = _out913;
                  _1568_recErased = _out914;
                  _1569_recIdents = _out915;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1566_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1567_recOwned;
                  isErased = _1568_recErased;
                  readIdents = _1569_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1570___mcc_h855 = _source49.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1571_recursiveGen;
                  bool _1572_recOwned;
                  bool _1573_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1574_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _1571_recursiveGen = _out916;
                  _1572_recOwned = _out917;
                  _1573_recErased = _out918;
                  _1574_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1571_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1572_recOwned;
                  isErased = _1573_recErased;
                  readIdents = _1574_recIdents;
                }
              }
            } else if (_source27.is_Primitive) {
              DAST._IPrimitive _1575___mcc_h857 = _source27.dtor_Primitive_a0;
              DAST._IPrimitive _source51 = _1575___mcc_h857;
              if (_source51.is_Int) {
                DAST._IType _source52 = _667___mcc_h306;
                if (_source52.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1576___mcc_h861 = _source52.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1577___mcc_h862 = _source52.dtor_typeArgs;
                  DAST._IResolvedType _1578___mcc_h863 = _source52.dtor_resolved;
                  DAST._IResolvedType _source53 = _1578___mcc_h863;
                  if (_source53.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1579___mcc_h867 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1580_recursiveGen;
                      bool _1581_recOwned;
                      bool _1582_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1583_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out920;
                      bool _out921;
                      bool _out922;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                      _1580_recursiveGen = _out920;
                      _1581_recOwned = _out921;
                      _1582_recErased = _out922;
                      _1583_recIdents = _out923;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1580_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1581_recOwned;
                      isErased = _1582_recErased;
                      readIdents = _1583_recIdents;
                    }
                  } else if (_source53.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1584___mcc_h869 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1585_recursiveGen;
                      bool _1586_recOwned;
                      bool _1587_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1588_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out924;
                      bool _out925;
                      bool _out926;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                      _1585_recursiveGen = _out924;
                      _1586_recOwned = _out925;
                      _1587_recErased = _out926;
                      _1588_recIdents = _out927;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1585_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1586_recOwned;
                      isErased = _1587_recErased;
                      readIdents = _1588_recIdents;
                    }
                  } else {
                    DAST._IType _1589___mcc_h871 = _source53.dtor_Newtype_a0;
                    DAST._IType _1590_b = _1589___mcc_h871;
                    {
                      if (object.Equals(_660_fromTpe, _1590_b)) {
                        Dafny.ISequence<Dafny.Rune> _1591_recursiveGen;
                        bool _1592_recOwned;
                        bool _1593_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1594_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out928;
                        bool _out929;
                        bool _out930;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                        _1591_recursiveGen = _out928;
                        _1592_recOwned = _out929;
                        _1593_recErased = _out930;
                        _1594_recIdents = _out931;
                        Dafny.ISequence<Dafny.Rune> _1595_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out932;
                        _out932 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _1595_rhsType = _out932;
                        Dafny.ISequence<Dafny.Rune> _1596_uneraseFn;
                        _1596_uneraseFn = ((_1592_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1595_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1596_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1592_recOwned;
                        isErased = false;
                        readIdents = _1594_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out933;
                        bool _out934;
                        bool _out935;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1590_b), _1590_b, _659_toTpe), selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                        s = _out933;
                        isOwned = _out934;
                        isErased = _out935;
                        readIdents = _out936;
                      }
                    }
                  }
                } else if (_source52.is_Nullable) {
                  DAST._IType _1597___mcc_h873 = _source52.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1598_recursiveGen;
                    bool _1599_recOwned;
                    bool _1600_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1601_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out937;
                    bool _out938;
                    bool _out939;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                    _1598_recursiveGen = _out937;
                    _1599_recOwned = _out938;
                    _1600_recErased = _out939;
                    _1601_recIdents = _out940;
                    if (!(_1599_recOwned)) {
                      _1598_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1598_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1598_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1600_recErased;
                    readIdents = _1601_recIdents;
                  }
                } else if (_source52.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1602___mcc_h875 = _source52.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1603_recursiveGen;
                    bool _1604_recOwned;
                    bool _1605_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1606_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out941;
                    bool _out942;
                    bool _out943;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                    _1603_recursiveGen = _out941;
                    _1604_recOwned = _out942;
                    _1605_recErased = _out943;
                    _1606_recIdents = _out944;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1604_recOwned;
                    isErased = _1605_recErased;
                    readIdents = _1606_recIdents;
                  }
                } else if (_source52.is_Array) {
                  DAST._IType _1607___mcc_h877 = _source52.dtor_element;
                  BigInteger _1608___mcc_h878 = _source52.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1609_recursiveGen;
                    bool _1610_recOwned;
                    bool _1611_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1612_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out945;
                    bool _out946;
                    bool _out947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                    _1609_recursiveGen = _out945;
                    _1610_recOwned = _out946;
                    _1611_recErased = _out947;
                    _1612_recIdents = _out948;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1609_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1610_recOwned;
                    isErased = _1611_recErased;
                    readIdents = _1612_recIdents;
                  }
                } else if (_source52.is_Seq) {
                  DAST._IType _1613___mcc_h881 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1614_recursiveGen;
                    bool _1615_recOwned;
                    bool _1616_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1617_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out949;
                    bool _out950;
                    bool _out951;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                    _1614_recursiveGen = _out949;
                    _1615_recOwned = _out950;
                    _1616_recErased = _out951;
                    _1617_recIdents = _out952;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1614_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1615_recOwned;
                    isErased = _1616_recErased;
                    readIdents = _1617_recIdents;
                  }
                } else if (_source52.is_Set) {
                  DAST._IType _1618___mcc_h883 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1619_recursiveGen;
                    bool _1620_recOwned;
                    bool _1621_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1622_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out953;
                    bool _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                    _1619_recursiveGen = _out953;
                    _1620_recOwned = _out954;
                    _1621_recErased = _out955;
                    _1622_recIdents = _out956;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1619_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1620_recOwned;
                    isErased = _1621_recErased;
                    readIdents = _1622_recIdents;
                  }
                } else if (_source52.is_Multiset) {
                  DAST._IType _1623___mcc_h885 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1624_recursiveGen;
                    bool _1625_recOwned;
                    bool _1626_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1627_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out957;
                    bool _out958;
                    bool _out959;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                    _1624_recursiveGen = _out957;
                    _1625_recOwned = _out958;
                    _1626_recErased = _out959;
                    _1627_recIdents = _out960;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1624_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1625_recOwned;
                    isErased = _1626_recErased;
                    readIdents = _1627_recIdents;
                  }
                } else if (_source52.is_Map) {
                  DAST._IType _1628___mcc_h887 = _source52.dtor_key;
                  DAST._IType _1629___mcc_h888 = _source52.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1630_recursiveGen;
                    bool _1631_recOwned;
                    bool _1632_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1633_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out961;
                    bool _out962;
                    bool _out963;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                    _1630_recursiveGen = _out961;
                    _1631_recOwned = _out962;
                    _1632_recErased = _out963;
                    _1633_recIdents = _out964;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1631_recOwned;
                    isErased = _1632_recErased;
                    readIdents = _1633_recIdents;
                  }
                } else if (_source52.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1634___mcc_h891 = _source52.dtor_args;
                  DAST._IType _1635___mcc_h892 = _source52.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1636_recursiveGen;
                    bool _1637_recOwned;
                    bool _1638_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1639_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out965;
                    bool _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                    _1636_recursiveGen = _out965;
                    _1637_recOwned = _out966;
                    _1638_recErased = _out967;
                    _1639_recIdents = _out968;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1636_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1637_recOwned;
                    isErased = _1638_recErased;
                    readIdents = _1639_recIdents;
                  }
                } else if (_source52.is_Primitive) {
                  DAST._IPrimitive _1640___mcc_h895 = _source52.dtor_Primitive_a0;
                  DAST._IPrimitive _source54 = _1640___mcc_h895;
                  if (_source54.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1641_recursiveGen;
                      bool _1642_recOwned;
                      bool _1643_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1644_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out969;
                      bool _out970;
                      bool _out971;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                      _1641_recursiveGen = _out969;
                      _1642_recOwned = _out970;
                      _1643_recErased = _out971;
                      _1644_recIdents = _out972;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1642_recOwned;
                      isErased = _1643_recErased;
                      readIdents = _1644_recIdents;
                    }
                  } else if (_source54.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1645_recursiveGen;
                      bool _1646___v46;
                      bool _1647___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1648_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out973;
                      bool _out974;
                      bool _out975;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, true, out _out973, out _out974, out _out975, out _out976);
                      _1645_recursiveGen = _out973;
                      _1646___v46 = _out974;
                      _1647___v47 = _out975;
                      _1648_recIdents = _out976;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1645_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1648_recIdents;
                    }
                  } else if (_source54.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1649_recursiveGen;
                      bool _1650_recOwned;
                      bool _1651_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1652_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out977;
                      bool _out978;
                      bool _out979;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                      _1649_recursiveGen = _out977;
                      _1650_recOwned = _out978;
                      _1651_recErased = _out979;
                      _1652_recIdents = _out980;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1650_recOwned;
                      isErased = _1651_recErased;
                      readIdents = _1652_recIdents;
                    }
                  } else if (_source54.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1653_recursiveGen;
                      bool _1654_recOwned;
                      bool _1655_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1656_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out981;
                      bool _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                      _1653_recursiveGen = _out981;
                      _1654_recOwned = _out982;
                      _1655_recErased = _out983;
                      _1656_recIdents = _out984;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1653_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1654_recOwned;
                      isErased = _1655_recErased;
                      readIdents = _1656_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1657_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out985;
                      _out985 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _1657_rhsType = _out985;
                      Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                      bool _1659___v56;
                      bool _1660___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _1658_recursiveGen = _out986;
                      _1659___v56 = _out987;
                      _1660___v57 = _out988;
                      _1661_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1661_recIdents;
                    }
                  }
                } else if (_source52.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1662___mcc_h897 = _source52.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1663_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    _out990 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                    _1663_rhsType = _out990;
                    Dafny.ISequence<Dafny.Rune> _1664_recursiveGen;
                    bool _1665___v51;
                    bool _1666___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1667_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, true, out _out991, out _out992, out _out993, out _out994);
                    _1664_recursiveGen = _out991;
                    _1665___v51 = _out992;
                    _1666___v52 = _out993;
                    _1667_recIdents = _out994;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1663_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1664_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1667_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1668___mcc_h899 = _source52.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1669_recursiveGen;
                    bool _1670_recOwned;
                    bool _1671_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1672_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _1669_recursiveGen = _out995;
                    _1670_recOwned = _out996;
                    _1671_recErased = _out997;
                    _1672_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1669_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1670_recOwned;
                    isErased = _1671_recErased;
                    readIdents = _1672_recIdents;
                  }
                }
              } else if (_source51.is_Real) {
                DAST._IType _source55 = _667___mcc_h306;
                if (_source55.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1673___mcc_h901 = _source55.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1674___mcc_h902 = _source55.dtor_typeArgs;
                  DAST._IResolvedType _1675___mcc_h903 = _source55.dtor_resolved;
                  DAST._IResolvedType _source56 = _1675___mcc_h903;
                  if (_source56.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1676___mcc_h907 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1677_recursiveGen;
                      bool _1678_recOwned;
                      bool _1679_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1680_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                      _1677_recursiveGen = _out999;
                      _1678_recOwned = _out1000;
                      _1679_recErased = _out1001;
                      _1680_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1677_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1678_recOwned;
                      isErased = _1679_recErased;
                      readIdents = _1680_recIdents;
                    }
                  } else if (_source56.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1681___mcc_h909 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1682_recursiveGen;
                      bool _1683_recOwned;
                      bool _1684_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1685_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1003;
                      bool _out1004;
                      bool _out1005;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                      _1682_recursiveGen = _out1003;
                      _1683_recOwned = _out1004;
                      _1684_recErased = _out1005;
                      _1685_recIdents = _out1006;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1682_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1683_recOwned;
                      isErased = _1684_recErased;
                      readIdents = _1685_recIdents;
                    }
                  } else {
                    DAST._IType _1686___mcc_h911 = _source56.dtor_Newtype_a0;
                    DAST._IType _1687_b = _1686___mcc_h911;
                    {
                      if (object.Equals(_660_fromTpe, _1687_b)) {
                        Dafny.ISequence<Dafny.Rune> _1688_recursiveGen;
                        bool _1689_recOwned;
                        bool _1690_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1691_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1007;
                        bool _out1008;
                        bool _out1009;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                        _1688_recursiveGen = _out1007;
                        _1689_recOwned = _out1008;
                        _1690_recErased = _out1009;
                        _1691_recIdents = _out1010;
                        Dafny.ISequence<Dafny.Rune> _1692_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1011;
                        _out1011 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _1692_rhsType = _out1011;
                        Dafny.ISequence<Dafny.Rune> _1693_uneraseFn;
                        _1693_uneraseFn = ((_1689_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1692_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1693_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1689_recOwned;
                        isErased = false;
                        readIdents = _1691_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1012;
                        bool _out1013;
                        bool _out1014;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1687_b), _1687_b, _659_toTpe), selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                        s = _out1012;
                        isOwned = _out1013;
                        isErased = _out1014;
                        readIdents = _out1015;
                      }
                    }
                  }
                } else if (_source55.is_Nullable) {
                  DAST._IType _1694___mcc_h913 = _source55.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1695_recursiveGen;
                    bool _1696_recOwned;
                    bool _1697_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1698_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1016;
                    bool _out1017;
                    bool _out1018;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                    _1695_recursiveGen = _out1016;
                    _1696_recOwned = _out1017;
                    _1697_recErased = _out1018;
                    _1698_recIdents = _out1019;
                    if (!(_1696_recOwned)) {
                      _1695_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1695_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1695_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1697_recErased;
                    readIdents = _1698_recIdents;
                  }
                } else if (_source55.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1699___mcc_h915 = _source55.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1700_recursiveGen;
                    bool _1701_recOwned;
                    bool _1702_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1703_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1020;
                    bool _out1021;
                    bool _out1022;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                    _1700_recursiveGen = _out1020;
                    _1701_recOwned = _out1021;
                    _1702_recErased = _out1022;
                    _1703_recIdents = _out1023;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1700_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1701_recOwned;
                    isErased = _1702_recErased;
                    readIdents = _1703_recIdents;
                  }
                } else if (_source55.is_Array) {
                  DAST._IType _1704___mcc_h917 = _source55.dtor_element;
                  BigInteger _1705___mcc_h918 = _source55.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1706_recursiveGen;
                    bool _1707_recOwned;
                    bool _1708_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1709_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1024;
                    bool _out1025;
                    bool _out1026;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1024, out _out1025, out _out1026, out _out1027);
                    _1706_recursiveGen = _out1024;
                    _1707_recOwned = _out1025;
                    _1708_recErased = _out1026;
                    _1709_recIdents = _out1027;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1706_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1707_recOwned;
                    isErased = _1708_recErased;
                    readIdents = _1709_recIdents;
                  }
                } else if (_source55.is_Seq) {
                  DAST._IType _1710___mcc_h921 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1711_recursiveGen;
                    bool _1712_recOwned;
                    bool _1713_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1714_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030, out _out1031);
                    _1711_recursiveGen = _out1028;
                    _1712_recOwned = _out1029;
                    _1713_recErased = _out1030;
                    _1714_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1711_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1712_recOwned;
                    isErased = _1713_recErased;
                    readIdents = _1714_recIdents;
                  }
                } else if (_source55.is_Set) {
                  DAST._IType _1715___mcc_h923 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1716_recursiveGen;
                    bool _1717_recOwned;
                    bool _1718_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1719_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _1716_recursiveGen = _out1032;
                    _1717_recOwned = _out1033;
                    _1718_recErased = _out1034;
                    _1719_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1717_recOwned;
                    isErased = _1718_recErased;
                    readIdents = _1719_recIdents;
                  }
                } else if (_source55.is_Multiset) {
                  DAST._IType _1720___mcc_h925 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1721_recursiveGen;
                    bool _1722_recOwned;
                    bool _1723_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1724_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1036;
                    bool _out1037;
                    bool _out1038;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                    _1721_recursiveGen = _out1036;
                    _1722_recOwned = _out1037;
                    _1723_recErased = _out1038;
                    _1724_recIdents = _out1039;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1722_recOwned;
                    isErased = _1723_recErased;
                    readIdents = _1724_recIdents;
                  }
                } else if (_source55.is_Map) {
                  DAST._IType _1725___mcc_h927 = _source55.dtor_key;
                  DAST._IType _1726___mcc_h928 = _source55.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1727_recursiveGen;
                    bool _1728_recOwned;
                    bool _1729_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1730_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1040;
                    bool _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                    _1727_recursiveGen = _out1040;
                    _1728_recOwned = _out1041;
                    _1729_recErased = _out1042;
                    _1730_recIdents = _out1043;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1728_recOwned;
                    isErased = _1729_recErased;
                    readIdents = _1730_recIdents;
                  }
                } else if (_source55.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1731___mcc_h931 = _source55.dtor_args;
                  DAST._IType _1732___mcc_h932 = _source55.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1733_recursiveGen;
                    bool _1734_recOwned;
                    bool _1735_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1736_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1044;
                    bool _out1045;
                    bool _out1046;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                    _1733_recursiveGen = _out1044;
                    _1734_recOwned = _out1045;
                    _1735_recErased = _out1046;
                    _1736_recIdents = _out1047;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1733_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1734_recOwned;
                    isErased = _1735_recErased;
                    readIdents = _1736_recIdents;
                  }
                } else if (_source55.is_Primitive) {
                  DAST._IPrimitive _1737___mcc_h935 = _source55.dtor_Primitive_a0;
                  DAST._IPrimitive _source57 = _1737___mcc_h935;
                  if (_source57.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1738_recursiveGen;
                      bool _1739___v48;
                      bool _1740___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1741_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1048;
                      bool _out1049;
                      bool _out1050;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, false, out _out1048, out _out1049, out _out1050, out _out1051);
                      _1738_recursiveGen = _out1048;
                      _1739___v48 = _out1049;
                      _1740___v49 = _out1050;
                      _1741_recIdents = _out1051;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1738_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1741_recIdents;
                    }
                  } else if (_source57.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1742_recursiveGen;
                      bool _1743_recOwned;
                      bool _1744_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1745_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1052;
                      bool _out1053;
                      bool _out1054;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1052, out _out1053, out _out1054, out _out1055);
                      _1742_recursiveGen = _out1052;
                      _1743_recOwned = _out1053;
                      _1744_recErased = _out1054;
                      _1745_recIdents = _out1055;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1743_recOwned;
                      isErased = _1744_recErased;
                      readIdents = _1745_recIdents;
                    }
                  } else if (_source57.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1746_recursiveGen;
                      bool _1747_recOwned;
                      bool _1748_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1749_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1056;
                      bool _out1057;
                      bool _out1058;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1056, out _out1057, out _out1058, out _out1059);
                      _1746_recursiveGen = _out1056;
                      _1747_recOwned = _out1057;
                      _1748_recErased = _out1058;
                      _1749_recIdents = _out1059;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1746_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1747_recOwned;
                      isErased = _1748_recErased;
                      readIdents = _1749_recIdents;
                    }
                  } else if (_source57.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1750_recursiveGen;
                      bool _1751_recOwned;
                      bool _1752_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1753_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1060;
                      bool _out1061;
                      bool _out1062;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062, out _out1063);
                      _1750_recursiveGen = _out1060;
                      _1751_recOwned = _out1061;
                      _1752_recErased = _out1062;
                      _1753_recIdents = _out1063;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1750_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1751_recOwned;
                      isErased = _1752_recErased;
                      readIdents = _1753_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                      bool _1755_recOwned;
                      bool _1756_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1064;
                      bool _out1065;
                      bool _out1066;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                      _1754_recursiveGen = _out1064;
                      _1755_recOwned = _out1065;
                      _1756_recErased = _out1066;
                      _1757_recIdents = _out1067;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1755_recOwned;
                      isErased = _1756_recErased;
                      readIdents = _1757_recIdents;
                    }
                  }
                } else if (_source55.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1758___mcc_h937 = _source55.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1759_recursiveGen;
                    bool _1760_recOwned;
                    bool _1761_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1068;
                    bool _out1069;
                    bool _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                    _1759_recursiveGen = _out1068;
                    _1760_recOwned = _out1069;
                    _1761_recErased = _out1070;
                    _1762_recIdents = _out1071;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1760_recOwned;
                    isErased = _1761_recErased;
                    readIdents = _1762_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1763___mcc_h939 = _source55.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1764_recursiveGen;
                    bool _1765_recOwned;
                    bool _1766_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1767_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _1764_recursiveGen = _out1072;
                    _1765_recOwned = _out1073;
                    _1766_recErased = _out1074;
                    _1767_recIdents = _out1075;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1765_recOwned;
                    isErased = _1766_recErased;
                    readIdents = _1767_recIdents;
                  }
                }
              } else if (_source51.is_String) {
                DAST._IType _source58 = _667___mcc_h306;
                if (_source58.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1768___mcc_h941 = _source58.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1769___mcc_h942 = _source58.dtor_typeArgs;
                  DAST._IResolvedType _1770___mcc_h943 = _source58.dtor_resolved;
                  DAST._IResolvedType _source59 = _1770___mcc_h943;
                  if (_source59.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1771___mcc_h947 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1772_recursiveGen;
                      bool _1773_recOwned;
                      bool _1774_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1775_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1076;
                      bool _out1077;
                      bool _out1078;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                      _1772_recursiveGen = _out1076;
                      _1773_recOwned = _out1077;
                      _1774_recErased = _out1078;
                      _1775_recIdents = _out1079;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1773_recOwned;
                      isErased = _1774_recErased;
                      readIdents = _1775_recIdents;
                    }
                  } else if (_source59.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1776___mcc_h949 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1777_recursiveGen;
                      bool _1778_recOwned;
                      bool _1779_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1780_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1080;
                      bool _out1081;
                      bool _out1082;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                      _1777_recursiveGen = _out1080;
                      _1778_recOwned = _out1081;
                      _1779_recErased = _out1082;
                      _1780_recIdents = _out1083;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1777_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1778_recOwned;
                      isErased = _1779_recErased;
                      readIdents = _1780_recIdents;
                    }
                  } else {
                    DAST._IType _1781___mcc_h951 = _source59.dtor_Newtype_a0;
                    DAST._IType _1782_b = _1781___mcc_h951;
                    {
                      if (object.Equals(_660_fromTpe, _1782_b)) {
                        Dafny.ISequence<Dafny.Rune> _1783_recursiveGen;
                        bool _1784_recOwned;
                        bool _1785_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1786_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1084;
                        bool _out1085;
                        bool _out1086;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                        _1783_recursiveGen = _out1084;
                        _1784_recOwned = _out1085;
                        _1785_recErased = _out1086;
                        _1786_recIdents = _out1087;
                        Dafny.ISequence<Dafny.Rune> _1787_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1088;
                        _out1088 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _1787_rhsType = _out1088;
                        Dafny.ISequence<Dafny.Rune> _1788_uneraseFn;
                        _1788_uneraseFn = ((_1784_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1787_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1788_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1783_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1784_recOwned;
                        isErased = false;
                        readIdents = _1786_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1089;
                        bool _out1090;
                        bool _out1091;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1782_b), _1782_b, _659_toTpe), selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                        s = _out1089;
                        isOwned = _out1090;
                        isErased = _out1091;
                        readIdents = _out1092;
                      }
                    }
                  }
                } else if (_source58.is_Nullable) {
                  DAST._IType _1789___mcc_h953 = _source58.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1790_recursiveGen;
                    bool _1791_recOwned;
                    bool _1792_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1793_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1093;
                    bool _out1094;
                    bool _out1095;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                    _1790_recursiveGen = _out1093;
                    _1791_recOwned = _out1094;
                    _1792_recErased = _out1095;
                    _1793_recIdents = _out1096;
                    if (!(_1791_recOwned)) {
                      _1790_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1790_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1792_recErased;
                    readIdents = _1793_recIdents;
                  }
                } else if (_source58.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1794___mcc_h955 = _source58.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                    bool _1796_recOwned;
                    bool _1797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1097;
                    bool _out1098;
                    bool _out1099;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                    _1795_recursiveGen = _out1097;
                    _1796_recOwned = _out1098;
                    _1797_recErased = _out1099;
                    _1798_recIdents = _out1100;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1796_recOwned;
                    isErased = _1797_recErased;
                    readIdents = _1798_recIdents;
                  }
                } else if (_source58.is_Array) {
                  DAST._IType _1799___mcc_h957 = _source58.dtor_element;
                  BigInteger _1800___mcc_h958 = _source58.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1801_recursiveGen;
                    bool _1802_recOwned;
                    bool _1803_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1804_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1101;
                    bool _out1102;
                    bool _out1103;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                    _1801_recursiveGen = _out1101;
                    _1802_recOwned = _out1102;
                    _1803_recErased = _out1103;
                    _1804_recIdents = _out1104;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1802_recOwned;
                    isErased = _1803_recErased;
                    readIdents = _1804_recIdents;
                  }
                } else if (_source58.is_Seq) {
                  DAST._IType _1805___mcc_h961 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1806_recursiveGen;
                    bool _1807_recOwned;
                    bool _1808_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1809_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _1806_recursiveGen = _out1105;
                    _1807_recOwned = _out1106;
                    _1808_recErased = _out1107;
                    _1809_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1807_recOwned;
                    isErased = _1808_recErased;
                    readIdents = _1809_recIdents;
                  }
                } else if (_source58.is_Set) {
                  DAST._IType _1810___mcc_h963 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1811_recursiveGen;
                    bool _1812_recOwned;
                    bool _1813_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1814_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _1811_recursiveGen = _out1109;
                    _1812_recOwned = _out1110;
                    _1813_recErased = _out1111;
                    _1814_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1811_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1812_recOwned;
                    isErased = _1813_recErased;
                    readIdents = _1814_recIdents;
                  }
                } else if (_source58.is_Multiset) {
                  DAST._IType _1815___mcc_h965 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1816_recursiveGen;
                    bool _1817_recOwned;
                    bool _1818_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1819_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1113;
                    bool _out1114;
                    bool _out1115;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                    _1816_recursiveGen = _out1113;
                    _1817_recOwned = _out1114;
                    _1818_recErased = _out1115;
                    _1819_recIdents = _out1116;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1816_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1817_recOwned;
                    isErased = _1818_recErased;
                    readIdents = _1819_recIdents;
                  }
                } else if (_source58.is_Map) {
                  DAST._IType _1820___mcc_h967 = _source58.dtor_key;
                  DAST._IType _1821___mcc_h968 = _source58.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1822_recursiveGen;
                    bool _1823_recOwned;
                    bool _1824_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1825_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1117;
                    bool _out1118;
                    bool _out1119;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                    _1822_recursiveGen = _out1117;
                    _1823_recOwned = _out1118;
                    _1824_recErased = _out1119;
                    _1825_recIdents = _out1120;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1823_recOwned;
                    isErased = _1824_recErased;
                    readIdents = _1825_recIdents;
                  }
                } else if (_source58.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1826___mcc_h971 = _source58.dtor_args;
                  DAST._IType _1827___mcc_h972 = _source58.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1828_recursiveGen;
                    bool _1829_recOwned;
                    bool _1830_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1831_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1121;
                    bool _out1122;
                    bool _out1123;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                    _1828_recursiveGen = _out1121;
                    _1829_recOwned = _out1122;
                    _1830_recErased = _out1123;
                    _1831_recIdents = _out1124;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1828_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1829_recOwned;
                    isErased = _1830_recErased;
                    readIdents = _1831_recIdents;
                  }
                } else if (_source58.is_Primitive) {
                  DAST._IPrimitive _1832___mcc_h975 = _source58.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1833_recursiveGen;
                    bool _1834_recOwned;
                    bool _1835_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1836_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1125;
                    bool _out1126;
                    bool _out1127;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                    _1833_recursiveGen = _out1125;
                    _1834_recOwned = _out1126;
                    _1835_recErased = _out1127;
                    _1836_recIdents = _out1128;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1834_recOwned;
                    isErased = _1835_recErased;
                    readIdents = _1836_recIdents;
                  }
                } else if (_source58.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1837___mcc_h977 = _source58.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1838_recursiveGen;
                    bool _1839_recOwned;
                    bool _1840_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1841_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1129;
                    bool _out1130;
                    bool _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                    _1838_recursiveGen = _out1129;
                    _1839_recOwned = _out1130;
                    _1840_recErased = _out1131;
                    _1841_recIdents = _out1132;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1838_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1839_recOwned;
                    isErased = _1840_recErased;
                    readIdents = _1841_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1842___mcc_h979 = _source58.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1843_recursiveGen;
                    bool _1844_recOwned;
                    bool _1845_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1846_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1133;
                    bool _out1134;
                    bool _out1135;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                    _1843_recursiveGen = _out1133;
                    _1844_recOwned = _out1134;
                    _1845_recErased = _out1135;
                    _1846_recIdents = _out1136;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1843_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1844_recOwned;
                    isErased = _1845_recErased;
                    readIdents = _1846_recIdents;
                  }
                }
              } else if (_source51.is_Bool) {
                DAST._IType _source60 = _667___mcc_h306;
                if (_source60.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1847___mcc_h981 = _source60.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1848___mcc_h982 = _source60.dtor_typeArgs;
                  DAST._IResolvedType _1849___mcc_h983 = _source60.dtor_resolved;
                  DAST._IResolvedType _source61 = _1849___mcc_h983;
                  if (_source61.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1850___mcc_h987 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1851_recursiveGen;
                      bool _1852_recOwned;
                      bool _1853_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1854_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1137;
                      bool _out1138;
                      bool _out1139;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                      _1851_recursiveGen = _out1137;
                      _1852_recOwned = _out1138;
                      _1853_recErased = _out1139;
                      _1854_recIdents = _out1140;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1851_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1852_recOwned;
                      isErased = _1853_recErased;
                      readIdents = _1854_recIdents;
                    }
                  } else if (_source61.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1855___mcc_h989 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1856_recursiveGen;
                      bool _1857_recOwned;
                      bool _1858_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1859_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1141;
                      bool _out1142;
                      bool _out1143;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                      _1856_recursiveGen = _out1141;
                      _1857_recOwned = _out1142;
                      _1858_recErased = _out1143;
                      _1859_recIdents = _out1144;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1856_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1857_recOwned;
                      isErased = _1858_recErased;
                      readIdents = _1859_recIdents;
                    }
                  } else {
                    DAST._IType _1860___mcc_h991 = _source61.dtor_Newtype_a0;
                    DAST._IType _1861_b = _1860___mcc_h991;
                    {
                      if (object.Equals(_660_fromTpe, _1861_b)) {
                        Dafny.ISequence<Dafny.Rune> _1862_recursiveGen;
                        bool _1863_recOwned;
                        bool _1864_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1865_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        _1862_recursiveGen = _out1145;
                        _1863_recOwned = _out1146;
                        _1864_recErased = _out1147;
                        _1865_recIdents = _out1148;
                        Dafny.ISequence<Dafny.Rune> _1866_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1149;
                        _out1149 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _1866_rhsType = _out1149;
                        Dafny.ISequence<Dafny.Rune> _1867_uneraseFn;
                        _1867_uneraseFn = ((_1863_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1866_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1867_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1863_recOwned;
                        isErased = false;
                        readIdents = _1865_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1150;
                        bool _out1151;
                        bool _out1152;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1861_b), _1861_b, _659_toTpe), selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                        s = _out1150;
                        isOwned = _out1151;
                        isErased = _out1152;
                        readIdents = _out1153;
                      }
                    }
                  }
                } else if (_source60.is_Nullable) {
                  DAST._IType _1868___mcc_h993 = _source60.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1869_recursiveGen;
                    bool _1870_recOwned;
                    bool _1871_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1872_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _1869_recursiveGen = _out1154;
                    _1870_recOwned = _out1155;
                    _1871_recErased = _out1156;
                    _1872_recIdents = _out1157;
                    if (!(_1870_recOwned)) {
                      _1869_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1869_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1871_recErased;
                    readIdents = _1872_recIdents;
                  }
                } else if (_source60.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1873___mcc_h995 = _source60.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1874_recursiveGen;
                    bool _1875_recOwned;
                    bool _1876_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1877_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _1874_recursiveGen = _out1158;
                    _1875_recOwned = _out1159;
                    _1876_recErased = _out1160;
                    _1877_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1874_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1875_recOwned;
                    isErased = _1876_recErased;
                    readIdents = _1877_recIdents;
                  }
                } else if (_source60.is_Array) {
                  DAST._IType _1878___mcc_h997 = _source60.dtor_element;
                  BigInteger _1879___mcc_h998 = _source60.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1880_recursiveGen;
                    bool _1881_recOwned;
                    bool _1882_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1883_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _1880_recursiveGen = _out1162;
                    _1881_recOwned = _out1163;
                    _1882_recErased = _out1164;
                    _1883_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1880_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1881_recOwned;
                    isErased = _1882_recErased;
                    readIdents = _1883_recIdents;
                  }
                } else if (_source60.is_Seq) {
                  DAST._IType _1884___mcc_h1001 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1885_recursiveGen;
                    bool _1886_recOwned;
                    bool _1887_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1888_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _1885_recursiveGen = _out1166;
                    _1886_recOwned = _out1167;
                    _1887_recErased = _out1168;
                    _1888_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1885_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1886_recOwned;
                    isErased = _1887_recErased;
                    readIdents = _1888_recIdents;
                  }
                } else if (_source60.is_Set) {
                  DAST._IType _1889___mcc_h1003 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1890_recursiveGen;
                    bool _1891_recOwned;
                    bool _1892_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1893_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _1890_recursiveGen = _out1170;
                    _1891_recOwned = _out1171;
                    _1892_recErased = _out1172;
                    _1893_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1890_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1891_recOwned;
                    isErased = _1892_recErased;
                    readIdents = _1893_recIdents;
                  }
                } else if (_source60.is_Multiset) {
                  DAST._IType _1894___mcc_h1005 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1895_recursiveGen;
                    bool _1896_recOwned;
                    bool _1897_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1898_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1174;
                    bool _out1175;
                    bool _out1176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                    _1895_recursiveGen = _out1174;
                    _1896_recOwned = _out1175;
                    _1897_recErased = _out1176;
                    _1898_recIdents = _out1177;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1896_recOwned;
                    isErased = _1897_recErased;
                    readIdents = _1898_recIdents;
                  }
                } else if (_source60.is_Map) {
                  DAST._IType _1899___mcc_h1007 = _source60.dtor_key;
                  DAST._IType _1900___mcc_h1008 = _source60.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1901_recursiveGen;
                    bool _1902_recOwned;
                    bool _1903_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1904_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1178;
                    bool _out1179;
                    bool _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                    _1901_recursiveGen = _out1178;
                    _1902_recOwned = _out1179;
                    _1903_recErased = _out1180;
                    _1904_recIdents = _out1181;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1902_recOwned;
                    isErased = _1903_recErased;
                    readIdents = _1904_recIdents;
                  }
                } else if (_source60.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1905___mcc_h1011 = _source60.dtor_args;
                  DAST._IType _1906___mcc_h1012 = _source60.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1907_recursiveGen;
                    bool _1908_recOwned;
                    bool _1909_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1910_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1182;
                    bool _out1183;
                    bool _out1184;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                    _1907_recursiveGen = _out1182;
                    _1908_recOwned = _out1183;
                    _1909_recErased = _out1184;
                    _1910_recIdents = _out1185;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1908_recOwned;
                    isErased = _1909_recErased;
                    readIdents = _1910_recIdents;
                  }
                } else if (_source60.is_Primitive) {
                  DAST._IPrimitive _1911___mcc_h1015 = _source60.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1912_recursiveGen;
                    bool _1913_recOwned;
                    bool _1914_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1915_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1186;
                    bool _out1187;
                    bool _out1188;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                    _1912_recursiveGen = _out1186;
                    _1913_recOwned = _out1187;
                    _1914_recErased = _out1188;
                    _1915_recIdents = _out1189;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1913_recOwned;
                    isErased = _1914_recErased;
                    readIdents = _1915_recIdents;
                  }
                } else if (_source60.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1916___mcc_h1017 = _source60.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1917_recursiveGen;
                    bool _1918_recOwned;
                    bool _1919_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1920_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _1917_recursiveGen = _out1190;
                    _1918_recOwned = _out1191;
                    _1919_recErased = _out1192;
                    _1920_recIdents = _out1193;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1917_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1918_recOwned;
                    isErased = _1919_recErased;
                    readIdents = _1920_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1921___mcc_h1019 = _source60.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1922_recursiveGen;
                    bool _1923_recOwned;
                    bool _1924_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1925_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _1922_recursiveGen = _out1194;
                    _1923_recOwned = _out1195;
                    _1924_recErased = _out1196;
                    _1925_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1922_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1923_recOwned;
                    isErased = _1924_recErased;
                    readIdents = _1925_recIdents;
                  }
                }
              } else {
                DAST._IType _source62 = _667___mcc_h306;
                if (_source62.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1926___mcc_h1021 = _source62.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1927___mcc_h1022 = _source62.dtor_typeArgs;
                  DAST._IResolvedType _1928___mcc_h1023 = _source62.dtor_resolved;
                  DAST._IResolvedType _source63 = _1928___mcc_h1023;
                  if (_source63.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1929___mcc_h1027 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1930_recursiveGen;
                      bool _1931_recOwned;
                      bool _1932_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1198;
                      bool _out1199;
                      bool _out1200;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                      _1930_recursiveGen = _out1198;
                      _1931_recOwned = _out1199;
                      _1932_recErased = _out1200;
                      _1933_recIdents = _out1201;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1931_recOwned;
                      isErased = _1932_recErased;
                      readIdents = _1933_recIdents;
                    }
                  } else if (_source63.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1934___mcc_h1029 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                      bool _1936_recOwned;
                      bool _1937_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1202;
                      bool _out1203;
                      bool _out1204;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                      _1935_recursiveGen = _out1202;
                      _1936_recOwned = _out1203;
                      _1937_recErased = _out1204;
                      _1938_recIdents = _out1205;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1936_recOwned;
                      isErased = _1937_recErased;
                      readIdents = _1938_recIdents;
                    }
                  } else {
                    DAST._IType _1939___mcc_h1031 = _source63.dtor_Newtype_a0;
                    DAST._IType _1940_b = _1939___mcc_h1031;
                    {
                      if (object.Equals(_660_fromTpe, _1940_b)) {
                        Dafny.ISequence<Dafny.Rune> _1941_recursiveGen;
                        bool _1942_recOwned;
                        bool _1943_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1944_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        _1941_recursiveGen = _out1206;
                        _1942_recOwned = _out1207;
                        _1943_recErased = _out1208;
                        _1944_recIdents = _out1209;
                        Dafny.ISequence<Dafny.Rune> _1945_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1210;
                        _out1210 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                        _1945_rhsType = _out1210;
                        Dafny.ISequence<Dafny.Rune> _1946_uneraseFn;
                        _1946_uneraseFn = ((_1942_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1945_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1946_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1942_recOwned;
                        isErased = false;
                        readIdents = _1944_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1211;
                        bool _out1212;
                        bool _out1213;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _1940_b), _1940_b, _659_toTpe), selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                        s = _out1211;
                        isOwned = _out1212;
                        isErased = _out1213;
                        readIdents = _out1214;
                      }
                    }
                  }
                } else if (_source62.is_Nullable) {
                  DAST._IType _1947___mcc_h1033 = _source62.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1948_recursiveGen;
                    bool _1949_recOwned;
                    bool _1950_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1951_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _1948_recursiveGen = _out1215;
                    _1949_recOwned = _out1216;
                    _1950_recErased = _out1217;
                    _1951_recIdents = _out1218;
                    if (!(_1949_recOwned)) {
                      _1948_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1948_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1948_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1950_recErased;
                    readIdents = _1951_recIdents;
                  }
                } else if (_source62.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1952___mcc_h1035 = _source62.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1953_recursiveGen;
                    bool _1954_recOwned;
                    bool _1955_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1956_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _1953_recursiveGen = _out1219;
                    _1954_recOwned = _out1220;
                    _1955_recErased = _out1221;
                    _1956_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1953_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1954_recOwned;
                    isErased = _1955_recErased;
                    readIdents = _1956_recIdents;
                  }
                } else if (_source62.is_Array) {
                  DAST._IType _1957___mcc_h1037 = _source62.dtor_element;
                  BigInteger _1958___mcc_h1038 = _source62.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1959_recursiveGen;
                    bool _1960_recOwned;
                    bool _1961_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1962_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _1959_recursiveGen = _out1223;
                    _1960_recOwned = _out1224;
                    _1961_recErased = _out1225;
                    _1962_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1959_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1960_recOwned;
                    isErased = _1961_recErased;
                    readIdents = _1962_recIdents;
                  }
                } else if (_source62.is_Seq) {
                  DAST._IType _1963___mcc_h1041 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1964_recursiveGen;
                    bool _1965_recOwned;
                    bool _1966_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1967_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _1964_recursiveGen = _out1227;
                    _1965_recOwned = _out1228;
                    _1966_recErased = _out1229;
                    _1967_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1964_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1965_recOwned;
                    isErased = _1966_recErased;
                    readIdents = _1967_recIdents;
                  }
                } else if (_source62.is_Set) {
                  DAST._IType _1968___mcc_h1043 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1969_recursiveGen;
                    bool _1970_recOwned;
                    bool _1971_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1972_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _1969_recursiveGen = _out1231;
                    _1970_recOwned = _out1232;
                    _1971_recErased = _out1233;
                    _1972_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1969_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1970_recOwned;
                    isErased = _1971_recErased;
                    readIdents = _1972_recIdents;
                  }
                } else if (_source62.is_Multiset) {
                  DAST._IType _1973___mcc_h1045 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1974_recursiveGen;
                    bool _1975_recOwned;
                    bool _1976_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1977_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1235;
                    bool _out1236;
                    bool _out1237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                    _1974_recursiveGen = _out1235;
                    _1975_recOwned = _out1236;
                    _1976_recErased = _out1237;
                    _1977_recIdents = _out1238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1974_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1975_recOwned;
                    isErased = _1976_recErased;
                    readIdents = _1977_recIdents;
                  }
                } else if (_source62.is_Map) {
                  DAST._IType _1978___mcc_h1047 = _source62.dtor_key;
                  DAST._IType _1979___mcc_h1048 = _source62.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1980_recursiveGen;
                    bool _1981_recOwned;
                    bool _1982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1239;
                    bool _out1240;
                    bool _out1241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                    _1980_recursiveGen = _out1239;
                    _1981_recOwned = _out1240;
                    _1982_recErased = _out1241;
                    _1983_recIdents = _out1242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1980_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1981_recOwned;
                    isErased = _1982_recErased;
                    readIdents = _1983_recIdents;
                  }
                } else if (_source62.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1984___mcc_h1051 = _source62.dtor_args;
                  DAST._IType _1985___mcc_h1052 = _source62.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1986_recursiveGen;
                    bool _1987_recOwned;
                    bool _1988_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1989_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1243;
                    bool _out1244;
                    bool _out1245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                    _1986_recursiveGen = _out1243;
                    _1987_recOwned = _out1244;
                    _1988_recErased = _out1245;
                    _1989_recIdents = _out1246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1987_recOwned;
                    isErased = _1988_recErased;
                    readIdents = _1989_recIdents;
                  }
                } else if (_source62.is_Primitive) {
                  DAST._IPrimitive _1990___mcc_h1055 = _source62.dtor_Primitive_a0;
                  DAST._IPrimitive _source64 = _1990___mcc_h1055;
                  if (_source64.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1991_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1247;
                      _out1247 = DCOMP.COMP.GenType(_660_fromTpe, true, false);
                      _1991_rhsType = _out1247;
                      Dafny.ISequence<Dafny.Rune> _1992_recursiveGen;
                      bool _1993___v58;
                      bool _1994___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1995_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1248;
                      bool _out1249;
                      bool _out1250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, true, out _out1248, out _out1249, out _out1250, out _out1251);
                      _1992_recursiveGen = _out1248;
                      _1993___v58 = _out1249;
                      _1994___v59 = _out1250;
                      _1995_recIdents = _out1251;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _1992_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1995_recIdents;
                    }
                  } else if (_source64.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1996_recursiveGen;
                      bool _1997_recOwned;
                      bool _1998_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1999_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1252;
                      bool _out1253;
                      bool _out1254;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                      _1996_recursiveGen = _out1252;
                      _1997_recOwned = _out1253;
                      _1998_recErased = _out1254;
                      _1999_recIdents = _out1255;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1996_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1997_recOwned;
                      isErased = _1998_recErased;
                      readIdents = _1999_recIdents;
                    }
                  } else if (_source64.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2000_recursiveGen;
                      bool _2001_recOwned;
                      bool _2002_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2003_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      bool _out1257;
                      bool _out1258;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                      _2000_recursiveGen = _out1256;
                      _2001_recOwned = _out1257;
                      _2002_recErased = _out1258;
                      _2003_recIdents = _out1259;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2000_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2001_recOwned;
                      isErased = _2002_recErased;
                      readIdents = _2003_recIdents;
                    }
                  } else if (_source64.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2004_recursiveGen;
                      bool _2005_recOwned;
                      bool _2006_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      bool _out1261;
                      bool _out1262;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                      _2004_recursiveGen = _out1260;
                      _2005_recOwned = _out1261;
                      _2006_recErased = _out1262;
                      _2007_recIdents = _out1263;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2005_recOwned;
                      isErased = _2006_recErased;
                      readIdents = _2007_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2008_recursiveGen;
                      bool _2009_recOwned;
                      bool _2010_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2011_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1264;
                      bool _out1265;
                      bool _out1266;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                      _2008_recursiveGen = _out1264;
                      _2009_recOwned = _out1265;
                      _2010_recErased = _out1266;
                      _2011_recIdents = _out1267;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2008_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2009_recOwned;
                      isErased = _2010_recErased;
                      readIdents = _2011_recIdents;
                    }
                  }
                } else if (_source62.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2012___mcc_h1057 = _source62.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2013_recursiveGen;
                    bool _2014_recOwned;
                    bool _2015_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2016_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2013_recursiveGen = _out1268;
                    _2014_recOwned = _out1269;
                    _2015_recErased = _out1270;
                    _2016_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2013_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2014_recOwned;
                    isErased = _2015_recErased;
                    readIdents = _2016_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2017___mcc_h1059 = _source62.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2018_recursiveGen;
                    bool _2019_recOwned;
                    bool _2020_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2021_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2018_recursiveGen = _out1272;
                    _2019_recOwned = _out1273;
                    _2020_recErased = _out1274;
                    _2021_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2018_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2019_recOwned;
                    isErased = _2020_recErased;
                    readIdents = _2021_recIdents;
                  }
                }
              }
            } else if (_source27.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2022___mcc_h1061 = _source27.dtor_Passthrough_a0;
              DAST._IType _source65 = _667___mcc_h306;
              if (_source65.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2023___mcc_h1065 = _source65.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2024___mcc_h1066 = _source65.dtor_typeArgs;
                DAST._IResolvedType _2025___mcc_h1067 = _source65.dtor_resolved;
                DAST._IResolvedType _source66 = _2025___mcc_h1067;
                if (_source66.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2026___mcc_h1071 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2027_recursiveGen;
                    bool _2028_recOwned;
                    bool _2029_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2030_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2027_recursiveGen = _out1276;
                    _2028_recOwned = _out1277;
                    _2029_recErased = _out1278;
                    _2030_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2028_recOwned;
                    isErased = _2029_recErased;
                    readIdents = _2030_recIdents;
                  }
                } else if (_source66.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2031___mcc_h1073 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2032_recursiveGen;
                    bool _2033_recOwned;
                    bool _2034_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2035_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2032_recursiveGen = _out1280;
                    _2033_recOwned = _out1281;
                    _2034_recErased = _out1282;
                    _2035_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2033_recOwned;
                    isErased = _2034_recErased;
                    readIdents = _2035_recIdents;
                  }
                } else {
                  DAST._IType _2036___mcc_h1075 = _source66.dtor_Newtype_a0;
                  DAST._IType _2037_b = _2036___mcc_h1075;
                  {
                    if (object.Equals(_660_fromTpe, _2037_b)) {
                      Dafny.ISequence<Dafny.Rune> _2038_recursiveGen;
                      bool _2039_recOwned;
                      bool _2040_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2041_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      bool _out1285;
                      bool _out1286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1284, out _out1285, out _out1286, out _out1287);
                      _2038_recursiveGen = _out1284;
                      _2039_recOwned = _out1285;
                      _2040_recErased = _out1286;
                      _2041_recIdents = _out1287;
                      Dafny.ISequence<Dafny.Rune> _2042_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1288;
                      _out1288 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _2042_rhsType = _out1288;
                      Dafny.ISequence<Dafny.Rune> _2043_uneraseFn;
                      _2043_uneraseFn = ((_2039_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2042_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2043_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2039_recOwned;
                      isErased = false;
                      readIdents = _2041_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _2037_b), _2037_b, _659_toTpe), selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      s = _out1289;
                      isOwned = _out1290;
                      isErased = _out1291;
                      readIdents = _out1292;
                    }
                  }
                }
              } else if (_source65.is_Nullable) {
                DAST._IType _2044___mcc_h1077 = _source65.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2045_recursiveGen;
                  bool _2046_recOwned;
                  bool _2047_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2048_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1293;
                  bool _out1294;
                  bool _out1295;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                  _2045_recursiveGen = _out1293;
                  _2046_recOwned = _out1294;
                  _2047_recErased = _out1295;
                  _2048_recIdents = _out1296;
                  if (!(_2046_recOwned)) {
                    _2045_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2045_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2045_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2047_recErased;
                  readIdents = _2048_recIdents;
                }
              } else if (_source65.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2049___mcc_h1079 = _source65.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2050_recursiveGen;
                  bool _2051_recOwned;
                  bool _2052_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2053_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1297;
                  bool _out1298;
                  bool _out1299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                  _2050_recursiveGen = _out1297;
                  _2051_recOwned = _out1298;
                  _2052_recErased = _out1299;
                  _2053_recIdents = _out1300;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2050_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2051_recOwned;
                  isErased = _2052_recErased;
                  readIdents = _2053_recIdents;
                }
              } else if (_source65.is_Array) {
                DAST._IType _2054___mcc_h1081 = _source65.dtor_element;
                BigInteger _2055___mcc_h1082 = _source65.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2056_recursiveGen;
                  bool _2057_recOwned;
                  bool _2058_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2059_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1301;
                  bool _out1302;
                  bool _out1303;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                  _2056_recursiveGen = _out1301;
                  _2057_recOwned = _out1302;
                  _2058_recErased = _out1303;
                  _2059_recIdents = _out1304;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2056_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2057_recOwned;
                  isErased = _2058_recErased;
                  readIdents = _2059_recIdents;
                }
              } else if (_source65.is_Seq) {
                DAST._IType _2060___mcc_h1085 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2061_recursiveGen;
                  bool _2062_recOwned;
                  bool _2063_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2064_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1305;
                  bool _out1306;
                  bool _out1307;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                  _2061_recursiveGen = _out1305;
                  _2062_recOwned = _out1306;
                  _2063_recErased = _out1307;
                  _2064_recIdents = _out1308;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2061_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2062_recOwned;
                  isErased = _2063_recErased;
                  readIdents = _2064_recIdents;
                }
              } else if (_source65.is_Set) {
                DAST._IType _2065___mcc_h1087 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2066_recursiveGen;
                  bool _2067_recOwned;
                  bool _2068_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2069_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1309;
                  bool _out1310;
                  bool _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                  _2066_recursiveGen = _out1309;
                  _2067_recOwned = _out1310;
                  _2068_recErased = _out1311;
                  _2069_recIdents = _out1312;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2066_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2067_recOwned;
                  isErased = _2068_recErased;
                  readIdents = _2069_recIdents;
                }
              } else if (_source65.is_Multiset) {
                DAST._IType _2070___mcc_h1089 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2071_recursiveGen;
                  bool _2072_recOwned;
                  bool _2073_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2074_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1313;
                  bool _out1314;
                  bool _out1315;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                  _2071_recursiveGen = _out1313;
                  _2072_recOwned = _out1314;
                  _2073_recErased = _out1315;
                  _2074_recIdents = _out1316;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2071_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2072_recOwned;
                  isErased = _2073_recErased;
                  readIdents = _2074_recIdents;
                }
              } else if (_source65.is_Map) {
                DAST._IType _2075___mcc_h1091 = _source65.dtor_key;
                DAST._IType _2076___mcc_h1092 = _source65.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2077_recursiveGen;
                  bool _2078_recOwned;
                  bool _2079_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2080_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1317;
                  bool _out1318;
                  bool _out1319;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                  _2077_recursiveGen = _out1317;
                  _2078_recOwned = _out1318;
                  _2079_recErased = _out1319;
                  _2080_recIdents = _out1320;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2077_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2078_recOwned;
                  isErased = _2079_recErased;
                  readIdents = _2080_recIdents;
                }
              } else if (_source65.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2081___mcc_h1095 = _source65.dtor_args;
                DAST._IType _2082___mcc_h1096 = _source65.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2083_recursiveGen;
                  bool _2084_recOwned;
                  bool _2085_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2086_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1321;
                  bool _out1322;
                  bool _out1323;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                  _2083_recursiveGen = _out1321;
                  _2084_recOwned = _out1322;
                  _2085_recErased = _out1323;
                  _2086_recIdents = _out1324;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2083_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2084_recOwned;
                  isErased = _2085_recErased;
                  readIdents = _2086_recIdents;
                }
              } else if (_source65.is_Primitive) {
                DAST._IPrimitive _2087___mcc_h1099 = _source65.dtor_Primitive_a0;
                DAST._IPrimitive _source67 = _2087___mcc_h1099;
                if (_source67.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2088_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1325;
                    _out1325 = DCOMP.COMP.GenType(_660_fromTpe, true, false);
                    _2088_rhsType = _out1325;
                    Dafny.ISequence<Dafny.Rune> _2089_recursiveGen;
                    bool _2090___v54;
                    bool _2091___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2092_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1326;
                    bool _out1327;
                    bool _out1328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, true, out _out1326, out _out1327, out _out1328, out _out1329);
                    _2089_recursiveGen = _out1326;
                    _2090___v54 = _out1327;
                    _2091___v55 = _out1328;
                    _2092_recIdents = _out1329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2089_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2092_recIdents;
                  }
                } else if (_source67.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2093_recursiveGen;
                    bool _2094_recOwned;
                    bool _2095_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2096_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1330;
                    bool _out1331;
                    bool _out1332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                    _2093_recursiveGen = _out1330;
                    _2094_recOwned = _out1331;
                    _2095_recErased = _out1332;
                    _2096_recIdents = _out1333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2093_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2094_recOwned;
                    isErased = _2095_recErased;
                    readIdents = _2096_recIdents;
                  }
                } else if (_source67.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2097_recursiveGen;
                    bool _2098_recOwned;
                    bool _2099_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2100_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    bool _out1335;
                    bool _out1336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                    _2097_recursiveGen = _out1334;
                    _2098_recOwned = _out1335;
                    _2099_recErased = _out1336;
                    _2100_recIdents = _out1337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2097_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2098_recOwned;
                    isErased = _2099_recErased;
                    readIdents = _2100_recIdents;
                  }
                } else if (_source67.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2101_recursiveGen;
                    bool _2102_recOwned;
                    bool _2103_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2104_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    bool _out1339;
                    bool _out1340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                    _2101_recursiveGen = _out1338;
                    _2102_recOwned = _out1339;
                    _2103_recErased = _out1340;
                    _2104_recIdents = _out1341;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2102_recOwned;
                    isErased = _2103_recErased;
                    readIdents = _2104_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2105_recursiveGen;
                    bool _2106_recOwned;
                    bool _2107_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2108_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1342;
                    bool _out1343;
                    bool _out1344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                    _2105_recursiveGen = _out1342;
                    _2106_recOwned = _out1343;
                    _2107_recErased = _out1344;
                    _2108_recIdents = _out1345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2106_recOwned;
                    isErased = _2107_recErased;
                    readIdents = _2108_recIdents;
                  }
                }
              } else if (_source65.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2109___mcc_h1101 = _source65.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2110_recursiveGen;
                  bool _2111___v62;
                  bool _2112___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2113_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, true, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2110_recursiveGen = _out1346;
                  _2111___v62 = _out1347;
                  _2112___v63 = _out1348;
                  _2113_recIdents = _out1349;
                  Dafny.ISequence<Dafny.Rune> _2114_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  _out1350 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                  _2114_toTpeGen = _out1350;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2110_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2114_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2113_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2115___mcc_h1103 = _source65.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2116_recursiveGen;
                  bool _2117_recOwned;
                  bool _2118_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2119_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2116_recursiveGen = _out1351;
                  _2117_recOwned = _out1352;
                  _2118_recErased = _out1353;
                  _2119_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2117_recOwned;
                  isErased = _2118_recErased;
                  readIdents = _2119_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2120___mcc_h1105 = _source27.dtor_TypeArg_a0;
              DAST._IType _source68 = _667___mcc_h306;
              if (_source68.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2121___mcc_h1109 = _source68.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2122___mcc_h1110 = _source68.dtor_typeArgs;
                DAST._IResolvedType _2123___mcc_h1111 = _source68.dtor_resolved;
                DAST._IResolvedType _source69 = _2123___mcc_h1111;
                if (_source69.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2124___mcc_h1115 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2125_recursiveGen;
                    bool _2126_recOwned;
                    bool _2127_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2128_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2125_recursiveGen = _out1355;
                    _2126_recOwned = _out1356;
                    _2127_recErased = _out1357;
                    _2128_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2125_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2126_recOwned;
                    isErased = _2127_recErased;
                    readIdents = _2128_recIdents;
                  }
                } else if (_source69.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2129___mcc_h1117 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2130_recursiveGen;
                    bool _2131_recOwned;
                    bool _2132_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2133_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1359;
                    bool _out1360;
                    bool _out1361;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                    DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                    _2130_recursiveGen = _out1359;
                    _2131_recOwned = _out1360;
                    _2132_recErased = _out1361;
                    _2133_recIdents = _out1362;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2130_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2131_recOwned;
                    isErased = _2132_recErased;
                    readIdents = _2133_recIdents;
                  }
                } else {
                  DAST._IType _2134___mcc_h1119 = _source69.dtor_Newtype_a0;
                  DAST._IType _2135_b = _2134___mcc_h1119;
                  {
                    if (object.Equals(_660_fromTpe, _2135_b)) {
                      Dafny.ISequence<Dafny.Rune> _2136_recursiveGen;
                      bool _2137_recOwned;
                      bool _2138_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2139_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1363;
                      bool _out1364;
                      bool _out1365;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                      DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1363, out _out1364, out _out1365, out _out1366);
                      _2136_recursiveGen = _out1363;
                      _2137_recOwned = _out1364;
                      _2138_recErased = _out1365;
                      _2139_recIdents = _out1366;
                      Dafny.ISequence<Dafny.Rune> _2140_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1367;
                      _out1367 = DCOMP.COMP.GenType(_659_toTpe, true, false);
                      _2140_rhsType = _out1367;
                      Dafny.ISequence<Dafny.Rune> _2141_uneraseFn;
                      _2141_uneraseFn = ((_2137_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2140_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2141_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2136_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2137_recOwned;
                      isErased = false;
                      readIdents = _2139_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1368;
                      bool _out1369;
                      bool _out1370;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_661_expr, _660_fromTpe, _2135_b), _2135_b, _659_toTpe), selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                      s = _out1368;
                      isOwned = _out1369;
                      isErased = _out1370;
                      readIdents = _out1371;
                    }
                  }
                }
              } else if (_source68.is_Nullable) {
                DAST._IType _2142___mcc_h1121 = _source68.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2143_recursiveGen;
                  bool _2144_recOwned;
                  bool _2145_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2146_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1372;
                  bool _out1373;
                  bool _out1374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                  _2143_recursiveGen = _out1372;
                  _2144_recOwned = _out1373;
                  _2145_recErased = _out1374;
                  _2146_recIdents = _out1375;
                  if (!(_2144_recOwned)) {
                    _2143_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2143_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2145_recErased;
                  readIdents = _2146_recIdents;
                }
              } else if (_source68.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2147___mcc_h1123 = _source68.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2148_recursiveGen;
                  bool _2149_recOwned;
                  bool _2150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1376;
                  bool _out1377;
                  bool _out1378;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                  _2148_recursiveGen = _out1376;
                  _2149_recOwned = _out1377;
                  _2150_recErased = _out1378;
                  _2151_recIdents = _out1379;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2149_recOwned;
                  isErased = _2150_recErased;
                  readIdents = _2151_recIdents;
                }
              } else if (_source68.is_Array) {
                DAST._IType _2152___mcc_h1125 = _source68.dtor_element;
                BigInteger _2153___mcc_h1126 = _source68.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2154_recursiveGen;
                  bool _2155_recOwned;
                  bool _2156_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2157_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1380;
                  bool _out1381;
                  bool _out1382;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1380, out _out1381, out _out1382, out _out1383);
                  _2154_recursiveGen = _out1380;
                  _2155_recOwned = _out1381;
                  _2156_recErased = _out1382;
                  _2157_recIdents = _out1383;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2154_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2155_recOwned;
                  isErased = _2156_recErased;
                  readIdents = _2157_recIdents;
                }
              } else if (_source68.is_Seq) {
                DAST._IType _2158___mcc_h1129 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2159_recursiveGen;
                  bool _2160_recOwned;
                  bool _2161_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2162_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1384;
                  bool _out1385;
                  bool _out1386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1384, out _out1385, out _out1386, out _out1387);
                  _2159_recursiveGen = _out1384;
                  _2160_recOwned = _out1385;
                  _2161_recErased = _out1386;
                  _2162_recIdents = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2160_recOwned;
                  isErased = _2161_recErased;
                  readIdents = _2162_recIdents;
                }
              } else if (_source68.is_Set) {
                DAST._IType _2163___mcc_h1131 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2164_recursiveGen;
                  bool _2165_recOwned;
                  bool _2166_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2167_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2164_recursiveGen = _out1388;
                  _2165_recOwned = _out1389;
                  _2166_recErased = _out1390;
                  _2167_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2164_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2165_recOwned;
                  isErased = _2166_recErased;
                  readIdents = _2167_recIdents;
                }
              } else if (_source68.is_Multiset) {
                DAST._IType _2168___mcc_h1133 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2169_recursiveGen;
                  bool _2170_recOwned;
                  bool _2171_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2172_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1392;
                  bool _out1393;
                  bool _out1394;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                  _2169_recursiveGen = _out1392;
                  _2170_recOwned = _out1393;
                  _2171_recErased = _out1394;
                  _2172_recIdents = _out1395;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2169_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2170_recOwned;
                  isErased = _2171_recErased;
                  readIdents = _2172_recIdents;
                }
              } else if (_source68.is_Map) {
                DAST._IType _2173___mcc_h1135 = _source68.dtor_key;
                DAST._IType _2174___mcc_h1136 = _source68.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                  bool _2176_recOwned;
                  bool _2177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1396;
                  bool _out1397;
                  bool _out1398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                  _2175_recursiveGen = _out1396;
                  _2176_recOwned = _out1397;
                  _2177_recErased = _out1398;
                  _2178_recIdents = _out1399;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2176_recOwned;
                  isErased = _2177_recErased;
                  readIdents = _2178_recIdents;
                }
              } else if (_source68.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2179___mcc_h1139 = _source68.dtor_args;
                DAST._IType _2180___mcc_h1140 = _source68.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2181_recursiveGen;
                  bool _2182_recOwned;
                  bool _2183_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2184_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1400;
                  bool _out1401;
                  bool _out1402;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                  _2181_recursiveGen = _out1400;
                  _2182_recOwned = _out1401;
                  _2183_recErased = _out1402;
                  _2184_recIdents = _out1403;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2181_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2182_recOwned;
                  isErased = _2183_recErased;
                  readIdents = _2184_recIdents;
                }
              } else if (_source68.is_Primitive) {
                DAST._IPrimitive _2185___mcc_h1143 = _source68.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2186_recursiveGen;
                  bool _2187_recOwned;
                  bool _2188_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2189_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1404;
                  bool _out1405;
                  bool _out1406;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1404, out _out1405, out _out1406, out _out1407);
                  _2186_recursiveGen = _out1404;
                  _2187_recOwned = _out1405;
                  _2188_recErased = _out1406;
                  _2189_recIdents = _out1407;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2187_recOwned;
                  isErased = _2188_recErased;
                  readIdents = _2189_recIdents;
                }
              } else if (_source68.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2190___mcc_h1145 = _source68.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2191_recursiveGen;
                  bool _2192_recOwned;
                  bool _2193_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2194_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1408;
                  bool _out1409;
                  bool _out1410;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1411;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1408, out _out1409, out _out1410, out _out1411);
                  _2191_recursiveGen = _out1408;
                  _2192_recOwned = _out1409;
                  _2193_recErased = _out1410;
                  _2194_recIdents = _out1411;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2191_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2192_recOwned;
                  isErased = _2193_recErased;
                  readIdents = _2194_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2195___mcc_h1147 = _source68.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2196_recursiveGen;
                  bool _2197_recOwned;
                  bool _2198_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2199_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1412;
                  bool _out1413;
                  bool _out1414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
                  DCOMP.COMP.GenExpr(_661_expr, selfIdent, @params, mustOwn, out _out1412, out _out1413, out _out1414, out _out1415);
                  _2196_recursiveGen = _out1412;
                  _2197_recOwned = _out1413;
                  _2198_recErased = _out1414;
                  _2199_recIdents = _out1415;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2197_recOwned;
                  isErased = _2198_recErased;
                  readIdents = _2199_recIdents;
                }
              }
            }
          }
        }
      } else if (_source20.is_SeqConstruct) {
        DAST._IExpression _2200___mcc_h26 = _source20.dtor_length;
        DAST._IExpression _2201___mcc_h27 = _source20.dtor_elem;
        DAST._IExpression _2202_expr = _2201___mcc_h27;
        DAST._IExpression _2203_length = _2200___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2204_recursiveGen;
          bool _2205___v65;
          bool _2206_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2207_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1416;
          bool _out1417;
          bool _out1418;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
          DCOMP.COMP.GenExpr(_2202_expr, selfIdent, @params, true, out _out1416, out _out1417, out _out1418, out _out1419);
          _2204_recursiveGen = _out1416;
          _2205___v65 = _out1417;
          _2206_eErased = _out1418;
          _2207_recIdents = _out1419;
          Dafny.ISequence<Dafny.Rune> _2208_lengthGen;
          bool _2209___v66;
          bool _2210_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2211_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1420;
          bool _out1421;
          bool _out1422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
          DCOMP.COMP.GenExpr(_2203_length, selfIdent, @params, true, out _out1420, out _out1421, out _out1422, out _out1423);
          _2208_lengthGen = _out1420;
          _2209___v66 = _out1421;
          _2210_lengthErased = _out1422;
          _2211_lengthIdents = _out1423;
          if (!(_2210_lengthErased)) {
            _2208_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2208_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2208_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2207_recIdents, _2211_lengthIdents);
          isOwned = true;
          isErased = _2206_eErased;
        }
      } else if (_source20.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2212___mcc_h28 = _source20.dtor_elements;
        DAST._IType _2213___mcc_h29 = _source20.dtor_typ;
        DAST._IType _2214_typ = _2213___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2215_exprs = _2212___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2216_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1424;
          _out1424 = DCOMP.COMP.GenType(_2214_typ, false, false);
          _2216_genTpe = _out1424;
          BigInteger _2217_i;
          _2217_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2217_i = BigInteger.Zero;
          while ((_2217_i) < (new BigInteger((_2215_exprs).Count))) {
            if ((_2217_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2218_recursiveGen;
            bool _2219___v67;
            bool _2220_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2221_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1425;
            bool _out1426;
            bool _out1427;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
            DCOMP.COMP.GenExpr((_2215_exprs).Select(_2217_i), selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
            _2218_recursiveGen = _out1425;
            _2219___v67 = _out1426;
            _2220_isErased = _out1427;
            _2221_recIdents = _out1428;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2221_recIdents);
            if (_2220_isErased) {
              _2218_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2218_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2218_recursiveGen);
            _2217_i = (_2217_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2216_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2222___mcc_h30 = _source20.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2223_exprs = _2222___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2224_generatedValues;
          _2224_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2225_i;
          _2225_i = BigInteger.Zero;
          bool _2226_allErased;
          _2226_allErased = true;
          while ((_2225_i) < (new BigInteger((_2223_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2227_recursiveGen;
            bool _2228___v68;
            bool _2229_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2230_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1429;
            bool _out1430;
            bool _out1431;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
            DCOMP.COMP.GenExpr((_2223_exprs).Select(_2225_i), selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
            _2227_recursiveGen = _out1429;
            _2228___v68 = _out1430;
            _2229_isErased = _out1431;
            _2230_recIdents = _out1432;
            _2226_allErased = (_2226_allErased) && (_2229_isErased);
            _2224_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2224_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2227_recursiveGen, _2229_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2230_recIdents);
            _2225_i = (_2225_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2225_i = BigInteger.Zero;
          while ((_2225_i) < (new BigInteger((_2224_generatedValues).Count))) {
            if ((_2225_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2231_gen;
            _2231_gen = ((_2224_generatedValues).Select(_2225_i)).dtor__0;
            if ((((_2224_generatedValues).Select(_2225_i)).dtor__1) && (!(_2226_allErased))) {
              _2231_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2231_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2231_gen);
            _2225_i = (_2225_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2226_allErased;
        }
      } else if (_source20.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2232___mcc_h31 = _source20.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2233_mapElems = _2232___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2234_generatedValues;
          _2234_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2235_i;
          _2235_i = BigInteger.Zero;
          bool _2236_allErased;
          _2236_allErased = true;
          while ((_2235_i) < (new BigInteger((_2233_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2237_recursiveGenKey;
            bool _2238___v69;
            bool _2239_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2240_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1433;
            bool _out1434;
            bool _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            DCOMP.COMP.GenExpr(((_2233_mapElems).Select(_2235_i)).dtor__0, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
            _2237_recursiveGenKey = _out1433;
            _2238___v69 = _out1434;
            _2239_isErasedKey = _out1435;
            _2240_recIdentsKey = _out1436;
            Dafny.ISequence<Dafny.Rune> _2241_recursiveGenValue;
            bool _2242___v70;
            bool _2243_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2244_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1437;
            bool _out1438;
            bool _out1439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
            DCOMP.COMP.GenExpr(((_2233_mapElems).Select(_2235_i)).dtor__1, selfIdent, @params, true, out _out1437, out _out1438, out _out1439, out _out1440);
            _2241_recursiveGenValue = _out1437;
            _2242___v70 = _out1438;
            _2243_isErasedValue = _out1439;
            _2244_recIdentsValue = _out1440;
            _2236_allErased = ((_2236_allErased) && (_2239_isErasedKey)) && (_2243_isErasedValue);
            _2234_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2234_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2237_recursiveGenKey, _2241_recursiveGenValue, _2239_isErasedKey, _2243_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2240_recIdentsKey), _2244_recIdentsValue);
            _2235_i = (_2235_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2235_i = BigInteger.Zero;
          while ((_2235_i) < (new BigInteger((_2234_generatedValues).Count))) {
            if ((_2235_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2245_genKey;
            _2245_genKey = ((_2234_generatedValues).Select(_2235_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2246_genValue;
            _2246_genValue = ((_2234_generatedValues).Select(_2235_i)).dtor__1;
            if ((((_2234_generatedValues).Select(_2235_i)).dtor__2) && (!(_2236_allErased))) {
              _2245_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2245_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2234_generatedValues).Select(_2235_i)).dtor__3) && (!(_2236_allErased))) {
              _2246_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2246_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2245_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2246_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2235_i = (_2235_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2236_allErased;
        }
      } else if (_source20.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source70 = selfIdent;
          if (_source70.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2247___mcc_h1149 = _source70.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2248_id = _2247___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2248_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2248_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2248_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2248_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source20.is_Ite) {
        DAST._IExpression _2249___mcc_h32 = _source20.dtor_cond;
        DAST._IExpression _2250___mcc_h33 = _source20.dtor_thn;
        DAST._IExpression _2251___mcc_h34 = _source20.dtor_els;
        DAST._IExpression _2252_f = _2251___mcc_h34;
        DAST._IExpression _2253_t = _2250___mcc_h33;
        DAST._IExpression _2254_cond = _2249___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2255_condString;
          bool _2256___v71;
          bool _2257_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2258_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1441;
          bool _out1442;
          bool _out1443;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
          DCOMP.COMP.GenExpr(_2254_cond, selfIdent, @params, true, out _out1441, out _out1442, out _out1443, out _out1444);
          _2255_condString = _out1441;
          _2256___v71 = _out1442;
          _2257_condErased = _out1443;
          _2258_recIdentsCond = _out1444;
          if (!(_2257_condErased)) {
            _2255_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2255_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2259___v72;
          bool _2260_tHasToBeOwned;
          bool _2261___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2262___v74;
          Dafny.ISequence<Dafny.Rune> _out1445;
          bool _out1446;
          bool _out1447;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
          DCOMP.COMP.GenExpr(_2253_t, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
          _2259___v72 = _out1445;
          _2260_tHasToBeOwned = _out1446;
          _2261___v73 = _out1447;
          _2262___v74 = _out1448;
          Dafny.ISequence<Dafny.Rune> _2263_fString;
          bool _2264_fOwned;
          bool _2265_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2266_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1449;
          bool _out1450;
          bool _out1451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
          DCOMP.COMP.GenExpr(_2252_f, selfIdent, @params, _2260_tHasToBeOwned, out _out1449, out _out1450, out _out1451, out _out1452);
          _2263_fString = _out1449;
          _2264_fOwned = _out1450;
          _2265_fErased = _out1451;
          _2266_recIdentsF = _out1452;
          Dafny.ISequence<Dafny.Rune> _2267_tString;
          bool _2268___v75;
          bool _2269_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2253_t, selfIdent, @params, _2264_fOwned, out _out1453, out _out1454, out _out1455, out _out1456);
          _2267_tString = _out1453;
          _2268___v75 = _out1454;
          _2269_tErased = _out1455;
          _2270_recIdentsT = _out1456;
          if ((!(_2265_fErased)) || (!(_2269_tErased))) {
            if (_2265_fErased) {
              _2263_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2263_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2269_tErased) {
              _2267_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2267_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2255_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2267_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2263_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2264_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2258_recIdentsCond, _2270_recIdentsT), _2266_recIdentsF);
          isErased = (_2265_fErased) || (_2269_tErased);
        }
      } else if (_source20.is_UnOp) {
        DAST._IUnaryOp _2271___mcc_h35 = _source20.dtor_unOp;
        DAST._IExpression _2272___mcc_h36 = _source20.dtor_expr;
        DAST._IUnaryOp _source71 = _2271___mcc_h35;
        if (_source71.is_Not) {
          DAST._IExpression _2273_e = _2272___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2274_recursiveGen;
            bool _2275___v76;
            bool _2276_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2277_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1457;
            bool _out1458;
            bool _out1459;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
            DCOMP.COMP.GenExpr(_2273_e, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
            _2274_recursiveGen = _out1457;
            _2275___v76 = _out1458;
            _2276_recErased = _out1459;
            _2277_recIdents = _out1460;
            if (!(_2276_recErased)) {
              _2274_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2274_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2274_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2277_recIdents;
            isErased = true;
          }
        } else if (_source71.is_BitwiseNot) {
          DAST._IExpression _2278_e = _2272___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2279_recursiveGen;
            bool _2280___v77;
            bool _2281_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2282_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1461;
            bool _out1462;
            bool _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            DCOMP.COMP.GenExpr(_2278_e, selfIdent, @params, true, out _out1461, out _out1462, out _out1463, out _out1464);
            _2279_recursiveGen = _out1461;
            _2280___v77 = _out1462;
            _2281_recErased = _out1463;
            _2282_recIdents = _out1464;
            if (!(_2281_recErased)) {
              _2279_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2282_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2283_e = _2272___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2284_recursiveGen;
            bool _2285_recOwned;
            bool _2286_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2287_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1465;
            bool _out1466;
            bool _out1467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
            DCOMP.COMP.GenExpr(_2283_e, selfIdent, @params, false, out _out1465, out _out1466, out _out1467, out _out1468);
            _2284_recursiveGen = _out1465;
            _2285_recOwned = _out1466;
            _2286_recErased = _out1467;
            _2287_recIdents = _out1468;
            if (!(_2286_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2288_eraseFn;
              _2288_eraseFn = ((_2285_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2284_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2288_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2284_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2284_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2287_recIdents;
            isErased = true;
          }
        }
      } else if (_source20.is_BinOp) {
        DAST._IBinOp _2289___mcc_h37 = _source20.dtor_op;
        DAST._IExpression _2290___mcc_h38 = _source20.dtor_left;
        DAST._IExpression _2291___mcc_h39 = _source20.dtor_right;
        DAST._IExpression _2292_r = _2291___mcc_h39;
        DAST._IExpression _2293_l = _2290___mcc_h38;
        DAST._IBinOp _2294_op = _2289___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2295_left;
          bool _2296___v78;
          bool _2297_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2298_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1469;
          bool _out1470;
          bool _out1471;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
          DCOMP.COMP.GenExpr(_2293_l, selfIdent, @params, true, out _out1469, out _out1470, out _out1471, out _out1472);
          _2295_left = _out1469;
          _2296___v78 = _out1470;
          _2297_leftErased = _out1471;
          _2298_recIdentsL = _out1472;
          Dafny.ISequence<Dafny.Rune> _2299_right;
          bool _2300___v79;
          bool _2301_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1473;
          bool _out1474;
          bool _out1475;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
          DCOMP.COMP.GenExpr(_2292_r, selfIdent, @params, true, out _out1473, out _out1474, out _out1475, out _out1476);
          _2299_right = _out1473;
          _2300___v79 = _out1474;
          _2301_rightErased = _out1475;
          _2302_recIdentsR = _out1476;
          DAST._IBinOp _source72 = _2294_op;
          if (_source72.is_Eq) {
            bool _2303___mcc_h1150 = _source72.dtor_referential;
            bool _2304___mcc_h1151 = _source72.dtor_nullable;
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source73 = _2294_op;
              if (_source73.is_Eq) {
                bool _2305___mcc_h1160 = _source73.dtor_referential;
                bool _2306___mcc_h1161 = _source73.dtor_nullable;
                bool _2307_nullable = _2306___mcc_h1161;
                bool _2308_referential = _2305___mcc_h1160;
                {
                  if (_2308_referential) {
                    if (_2307_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source73.is_Neq) {
                bool _2309___mcc_h1162 = _source73.dtor_referential;
                bool _2310___mcc_h1163 = _source73.dtor_nullable;
                bool _2311_nullable = _2310___mcc_h1163;
                bool _2312_referential = _2309___mcc_h1162;
                {
                  if (_2312_referential) {
                    if (_2311_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source73.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2313___mcc_h1164 = _source73.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2314_op = _2313___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2314_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Neq) {
            bool _2315___mcc_h1154 = _source72.dtor_referential;
            bool _2316___mcc_h1155 = _source72.dtor_nullable;
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source74 = _2294_op;
              if (_source74.is_Eq) {
                bool _2317___mcc_h1165 = _source74.dtor_referential;
                bool _2318___mcc_h1166 = _source74.dtor_nullable;
                bool _2319_nullable = _2318___mcc_h1166;
                bool _2320_referential = _2317___mcc_h1165;
                {
                  if (_2320_referential) {
                    if (_2319_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source74.is_Neq) {
                bool _2321___mcc_h1167 = _source74.dtor_referential;
                bool _2322___mcc_h1168 = _source74.dtor_nullable;
                bool _2323_nullable = _2322___mcc_h1168;
                bool _2324_referential = _2321___mcc_h1167;
                {
                  if (_2324_referential) {
                    if (_2323_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source74.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2325___mcc_h1169 = _source74.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2326_op = _2325___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2326_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Div) {
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source75 = _2294_op;
              if (_source75.is_Eq) {
                bool _2327___mcc_h1170 = _source75.dtor_referential;
                bool _2328___mcc_h1171 = _source75.dtor_nullable;
                bool _2329_nullable = _2328___mcc_h1171;
                bool _2330_referential = _2327___mcc_h1170;
                {
                  if (_2330_referential) {
                    if (_2329_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source75.is_Neq) {
                bool _2331___mcc_h1172 = _source75.dtor_referential;
                bool _2332___mcc_h1173 = _source75.dtor_nullable;
                bool _2333_nullable = _2332___mcc_h1173;
                bool _2334_referential = _2331___mcc_h1172;
                {
                  if (_2334_referential) {
                    if (_2333_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source75.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2335___mcc_h1174 = _source75.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2336_op = _2335___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2336_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianDiv) {
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source76 = _2294_op;
              if (_source76.is_Eq) {
                bool _2337___mcc_h1175 = _source76.dtor_referential;
                bool _2338___mcc_h1176 = _source76.dtor_nullable;
                bool _2339_nullable = _2338___mcc_h1176;
                bool _2340_referential = _2337___mcc_h1175;
                {
                  if (_2340_referential) {
                    if (_2339_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source76.is_Neq) {
                bool _2341___mcc_h1177 = _source76.dtor_referential;
                bool _2342___mcc_h1178 = _source76.dtor_nullable;
                bool _2343_nullable = _2342___mcc_h1178;
                bool _2344_referential = _2341___mcc_h1177;
                {
                  if (_2344_referential) {
                    if (_2343_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source76.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2345___mcc_h1179 = _source76.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2346_op = _2345___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2346_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Mod) {
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source77 = _2294_op;
              if (_source77.is_Eq) {
                bool _2347___mcc_h1180 = _source77.dtor_referential;
                bool _2348___mcc_h1181 = _source77.dtor_nullable;
                bool _2349_nullable = _2348___mcc_h1181;
                bool _2350_referential = _2347___mcc_h1180;
                {
                  if (_2350_referential) {
                    if (_2349_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source77.is_Neq) {
                bool _2351___mcc_h1182 = _source77.dtor_referential;
                bool _2352___mcc_h1183 = _source77.dtor_nullable;
                bool _2353_nullable = _2352___mcc_h1183;
                bool _2354_referential = _2351___mcc_h1182;
                {
                  if (_2354_referential) {
                    if (_2353_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source77.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2355___mcc_h1184 = _source77.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2356_op = _2355___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2356_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianMod) {
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2294_op;
              if (_source78.is_Eq) {
                bool _2357___mcc_h1185 = _source78.dtor_referential;
                bool _2358___mcc_h1186 = _source78.dtor_nullable;
                bool _2359_nullable = _2358___mcc_h1186;
                bool _2360_referential = _2357___mcc_h1185;
                {
                  if (_2360_referential) {
                    if (_2359_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source78.is_Neq) {
                bool _2361___mcc_h1187 = _source78.dtor_referential;
                bool _2362___mcc_h1188 = _source78.dtor_nullable;
                bool _2363_nullable = _2362___mcc_h1188;
                bool _2364_referential = _2361___mcc_h1187;
                {
                  if (_2364_referential) {
                    if (_2363_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2365___mcc_h1189 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2366_op = _2365___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2366_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Implies) {
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2299_right);
            }
          } else if (_source72.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2299_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source72.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source72.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source72.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2367___mcc_h1158 = _source72.dtor_Passthrough_a0;
            {
              if (!(_2297_leftErased)) {
                _2295_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2301_rightErased)) {
                _2299_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source79 = _2294_op;
              if (_source79.is_Eq) {
                bool _2368___mcc_h1190 = _source79.dtor_referential;
                bool _2369___mcc_h1191 = _source79.dtor_nullable;
                bool _2370_nullable = _2369___mcc_h1191;
                bool _2371_referential = _2368___mcc_h1190;
                {
                  if (_2371_referential) {
                    if (_2370_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2299_right);
                  }
                }
              } else if (_source79.is_Neq) {
                bool _2372___mcc_h1192 = _source79.dtor_referential;
                bool _2373___mcc_h1193 = _source79.dtor_nullable;
                bool _2374_nullable = _2373___mcc_h1193;
                bool _2375_referential = _2372___mcc_h1192;
                {
                  if (_2375_referential) {
                    if (_2374_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2295_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2299_right);
                  }
                }
              } else if (_source79.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2376___mcc_h1194 = _source79.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2377_op = _2376___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2377_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2299_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2298_recIdentsL, _2302_recIdentsR);
          isErased = true;
        }
      } else if (_source20.is_ArrayLen) {
        DAST._IExpression _2378___mcc_h40 = _source20.dtor_expr;
        BigInteger _2379___mcc_h41 = _source20.dtor_dim;
        BigInteger _2380_dim = _2379___mcc_h41;
        DAST._IExpression _2381_expr = _2378___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2382_recursiveGen;
          bool _2383___v81;
          bool _2384_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2385_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1477;
          bool _out1478;
          bool _out1479;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
          DCOMP.COMP.GenExpr(_2381_expr, selfIdent, @params, true, out _out1477, out _out1478, out _out1479, out _out1480);
          _2382_recursiveGen = _out1477;
          _2383___v81 = _out1478;
          _2384_recErased = _out1479;
          _2385_recIdents = _out1480;
          if ((_2380_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2382_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2386_i;
            _2386_i = BigInteger.One;
            while ((_2386_i) < (_2380_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2386_i = (_2386_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2382_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2385_recIdents;
          isErased = true;
        }
      } else if (_source20.is_Select) {
        DAST._IExpression _2387___mcc_h42 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2388___mcc_h43 = _source20.dtor_field;
        bool _2389___mcc_h44 = _source20.dtor_isConstant;
        bool _2390___mcc_h45 = _source20.dtor_onDatatype;
        DAST._IExpression _source80 = _2387___mcc_h42;
        if (_source80.is_Literal) {
          DAST._ILiteral _2391___mcc_h46 = _source80.dtor_Literal_a0;
          bool _2392_isDatatype = _2390___mcc_h45;
          bool _2393_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2394_field = _2388___mcc_h43;
          DAST._IExpression _2395_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2396_onString;
            bool _2397_onOwned;
            bool _2398_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2399_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr(_2395_on, selfIdent, @params, false, out _out1481, out _out1482, out _out1483, out _out1484);
            _2396_onString = _out1481;
            _2397_onOwned = _out1482;
            _2398_onErased = _out1483;
            _2399_recIdents = _out1484;
            if ((_2392_isDatatype) || (_2393_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2396_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2394_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2393_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2396_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2394_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2399_recIdents;
          }
        } else if (_source80.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2400___mcc_h48 = _source80.dtor_Ident_a0;
          bool _2401_isDatatype = _2390___mcc_h45;
          bool _2402_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2403_field = _2388___mcc_h43;
          DAST._IExpression _2404_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2405_onString;
            bool _2406_onOwned;
            bool _2407_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2408_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr(_2404_on, selfIdent, @params, false, out _out1485, out _out1486, out _out1487, out _out1488);
            _2405_onString = _out1485;
            _2406_onOwned = _out1486;
            _2407_onErased = _out1487;
            _2408_recIdents = _out1488;
            if ((_2401_isDatatype) || (_2402_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2405_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2403_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2402_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2405_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2403_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2408_recIdents;
          }
        } else if (_source80.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2409___mcc_h50 = _source80.dtor_Companion_a0;
          bool _2410_isDatatype = _2390___mcc_h45;
          bool _2411_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2412_field = _2388___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2413_c = _2409___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2414_onString;
            bool _2415_onOwned;
            bool _2416_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2417_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2413_c), selfIdent, @params, false, out _out1489, out _out1490, out _out1491, out _out1492);
            _2414_onString = _out1489;
            _2415_onOwned = _out1490;
            _2416_onErased = _out1491;
            _2417_recIdents = _out1492;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2414_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2417_recIdents;
          }
        } else if (_source80.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2418___mcc_h52 = _source80.dtor_Tuple_a0;
          bool _2419_isDatatype = _2390___mcc_h45;
          bool _2420_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2421_field = _2388___mcc_h43;
          DAST._IExpression _2422_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2423_onString;
            bool _2424_onOwned;
            bool _2425_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_2422_on, selfIdent, @params, false, out _out1493, out _out1494, out _out1495, out _out1496);
            _2423_onString = _out1493;
            _2424_onOwned = _out1494;
            _2425_onErased = _out1495;
            _2426_recIdents = _out1496;
            if ((_2419_isDatatype) || (_2420_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2423_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2421_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2420_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2423_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2421_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2426_recIdents;
          }
        } else if (_source80.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2427___mcc_h54 = _source80.dtor_path;
          Dafny.ISequence<DAST._IType> _2428___mcc_h55 = _source80.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2429___mcc_h56 = _source80.dtor_args;
          bool _2430_isDatatype = _2390___mcc_h45;
          bool _2431_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2432_field = _2388___mcc_h43;
          DAST._IExpression _2433_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2434_onString;
            bool _2435_onOwned;
            bool _2436_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2437_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1497;
            bool _out1498;
            bool _out1499;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
            DCOMP.COMP.GenExpr(_2433_on, selfIdent, @params, false, out _out1497, out _out1498, out _out1499, out _out1500);
            _2434_onString = _out1497;
            _2435_onOwned = _out1498;
            _2436_onErased = _out1499;
            _2437_recIdents = _out1500;
            if ((_2430_isDatatype) || (_2431_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2434_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2432_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2431_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2434_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2432_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2437_recIdents;
          }
        } else if (_source80.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2438___mcc_h60 = _source80.dtor_dims;
          DAST._IType _2439___mcc_h61 = _source80.dtor_typ;
          bool _2440_isDatatype = _2390___mcc_h45;
          bool _2441_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2442_field = _2388___mcc_h43;
          DAST._IExpression _2443_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2444_onString;
            bool _2445_onOwned;
            bool _2446_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1501;
            bool _out1502;
            bool _out1503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
            DCOMP.COMP.GenExpr(_2443_on, selfIdent, @params, false, out _out1501, out _out1502, out _out1503, out _out1504);
            _2444_onString = _out1501;
            _2445_onOwned = _out1502;
            _2446_onErased = _out1503;
            _2447_recIdents = _out1504;
            if ((_2440_isDatatype) || (_2441_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2444_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2442_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2441_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2444_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2442_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2447_recIdents;
          }
        } else if (_source80.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2448___mcc_h64 = _source80.dtor_path;
          Dafny.ISequence<DAST._IType> _2449___mcc_h65 = _source80.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2450___mcc_h66 = _source80.dtor_variant;
          bool _2451___mcc_h67 = _source80.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2452___mcc_h68 = _source80.dtor_contents;
          bool _2453_isDatatype = _2390___mcc_h45;
          bool _2454_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2455_field = _2388___mcc_h43;
          DAST._IExpression _2456_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2457_onString;
            bool _2458_onOwned;
            bool _2459_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2460_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1505;
            bool _out1506;
            bool _out1507;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
            DCOMP.COMP.GenExpr(_2456_on, selfIdent, @params, false, out _out1505, out _out1506, out _out1507, out _out1508);
            _2457_onString = _out1505;
            _2458_onOwned = _out1506;
            _2459_onErased = _out1507;
            _2460_recIdents = _out1508;
            if ((_2453_isDatatype) || (_2454_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2457_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2455_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2454_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2457_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2455_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2460_recIdents;
          }
        } else if (_source80.is_Convert) {
          DAST._IExpression _2461___mcc_h74 = _source80.dtor_value;
          DAST._IType _2462___mcc_h75 = _source80.dtor_from;
          DAST._IType _2463___mcc_h76 = _source80.dtor_typ;
          bool _2464_isDatatype = _2390___mcc_h45;
          bool _2465_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2466_field = _2388___mcc_h43;
          DAST._IExpression _2467_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2468_onString;
            bool _2469_onOwned;
            bool _2470_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2471_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1509;
            bool _out1510;
            bool _out1511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
            DCOMP.COMP.GenExpr(_2467_on, selfIdent, @params, false, out _out1509, out _out1510, out _out1511, out _out1512);
            _2468_onString = _out1509;
            _2469_onOwned = _out1510;
            _2470_onErased = _out1511;
            _2471_recIdents = _out1512;
            if ((_2464_isDatatype) || (_2465_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2468_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2466_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2465_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2468_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2466_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2471_recIdents;
          }
        } else if (_source80.is_SeqConstruct) {
          DAST._IExpression _2472___mcc_h80 = _source80.dtor_length;
          DAST._IExpression _2473___mcc_h81 = _source80.dtor_elem;
          bool _2474_isDatatype = _2390___mcc_h45;
          bool _2475_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2476_field = _2388___mcc_h43;
          DAST._IExpression _2477_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2478_onString;
            bool _2479_onOwned;
            bool _2480_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2481_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_2477_on, selfIdent, @params, false, out _out1513, out _out1514, out _out1515, out _out1516);
            _2478_onString = _out1513;
            _2479_onOwned = _out1514;
            _2480_onErased = _out1515;
            _2481_recIdents = _out1516;
            if ((_2474_isDatatype) || (_2475_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2478_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2476_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2475_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2478_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2476_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2481_recIdents;
          }
        } else if (_source80.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2482___mcc_h84 = _source80.dtor_elements;
          DAST._IType _2483___mcc_h85 = _source80.dtor_typ;
          bool _2484_isDatatype = _2390___mcc_h45;
          bool _2485_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2486_field = _2388___mcc_h43;
          DAST._IExpression _2487_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2488_onString;
            bool _2489_onOwned;
            bool _2490_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2491_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_2487_on, selfIdent, @params, false, out _out1517, out _out1518, out _out1519, out _out1520);
            _2488_onString = _out1517;
            _2489_onOwned = _out1518;
            _2490_onErased = _out1519;
            _2491_recIdents = _out1520;
            if ((_2484_isDatatype) || (_2485_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2488_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2486_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2485_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2488_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2486_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2491_recIdents;
          }
        } else if (_source80.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2492___mcc_h88 = _source80.dtor_elements;
          bool _2493_isDatatype = _2390___mcc_h45;
          bool _2494_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2495_field = _2388___mcc_h43;
          DAST._IExpression _2496_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2497_onString;
            bool _2498_onOwned;
            bool _2499_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_2496_on, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _2497_onString = _out1521;
            _2498_onOwned = _out1522;
            _2499_onErased = _out1523;
            _2500_recIdents = _out1524;
            if ((_2493_isDatatype) || (_2494_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2494_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2500_recIdents;
          }
        } else if (_source80.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2501___mcc_h90 = _source80.dtor_mapElems;
          bool _2502_isDatatype = _2390___mcc_h45;
          bool _2503_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2504_field = _2388___mcc_h43;
          DAST._IExpression _2505_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2506_onString;
            bool _2507_onOwned;
            bool _2508_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2509_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1525;
            bool _out1526;
            bool _out1527;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
            DCOMP.COMP.GenExpr(_2505_on, selfIdent, @params, false, out _out1525, out _out1526, out _out1527, out _out1528);
            _2506_onString = _out1525;
            _2507_onOwned = _out1526;
            _2508_onErased = _out1527;
            _2509_recIdents = _out1528;
            if ((_2502_isDatatype) || (_2503_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2506_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2504_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2503_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2506_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2504_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2509_recIdents;
          }
        } else if (_source80.is_This) {
          bool _2510_isDatatype = _2390___mcc_h45;
          bool _2511_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2512_field = _2388___mcc_h43;
          DAST._IExpression _2513_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2514_onString;
            bool _2515_onOwned;
            bool _2516_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2517_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1529;
            bool _out1530;
            bool _out1531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
            DCOMP.COMP.GenExpr(_2513_on, selfIdent, @params, false, out _out1529, out _out1530, out _out1531, out _out1532);
            _2514_onString = _out1529;
            _2515_onOwned = _out1530;
            _2516_onErased = _out1531;
            _2517_recIdents = _out1532;
            if ((_2510_isDatatype) || (_2511_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2514_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2512_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2511_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2514_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2512_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2517_recIdents;
          }
        } else if (_source80.is_Ite) {
          DAST._IExpression _2518___mcc_h92 = _source80.dtor_cond;
          DAST._IExpression _2519___mcc_h93 = _source80.dtor_thn;
          DAST._IExpression _2520___mcc_h94 = _source80.dtor_els;
          bool _2521_isDatatype = _2390___mcc_h45;
          bool _2522_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2523_field = _2388___mcc_h43;
          DAST._IExpression _2524_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2525_onString;
            bool _2526_onOwned;
            bool _2527_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2528_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1533;
            bool _out1534;
            bool _out1535;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
            DCOMP.COMP.GenExpr(_2524_on, selfIdent, @params, false, out _out1533, out _out1534, out _out1535, out _out1536);
            _2525_onString = _out1533;
            _2526_onOwned = _out1534;
            _2527_onErased = _out1535;
            _2528_recIdents = _out1536;
            if ((_2521_isDatatype) || (_2522_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2525_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2523_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2522_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2525_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2523_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2528_recIdents;
          }
        } else if (_source80.is_UnOp) {
          DAST._IUnaryOp _2529___mcc_h98 = _source80.dtor_unOp;
          DAST._IExpression _2530___mcc_h99 = _source80.dtor_expr;
          bool _2531_isDatatype = _2390___mcc_h45;
          bool _2532_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2533_field = _2388___mcc_h43;
          DAST._IExpression _2534_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2535_onString;
            bool _2536_onOwned;
            bool _2537_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2538_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_2534_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _2535_onString = _out1537;
            _2536_onOwned = _out1538;
            _2537_onErased = _out1539;
            _2538_recIdents = _out1540;
            if ((_2531_isDatatype) || (_2532_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2535_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2533_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2532_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2535_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2533_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2538_recIdents;
          }
        } else if (_source80.is_BinOp) {
          DAST._IBinOp _2539___mcc_h102 = _source80.dtor_op;
          DAST._IExpression _2540___mcc_h103 = _source80.dtor_left;
          DAST._IExpression _2541___mcc_h104 = _source80.dtor_right;
          bool _2542_isDatatype = _2390___mcc_h45;
          bool _2543_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2544_field = _2388___mcc_h43;
          DAST._IExpression _2545_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2546_onString;
            bool _2547_onOwned;
            bool _2548_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_2545_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _2546_onString = _out1541;
            _2547_onOwned = _out1542;
            _2548_onErased = _out1543;
            _2549_recIdents = _out1544;
            if ((_2542_isDatatype) || (_2543_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2546_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2544_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2543_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2546_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2544_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2549_recIdents;
          }
        } else if (_source80.is_ArrayLen) {
          DAST._IExpression _2550___mcc_h108 = _source80.dtor_expr;
          BigInteger _2551___mcc_h109 = _source80.dtor_dim;
          bool _2552_isDatatype = _2390___mcc_h45;
          bool _2553_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2554_field = _2388___mcc_h43;
          DAST._IExpression _2555_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2556_onString;
            bool _2557_onOwned;
            bool _2558_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2559_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(_2555_on, selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _2556_onString = _out1545;
            _2557_onOwned = _out1546;
            _2558_onErased = _out1547;
            _2559_recIdents = _out1548;
            if ((_2552_isDatatype) || (_2553_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2556_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2554_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2553_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2556_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2554_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2559_recIdents;
          }
        } else if (_source80.is_Select) {
          DAST._IExpression _2560___mcc_h112 = _source80.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2561___mcc_h113 = _source80.dtor_field;
          bool _2562___mcc_h114 = _source80.dtor_isConstant;
          bool _2563___mcc_h115 = _source80.dtor_onDatatype;
          bool _2564_isDatatype = _2390___mcc_h45;
          bool _2565_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2566_field = _2388___mcc_h43;
          DAST._IExpression _2567_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2568_onString;
            bool _2569_onOwned;
            bool _2570_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2571_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_2567_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _2568_onString = _out1549;
            _2569_onOwned = _out1550;
            _2570_onErased = _out1551;
            _2571_recIdents = _out1552;
            if ((_2564_isDatatype) || (_2565_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2568_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2566_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2565_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2568_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2566_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2571_recIdents;
          }
        } else if (_source80.is_SelectFn) {
          DAST._IExpression _2572___mcc_h120 = _source80.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2573___mcc_h121 = _source80.dtor_field;
          bool _2574___mcc_h122 = _source80.dtor_onDatatype;
          bool _2575___mcc_h123 = _source80.dtor_isStatic;
          BigInteger _2576___mcc_h124 = _source80.dtor_arity;
          bool _2577_isDatatype = _2390___mcc_h45;
          bool _2578_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2579_field = _2388___mcc_h43;
          DAST._IExpression _2580_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2581_onString;
            bool _2582_onOwned;
            bool _2583_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2584_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_2580_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _2581_onString = _out1553;
            _2582_onOwned = _out1554;
            _2583_onErased = _out1555;
            _2584_recIdents = _out1556;
            if ((_2577_isDatatype) || (_2578_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2581_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2579_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2578_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2581_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2579_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2584_recIdents;
          }
        } else if (_source80.is_Index) {
          DAST._IExpression _2585___mcc_h130 = _source80.dtor_expr;
          DAST._ICollKind _2586___mcc_h131 = _source80.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2587___mcc_h132 = _source80.dtor_indices;
          bool _2588_isDatatype = _2390___mcc_h45;
          bool _2589_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2590_field = _2388___mcc_h43;
          DAST._IExpression _2591_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2592_onString;
            bool _2593_onOwned;
            bool _2594_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2595_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_2591_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _2592_onString = _out1557;
            _2593_onOwned = _out1558;
            _2594_onErased = _out1559;
            _2595_recIdents = _out1560;
            if ((_2588_isDatatype) || (_2589_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2592_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2589_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2592_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2595_recIdents;
          }
        } else if (_source80.is_IndexRange) {
          DAST._IExpression _2596___mcc_h136 = _source80.dtor_expr;
          bool _2597___mcc_h137 = _source80.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2598___mcc_h138 = _source80.dtor_low;
          DAST._IOptional<DAST._IExpression> _2599___mcc_h139 = _source80.dtor_high;
          bool _2600_isDatatype = _2390___mcc_h45;
          bool _2601_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2602_field = _2388___mcc_h43;
          DAST._IExpression _2603_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2604_onString;
            bool _2605_onOwned;
            bool _2606_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2607_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_2603_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _2604_onString = _out1561;
            _2605_onOwned = _out1562;
            _2606_onErased = _out1563;
            _2607_recIdents = _out1564;
            if ((_2600_isDatatype) || (_2601_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2602_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2601_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2604_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2602_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2607_recIdents;
          }
        } else if (_source80.is_TupleSelect) {
          DAST._IExpression _2608___mcc_h144 = _source80.dtor_expr;
          BigInteger _2609___mcc_h145 = _source80.dtor_index;
          bool _2610_isDatatype = _2390___mcc_h45;
          bool _2611_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2612_field = _2388___mcc_h43;
          DAST._IExpression _2613_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2614_onString;
            bool _2615_onOwned;
            bool _2616_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2617_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_2613_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _2614_onString = _out1565;
            _2615_onOwned = _out1566;
            _2616_onErased = _out1567;
            _2617_recIdents = _out1568;
            if ((_2610_isDatatype) || (_2611_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2614_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2612_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2611_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2614_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2612_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2617_recIdents;
          }
        } else if (_source80.is_Call) {
          DAST._IExpression _2618___mcc_h148 = _source80.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2619___mcc_h149 = _source80.dtor_name;
          Dafny.ISequence<DAST._IType> _2620___mcc_h150 = _source80.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2621___mcc_h151 = _source80.dtor_args;
          bool _2622_isDatatype = _2390___mcc_h45;
          bool _2623_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2624_field = _2388___mcc_h43;
          DAST._IExpression _2625_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2626_onString;
            bool _2627_onOwned;
            bool _2628_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2629_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_2625_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _2626_onString = _out1569;
            _2627_onOwned = _out1570;
            _2628_onErased = _out1571;
            _2629_recIdents = _out1572;
            if ((_2622_isDatatype) || (_2623_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2626_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2624_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2623_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2626_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2624_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2629_recIdents;
          }
        } else if (_source80.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2630___mcc_h156 = _source80.dtor_params;
          DAST._IType _2631___mcc_h157 = _source80.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2632___mcc_h158 = _source80.dtor_body;
          bool _2633_isDatatype = _2390___mcc_h45;
          bool _2634_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2635_field = _2388___mcc_h43;
          DAST._IExpression _2636_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2637_onString;
            bool _2638_onOwned;
            bool _2639_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2640_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_2636_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _2637_onString = _out1573;
            _2638_onOwned = _out1574;
            _2639_onErased = _out1575;
            _2640_recIdents = _out1576;
            if ((_2633_isDatatype) || (_2634_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2637_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2635_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2634_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2637_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2635_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2640_recIdents;
          }
        } else if (_source80.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2641___mcc_h162 = _source80.dtor_values;
          DAST._IType _2642___mcc_h163 = _source80.dtor_retType;
          DAST._IExpression _2643___mcc_h164 = _source80.dtor_expr;
          bool _2644_isDatatype = _2390___mcc_h45;
          bool _2645_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2646_field = _2388___mcc_h43;
          DAST._IExpression _2647_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2648_onString;
            bool _2649_onOwned;
            bool _2650_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2651_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_2647_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _2648_onString = _out1577;
            _2649_onOwned = _out1578;
            _2650_onErased = _out1579;
            _2651_recIdents = _out1580;
            if ((_2644_isDatatype) || (_2645_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2648_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2646_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2645_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2648_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2646_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2651_recIdents;
          }
        } else if (_source80.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2652___mcc_h168 = _source80.dtor_name;
          DAST._IType _2653___mcc_h169 = _source80.dtor_typ;
          DAST._IExpression _2654___mcc_h170 = _source80.dtor_value;
          DAST._IExpression _2655___mcc_h171 = _source80.dtor_iifeBody;
          bool _2656_isDatatype = _2390___mcc_h45;
          bool _2657_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2658_field = _2388___mcc_h43;
          DAST._IExpression _2659_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2660_onString;
            bool _2661_onOwned;
            bool _2662_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2663_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_2659_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _2660_onString = _out1581;
            _2661_onOwned = _out1582;
            _2662_onErased = _out1583;
            _2663_recIdents = _out1584;
            if ((_2656_isDatatype) || (_2657_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2660_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2658_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2657_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2660_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2658_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2663_recIdents;
          }
        } else if (_source80.is_Apply) {
          DAST._IExpression _2664___mcc_h176 = _source80.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2665___mcc_h177 = _source80.dtor_args;
          bool _2666_isDatatype = _2390___mcc_h45;
          bool _2667_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2668_field = _2388___mcc_h43;
          DAST._IExpression _2669_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2670_onString;
            bool _2671_onOwned;
            bool _2672_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2673_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_2669_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _2670_onString = _out1585;
            _2671_onOwned = _out1586;
            _2672_onErased = _out1587;
            _2673_recIdents = _out1588;
            if ((_2666_isDatatype) || (_2667_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2670_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2668_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2667_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2670_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2668_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2673_recIdents;
          }
        } else if (_source80.is_TypeTest) {
          DAST._IExpression _2674___mcc_h180 = _source80.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2675___mcc_h181 = _source80.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2676___mcc_h182 = _source80.dtor_variant;
          bool _2677_isDatatype = _2390___mcc_h45;
          bool _2678_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2679_field = _2388___mcc_h43;
          DAST._IExpression _2680_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2681_onString;
            bool _2682_onOwned;
            bool _2683_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2684_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_2680_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _2681_onString = _out1589;
            _2682_onOwned = _out1590;
            _2683_onErased = _out1591;
            _2684_recIdents = _out1592;
            if ((_2677_isDatatype) || (_2678_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2681_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2679_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2678_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2681_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2679_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2684_recIdents;
          }
        } else if (_source80.is_InitializationValue) {
          DAST._IType _2685___mcc_h186 = _source80.dtor_typ;
          bool _2686_isDatatype = _2390___mcc_h45;
          bool _2687_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2688_field = _2388___mcc_h43;
          DAST._IExpression _2689_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2690_onString;
            bool _2691_onOwned;
            bool _2692_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2693_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_2689_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _2690_onString = _out1593;
            _2691_onOwned = _out1594;
            _2692_onErased = _out1595;
            _2693_recIdents = _out1596;
            if ((_2686_isDatatype) || (_2687_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2690_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2688_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2687_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2690_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2688_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2693_recIdents;
          }
        } else if (_source80.is_BoolBoundedPool) {
          bool _2694_isDatatype = _2390___mcc_h45;
          bool _2695_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2696_field = _2388___mcc_h43;
          DAST._IExpression _2697_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2698_onString;
            bool _2699_onOwned;
            bool _2700_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2701_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_2697_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _2698_onString = _out1597;
            _2699_onOwned = _out1598;
            _2700_onErased = _out1599;
            _2701_recIdents = _out1600;
            if ((_2694_isDatatype) || (_2695_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2698_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2696_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2695_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2698_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2696_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2701_recIdents;
          }
        } else if (_source80.is_SetBoundedPool) {
          DAST._IExpression _2702___mcc_h188 = _source80.dtor_of;
          bool _2703_isDatatype = _2390___mcc_h45;
          bool _2704_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2705_field = _2388___mcc_h43;
          DAST._IExpression _2706_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2707_onString;
            bool _2708_onOwned;
            bool _2709_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2710_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_2706_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _2707_onString = _out1601;
            _2708_onOwned = _out1602;
            _2709_onErased = _out1603;
            _2710_recIdents = _out1604;
            if ((_2703_isDatatype) || (_2704_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2707_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2705_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2704_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2707_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2705_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2710_recIdents;
          }
        } else if (_source80.is_SeqBoundedPool) {
          DAST._IExpression _2711___mcc_h190 = _source80.dtor_of;
          bool _2712___mcc_h191 = _source80.dtor_includeDuplicates;
          bool _2713_isDatatype = _2390___mcc_h45;
          bool _2714_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2715_field = _2388___mcc_h43;
          DAST._IExpression _2716_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2717_onString;
            bool _2718_onOwned;
            bool _2719_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2720_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_2716_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _2717_onString = _out1605;
            _2718_onOwned = _out1606;
            _2719_onErased = _out1607;
            _2720_recIdents = _out1608;
            if ((_2713_isDatatype) || (_2714_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2717_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2715_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2714_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2717_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2715_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2720_recIdents;
          }
        } else {
          DAST._IExpression _2721___mcc_h194 = _source80.dtor_lo;
          DAST._IExpression _2722___mcc_h195 = _source80.dtor_hi;
          bool _2723_isDatatype = _2390___mcc_h45;
          bool _2724_isConstant = _2389___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2725_field = _2388___mcc_h43;
          DAST._IExpression _2726_on = _2387___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2727_onString;
            bool _2728_onOwned;
            bool _2729_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2730_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_2726_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _2727_onString = _out1609;
            _2728_onOwned = _out1610;
            _2729_onErased = _out1611;
            _2730_recIdents = _out1612;
            if ((_2723_isDatatype) || (_2724_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2727_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2725_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2724_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2727_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2725_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2730_recIdents;
          }
        }
      } else if (_source20.is_SelectFn) {
        DAST._IExpression _2731___mcc_h198 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2732___mcc_h199 = _source20.dtor_field;
        bool _2733___mcc_h200 = _source20.dtor_onDatatype;
        bool _2734___mcc_h201 = _source20.dtor_isStatic;
        BigInteger _2735___mcc_h202 = _source20.dtor_arity;
        BigInteger _2736_arity = _2735___mcc_h202;
        bool _2737_isStatic = _2734___mcc_h201;
        bool _2738_isDatatype = _2733___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2739_field = _2732___mcc_h199;
        DAST._IExpression _2740_on = _2731___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2741_onString;
          bool _2742_onOwned;
          bool _2743___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2744_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1613;
          bool _out1614;
          bool _out1615;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
          DCOMP.COMP.GenExpr(_2740_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
          _2741_onString = _out1613;
          _2742_onOwned = _out1614;
          _2743___v82 = _out1615;
          _2744_recIdents = _out1616;
          if (_2737_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2741_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2739_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2741_onString), ((_2742_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2745_args;
            _2745_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2746_i;
            _2746_i = BigInteger.Zero;
            while ((_2746_i) < (_2736_arity)) {
              if ((_2746_i).Sign == 1) {
                _2745_args = Dafny.Sequence<Dafny.Rune>.Concat(_2745_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2745_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2745_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_2746_i));
              _2746_i = (_2746_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2745_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2739_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2745_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2747_typeShape;
          _2747_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2748_i;
          _2748_i = BigInteger.Zero;
          while ((_2748_i) < (_2736_arity)) {
            if ((_2748_i).Sign == 1) {
              _2747_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2747_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2747_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2747_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2748_i = (_2748_i) + (BigInteger.One);
          }
          _2747_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2747_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2747_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2744_recIdents;
        }
      } else if (_source20.is_Index) {
        DAST._IExpression _2749___mcc_h203 = _source20.dtor_expr;
        DAST._ICollKind _2750___mcc_h204 = _source20.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2751___mcc_h205 = _source20.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2752_indices = _2751___mcc_h205;
        DAST._ICollKind _2753_collKind = _2750___mcc_h204;
        DAST._IExpression _2754_on = _2749___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2755_onString;
          bool _2756_onOwned;
          bool _2757_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2758_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1617;
          bool _out1618;
          bool _out1619;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
          DCOMP.COMP.GenExpr(_2754_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
          _2755_onString = _out1617;
          _2756_onOwned = _out1618;
          _2757_onErased = _out1619;
          _2758_recIdents = _out1620;
          readIdents = _2758_recIdents;
          s = _2755_onString;
          BigInteger _2759_i;
          _2759_i = BigInteger.Zero;
          while ((_2759_i) < (new BigInteger((_2752_indices).Count))) {
            if (object.Equals(_2753_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2753_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2760_idx;
              bool _2761_idxOwned;
              bool _2762_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2763_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1621;
              bool _out1622;
              bool _out1623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
              DCOMP.COMP.GenExpr((_2752_indices).Select(_2759_i), selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
              _2760_idx = _out1621;
              _2761_idxOwned = _out1622;
              _2762_idxErased = _out1623;
              _2763_recIdentsIdx = _out1624;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2761_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2760_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2763_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2764_idx;
              bool _2765___v83;
              bool _2766_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1625;
              bool _out1626;
              bool _out1627;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
              DCOMP.COMP.GenExpr((_2752_indices).Select(_2759_i), selfIdent, @params, true, out _out1625, out _out1626, out _out1627, out _out1628);
              _2764_idx = _out1625;
              _2765___v83 = _out1626;
              _2766_idxErased = _out1627;
              _2767_recIdentsIdx = _out1628;
              if (!(_2766_idxErased)) {
                _2764_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2764_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2764_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2767_recIdentsIdx);
            }
            _2759_i = (_2759_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2757_onErased;
        }
      } else if (_source20.is_IndexRange) {
        DAST._IExpression _2768___mcc_h206 = _source20.dtor_expr;
        bool _2769___mcc_h207 = _source20.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2770___mcc_h208 = _source20.dtor_low;
        DAST._IOptional<DAST._IExpression> _2771___mcc_h209 = _source20.dtor_high;
        DAST._IOptional<DAST._IExpression> _2772_high = _2771___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2773_low = _2770___mcc_h208;
        bool _2774_isArray = _2769___mcc_h207;
        DAST._IExpression _2775_on = _2768___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2776_onString;
          bool _2777_onOwned;
          bool _2778_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2779_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1629;
          bool _out1630;
          bool _out1631;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
          DCOMP.COMP.GenExpr(_2775_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
          _2776_onString = _out1629;
          _2777_onOwned = _out1630;
          _2778_onErased = _out1631;
          _2779_recIdents = _out1632;
          readIdents = _2779_recIdents;
          s = _2776_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2780_lowString;
          _2780_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source81 = _2773_low;
          if (_source81.is_Some) {
            DAST._IExpression _2781___mcc_h1195 = _source81.dtor_Some_a0;
            DAST._IExpression _2782_l = _2781___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _2783_lString;
              bool _2784___v84;
              bool _2785_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2786_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1633;
              bool _out1634;
              bool _out1635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
              DCOMP.COMP.GenExpr(_2782_l, selfIdent, @params, true, out _out1633, out _out1634, out _out1635, out _out1636);
              _2783_lString = _out1633;
              _2784___v84 = _out1634;
              _2785_lErased = _out1635;
              _2786_recIdentsL = _out1636;
              if (!(_2785_lErased)) {
                _2783_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2783_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2780_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2783_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2786_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2787_highString;
          _2787_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source82 = _2772_high;
          if (_source82.is_Some) {
            DAST._IExpression _2788___mcc_h1196 = _source82.dtor_Some_a0;
            DAST._IExpression _2789_h = _2788___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _2790_hString;
              bool _2791___v85;
              bool _2792_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2793_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1637;
              bool _out1638;
              bool _out1639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
              DCOMP.COMP.GenExpr(_2789_h, selfIdent, @params, true, out _out1637, out _out1638, out _out1639, out _out1640);
              _2790_hString = _out1637;
              _2791___v85 = _out1638;
              _2792_hErased = _out1639;
              _2793_recIdentsH = _out1640;
              if (!(_2792_hErased)) {
                _2790_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2790_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2787_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2790_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2793_recIdentsH);
            }
          } else {
          }
          if (_2774_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source83) => {
            if (_source83.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2794___mcc_h1197 = _source83.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2795_l = _2794___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2795_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2780_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source84) => {
            if (_source84.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2796___mcc_h1198 = _source84.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2797_h = _2796___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2797_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2787_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2778_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source20.is_TupleSelect) {
        DAST._IExpression _2798___mcc_h210 = _source20.dtor_expr;
        BigInteger _2799___mcc_h211 = _source20.dtor_index;
        BigInteger _2800_idx = _2799___mcc_h211;
        DAST._IExpression _2801_on = _2798___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2802_onString;
          bool _2803___v86;
          bool _2804_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2805_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1641;
          bool _out1642;
          bool _out1643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
          DCOMP.COMP.GenExpr(_2801_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
          _2802_onString = _out1641;
          _2803___v86 = _out1642;
          _2804_tupErased = _out1643;
          _2805_recIdents = _out1644;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2802_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_2800_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2804_tupErased;
          readIdents = _2805_recIdents;
        }
      } else if (_source20.is_Call) {
        DAST._IExpression _2806___mcc_h212 = _source20.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2807___mcc_h213 = _source20.dtor_name;
        Dafny.ISequence<DAST._IType> _2808___mcc_h214 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2809___mcc_h215 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2810_args = _2809___mcc_h215;
        Dafny.ISequence<DAST._IType> _2811_typeArgs = _2808___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2812_name = _2807___mcc_h213;
        DAST._IExpression _2813_on = _2806___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2814_typeArgString;
          _2814_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2811_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2815_typeI;
            _2815_typeI = BigInteger.Zero;
            _2814_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2815_typeI) < (new BigInteger((_2811_typeArgs).Count))) {
              if ((_2815_typeI).Sign == 1) {
                _2814_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2814_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2816_typeString;
              Dafny.ISequence<Dafny.Rune> _out1645;
              _out1645 = DCOMP.COMP.GenType((_2811_typeArgs).Select(_2815_typeI), false, false);
              _2816_typeString = _out1645;
              _2814_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2814_typeArgString, _2816_typeString);
              _2815_typeI = (_2815_typeI) + (BigInteger.One);
            }
            _2814_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2814_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2817_argString;
          _2817_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2818_i;
          _2818_i = BigInteger.Zero;
          while ((_2818_i) < (new BigInteger((_2810_args).Count))) {
            if ((_2818_i).Sign == 1) {
              _2817_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2817_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2819_argExpr;
            bool _2820_isOwned;
            bool _2821_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2822_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr((_2810_args).Select(_2818_i), selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _2819_argExpr = _out1646;
            _2820_isOwned = _out1647;
            _2821_argErased = _out1648;
            _2822_argIdents = _out1649;
            if (_2820_isOwned) {
              _2819_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2819_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2821_argErased)) {
              _2819_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2819_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2819_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2819_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2817_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2817_argString, _2819_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2822_argIdents);
            _2818_i = (_2818_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2823_enclosingString;
          bool _2824___v87;
          bool _2825___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2826_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_2813_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _2823_enclosingString = _out1650;
          _2824___v87 = _out1651;
          _2825___v88 = _out1652;
          _2826_recIdents = _out1653;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2826_recIdents);
          DAST._IExpression _source85 = _2813_on;
          if (_source85.is_Literal) {
            DAST._ILiteral _2827___mcc_h1199 = _source85.dtor_Literal_a0;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2828___mcc_h1201 = _source85.dtor_Ident_a0;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2829___mcc_h1203 = _source85.dtor_Companion_a0;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2823_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2830___mcc_h1205 = _source85.dtor_Tuple_a0;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2831___mcc_h1207 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2832___mcc_h1208 = _source85.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2833___mcc_h1209 = _source85.dtor_args;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2834___mcc_h1213 = _source85.dtor_dims;
            DAST._IType _2835___mcc_h1214 = _source85.dtor_typ;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2836___mcc_h1217 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2837___mcc_h1218 = _source85.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2838___mcc_h1219 = _source85.dtor_variant;
            bool _2839___mcc_h1220 = _source85.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2840___mcc_h1221 = _source85.dtor_contents;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Convert) {
            DAST._IExpression _2841___mcc_h1227 = _source85.dtor_value;
            DAST._IType _2842___mcc_h1228 = _source85.dtor_from;
            DAST._IType _2843___mcc_h1229 = _source85.dtor_typ;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_SeqConstruct) {
            DAST._IExpression _2844___mcc_h1233 = _source85.dtor_length;
            DAST._IExpression _2845___mcc_h1234 = _source85.dtor_elem;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2846___mcc_h1237 = _source85.dtor_elements;
            DAST._IType _2847___mcc_h1238 = _source85.dtor_typ;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2848___mcc_h1241 = _source85.dtor_elements;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2849___mcc_h1243 = _source85.dtor_mapElems;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_This) {
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Ite) {
            DAST._IExpression _2850___mcc_h1245 = _source85.dtor_cond;
            DAST._IExpression _2851___mcc_h1246 = _source85.dtor_thn;
            DAST._IExpression _2852___mcc_h1247 = _source85.dtor_els;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_UnOp) {
            DAST._IUnaryOp _2853___mcc_h1251 = _source85.dtor_unOp;
            DAST._IExpression _2854___mcc_h1252 = _source85.dtor_expr;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_BinOp) {
            DAST._IBinOp _2855___mcc_h1255 = _source85.dtor_op;
            DAST._IExpression _2856___mcc_h1256 = _source85.dtor_left;
            DAST._IExpression _2857___mcc_h1257 = _source85.dtor_right;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_ArrayLen) {
            DAST._IExpression _2858___mcc_h1261 = _source85.dtor_expr;
            BigInteger _2859___mcc_h1262 = _source85.dtor_dim;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Select) {
            DAST._IExpression _2860___mcc_h1265 = _source85.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2861___mcc_h1266 = _source85.dtor_field;
            bool _2862___mcc_h1267 = _source85.dtor_isConstant;
            bool _2863___mcc_h1268 = _source85.dtor_onDatatype;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_SelectFn) {
            DAST._IExpression _2864___mcc_h1273 = _source85.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2865___mcc_h1274 = _source85.dtor_field;
            bool _2866___mcc_h1275 = _source85.dtor_onDatatype;
            bool _2867___mcc_h1276 = _source85.dtor_isStatic;
            BigInteger _2868___mcc_h1277 = _source85.dtor_arity;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Index) {
            DAST._IExpression _2869___mcc_h1283 = _source85.dtor_expr;
            DAST._ICollKind _2870___mcc_h1284 = _source85.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2871___mcc_h1285 = _source85.dtor_indices;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_IndexRange) {
            DAST._IExpression _2872___mcc_h1289 = _source85.dtor_expr;
            bool _2873___mcc_h1290 = _source85.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2874___mcc_h1291 = _source85.dtor_low;
            DAST._IOptional<DAST._IExpression> _2875___mcc_h1292 = _source85.dtor_high;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_TupleSelect) {
            DAST._IExpression _2876___mcc_h1297 = _source85.dtor_expr;
            BigInteger _2877___mcc_h1298 = _source85.dtor_index;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Call) {
            DAST._IExpression _2878___mcc_h1301 = _source85.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2879___mcc_h1302 = _source85.dtor_name;
            Dafny.ISequence<DAST._IType> _2880___mcc_h1303 = _source85.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2881___mcc_h1304 = _source85.dtor_args;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2882___mcc_h1309 = _source85.dtor_params;
            DAST._IType _2883___mcc_h1310 = _source85.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2884___mcc_h1311 = _source85.dtor_body;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2885___mcc_h1315 = _source85.dtor_values;
            DAST._IType _2886___mcc_h1316 = _source85.dtor_retType;
            DAST._IExpression _2887___mcc_h1317 = _source85.dtor_expr;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2888___mcc_h1321 = _source85.dtor_name;
            DAST._IType _2889___mcc_h1322 = _source85.dtor_typ;
            DAST._IExpression _2890___mcc_h1323 = _source85.dtor_value;
            DAST._IExpression _2891___mcc_h1324 = _source85.dtor_iifeBody;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_Apply) {
            DAST._IExpression _2892___mcc_h1329 = _source85.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2893___mcc_h1330 = _source85.dtor_args;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_TypeTest) {
            DAST._IExpression _2894___mcc_h1333 = _source85.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2895___mcc_h1334 = _source85.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2896___mcc_h1335 = _source85.dtor_variant;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_InitializationValue) {
            DAST._IType _2897___mcc_h1339 = _source85.dtor_typ;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_BoolBoundedPool) {
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_SetBoundedPool) {
            DAST._IExpression _2898___mcc_h1341 = _source85.dtor_of;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else if (_source85.is_SeqBoundedPool) {
            DAST._IExpression _2899___mcc_h1343 = _source85.dtor_of;
            bool _2900___mcc_h1344 = _source85.dtor_includeDuplicates;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          } else {
            DAST._IExpression _2901___mcc_h1347 = _source85.dtor_lo;
            DAST._IExpression _2902___mcc_h1348 = _source85.dtor_hi;
            {
              _2823_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2823_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2812_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2823_enclosingString, _2814_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2817_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _2903___mcc_h216 = _source20.dtor_params;
        DAST._IType _2904___mcc_h217 = _source20.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _2905___mcc_h218 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2906_body = _2905___mcc_h218;
        DAST._IType _2907_retType = _2904___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _2908_params = _2903___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2909_paramNames;
          _2909_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2910_i;
          _2910_i = BigInteger.Zero;
          while ((_2910_i) < (new BigInteger((_2908_params).Count))) {
            _2909_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2909_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_2908_params).Select(_2910_i)).dtor_name));
            _2910_i = (_2910_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2911_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2912_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1655;
          DCOMP.COMP.GenStmts(_2906_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _2909_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1654, out _out1655);
          _2911_recursiveGen = _out1654;
          _2912_recIdents = _out1655;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2913_allReadCloned;
          _2913_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_2912_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _2914_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_2912_recIdents).Elements) {
              _2914_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_2912_recIdents).Contains(_2914_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_2914_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _2913_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_2913_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_2909_paramNames).Contains(_2914_next))) {
              _2913_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2913_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2914_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2914_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2914_next));
            }
            _2912_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2912_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2914_next));
          }
          Dafny.ISequence<Dafny.Rune> _2915_paramsString;
          _2915_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _2916_paramTypes;
          _2916_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2910_i = BigInteger.Zero;
          while ((_2910_i) < (new BigInteger((_2908_params).Count))) {
            if ((_2910_i).Sign == 1) {
              _2915_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2915_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _2916_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_2916_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2917_typStr;
            Dafny.ISequence<Dafny.Rune> _out1656;
            _out1656 = DCOMP.COMP.GenType(((_2908_params).Select(_2910_i)).dtor_typ, false, true);
            _2917_typStr = _out1656;
            _2915_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2915_paramsString, ((_2908_params).Select(_2910_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _2917_typStr);
            _2916_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2916_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _2917_typStr);
            _2910_i = (_2910_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2918_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1657;
          _out1657 = DCOMP.COMP.GenType(_2907_retType, false, true);
          _2918_retTypeGen = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _2916_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _2918_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _2913_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _2915_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _2918_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2911_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2919___mcc_h219 = _source20.dtor_values;
        DAST._IType _2920___mcc_h220 = _source20.dtor_retType;
        DAST._IExpression _2921___mcc_h221 = _source20.dtor_expr;
        DAST._IExpression _2922_expr = _2921___mcc_h221;
        DAST._IType _2923_retType = _2920___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2924_values = _2919___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2925_paramNames;
          _2925_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2926_paramNamesSet;
          _2926_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2927_i;
          _2927_i = BigInteger.Zero;
          while ((_2927_i) < (new BigInteger((_2924_values).Count))) {
            _2925_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2925_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2924_values).Select(_2927_i)).dtor__0).dtor_name));
            _2926_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2926_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2924_values).Select(_2927_i)).dtor__0).dtor_name));
            _2927_i = (_2927_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _2928_paramsString;
          _2928_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2927_i = BigInteger.Zero;
          while ((_2927_i) < (new BigInteger((_2924_values).Count))) {
            if ((_2927_i).Sign == 1) {
              _2928_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2928_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2929_typStr;
            Dafny.ISequence<Dafny.Rune> _out1658;
            _out1658 = DCOMP.COMP.GenType((((_2924_values).Select(_2927_i)).dtor__0).dtor_typ, false, true);
            _2929_typStr = _out1658;
            Dafny.ISequence<Dafny.Rune> _2930_valueGen;
            bool _2931___v91;
            bool _2932_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2933_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr(((_2924_values).Select(_2927_i)).dtor__1, selfIdent, @params, true, out _out1659, out _out1660, out _out1661, out _out1662);
            _2930_valueGen = _out1659;
            _2931___v91 = _out1660;
            _2932_valueErased = _out1661;
            _2933_recIdents = _out1662;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_2924_values).Select(_2927_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2929_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2933_recIdents);
            if (_2932_valueErased) {
              _2930_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2930_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2930_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _2927_i = (_2927_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2934_recGen;
          bool _2935_recOwned;
          bool _2936_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2937_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_2922_expr, selfIdent, _2925_paramNames, mustOwn, out _out1663, out _out1664, out _out1665, out _out1666);
          _2934_recGen = _out1663;
          _2935_recOwned = _out1664;
          _2936_recErased = _out1665;
          _2937_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2937_recIdents, _2926_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2934_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _2935_recOwned;
          isErased = _2936_recErased;
        }
      } else if (_source20.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _2938___mcc_h222 = _source20.dtor_name;
        DAST._IType _2939___mcc_h223 = _source20.dtor_typ;
        DAST._IExpression _2940___mcc_h224 = _source20.dtor_value;
        DAST._IExpression _2941___mcc_h225 = _source20.dtor_iifeBody;
        DAST._IExpression _2942_iifeBody = _2941___mcc_h225;
        DAST._IExpression _2943_value = _2940___mcc_h224;
        DAST._IType _2944_tpe = _2939___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _2945_name = _2938___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _2946_valueGen;
          bool _2947___v92;
          bool _2948_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2949_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_2943_value, selfIdent, @params, true, out _out1667, out _out1668, out _out1669, out _out1670);
          _2946_valueGen = _out1667;
          _2947___v92 = _out1668;
          _2948_valueErased = _out1669;
          _2949_recIdents = _out1670;
          if (_2948_valueErased) {
            _2946_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2946_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2949_recIdents;
          Dafny.ISequence<Dafny.Rune> _2950_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1671;
          _out1671 = DCOMP.COMP.GenType(_2944_tpe, false, true);
          _2950_valueTypeGen = _out1671;
          Dafny.ISequence<Dafny.Rune> _2951_bodyGen;
          bool _2952___v93;
          bool _2953_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2954_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_2942_iifeBody, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
          _2951_bodyGen = _out1672;
          _2952___v93 = _out1673;
          _2953_bodyErased = _out1674;
          _2954_bodyIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2954_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2945_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_2945_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2950_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2946_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2951_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _2953_bodyErased;
        }
      } else if (_source20.is_Apply) {
        DAST._IExpression _2955___mcc_h226 = _source20.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2956___mcc_h227 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2957_args = _2956___mcc_h227;
        DAST._IExpression _2958_func = _2955___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _2959_funcString;
          bool _2960___v94;
          bool _2961_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2962_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_2958_func, selfIdent, @params, false, out _out1676, out _out1677, out _out1678, out _out1679);
          _2959_funcString = _out1676;
          _2960___v94 = _out1677;
          _2961_funcErased = _out1678;
          _2962_recIdents = _out1679;
          readIdents = _2962_recIdents;
          Dafny.ISequence<Dafny.Rune> _2963_argString;
          _2963_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2964_i;
          _2964_i = BigInteger.Zero;
          while ((_2964_i) < (new BigInteger((_2957_args).Count))) {
            if ((_2964_i).Sign == 1) {
              _2963_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2963_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2965_argExpr;
            bool _2966_isOwned;
            bool _2967_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2968_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1680;
            bool _out1681;
            bool _out1682;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
            DCOMP.COMP.GenExpr((_2957_args).Select(_2964_i), selfIdent, @params, false, out _out1680, out _out1681, out _out1682, out _out1683);
            _2965_argExpr = _out1680;
            _2966_isOwned = _out1681;
            _2967_argErased = _out1682;
            _2968_argIdents = _out1683;
            if (_2966_isOwned) {
              _2965_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2965_argExpr);
            }
            _2963_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2963_argString, _2965_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2968_argIdents);
            _2964_i = (_2964_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2959_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2963_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_TypeTest) {
        DAST._IExpression _2969___mcc_h228 = _source20.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2970___mcc_h229 = _source20.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _2971___mcc_h230 = _source20.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _2972_variant = _2971___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2973_dType = _2970___mcc_h229;
        DAST._IExpression _2974_on = _2969___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _2975_exprGen;
          bool _2976___v95;
          bool _2977_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2978_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1684;
          bool _out1685;
          bool _out1686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
          DCOMP.COMP.GenExpr(_2974_on, selfIdent, @params, false, out _out1684, out _out1685, out _out1686, out _out1687);
          _2975_exprGen = _out1684;
          _2976___v95 = _out1685;
          _2977_exprErased = _out1686;
          _2978_recIdents = _out1687;
          Dafny.ISequence<Dafny.Rune> _2979_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1688;
          _out1688 = DCOMP.COMP.GenPath(_2973_dType);
          _2979_dTypePath = _out1688;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _2975_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _2979_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2972_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _2978_recIdents;
        }
      } else if (_source20.is_InitializationValue) {
        DAST._IType _2980___mcc_h231 = _source20.dtor_typ;
        DAST._IType _2981_typ = _2980___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _2982_typString;
          Dafny.ISequence<Dafny.Rune> _out1689;
          _out1689 = DCOMP.COMP.GenType(_2981_typ, false, false);
          _2982_typString = _out1689;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2982_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_SetBoundedPool) {
        DAST._IExpression _2983___mcc_h232 = _source20.dtor_of;
        DAST._IExpression _2984_of = _2983___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _2985_exprGen;
          bool _2986___v96;
          bool _2987_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2988_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1690;
          bool _out1691;
          bool _out1692;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
          DCOMP.COMP.GenExpr(_2984_of, selfIdent, @params, false, out _out1690, out _out1691, out _out1692, out _out1693);
          _2985_exprGen = _out1690;
          _2986___v96 = _out1691;
          _2987_exprErased = _out1692;
          _2988_recIdents = _out1693;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2985_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _2987_exprErased;
          readIdents = _2988_recIdents;
        }
      } else if (_source20.is_SeqBoundedPool) {
        DAST._IExpression _2989___mcc_h233 = _source20.dtor_of;
        bool _2990___mcc_h234 = _source20.dtor_includeDuplicates;
        bool _2991_includeDuplicates = _2990___mcc_h234;
        DAST._IExpression _2992_of = _2989___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _2993_exprGen;
          bool _2994___v97;
          bool _2995_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2996_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1694;
          bool _out1695;
          bool _out1696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1697;
          DCOMP.COMP.GenExpr(_2992_of, selfIdent, @params, false, out _out1694, out _out1695, out _out1696, out _out1697);
          _2993_exprGen = _out1694;
          _2994___v97 = _out1695;
          _2995_exprErased = _out1696;
          _2996_recIdents = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2993_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_2991_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _2995_exprErased;
          readIdents = _2996_recIdents;
        }
      } else {
        DAST._IExpression _2997___mcc_h235 = _source20.dtor_lo;
        DAST._IExpression _2998___mcc_h236 = _source20.dtor_hi;
        DAST._IExpression _2999_hi = _2998___mcc_h236;
        DAST._IExpression _3000_lo = _2997___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3001_loString;
          bool _3002___v98;
          bool _3003_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3004_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1698;
          bool _out1699;
          bool _out1700;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1701;
          DCOMP.COMP.GenExpr(_3000_lo, selfIdent, @params, true, out _out1698, out _out1699, out _out1700, out _out1701);
          _3001_loString = _out1698;
          _3002___v98 = _out1699;
          _3003_loErased = _out1700;
          _3004_recIdentsLo = _out1701;
          Dafny.ISequence<Dafny.Rune> _3005_hiString;
          bool _3006___v99;
          bool _3007_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3008_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1702;
          bool _out1703;
          bool _out1704;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
          DCOMP.COMP.GenExpr(_2999_hi, selfIdent, @params, true, out _out1702, out _out1703, out _out1704, out _out1705);
          _3005_hiString = _out1702;
          _3006___v99 = _out1703;
          _3007_hiErased = _out1704;
          _3008_recIdentsHi = _out1705;
          if (!(_3003_loErased)) {
            _3001_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3001_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3007_hiErased)) {
            _3005_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3005_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3001_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3005_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3004_recIdentsLo, _3008_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3009_i;
      _3009_i = BigInteger.Zero;
      while ((_3009_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3010_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1706;
        _out1706 = DCOMP.COMP.GenModule((p).Select(_3009_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3010_generated = _out1706;
        if ((_3009_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3010_generated);
        _3009_i = (_3009_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3011_i;
      _3011_i = BigInteger.Zero;
      while ((_3011_i) < (new BigInteger((fullName).Count))) {
        if ((_3011_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3011_i));
        _3011_i = (_3011_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

