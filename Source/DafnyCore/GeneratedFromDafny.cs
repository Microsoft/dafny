// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), DAM.Syntax.__default.Skip()))), next);
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_String { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_String() {
      return new Pos_String();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_String { get { return this is Pos_String; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_String : Pos {
    public Pos_String() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.String";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_String { get; }
    bool is_LT { get; }
    bool is_Plus { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_String_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a1 { get; }
    DAM.Syntax._IExpr dtor_Plus_a0 { get; }
    DAM.Syntax._IExpr dtor_Plus_a1 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_String(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_String(_a0);
    }
    public static _IExpr create_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_LT(_a0, _a1);
    }
    public static _IExpr create_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_Plus(_a0, _a1);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_String { get { return this is Expr_String; } }
    public bool is_LT { get { return this is Expr_LT; } }
    public bool is_Plus { get { return this is Expr_Plus; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_String_a0 {
      get {
        var d = this;
        return ((Expr_String)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a0 {
      get {
        var d = this;
        return ((Expr_LT)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a1 {
      get {
        var d = this;
        return ((Expr_LT)d)._a1;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a0 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a1 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a1;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_String : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_String(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_String(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_String;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.String";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LT : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LT(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_LT;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.LT";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Plus : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Plus(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Plus;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Plus";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    DAM.Syntax._INeg dtor_oldstart { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, start, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, oldstart, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Stmt_LetCS)d)._start;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM.Syntax._INeg dtor_oldstart {
      get {
        var d = this;
        return ((Stmt_Throw)d)._oldstart;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._start = start;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _start, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._start, oth._start) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._INeg _oldstart;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._oldstart = oldstart;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _oldstart, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._oldstart, oth._oldstart) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._oldstart));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._oldstart);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {

  public partial class __default {
    public static DAM.Machine._IOutput Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Silent(), next);
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_String { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_number { get; }
    Dafny.ISequence<Dafny.Rune> dtor_str { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger number) {
      return new Val_Int(number);
    }
    public static _IVal create_String(Dafny.ISequence<Dafny.Rune> str) {
      return new Val_String(str);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_String { get { return this is Val_String; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_number {
      get {
        var d = this;
        return ((Val_Int)d)._number;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_str {
      get {
        var d = this;
        return ((Val_String)d)._str;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _number;
    public Val_Int(BigInteger number) : base() {
      this._number = number;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_number);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._number == oth._number;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._number));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._number);
      s += ")";
      return s;
    }
  }
  public class Val_String : Val {
    public readonly Dafny.ISequence<Dafny.Rune> _str;
    public Val_String(Dafny.ISequence<Dafny.Rune> str) : base() {
      this._str = str;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_String(_str);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_String;
      return oth != null && object.Equals(this._str, oth._str);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._str));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.String";
      s += "(";
      s += this._str.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IEvent {
    bool is_Silent { get; }
    bool is_Print { get; }
    DAM.Machine._IVal dtor_Print_a0 { get; }
    _IEvent DowncastClone();
  }
  public abstract class Event : _IEvent {
    public Event() {
    }
    private static readonly DAM.Machine._IEvent theDefault = create_Silent();
    public static DAM.Machine._IEvent Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IEvent> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IEvent>(DAM.Machine.Event.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IEvent> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEvent create_Silent() {
      return new Event_Silent();
    }
    public static _IEvent create_Print(DAM.Machine._IVal _a0) {
      return new Event_Print(_a0);
    }
    public bool is_Silent { get { return this is Event_Silent; } }
    public bool is_Print { get { return this is Event_Print; } }
    public DAM.Machine._IVal dtor_Print_a0 {
      get {
        var d = this;
        return ((Event_Print)d)._a0;
      }
    }
    public abstract _IEvent DowncastClone();
  }
  public class Event_Silent : Event {
    public Event_Silent() : base() {
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Silent();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Silent;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Silent";
      return s;
    }
  }
  public class Event_Print : Event {
    public readonly DAM.Machine._IVal _a0;
    public Event_Print(DAM.Machine._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Raise { get; }
    bool is_Terminal { get; }
    DAM.Machine._IEvent dtor_event { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Raise(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return new Output_Raise(@event, next);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Raise { get { return this is Output_Raise; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public DAM.Machine._IEvent dtor_event {
      get {
        var d = this;
        return ((Output_Raise)d)._event;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next {
      get {
        var d = this;
        return ((Output_Raise)d)._next;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Raise : Output {
    public readonly DAM.Machine._IEvent _event;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _next;
    public Output_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) : base() {
      this._event = @event;
      this._next = next;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Raise(_event, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Raise;
      return oth != null && object.Equals(this._event, oth._event) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._event));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Raise";
      s += "(";
      s += Dafny.Helpers.ToString(this._event);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source2.is_String) {
        Dafny.ISequence<Dafny.Rune> _18___mcc_h3 = _source2.dtor_String_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_String());
      } else if (_source2.is_LT) {
        DAM.Syntax._IExpr _19___mcc_h4 = _source2.dtor_LT_a0;
        DAM.Syntax._IExpr _20___mcc_h5 = _source2.dtor_LT_a1;
        DAM.Syntax._IExpr _21_rhs = _20___mcc_h5;
        DAM.Syntax._IExpr _22_lhs = _19___mcc_h4;
        if ((DAM.Statics.__default.CheckExpr(g, _22_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _21_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else if (_source2.is_Plus) {
        DAM.Syntax._IExpr _23___mcc_h6 = _source2.dtor_Plus_a0;
        DAM.Syntax._IExpr _24___mcc_h7 = _source2.dtor_Plus_a1;
        DAM.Syntax._IExpr _25_rhs = _24___mcc_h7;
        DAM.Syntax._IExpr _26_lhs = _23___mcc_h6;
        if ((DAM.Statics.__default.CheckExpr(g, _26_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _25_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else {
        DAM.Syntax._IStmt _27___mcc_h8 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _28_s = _27___mcc_h8;
        DAM.Utils._IOption<DAM.Syntax._INeg> _29_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _28_s);
        if ((_29_valueOrError0).IsFailure()) {
          return (_29_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _30_t = (_29_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_30_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _31___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _32_e = _31___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _33_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _32_e);
        if ((_33_valueOrError0).IsFailure()) {
          return (_33_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _34_t = (_33_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_34_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _35___mcc_h1 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _36___mcc_h2 = _source3.dtor_var__;
        DAM.Syntax._IStmt _37___mcc_h3 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _38_rhs = _37___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _39_var__ = _36___mcc_h2;
        DAM.Syntax._IStmt _40_lhs = _35___mcc_h1;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _40_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _41___mcc_h36 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _41___mcc_h36;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _42___mcc_h38 = _source5.dtor_pos;
            DAM.Syntax._IPos _43_t = _42___mcc_h38;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _39_var__, _43_t), _38_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _44___mcc_h40 = _source5.dtor_dom;
            DAM.Syntax._INeg _45___mcc_h41 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _46___mcc_h44 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _47___mcc_h4 = _source3.dtor_guard;
        DAM.Syntax._IStmt _48___mcc_h5 = _source3.dtor_then__;
        DAM.Syntax._IStmt _49___mcc_h6 = _source3.dtor_else__;
        DAM.Syntax._IStmt _50_else__ = _49___mcc_h6;
        DAM.Syntax._IStmt _51_then__ = _48___mcc_h5;
        DAM.Syntax._IExpr _52_guard = _47___mcc_h4;
        if (DAM.Statics.__default.CheckExpr(g, _52_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _53_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _51_then__);
          if ((_53_valueOrError1).IsFailure()) {
            return (_53_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _54_t = (_53_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _50_else__, _54_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_54_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _55___mcc_h7 = _source3.dtor_bound;
        DAM.Syntax._IPos _56___mcc_h8 = _source3.dtor_dom;
        DAM.Syntax._IStmt _57___mcc_h9 = _source3.dtor_body;
        DAM.Syntax._IStmt _58_body = _57___mcc_h9;
        DAM.Syntax._IPos _59_dom = _56___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _60_bound = _55___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _61_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _60_bound, _59_dom), _58_body);
        if ((_61_valueOrError2).IsFailure()) {
          return (_61_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _62_cod = (_61_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_59_dom, _62_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _63___mcc_h10 = _source3.dtor_func;
        DAM.Syntax._IExpr _64___mcc_h11 = _source3.dtor_arg;
        DAM.Syntax._IExpr _65_arg = _64___mcc_h11;
        DAM.Syntax._IStmt _66_func = _63___mcc_h10;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _66_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _67___mcc_h46 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _67___mcc_h46;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _68___mcc_h48 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _69___mcc_h50 = _source7.dtor_dom;
            DAM.Syntax._INeg _70___mcc_h51 = _source7.dtor_cod;
            DAM.Syntax._INeg _71_cod = _70___mcc_h51;
            DAM.Syntax._IPos _72_dom = _69___mcc_h50;
            if (DAM.Statics.__default.CheckExpr(g, _65_arg, _72_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_71_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _73___mcc_h54 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _74___mcc_h12 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _75_fields = _74___mcc_h12;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _76_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_77_fields, _78_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_77_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _79_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_77_fields).Contains(_79_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_79_lbl, DAM.Statics.__default.SynthStmt(_78_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_77_fields, _79_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_75_fields, g));
        if ((_76_valueOrError4).IsFailure()) {
          return (_76_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _80_fields = (_76_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_80_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _81___mcc_h13 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _82___mcc_h14 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _83_lbl = _82___mcc_h14;
        DAM.Syntax._IStmt _84_record = _81___mcc_h13;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _84_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _85___mcc_h56 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _85___mcc_h56;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _86___mcc_h58 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _87___mcc_h60 = _source9.dtor_dom;
            DAM.Syntax._INeg _88___mcc_h61 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _89___mcc_h64 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _90_fields = _89___mcc_h64;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_90_fields, _83_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _91___mcc_h15 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _92_expr = _91___mcc_h15;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _92_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _93___mcc_h66 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _93___mcc_h66;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _94___mcc_h68 = _source11.dtor_neg;
            DAM.Syntax._INeg _95_t = _94___mcc_h68;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_95_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _96___mcc_h70 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _97___mcc_h72 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _98___mcc_h16 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _99___mcc_h17 = _source3.dtor_var__;
        DAM.Syntax._IStmt _100___mcc_h18 = _source3.dtor_next;
        DAM.Syntax._IStmt _101_next = _100___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _102_var__ = _99___mcc_h17;
        DAM.Syntax._IExpr _103_init = _98___mcc_h16;
        DAM.Utils._IOption<DAM.Syntax._IPos> _104_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _103_init);
        if ((_104_valueOrError5).IsFailure()) {
          return (_104_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _105_t = (_104_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _102_var__, DAM.Syntax.Pos.create_Ref(_105_t)), _101_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _106___mcc_h19 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _107___mcc_h20 = _source3.dtor_var__;
        DAM.Syntax._IStmt _108___mcc_h21 = _source3.dtor_next;
        DAM.Syntax._IStmt _109_next = _108___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _110_var__ = _107___mcc_h20;
        DAM.Syntax._IExpr _111_ref = _106___mcc_h19;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _111_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _112___mcc_h74 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _112___mcc_h74;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _113___mcc_h76 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _114___mcc_h78 = _source13.dtor_ref;
            DAM.Syntax._IPos _115_t = _114___mcc_h78;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _110_var__, _115_t), _109_next);
          } else {
            DAM.Syntax._INeg _116___mcc_h80 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _117___mcc_h22 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _118___mcc_h23 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _119___mcc_h24 = _source3.dtor_next;
        DAM.Syntax._IStmt _120_next = _119___mcc_h24;
        DAM.Syntax._IExpr _121_rhs = _118___mcc_h23;
        DAM.Syntax._IExpr _122_lhs = _117___mcc_h22;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _122_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _123___mcc_h82 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _123___mcc_h82;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _124___mcc_h84 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _125___mcc_h86 = _source15.dtor_ref;
            DAM.Syntax._IPos _126_t = _125___mcc_h86;
            if (DAM.Statics.__default.CheckExpr(g, _121_rhs, _126_t)) {
              return DAM.Statics.__default.SynthStmt(g, _120_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _127___mcc_h88 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _128___mcc_h25 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _129___mcc_h26 = _source3.dtor_next;
        DAM.Syntax._IStmt _130_next = _129___mcc_h26;
        DAM.Syntax._IExpr _131_expr = _128___mcc_h25;
        DAM.Utils._IOption<DAM.Syntax._IPos> _132_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _131_expr);
        if ((_132_valueOrError3).IsFailure()) {
          return (_132_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _133___v19 = (_132_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _130_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _134___mcc_h27 = _source3.dtor_bound;
        DAM.Syntax._INeg _135___mcc_h28 = _source3.dtor_fix;
        DAM.Syntax._IStmt _136___mcc_h29 = _source3.dtor_body;
        DAM.Syntax._IStmt _137_body = _136___mcc_h29;
        DAM.Syntax._INeg _138_fix = _135___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _139_self = _134___mcc_h27;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _139_self, DAM.Syntax.Pos.create_Thunk(_138_fix)), _137_body, _138_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_138_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _140___mcc_h30 = _source3.dtor_bound;
        DAM.Syntax._INeg _141___mcc_h31 = _source3.dtor_start;
        DAM.Syntax._IStmt _142___mcc_h32 = _source3.dtor_body;
        DAM.Syntax._IStmt _143_body = _142___mcc_h32;
        DAM.Syntax._INeg _144_start = _141___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _145_bound = _140___mcc_h30;
        return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _145_bound, DAM.Syntax.Pos.create_Stack(_144_start)), _143_body);
      } else {
        DAM.Syntax._IExpr _146___mcc_h33 = _source3.dtor_stack;
        DAM.Syntax._INeg _147___mcc_h34 = _source3.dtor_oldstart;
        DAM.Syntax._IStmt _148___mcc_h35 = _source3.dtor_next;
        DAM.Syntax._IStmt _149_next = _148___mcc_h35;
        DAM.Syntax._INeg _150_oldstart = _147___mcc_h34;
        DAM.Syntax._IExpr _151_stack = _146___mcc_h33;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source16 = DAM.Statics.__default.SynthExpr(g, _151_stack);
        if (_source16.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _152___mcc_h90 = _source16.dtor_value;
          DAM.Syntax._IPos _source17 = _152___mcc_h90;
          if (_source17.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Thunk) {
            DAM.Syntax._INeg _153___mcc_h92 = _source17.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Ref) {
            DAM.Syntax._IPos _154___mcc_h94 = _source17.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _155___mcc_h96 = _source17.dtor_start;
            DAM.Syntax._INeg _156_start = _155___mcc_h96;
            if (DAM.Statics.__default.CheckStmt(g, _149_next, _156_start)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_150_oldstart);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        }
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_157_env, _158_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_157_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _159_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_157_env).Contains(_159_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_159_var__, DAM.Statics.__default.SynthVal(_158_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_157_env, _159_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _160_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _161_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _162_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _160_env);
      if ((_162_valueOrError0).IsFailure()) {
        return (_162_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _163_g = (_162_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_163_g, _161_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _164_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _165_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _166_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _164_env);
      if ((_166_valueOrError0).IsFailure()) {
        return (_166_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _167_g = (_166_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_167_g, _165_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source18 = stack;
      if (_source18.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _168___mcc_h0 = _source18.dtor_top;
        DAM.Machine._IStack _169___mcc_h1 = _source18.dtor_rest;
        DAM.Machine._IFrame _source19 = _168___mcc_h0;
        if (_source19.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _170___mcc_h2 = _source19.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _171___mcc_h3 = _source19.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source20 = _171___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _172___mcc_h4 = _source20.dtor__0;
          DAM.Syntax._IStmt _173___mcc_h5 = _source20.dtor__1;
          DAM.Machine._IStack _174_stack = _169___mcc_h1;
          DAM.Syntax._IStmt _175_rhs = _173___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _176_env = _172___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _177_var__ = _170___mcc_h2;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _178___mcc_h8 = _source21.dtor_pos;
            DAM.Syntax._IPos _179_t = _178___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _180_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _176_env);
            if ((_180_valueOrError0).IsFailure()) {
              return (_180_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _181_g = (_180_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _182_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_181_g, _177_var__, _179_t), _175_rhs);
              if ((_182_valueOrError1).IsFailure()) {
                return (_182_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _183_start = (_182_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _183_start;
                DAM.Machine._IStack _in2 = _174_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _184___mcc_h10 = _source21.dtor_dom;
            DAM.Syntax._INeg _185___mcc_h11 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _186___mcc_h14 = _source21.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source19.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _187___mcc_h6 = _source19.dtor_arg;
          DAM.Machine._IStack _188_stack = _169___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _189_arg = _187___mcc_h6;
          DAM.Syntax._INeg _source22 = start;
          if (_source22.is_Value) {
            DAM.Syntax._IPos _190___mcc_h16 = _source22.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source22.is_Function) {
            DAM.Syntax._IPos _191___mcc_h18 = _source22.dtor_dom;
            DAM.Syntax._INeg _192___mcc_h19 = _source22.dtor_cod;
            DAM.Syntax._INeg _193_cod = _192___mcc_h19;
            DAM.Syntax._IPos _194_dom = _191___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _189_arg, _194_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _193_cod;
              DAM.Machine._IStack _in5 = _188_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _195___mcc_h22 = _source22.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _196___mcc_h7 = _source19.dtor_field;
          DAM.Machine._IStack _197_stack = _169___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _198_lbl = _196___mcc_h7;
          DAM.Syntax._INeg _source23 = start;
          if (_source23.is_Value) {
            DAM.Syntax._IPos _199___mcc_h24 = _source23.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source23.is_Function) {
            DAM.Syntax._IPos _200___mcc_h26 = _source23.dtor_dom;
            DAM.Syntax._INeg _201___mcc_h27 = _source23.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _202___mcc_h30 = _source23.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _203_fields = _202___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _204_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_203_fields, _198_lbl);
            if ((_204_valueOrError2).IsFailure()) {
              return (_204_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _205_start = (_204_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _205_start;
              DAM.Machine._IStack _in8 = _197_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source24 = val;
      if (_source24.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source24.is_Bool) {
        bool _206___mcc_h0 = _source24.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source24.is_Int) {
        BigInteger _207___mcc_h1 = _source24.dtor_number;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source24.is_String) {
        Dafny.ISequence<Dafny.Rune> _208___mcc_h2 = _source24.dtor_str;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_String());
      } else if (_source24.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _209___mcc_h3 = _source24.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source25 = _209___mcc_h3;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _210___mcc_h4 = _source25.dtor__0;
        DAM.Syntax._IStmt _211___mcc_h5 = _source25.dtor__1;
        DAM.Syntax._IStmt _212_stmt = _211___mcc_h5;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _213_env = _210___mcc_h4;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _214_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_215_env, _216_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_215_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _217_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
            if ((_215_env).Contains(_217_var__)) {
              _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_217_var__, DAM.Statics.__default.SynthVal(_216_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_215_env, _217_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
        }))())(_213_env, s));
        if ((_214_valueOrError0).IsFailure()) {
          return (_214_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _218_g = (_214_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _219_valueOrError1 = DAM.Statics.__default.SynthStmt(_218_g, _212_stmt);
          if ((_219_valueOrError1).IsFailure()) {
            return (_219_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _220_t = (_219_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_220_t));
          }
        }
      } else if (_source24.is_Ref) {
        BigInteger _221___mcc_h6 = _source24.dtor_addr;
        BigInteger _222_addr = _221___mcc_h6;
        DAM.Utils._IOption<DAM.Syntax._IPos> _223_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _222_addr);
        if ((_223_valueOrError2).IsFailure()) {
          return (_223_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _224_t = (_223_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_224_t));
        }
      } else {
        DAM.Syntax._INeg _225___mcc_h7 = _source24.dtor_start;
        DAM.Machine._IStack _226___mcc_h8 = _source24.dtor_stack;
        DAM.Machine._IStack _227_stack = _226___mcc_h8;
        DAM.Syntax._INeg _228_start = _225___mcc_h7;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_229_store, _230_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_229_store).Count)), true, (((_forall_var_1) => {
        BigInteger _231_addr = (BigInteger)_forall_var_1;
        return !(((_231_addr).Sign != -1) && ((_231_addr) < (new BigInteger((_229_store).Count)))) || (DAM.Statics.__default.CheckVal(_230_s, (_229_store).Select(_231_addr), (_230_s).Select(_231_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _232_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _233_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _234_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _232_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _235_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _233_stmt);
        if ((_235_valueOrError0).IsFailure()) {
          return (_235_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _236_start = (_235_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _237_valueOrError1 = DAM.Statics.__default.SynthStack(s, _236_start, _234_stack);
          if ((_237_valueOrError1).IsFailure()) {
            return (_237_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _238_end = (_237_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_238_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source26 = @out;
      if (_source26.is_Raise) {
        DAM.Machine._IEvent _239___mcc_h0 = _source26.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _240___mcc_h1 = _source26.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _241_next = _240___mcc_h1;
        return DAM.Statics.__default.CheckInput(s, _241_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _242_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _243_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source27 = _243_expr;
      if (_source27.is_Var) {
        Dafny.ISequence<Dafny.Rune> _244___mcc_h0 = _source27.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _245_x = _244___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_242_env, _245_x);
      } else if (_source27.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source27.is_Bool) {
        bool _246___mcc_h1 = _source27.dtor_Bool_a0;
        bool _247_b = _246___mcc_h1;
        return DAM.Machine.Val.create_Bool(_247_b);
      } else if (_source27.is_Int) {
        BigInteger _248___mcc_h2 = _source27.dtor_Int_a0;
        BigInteger _249_i = _248___mcc_h2;
        return DAM.Machine.Val.create_Int(_249_i);
      } else if (_source27.is_String) {
        Dafny.ISequence<Dafny.Rune> _250___mcc_h3 = _source27.dtor_String_a0;
        Dafny.ISequence<Dafny.Rune> _251_s = _250___mcc_h3;
        return DAM.Machine.Val.create_String(_251_s);
      } else if (_source27.is_LT) {
        DAM.Syntax._IExpr _252___mcc_h4 = _source27.dtor_LT_a0;
        DAM.Syntax._IExpr _253___mcc_h5 = _source27.dtor_LT_a1;
        DAM.Syntax._IExpr _254_rhs = _253___mcc_h5;
        DAM.Syntax._IExpr _255_lhs = _252___mcc_h4;
        BigInteger _256_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _255_lhs))).dtor_number;
        BigInteger _257_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _254_rhs))).dtor_number;
        return DAM.Machine.Val.create_Bool((_256_lhs) < (_257_rhs));
      } else if (_source27.is_Plus) {
        DAM.Syntax._IExpr _258___mcc_h6 = _source27.dtor_Plus_a0;
        DAM.Syntax._IExpr _259___mcc_h7 = _source27.dtor_Plus_a1;
        DAM.Syntax._IExpr _260_rhs = _259___mcc_h7;
        DAM.Syntax._IExpr _261_lhs = _258___mcc_h6;
        BigInteger _262_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _261_lhs))).dtor_number;
        BigInteger _263_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _260_rhs))).dtor_number;
        return DAM.Machine.Val.create_Int((_262_lhs) + (_263_rhs));
      } else {
        DAM.Syntax._IStmt _264___mcc_h8 = _source27.dtor_Thunk_a0;
        DAM.Syntax._IStmt _265_stmt = _264___mcc_h8;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_242_env, _265_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _266_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _267_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _268_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _269_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source28 = _268_stmt;
      if (_source28.is_Pure) {
        DAM.Syntax._IExpr _270___mcc_h0 = _source28.dtor_Pure_a0;
        DAM.Syntax._IExpr _271_expr = _270___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source29 = (_269_stack).Pop();
        if (_source29.is_None) {
          DAM.Machine._IOutput _272_output = DAM.Machine.Output.create_Terminal();
          return _272_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _273___mcc_h36 = _source29.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source30 = _273___mcc_h36;
          DAM.Machine._IFrame _274___mcc_h37 = _source30.dtor__0;
          DAM.Machine._IStack _275___mcc_h38 = _source30.dtor__1;
          DAM.Machine._IFrame _source31 = _274___mcc_h37;
          Dafny.ISequence<Dafny.Rune> _276___mcc_h39 = _source31.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _277___mcc_h40 = _source31.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source32 = _277___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _278___mcc_h41 = _source32.dtor__0;
          DAM.Syntax._IStmt _279___mcc_h42 = _source32.dtor__1;
          DAM.Machine._IStack _280_stack = _275___mcc_h38;
          DAM.Syntax._IStmt _281_rhs = _279___mcc_h42;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _282_env_k = _278___mcc_h41;
          Dafny.ISequence<Dafny.Rune> _283_var__ = _276___mcc_h39;
          DAM.Machine._IVal _284_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _271_expr));
          DAM.Machine._IOutput _285_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_282_env_k, _283_var__, _284_val), _281_rhs), _280_stack));
          return _285_output;
        }
      } else if (_source28.is_Bind) {
        DAM.Syntax._IStmt _286___mcc_h1 = _source28.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _287___mcc_h2 = _source28.dtor_var__;
        DAM.Syntax._IStmt _288___mcc_h3 = _source28.dtor_rhs;
        DAM.Syntax._IStmt _289_rhs = _288___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _290_var__ = _287___mcc_h2;
        DAM.Syntax._IStmt _291_lhs = _286___mcc_h1;
        DAM.Machine._IOutput _292_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _291_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_290_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _289_rhs)), _269_stack)));
        return _292_output;
      } else if (_source28.is_Ite) {
        DAM.Syntax._IExpr _293___mcc_h4 = _source28.dtor_guard;
        DAM.Syntax._IStmt _294___mcc_h5 = _source28.dtor_then__;
        DAM.Syntax._IStmt _295___mcc_h6 = _source28.dtor_else__;
        DAM.Syntax._IStmt _296_else__ = _295___mcc_h6;
        DAM.Syntax._IStmt _297_then__ = _294___mcc_h5;
        DAM.Syntax._IExpr _298_guard = _293___mcc_h4;
        DAM.Machine._IVal _299_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _298_guard));
        DAM.Machine._IOutput _300_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, (((_299_val).dtor_answer) ? (_297_then__) : (_296_else__))), _269_stack));
        return _300_output;
      } else if (_source28.is_Func) {
        Dafny.ISequence<Dafny.Rune> _301___mcc_h7 = _source28.dtor_bound;
        DAM.Syntax._IPos _302___mcc_h8 = _source28.dtor_dom;
        DAM.Syntax._IStmt _303___mcc_h9 = _source28.dtor_body;
        DAM.Syntax._IStmt _304_body = _303___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _305_bound = _301___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source33 = (_269_stack).Pop();
        if (_source33.is_None) {
          DAM.Machine._IOutput _306_output = DAM.Machine.Output.create_Terminal();
          return _306_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _307___mcc_h45 = _source33.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source34 = _307___mcc_h45;
          DAM.Machine._IFrame _308___mcc_h46 = _source34.dtor__0;
          DAM.Machine._IStack _309___mcc_h47 = _source34.dtor__1;
          DAM.Machine._IFrame _source35 = _308___mcc_h46;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _310___mcc_h50 = _source35.dtor_arg;
          DAM.Machine._IStack _311_stack = _309___mcc_h47;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _312_arg = _310___mcc_h50;
          DAM.Machine._IVal _313_val = DAM.Dynamics.__default.Eval(_312_arg);
          DAM.Machine._IOutput _314_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _305_bound, _313_val), _304_body), _311_stack));
          return _314_output;
        }
      } else if (_source28.is_Call) {
        DAM.Syntax._IStmt _315___mcc_h10 = _source28.dtor_func;
        DAM.Syntax._IExpr _316___mcc_h11 = _source28.dtor_arg;
        DAM.Syntax._IExpr _317_arg = _316___mcc_h11;
        DAM.Syntax._IStmt _318_func = _315___mcc_h10;
        DAM.Machine._IOutput _319_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _318_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _317_arg)), _269_stack)));
        return _319_output;
      } else if (_source28.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _320___mcc_h12 = _source28.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _321_fields = _320___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source36 = (_269_stack).Pop();
        if (_source36.is_None) {
          DAM.Machine._IOutput _322_output = DAM.Machine.Output.create_Terminal();
          return _322_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _323___mcc_h52 = _source36.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source37 = _323___mcc_h52;
          DAM.Machine._IFrame _324___mcc_h53 = _source37.dtor__0;
          DAM.Machine._IStack _325___mcc_h54 = _source37.dtor__1;
          DAM.Machine._IFrame _source38 = _324___mcc_h53;
          Dafny.ISequence<Dafny.Rune> _326___mcc_h58 = _source38.dtor_field;
          DAM.Machine._IStack _327_stack = _325___mcc_h54;
          Dafny.ISequence<Dafny.Rune> _328_lbl = _326___mcc_h58;
          DAM.Machine._IOutput _329_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_321_fields, _328_lbl)), _327_stack));
          return _329_output;
        }
      } else if (_source28.is_Select) {
        DAM.Syntax._IStmt _330___mcc_h13 = _source28.dtor_record;
        Dafny.ISequence<Dafny.Rune> _331___mcc_h14 = _source28.dtor_field;
        Dafny.ISequence<Dafny.Rune> _332_field = _331___mcc_h14;
        DAM.Syntax._IStmt _333_record = _330___mcc_h13;
        DAM.Machine._IOutput _334_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _333_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_332_field), _269_stack)));
        return _334_output;
      } else if (_source28.is_Force) {
        DAM.Syntax._IExpr _335___mcc_h15 = _source28.dtor_Force_a0;
        DAM.Syntax._IExpr _336_thunk = _335___mcc_h15;
        DAM.Machine._IVal _337_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _336_thunk));
        DAM.Machine._IOutput _338_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, (_337_val).dtor_closure, _269_stack));
        return _338_output;
      } else if (_source28.is_New) {
        DAM.Syntax._IExpr _339___mcc_h16 = _source28.dtor_init;
        Dafny.ISequence<Dafny.Rune> _340___mcc_h17 = _source28.dtor_var__;
        DAM.Syntax._IStmt _341___mcc_h18 = _source28.dtor_next;
        DAM.Syntax._IStmt _342_next = _341___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _343_var__ = _340___mcc_h17;
        DAM.Syntax._IExpr _344_init = _339___mcc_h16;
        DAM.Machine._IVal _345_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _344_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_266_store, _345_val);
        BigInteger _346_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _347_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _348_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_347_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _343_var__, DAM.Machine.Val.create_Ref(_346_addr)), _342_next), _269_stack));
        return _348_output;
      } else if (_source28.is_Read) {
        DAM.Syntax._IExpr _349___mcc_h19 = _source28.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _350___mcc_h20 = _source28.dtor_var__;
        DAM.Syntax._IStmt _351___mcc_h21 = _source28.dtor_next;
        DAM.Syntax._IStmt _352_next = _351___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _353_var__ = _350___mcc_h20;
        DAM.Syntax._IExpr _354_ref = _349___mcc_h19;
        DAM.Machine._IVal _355_val = (_266_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _354_ref))).dtor_addr);
        DAM.Machine._IOutput _356_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _353_var__, _355_val), _352_next), _269_stack));
        return _356_output;
      } else if (_source28.is_Write) {
        DAM.Syntax._IExpr _357___mcc_h22 = _source28.dtor_lvalue;
        DAM.Syntax._IExpr _358___mcc_h23 = _source28.dtor_rvalue;
        DAM.Syntax._IStmt _359___mcc_h24 = _source28.dtor_next;
        DAM.Syntax._IStmt _360_next = _359___mcc_h24;
        DAM.Syntax._IExpr _361_rhs = _358___mcc_h23;
        DAM.Syntax._IExpr _362_lhs = _357___mcc_h22;
        BigInteger _363_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _362_lhs))).dtor_addr;
        DAM.Machine._IVal _364_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _361_rhs));
        DAM.Machine._IOutput _365_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_266_store, _363_lval, _364_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _360_next), _269_stack));
        return _365_output;
      } else if (_source28.is_Print) {
        DAM.Syntax._IExpr _366___mcc_h25 = _source28.dtor_Print_a0;
        DAM.Syntax._IStmt _367___mcc_h26 = _source28.dtor_next;
        DAM.Syntax._IStmt _368_next = _367___mcc_h26;
        DAM.Syntax._IExpr _369_expr = _366___mcc_h25;
        DAM.Machine._IVal _370_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _369_expr));
        DAM.Machine._IOutput _371_output = DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Print(_370_val), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _368_next), _269_stack));
        return _371_output;
      } else if (_source28.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _372___mcc_h27 = _source28.dtor_bound;
        DAM.Syntax._INeg _373___mcc_h28 = _source28.dtor_fix;
        DAM.Syntax._IStmt _374___mcc_h29 = _source28.dtor_body;
        DAM.Syntax._IStmt _375_body = _374___mcc_h29;
        DAM.Syntax._INeg _376_fix = _373___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _377_self = _372___mcc_h27;
        DAM.Machine._IVal _378_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _268_stmt));
        DAM.Machine._IOutput _379_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _377_self, _378_val), _375_body), _269_stack));
        return _379_output;
      } else if (_source28.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _380___mcc_h30 = _source28.dtor_bound;
        DAM.Syntax._INeg _381___mcc_h31 = _source28.dtor_start;
        DAM.Syntax._IStmt _382___mcc_h32 = _source28.dtor_body;
        DAM.Syntax._IStmt _383_body = _382___mcc_h32;
        DAM.Syntax._INeg _384_start = _381___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _385_bound = _380___mcc_h30;
        DAM.Machine._IOutput _386_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _385_bound, DAM.Machine.Val.create_Stack(_384_start, _269_stack)), _383_body), _269_stack));
        return _386_output;
      } else {
        DAM.Syntax._IExpr _387___mcc_h33 = _source28.dtor_stack;
        DAM.Syntax._INeg _388___mcc_h34 = _source28.dtor_oldstart;
        DAM.Syntax._IStmt _389___mcc_h35 = _source28.dtor_next;
        DAM.Syntax._IStmt _390_next = _389___mcc_h35;
        DAM.Syntax._IExpr _391_expr = _387___mcc_h33;
        DAM.Machine._IVal _392_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _391_expr));
        DAM.Machine._IOutput _393_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _390_next), (_392_val).dtor_stack));
        return _393_output;
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static void PrintVal(DAM.Machine._IVal val) {
      DAM.Machine._IVal _source39 = val;
      if (_source39.is_Unit) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")).ToVerbatimString(false));
      } else if (_source39.is_Bool) {
        bool _394___mcc_h0 = _source39.dtor_answer;
        bool _395_b = _394___mcc_h0;
        Dafny.Helpers.Print((_395_b));
      } else if (_source39.is_Int) {
        BigInteger _396___mcc_h2 = _source39.dtor_number;
        BigInteger _397_i = _396___mcc_h2;
        Dafny.Helpers.Print((_397_i));
      } else if (_source39.is_String) {
        Dafny.ISequence<Dafny.Rune> _398___mcc_h4 = _source39.dtor_str;
        Dafny.ISequence<Dafny.Rune> _399_s = _398___mcc_h4;
        Dafny.Helpers.Print(((_399_s)).ToVerbatimString(false));
      } else if (_source39.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _400___mcc_h6 = _source39.dtor_closure;
        Dafny.Helpers.Print((val));
      } else if (_source39.is_Ref) {
        BigInteger _401___mcc_h8 = _source39.dtor_addr;
        Dafny.Helpers.Print((val));
      } else {
        DAM.Syntax._INeg _402___mcc_h10 = _source39.dtor_start;
        DAM.Machine._IStack _403___mcc_h11 = _source39.dtor_stack;
        Dafny.Helpers.Print((val));
      }
    }
    public static void Interpret(DAM.Syntax._IStmt stmt, bool traced) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _404_endOption;
      _404_endOption = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_404_endOption).is_None) {
        if (traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Statement fails to typecheck.\n")).ToVerbatimString(false));
        }
        return;
      }
      DAM.Syntax._INeg _405_end;
      _405_end = (_404_endOption).Extract();
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _406_input;
      _406_input = DAM.Dynamics.__default.Initial(stmt);
      while (true) {
        DAM.Machine._IOutput _source40 = DAM.Dynamics.__default.Step(_406_input);
        if (_source40.is_Raise) {
          DAM.Machine._IEvent _407___mcc_h0 = _source40.dtor_event;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _408___mcc_h1 = _source40.dtor_next;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _409_output = _408___mcc_h1;
          DAM.Machine._IEvent _410_evt = _407___mcc_h0;
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("event: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_410_evt));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", state: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_409_output));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
          } else {
            DAM.Machine._IEvent _source41 = _410_evt;
            if (_source41.is_Silent) {
            } else {
              DAM.Machine._IVal _411___mcc_h2 = _source41.dtor_Print_a0;
              DAM.Machine._IVal _412_val = _411___mcc_h2;
              DAM.Dynamics.__default.PrintVal(_412_val);
            }
          }
          _406_input = _409_output;
        } else {
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done.\n")).ToVerbatimString(false));
          }
          goto after_0;
        }
      continue_0:;
      }
    after_0:;
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _413_i = BigInteger.Zero; _413_i < _hi0; _413_i++) {
        Dafny.ISequence<Dafny.Rune> _414_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_413_i));
        _414_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _414_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _415_i = BigInteger.Zero; _415_i < _hi1; _415_i++) {
        DAST._IModuleItem _source42 = ((mod).dtor_body).Select(_415_i);
        if (_source42.is_Module) {
          DAST._IModule _416___mcc_h0 = _source42.dtor_Module_a0;
          DAST._IModule _417_m = _416___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _418_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_417_m);
          _418_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _418_s_k);
        } else if (_source42.is_Class) {
          DAST._IClass _419___mcc_h1 = _source42.dtor_Class_a0;
          DAST._IClass _420_c = _419___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _421_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_420_c);
          _421_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _421_s_k);
        } else if (_source42.is_Trait) {
          DAST._ITrait _422___mcc_h2 = _source42.dtor_Trait_a0;
          DAST._ITrait _423_c = _422___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source42.is_Newtype) {
          DAST._INewtype _424___mcc_h3 = _source42.dtor_Newtype_a0;
          DAST._INewtype _425_n = _424___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _426___mcc_h4 = _source42.dtor_Datatype_a0;
          DAST._IDatatype _427_d = _426___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _428_i = BigInteger.Zero; _428_i < _hi2; _428_i++) {
        DAST._IMethod _source43 = ((c).dtor_body).Select(_428_i);
        DAST._IMethod _429___mcc_h0 = _source43;
        DAST._IMethod _430_m = _429___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _431_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_430_m);
        _431_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _431_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _432_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _432_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _432_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _432_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _432_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _433_i = BigInteger.Zero; _433_i < _hi3; _433_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_433_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _434_i = BigInteger.Zero; _434_i < _hi4; _434_i++) {
        Dafny.ISequence<Dafny.Rune> _435_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_434_i));
        _435_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _435_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source44 = st;
      if (_source44.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _436___mcc_h0 = _source44.dtor_name;
        DAST._IType _437___mcc_h1 = _source44.dtor_typ;
        DAST._IOptional<DAST._IExpression> _438___mcc_h2 = _source44.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Assign) {
        DAST._IAssignLhs _439___mcc_h6 = _source44.dtor_lhs;
        DAST._IExpression _440___mcc_h7 = _source44.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_If) {
        DAST._IExpression _441___mcc_h10 = _source44.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _442___mcc_h11 = _source44.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _443___mcc_h12 = _source44.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _444___mcc_h16 = _source44.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _445___mcc_h17 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_While) {
        DAST._IExpression _446___mcc_h20 = _source44.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _447___mcc_h21 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _448___mcc_h24 = _source44.dtor_boundName;
        DAST._IType _449___mcc_h25 = _source44.dtor_boundType;
        DAST._IExpression _450___mcc_h26 = _source44.dtor_over;
        Dafny.ISequence<DAST._IStatement> _451___mcc_h27 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Call) {
        DAST._IExpression _452___mcc_h32 = _source44.dtor_on;
        Dafny.ISequence<Dafny.Rune> _453___mcc_h33 = _source44.dtor_name;
        Dafny.ISequence<DAST._IType> _454___mcc_h34 = _source44.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _455___mcc_h35 = _source44.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _456___mcc_h36 = _source44.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Return) {
        DAST._IExpression _457___mcc_h42 = _source44.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source44.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _458___mcc_h44 = _source44.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _459___mcc_h46 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _460___mcc_h48 = _source44.dtor_Print_a0;
        DAST._IExpression _461_e = _460___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _462_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_461_e);
        _462_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _462_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source45 = e;
      if (_source45.is_Literal) {
        DAST._ILiteral _463___mcc_h0 = _source45.dtor_Literal_a0;
        DAST._ILiteral _464_l = _463___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_464_l);
        s = _out9;
      } else if (_source45.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _465___mcc_h2 = _source45.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _466___mcc_h4 = _source45.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _467___mcc_h6 = _source45.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _468___mcc_h8 = _source45.dtor_path;
        Dafny.ISequence<DAST._IType> _469___mcc_h9 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _470___mcc_h10 = _source45.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _471___mcc_h14 = _source45.dtor_dims;
        DAST._IType _472___mcc_h15 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _473___mcc_h18 = _source45.dtor_path;
        Dafny.ISequence<DAST._IType> _474___mcc_h19 = _source45.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _475___mcc_h20 = _source45.dtor_variant;
        bool _476___mcc_h21 = _source45.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _477___mcc_h22 = _source45.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Convert) {
        DAST._IExpression _478___mcc_h28 = _source45.dtor_value;
        DAST._IType _479___mcc_h29 = _source45.dtor_from;
        DAST._IType _480___mcc_h30 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SeqConstruct) {
        DAST._IExpression _481___mcc_h34 = _source45.dtor_length;
        DAST._IExpression _482___mcc_h35 = _source45.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _483___mcc_h38 = _source45.dtor_elements;
        DAST._IType _484___mcc_h39 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _485___mcc_h42 = _source45.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _486___mcc_h44 = _source45.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Ite) {
        DAST._IExpression _487___mcc_h46 = _source45.dtor_cond;
        DAST._IExpression _488___mcc_h47 = _source45.dtor_thn;
        DAST._IExpression _489___mcc_h48 = _source45.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_UnOp) {
        DAST._IUnaryOp _490___mcc_h52 = _source45.dtor_unOp;
        DAST._IExpression _491___mcc_h53 = _source45.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_BinOp) {
        DAST._IBinOp _492___mcc_h56 = _source45.dtor_op;
        DAST._IExpression _493___mcc_h57 = _source45.dtor_left;
        DAST._IExpression _494___mcc_h58 = _source45.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_ArrayLen) {
        DAST._IExpression _495___mcc_h62 = _source45.dtor_expr;
        BigInteger _496___mcc_h63 = _source45.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Select) {
        DAST._IExpression _497___mcc_h66 = _source45.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _498___mcc_h67 = _source45.dtor_field;
        bool _499___mcc_h68 = _source45.dtor_isConstant;
        bool _500___mcc_h69 = _source45.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SelectFn) {
        DAST._IExpression _501___mcc_h74 = _source45.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _502___mcc_h75 = _source45.dtor_field;
        bool _503___mcc_h76 = _source45.dtor_onDatatype;
        bool _504___mcc_h77 = _source45.dtor_isStatic;
        BigInteger _505___mcc_h78 = _source45.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Index) {
        DAST._IExpression _506___mcc_h84 = _source45.dtor_expr;
        DAST._ICollKind _507___mcc_h85 = _source45.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _508___mcc_h86 = _source45.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_IndexRange) {
        DAST._IExpression _509___mcc_h90 = _source45.dtor_expr;
        bool _510___mcc_h91 = _source45.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _511___mcc_h92 = _source45.dtor_low;
        DAST._IOptional<DAST._IExpression> _512___mcc_h93 = _source45.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_TupleSelect) {
        DAST._IExpression _513___mcc_h98 = _source45.dtor_expr;
        BigInteger _514___mcc_h99 = _source45.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Call) {
        DAST._IExpression _515___mcc_h102 = _source45.dtor_on;
        Dafny.ISequence<Dafny.Rune> _516___mcc_h103 = _source45.dtor_name;
        Dafny.ISequence<DAST._IType> _517___mcc_h104 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _518___mcc_h105 = _source45.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _519___mcc_h110 = _source45.dtor_params;
        DAST._IType _520___mcc_h111 = _source45.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _521___mcc_h112 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _522___mcc_h116 = _source45.dtor_values;
        DAST._IType _523___mcc_h117 = _source45.dtor_retType;
        DAST._IExpression _524___mcc_h118 = _source45.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _525___mcc_h122 = _source45.dtor_name;
        DAST._IType _526___mcc_h123 = _source45.dtor_typ;
        DAST._IExpression _527___mcc_h124 = _source45.dtor_value;
        DAST._IExpression _528___mcc_h125 = _source45.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Apply) {
        DAST._IExpression _529___mcc_h130 = _source45.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _530___mcc_h131 = _source45.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_TypeTest) {
        DAST._IExpression _531___mcc_h134 = _source45.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _532___mcc_h135 = _source45.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _533___mcc_h136 = _source45.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_InitializationValue) {
        DAST._IType _534___mcc_h140 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SetBoundedPool) {
        DAST._IExpression _535___mcc_h142 = _source45.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SeqBoundedPool) {
        DAST._IExpression _536___mcc_h144 = _source45.dtor_of;
        bool _537___mcc_h145 = _source45.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _538___mcc_h148 = _source45.dtor_lo;
        DAST._IExpression _539___mcc_h149 = _source45.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source46 = l;
      if (_source46.is_BoolLiteral) {
        bool _540___mcc_h0 = _source46.dtor_BoolLiteral_a0;
        bool _541_b = _540___mcc_h0;
        s = ((_541_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source46.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _542___mcc_h1 = _source46.dtor_IntLiteral_a0;
        DAST._IType _543___mcc_h2 = _source46.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _544_i = _542___mcc_h1;
        s = _544_i;
      } else if (_source46.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _545___mcc_h3 = _source46.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _546___mcc_h4 = _source46.dtor_DecLiteral_a1;
        DAST._IType _547___mcc_h5 = _source46.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _548_r = _546___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _549_l = _545___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_549_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _548_r);
      } else if (_source46.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _550___mcc_h6 = _source46.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _551_s_k = _550___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _551_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source46.is_CharLiteral) {
        Dafny.Rune _552___mcc_h7 = _source46.dtor_CharLiteral_a0;
        Dafny.Rune _553_c = _552___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_553_c);
      } else {
        DAST._IType _554___mcc_h8 = _source46.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {

  public partial class __default {
    public static DAM.Utils._IOption<BigInteger> ToNat(Dafny.ISequence<Dafny.Rune> str) {
      Dafny.IMap<Dafny.Rune, BigInteger> _555_charToDigit = Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return DAM.Utils.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Dafny.Rune _556_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        DAM.Utils._IOption<BigInteger> _557_valueOrError0 = (((_555_charToDigit).Contains(_556_c)) ? (DAM.Utils.Option<BigInteger>.create_Some(Dafny.Map<Dafny.Rune, BigInteger>.Select(_555_charToDigit, _556_c))) : (DAM.Utils.Option<BigInteger>.create_None()));
        if ((_557_valueOrError0).IsFailure()) {
          return (_557_valueOrError0).PropagateFailure<BigInteger>();
        } else {
          BigInteger _558_d = (_557_valueOrError0).Extract();
          DAM.Utils._IOption<BigInteger> _559_valueOrError1 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)));
          if ((_559_valueOrError1).IsFailure()) {
            return (_559_valueOrError1).PropagateFailure<BigInteger>();
          } else {
            BigInteger _560_rest = (_559_valueOrError1).Extract();
            return DAM.Utils.Option<BigInteger>.create_Some(((_560_rest) * (new BigInteger(10))) + (_558_d));
          }
        }
      }
    }
    public static DAM.Utils._IOption<BigInteger> ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        DAM.Utils._IOption<BigInteger> _source47 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat((str).Drop(BigInteger.One));
        if (_source47.is_None) {
          return DAM.Utils.Option<BigInteger>.create_None();
        } else {
          BigInteger _561___mcc_h0 = _source47.dtor_value;
          BigInteger _562_i = _561___mcc_h0;
          return DAM.Utils.Option<BigInteger>.create_Some((BigInteger.Zero) - (_562_i));
        }
      } else {
        return ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat(str);
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source48 = t;
      if (_source48.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _563___mcc_h0 = _source48.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _564___mcc_h1 = _source48.dtor_typeArgs;
        DAST._IResolvedType _565___mcc_h2 = _source48.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Nullable) {
        DAST._IType _566___mcc_h6 = _source48.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Tuple) {
        Dafny.ISequence<DAST._IType> _567___mcc_h8 = _source48.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Array) {
        DAST._IType _568___mcc_h10 = _source48.dtor_element;
        BigInteger _569___mcc_h11 = _source48.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Seq) {
        DAST._IType _570___mcc_h14 = _source48.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Set) {
        DAST._IType _571___mcc_h16 = _source48.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Multiset) {
        DAST._IType _572___mcc_h18 = _source48.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Map) {
        DAST._IType _573___mcc_h20 = _source48.dtor_key;
        DAST._IType _574___mcc_h21 = _source48.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Arrow) {
        Dafny.ISequence<DAST._IType> _575___mcc_h24 = _source48.dtor_args;
        DAST._IType _576___mcc_h25 = _source48.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Primitive) {
        DAST._IPrimitive _577___mcc_h28 = _source48.dtor_Primitive_a0;
        DAST._IPrimitive _source49 = _577___mcc_h28;
        if (_source49.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source49.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source49.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source49.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source48.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _578___mcc_h30 = _source48.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _579___mcc_h32 = _source48.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public static DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _580_members;
      _580_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi5 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _581_i = BigInteger.Zero; _581_i < _hi5; _581_i++) {
        DAST._IModuleItem _source50 = ((m).dtor_body).Select(_581_i);
        if (_source50.is_Module) {
          DAST._IModule _582___mcc_h0 = _source50.dtor_Module_a0;
          DAST._IModule _583_m = _582___mcc_h0;
          DAM.Syntax._IStmt _584_mod;
          DAM.Syntax._IStmt _out10;
          _out10 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_583_m);
          _584_mod = _out10;
          _580_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_580_members, (_583_m).dtor_name, _584_mod);
        } else if (_source50.is_Class) {
          DAST._IClass _585___mcc_h2 = _source50.dtor_Class_a0;
          DAST._IClass _586_c = _585___mcc_h2;
          DAM.Syntax._IStmt _587_cls;
          DAM.Syntax._IStmt _out11;
          _out11 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_586_c);
          _587_cls = _out11;
          _580_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_580_members, (_586_c).dtor_name, _587_cls);
        } else if (_source50.is_Trait) {
          DAST._ITrait _588___mcc_h4 = _source50.dtor_Trait_a0;
          goto continue_0;
        } else if (_source50.is_Newtype) {
          DAST._INewtype _589___mcc_h6 = _source50.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _590___mcc_h8 = _source50.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_580_members);
      return s;
    }
    public static DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _591_fields;
      _591_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi6 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _592_i = BigInteger.Zero; _592_i < _hi6; _592_i++) {
        DAST._IMethod _source51 = ((c).dtor_body).Select(_592_i);
        DAST._IMethod _593___mcc_h0 = _source51;
        DAST._IMethod _594_m = _593___mcc_h0;
        DAM.Syntax._IStmt _595_meth;
        DAM.Syntax._IStmt _out12;
        _out12 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_594_m);
        _595_meth = _out12;
        _591_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_591_fields, (_594_m).dtor_name, _595_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_591_fields);
      return s;
    }
    public static DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _596_body;
      DAM.Syntax._IStmt _out13;
      _out13 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _596_body = _out13;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), DAM.Syntax.__default.Command(), _596_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source52 = (m).dtor_outVars;
      if (_source52.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _597___mcc_h0 = _source52.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _598_outs = _597___mcc_h0;
        {
          BigInteger _hi7 = new BigInteger((_598_outs).Count);
          for (BigInteger _599_i = BigInteger.Zero; _599_i < _hi7; _599_i++) {
            Dafny.ISequence<Dafny.Rune> _source53 = (_598_outs).Select(((new BigInteger((_598_outs).Count)) - (_599_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _600___mcc_h1 = _source53;
            Dafny.ISequence<Dafny.Rune> _601_ret = _600___mcc_h1;
            if (!((_599_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(114,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _602_cod;
            DAM.Syntax._IPos _out14;
            _out14 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(((m).dtor_outTypes).Select(_599_i));
            _602_cod = _out14;
            s = DAM.Syntax.Stmt.create_Func(_601_ret, DAM.Syntax.Pos.create_Ref(_602_cod), s);
          }
        }
      } else {
      }
      BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _603_i = BigInteger.Zero; _603_i < _hi8; _603_i++) {
        DAST._IFormal _source54 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_603_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _604___mcc_h2 = _source54.dtor_name;
        DAST._IType _605___mcc_h3 = _source54.dtor_typ;
        DAST._IType _606_dom = _605___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _607_arg = _604___mcc_h2;
        DAM.Syntax._IPos _608_dom;
        DAM.Syntax._IPos _out15;
        _out15 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_606_dom);
        _608_dom = _out15;
        s = DAM.Syntax.Stmt.create_Func(_607_arg, DAM.Syntax.Pos.create_Ref(_608_dom), s);
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source55 = e;
      if (_source55.is_Literal) {
        DAST._ILiteral _609___mcc_h0 = _source55.dtor_Literal_a0;
        DAST._ILiteral _source56 = _609___mcc_h0;
        if (_source56.is_BoolLiteral) {
          bool _610___mcc_h2 = _source56.dtor_BoolLiteral_a0;
          bool _611_b = _610___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_611_b));
          return s;
        } else if (_source56.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _612___mcc_h4 = _source56.dtor_IntLiteral_a0;
          DAST._IType _613___mcc_h5 = _source56.dtor_IntLiteral_a1;
          Dafny.ISequence<Dafny.Rune> _614_i = _612___mcc_h4;
          {
            DAM.Utils._IOption<BigInteger> _source57 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToInt(_614_i, new Dafny.Rune('-'));
            if (_source57.is_None) {
              {
                Microsoft.Dafny.Compilers.WrapException.Throw();
                s = DAM.Syntax.__default.Skip();
                return s;
              }
            } else {
              BigInteger _615___mcc_h206 = _source57.dtor_value;
              BigInteger _616_i = _615___mcc_h206;
              s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(_616_i));
              return s;
            }
          }
        } else if (_source56.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _617___mcc_h8 = _source56.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _618___mcc_h9 = _source56.dtor_DecLiteral_a1;
          DAST._IType _619___mcc_h10 = _source56.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source56.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _620___mcc_h14 = _source56.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _621_str = _620___mcc_h14;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_String(_621_str));
          return s;
        } else if (_source56.is_CharLiteral) {
          Dafny.Rune _622___mcc_h16 = _source56.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _623___mcc_h18 = _source56.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source55.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _624___mcc_h20 = _source55.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _625_v = _624___mcc_h20;
        s = DAM.Syntax.Stmt.create_Read(DAM.Syntax.Expr.create_Var(_625_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"))));
        return s;
      } else if (_source55.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _626___mcc_h22 = _source55.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _627_path = _626___mcc_h22;
        if (!((new BigInteger((_627_path).Count)).Sign == 1)) {
          throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(152,8): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
        }
        s = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(((_627_path).Select(BigInteger.Zero))));
        BigInteger _hi9 = new BigInteger((_627_path).Count);
        for (BigInteger _628_i = BigInteger.One; _628_i < _hi9; _628_i++) {
          s = DAM.Syntax.Stmt.create_Select(s, ((_627_path).Select(_628_i)));
        }
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _629___mcc_h24 = _source55.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _630___mcc_h26 = _source55.dtor_path;
        Dafny.ISequence<DAST._IType> _631___mcc_h27 = _source55.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _632___mcc_h28 = _source55.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _633___mcc_h32 = _source55.dtor_dims;
        DAST._IType _634___mcc_h33 = _source55.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _635___mcc_h36 = _source55.dtor_path;
        Dafny.ISequence<DAST._IType> _636___mcc_h37 = _source55.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _637___mcc_h38 = _source55.dtor_variant;
        bool _638___mcc_h39 = _source55.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _639___mcc_h40 = _source55.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Convert) {
        DAST._IExpression _640___mcc_h46 = _source55.dtor_value;
        DAST._IType _641___mcc_h47 = _source55.dtor_from;
        DAST._IType _642___mcc_h48 = _source55.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SeqConstruct) {
        DAST._IExpression _643___mcc_h52 = _source55.dtor_length;
        DAST._IExpression _644___mcc_h53 = _source55.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _645___mcc_h56 = _source55.dtor_elements;
        DAST._IType _646___mcc_h57 = _source55.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _647___mcc_h60 = _source55.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _648___mcc_h62 = _source55.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source55.is_Ite) {
        DAST._IExpression _649___mcc_h64 = _source55.dtor_cond;
        DAST._IExpression _650___mcc_h65 = _source55.dtor_thn;
        DAST._IExpression _651___mcc_h66 = _source55.dtor_els;
        DAST._IExpression _652_els = _651___mcc_h66;
        DAST._IExpression _653_thn = _650___mcc_h65;
        DAST._IExpression _654_cond = _649___mcc_h64;
        DAM.Syntax._IStmt _655_cond;
        DAM.Syntax._IStmt _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_654_cond);
        _655_cond = _out16;
        DAM.Syntax._IStmt _656_thn;
        DAM.Syntax._IStmt _out17;
        _out17 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_653_thn);
        _656_thn = _out17;
        DAM.Syntax._IStmt _657_els;
        DAM.Syntax._IStmt _out18;
        _out18 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_652_els);
        _657_els = _out18;
        s = DAM.Syntax.Stmt.create_Bind(_655_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _656_thn, _657_els));
        return s;
      } else if (_source55.is_UnOp) {
        DAST._IUnaryOp _658___mcc_h70 = _source55.dtor_unOp;
        DAST._IExpression _659___mcc_h71 = _source55.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_BinOp) {
        DAST._IBinOp _660___mcc_h74 = _source55.dtor_op;
        DAST._IExpression _661___mcc_h75 = _source55.dtor_left;
        DAST._IExpression _662___mcc_h76 = _source55.dtor_right;
        DAST._IExpression _663_rhs = _662___mcc_h76;
        DAST._IExpression _664_lhs = _661___mcc_h75;
        DAST._IBinOp _665_op = _660___mcc_h74;
        DAM.Syntax._IStmt _666_lhs;
        DAM.Syntax._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_664_lhs);
        _666_lhs = _out19;
        DAM.Syntax._IStmt _667_rhs;
        DAM.Syntax._IStmt _out20;
        _out20 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_663_rhs);
        _667_rhs = _out20;
        DAM.Syntax._IExpr _668_lvar;
        _668_lvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"));
        DAM.Syntax._IExpr _669_rvar;
        _669_rvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"));
        DAM.Syntax._IStmt _670_end = DAM.Syntax.Stmt.Default();
        DAST._IBinOp _source58 = _665_op;
        if (_source58.is_Eq) {
          bool _671___mcc_h207 = _source58.dtor_referential;
          bool _672___mcc_h208 = _source58.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Neq) {
          bool _673___mcc_h211 = _source58.dtor_referential;
          bool _674___mcc_h212 = _source58.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Div) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_EuclidianDiv) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Mod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_EuclidianMod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Implies) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_In) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_NotIn) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_SetDifference) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Concat) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _670_end = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _675___mcc_h215 = _source58.dtor_Passthrough_a0;
          if (object.Equals(_675___mcc_h215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
            _670_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Plus(_668_lvar, _669_rvar));
          } else if (object.Equals(_675___mcc_h215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
            _670_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_LT(_668_lvar, _669_rvar));
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            _670_end = DAM.Syntax.__default.Skip();
          }
        }
        s = DAM.Syntax.Stmt.create_Bind(_666_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"), DAM.Syntax.Stmt.create_Bind(_667_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"), _670_end));
        return s;
      } else if (_source55.is_ArrayLen) {
        DAST._IExpression _676___mcc_h80 = _source55.dtor_expr;
        BigInteger _677___mcc_h81 = _source55.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Select) {
        DAST._IExpression _678___mcc_h84 = _source55.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _679___mcc_h85 = _source55.dtor_field;
        bool _680___mcc_h86 = _source55.dtor_isConstant;
        bool _681___mcc_h87 = _source55.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SelectFn) {
        DAST._IExpression _682___mcc_h92 = _source55.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _683___mcc_h93 = _source55.dtor_field;
        bool _684___mcc_h94 = _source55.dtor_onDatatype;
        bool _685___mcc_h95 = _source55.dtor_isStatic;
        BigInteger _686___mcc_h96 = _source55.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Index) {
        DAST._IExpression _687___mcc_h102 = _source55.dtor_expr;
        DAST._ICollKind _688___mcc_h103 = _source55.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _689___mcc_h104 = _source55.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_IndexRange) {
        DAST._IExpression _690___mcc_h108 = _source55.dtor_expr;
        bool _691___mcc_h109 = _source55.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _692___mcc_h110 = _source55.dtor_low;
        DAST._IOptional<DAST._IExpression> _693___mcc_h111 = _source55.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_TupleSelect) {
        DAST._IExpression _694___mcc_h116 = _source55.dtor_expr;
        BigInteger _695___mcc_h117 = _source55.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Call) {
        DAST._IExpression _696___mcc_h120 = _source55.dtor_on;
        Dafny.ISequence<Dafny.Rune> _697___mcc_h121 = _source55.dtor_name;
        Dafny.ISequence<DAST._IType> _698___mcc_h122 = _source55.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _699___mcc_h123 = _source55.dtor_args;
        Dafny.ISequence<Dafny.Rune> _source59 = _697___mcc_h121;
        Dafny.ISequence<Dafny.Rune> _700___mcc_h128 = _source59;
        Dafny.ISequence<DAST._IExpression> _701_args = _699___mcc_h123;
        Dafny.ISequence<Dafny.Rune> _702_meth = _700___mcc_h128;
        DAST._IExpression _703_obj = _696___mcc_h120;
        DAM.Syntax._IStmt _out21;
        _out21 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_703_obj);
        s = _out21;
        s = DAM.Syntax.Stmt.create_Select(s, _702_meth);
        BigInteger _hi10 = new BigInteger((_701_args).Count);
        for (BigInteger _704_i = BigInteger.Zero; _704_i < _hi10; _704_i++) {
          DAM.Syntax._IStmt _705_arg;
          DAM.Syntax._IStmt _out22;
          _out22 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_701_args).Select(_704_i));
          _705_arg = _out22;
          s = DAM.Syntax.Stmt.create_Bind(_705_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(s, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
        }
      } else if (_source55.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _706___mcc_h130 = _source55.dtor_params;
        DAST._IType _707___mcc_h131 = _source55.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _708___mcc_h132 = _source55.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _709___mcc_h136 = _source55.dtor_values;
        DAST._IType _710___mcc_h137 = _source55.dtor_retType;
        DAST._IExpression _711___mcc_h138 = _source55.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _712___mcc_h142 = _source55.dtor_name;
        DAST._IType _713___mcc_h143 = _source55.dtor_typ;
        DAST._IExpression _714___mcc_h144 = _source55.dtor_value;
        DAST._IExpression _715___mcc_h145 = _source55.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Apply) {
        DAST._IExpression _716___mcc_h150 = _source55.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _717___mcc_h151 = _source55.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_TypeTest) {
        DAST._IExpression _718___mcc_h154 = _source55.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _719___mcc_h155 = _source55.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _720___mcc_h156 = _source55.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_InitializationValue) {
        DAST._IType _721___mcc_h160 = _source55.dtor_typ;
        DAST._IType _source60 = _721___mcc_h160;
        if (_source60.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _722___mcc_h162 = _source60.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _723___mcc_h163 = _source60.dtor_typeArgs;
          DAST._IResolvedType _724___mcc_h164 = _source60.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Nullable) {
          DAST._IType _725___mcc_h168 = _source60.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Tuple) {
          Dafny.ISequence<DAST._IType> _726___mcc_h170 = _source60.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Array) {
          DAST._IType _727___mcc_h172 = _source60.dtor_element;
          BigInteger _728___mcc_h173 = _source60.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Seq) {
          DAST._IType _729___mcc_h176 = _source60.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Set) {
          DAST._IType _730___mcc_h178 = _source60.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Multiset) {
          DAST._IType _731___mcc_h180 = _source60.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Map) {
          DAST._IType _732___mcc_h182 = _source60.dtor_key;
          DAST._IType _733___mcc_h183 = _source60.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Arrow) {
          Dafny.ISequence<DAST._IType> _734___mcc_h186 = _source60.dtor_args;
          DAST._IType _735___mcc_h187 = _source60.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Primitive) {
          DAST._IPrimitive _736___mcc_h190 = _source60.dtor_Primitive_a0;
          DAST._IPrimitive _source61 = _736___mcc_h190;
          if (_source61.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source61.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source61.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source61.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source60.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _737___mcc_h192 = _source60.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _738___mcc_h194 = _source60.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source55.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SetBoundedPool) {
        DAST._IExpression _739___mcc_h196 = _source55.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SeqBoundedPool) {
        DAST._IExpression _740___mcc_h198 = _source55.dtor_of;
        bool _741___mcc_h199 = _source55.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _742___mcc_h202 = _source55.dtor_lo;
        DAST._IExpression _743___mcc_h203 = _source55.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _744_next;
      _744_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source62 = (block).Select(BigInteger.Zero);
      if (_source62.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _745___mcc_h0 = _source62.dtor_name;
        DAST._IType _746___mcc_h1 = _source62.dtor_typ;
        DAST._IOptional<DAST._IExpression> _747___mcc_h2 = _source62.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _748_init = _747___mcc_h2;
        DAST._IType _749_ty = _746___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _750_var__ = _745___mcc_h0;
        DAM.Syntax._IStmt _751_init;
        DAM.Syntax._IStmt _out23;
        _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitRHS(_749_ty, _748_init);
        _751_init = _out23;
        DAM.Syntax._IStmt _752_next;
        DAM.Syntax._IStmt _out24;
        _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_744_next);
        _752_next = _out24;
        st = DAM.Syntax.Stmt.create_Bind(_751_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _750_var__, _752_next));
        return st;
      } else if (_source62.is_Assign) {
        DAST._IAssignLhs _753___mcc_h6 = _source62.dtor_lhs;
        DAST._IExpression _754___mcc_h7 = _source62.dtor_value;
        DAST._IExpression _755_rhs = _754___mcc_h7;
        DAST._IAssignLhs _756_lhs = _753___mcc_h6;
        {
          DAM.Syntax._IStmt _757_rhs;
          DAM.Syntax._IStmt _out25;
          _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_755_rhs);
          _757_rhs = _out25;
          DAM.Syntax._IStmt _758_next;
          DAM.Syntax._IStmt _out26;
          _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_744_next);
          _758_next = _out26;
          DAST._IAssignLhs _source63 = _756_lhs;
          if (_source63.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _759___mcc_h50 = _source63.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source64 = _759___mcc_h50;
            Dafny.ISequence<Dafny.Rune> _760___mcc_h52 = _source64;
            Dafny.ISequence<Dafny.Rune> _761_v = _760___mcc_h52;
            st = DAM.Syntax.Stmt.create_Bind(_757_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_761_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _758_next));
            return st;
          } else if (_source63.is_Select) {
            DAST._IExpression _762___mcc_h54 = _source63.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _763___mcc_h55 = _source63.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _764___mcc_h58 = _source63.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _765___mcc_h59 = _source63.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source62.is_If) {
        DAST._IExpression _766___mcc_h10 = _source62.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _767___mcc_h11 = _source62.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _768___mcc_h12 = _source62.dtor_els;
        Dafny.ISequence<DAST._IStatement> _769_els = _768___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _770_thn = _767___mcc_h11;
        DAST._IExpression _771_cond = _766___mcc_h10;
        DAM.Syntax._IStmt _772_cond;
        DAM.Syntax._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_771_cond);
        _772_cond = _out27;
        DAM.Syntax._IStmt _773_thn;
        DAM.Syntax._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_770_thn);
        _773_thn = _out28;
        DAM.Syntax._IStmt _774_els;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_769_els);
        _774_els = _out29;
        DAM.Syntax._IStmt _775_next;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_744_next);
        _775_next = _out30;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_772_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _773_thn, _774_els)), _775_next);
      } else if (_source62.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _776___mcc_h16 = _source62.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _777___mcc_h17 = _source62.dtor_body;
        Dafny.ISequence<DAST._IStatement> _778_stmt = _777___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _779_lab = _776___mcc_h16;
        DAM.Syntax._IStmt _780_block;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_778_stmt, _744_next));
        _780_block = _out31;
        st = DAM.Syntax.Stmt.create_LetCS(_779_lab, DAM.Syntax.__default.Command(), _780_block);
        return st;
      } else if (_source62.is_While) {
        DAST._IExpression _781___mcc_h20 = _source62.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _782___mcc_h21 = _source62.dtor_body;
        Dafny.ISequence<DAST._IStatement> _783_body = _782___mcc_h21;
        DAST._IExpression _784_guard = _781___mcc_h20;
        DAM.Syntax._IStmt _785_guard;
        DAM.Syntax._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_784_guard);
        _785_guard = _out32;
        DAM.Syntax._IStmt _786_body;
        DAM.Syntax._IStmt _out33;
        _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_783_body);
        _786_body = _out33;
        DAM.Syntax._IStmt _787_next;
        DAM.Syntax._IStmt _out34;
        _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_744_next);
        _787_next = _out34;
        st = DAM.Syntax.__default.While(_785_guard, _786_body, _787_next);
      } else if (_source62.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _788___mcc_h24 = _source62.dtor_boundName;
        DAST._IType _789___mcc_h25 = _source62.dtor_boundType;
        DAST._IExpression _790___mcc_h26 = _source62.dtor_over;
        Dafny.ISequence<DAST._IStatement> _791___mcc_h27 = _source62.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source62.is_Call) {
        DAST._IExpression _792___mcc_h32 = _source62.dtor_on;
        Dafny.ISequence<Dafny.Rune> _793___mcc_h33 = _source62.dtor_name;
        Dafny.ISequence<DAST._IType> _794___mcc_h34 = _source62.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _795___mcc_h35 = _source62.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _796___mcc_h36 = _source62.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _797_outs = _796___mcc_h36;
        Dafny.ISequence<DAST._IExpression> _798_args = _795___mcc_h35;
        Dafny.ISequence<Dafny.Rune> _799_meth = _793___mcc_h33;
        DAST._IExpression _800_obj = _792___mcc_h32;
        {
          DAM.Syntax._IStmt _801_obj;
          DAM.Syntax._IStmt _out35;
          _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_800_obj);
          _801_obj = _out35;
          st = DAM.Syntax.Stmt.create_Select(_801_obj, _799_meth);
          BigInteger _hi11 = new BigInteger((_798_args).Count);
          for (BigInteger _802_i = BigInteger.Zero; _802_i < _hi11; _802_i++) {
            DAM.Syntax._IStmt _803_arg;
            DAM.Syntax._IStmt _out36;
            _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_798_args).Select(_802_i));
            _803_arg = _out36;
            st = DAM.Syntax.Stmt.create_Bind(_803_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source65 = _797_outs;
          if (_source65.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _804___mcc_h62 = _source65.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _805_outs = _804___mcc_h62;
            {
              BigInteger _hi12 = new BigInteger((_805_outs).Count);
              for (BigInteger _806_i = BigInteger.Zero; _806_i < _hi12; _806_i++) {
                st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_805_outs).Select(_806_i))));
              }
            }
          } else {
          }
          DAM.Syntax._IStmt _807_next;
          DAM.Syntax._IStmt _out37;
          _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_744_next);
          _807_next = _out37;
          st = DAM.Syntax.__default.Then(st, _807_next);
        }
      } else if (_source62.is_Return) {
        DAST._IExpression _808___mcc_h42 = _source62.dtor_expr;
        DAST._IExpression _809_expr = _808___mcc_h42;
        DAM.Syntax._IStmt _810_ret;
        DAM.Syntax._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_809_expr);
        _810_ret = _out38;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), _810_ret);
        return st;
      } else if (_source62.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source62.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _811___mcc_h44 = _source62.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _812_lab = _811___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source66 = _812_lab;
          if (_source66.is_Some) {
            Dafny.ISequence<Dafny.Rune> _813___mcc_h63 = _source66.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _814_lab = _813___mcc_h63;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_814_lab), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source62.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _815___mcc_h46 = _source62.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source62.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source62.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _816___mcc_h48 = _source62.dtor_Print_a0;
        DAST._IExpression _817_expr = _816___mcc_h48;
        DAM.Syntax._IStmt _818_arg;
        DAM.Syntax._IStmt _out39;
        _out39 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_817_expr);
        _818_arg = _out39;
        DAM.Syntax._IStmt _819_next;
        DAM.Syntax._IStmt _out40;
        _out40 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_744_next);
        _819_next = _out40;
        st = DAM.Syntax.Stmt.create_Bind(_818_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _819_next));
        return st;
      }
      return st;
    }
    public static DAM.Syntax._IStmt EmitRHS(DAST._IType type__, DAST._IOptional<DAST._IExpression> rhs) {
      DAM.Syntax._IStmt @out = DAM.Syntax.Stmt.Default();
      _System._ITuple2<DAST._IType, DAST._IOptional<DAST._IExpression>> _source67 = _System.Tuple2<DAST._IType, DAST._IOptional<DAST._IExpression>>.create(type__, rhs);
      DAST._IType _820___mcc_h0 = _source67.dtor__0;
      DAST._IOptional<DAST._IExpression> _821___mcc_h1 = _source67.dtor__1;
      DAST._IType _source68 = _820___mcc_h0;
      if (_source68.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _822___mcc_h4 = _source68.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _823___mcc_h5 = _source68.dtor_typeArgs;
        DAST._IResolvedType _824___mcc_h6 = _source68.dtor_resolved;
        DAST._IOptional<DAST._IExpression> _source69 = _821___mcc_h1;
        if (_source69.is_Some) {
          DAST._IExpression _825___mcc_h13 = _source69.dtor_Some_a0;
          DAST._IExpression _826_init = _825___mcc_h13;
          DAM.Syntax._IStmt _out41;
          _out41 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_826_init);
          @out = _out41;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Nullable) {
        DAST._IType _827___mcc_h15 = _source68.dtor_Nullable_a0;
        DAST._IOptional<DAST._IExpression> _source70 = _821___mcc_h1;
        if (_source70.is_Some) {
          DAST._IExpression _828___mcc_h18 = _source70.dtor_Some_a0;
          DAST._IExpression _829_init = _828___mcc_h18;
          DAM.Syntax._IStmt _out42;
          _out42 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_829_init);
          @out = _out42;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Tuple) {
        Dafny.ISequence<DAST._IType> _830___mcc_h20 = _source68.dtor_Tuple_a0;
        DAST._IOptional<DAST._IExpression> _source71 = _821___mcc_h1;
        if (_source71.is_Some) {
          DAST._IExpression _831___mcc_h23 = _source71.dtor_Some_a0;
          DAST._IExpression _832_init = _831___mcc_h23;
          DAM.Syntax._IStmt _out43;
          _out43 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_832_init);
          @out = _out43;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Array) {
        DAST._IType _833___mcc_h25 = _source68.dtor_element;
        BigInteger _834___mcc_h26 = _source68.dtor_dims;
        DAST._IOptional<DAST._IExpression> _source72 = _821___mcc_h1;
        if (_source72.is_Some) {
          DAST._IExpression _835___mcc_h31 = _source72.dtor_Some_a0;
          DAST._IExpression _836_init = _835___mcc_h31;
          DAM.Syntax._IStmt _out44;
          _out44 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_836_init);
          @out = _out44;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Seq) {
        DAST._IType _837___mcc_h33 = _source68.dtor_element;
        DAST._IOptional<DAST._IExpression> _source73 = _821___mcc_h1;
        if (_source73.is_Some) {
          DAST._IExpression _838___mcc_h36 = _source73.dtor_Some_a0;
          DAST._IExpression _839_init = _838___mcc_h36;
          DAM.Syntax._IStmt _out45;
          _out45 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_839_init);
          @out = _out45;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Set) {
        DAST._IType _840___mcc_h38 = _source68.dtor_element;
        DAST._IOptional<DAST._IExpression> _source74 = _821___mcc_h1;
        if (_source74.is_Some) {
          DAST._IExpression _841___mcc_h41 = _source74.dtor_Some_a0;
          DAST._IExpression _842_init = _841___mcc_h41;
          DAM.Syntax._IStmt _out46;
          _out46 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_842_init);
          @out = _out46;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Multiset) {
        DAST._IType _843___mcc_h43 = _source68.dtor_element;
        DAST._IOptional<DAST._IExpression> _source75 = _821___mcc_h1;
        if (_source75.is_Some) {
          DAST._IExpression _844___mcc_h46 = _source75.dtor_Some_a0;
          DAST._IExpression _845_init = _844___mcc_h46;
          DAM.Syntax._IStmt _out47;
          _out47 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_845_init);
          @out = _out47;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Map) {
        DAST._IType _846___mcc_h48 = _source68.dtor_key;
        DAST._IType _847___mcc_h49 = _source68.dtor_value;
        DAST._IOptional<DAST._IExpression> _source76 = _821___mcc_h1;
        if (_source76.is_Some) {
          DAST._IExpression _848___mcc_h54 = _source76.dtor_Some_a0;
          DAST._IExpression _849_init = _848___mcc_h54;
          DAM.Syntax._IStmt _out48;
          _out48 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_849_init);
          @out = _out48;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Arrow) {
        Dafny.ISequence<DAST._IType> _850___mcc_h56 = _source68.dtor_args;
        DAST._IType _851___mcc_h57 = _source68.dtor_result;
        DAST._IOptional<DAST._IExpression> _source77 = _821___mcc_h1;
        if (_source77.is_Some) {
          DAST._IExpression _852___mcc_h62 = _source77.dtor_Some_a0;
          DAST._IExpression _853_init = _852___mcc_h62;
          DAM.Syntax._IStmt _out49;
          _out49 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_853_init);
          @out = _out49;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Primitive) {
        DAST._IPrimitive _854___mcc_h64 = _source68.dtor_Primitive_a0;
        DAST._IPrimitive _source78 = _854___mcc_h64;
        if (_source78.is_Int) {
          DAST._IOptional<DAST._IExpression> _source79 = _821___mcc_h1;
          if (_source79.is_Some) {
            DAST._IExpression _855___mcc_h67 = _source79.dtor_Some_a0;
            DAST._IExpression _856_init = _855___mcc_h67;
            DAM.Syntax._IStmt _out50;
            _out50 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_856_init);
            @out = _out50;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
          }
        } else if (_source78.is_Real) {
          DAST._IOptional<DAST._IExpression> _source80 = _821___mcc_h1;
          if (_source80.is_Some) {
            DAST._IExpression _857___mcc_h70 = _source80.dtor_Some_a0;
            DAST._IExpression _858_init = _857___mcc_h70;
            DAM.Syntax._IStmt _out51;
            _out51 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_858_init);
            @out = _out51;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source78.is_String) {
          DAST._IOptional<DAST._IExpression> _source81 = _821___mcc_h1;
          if (_source81.is_Some) {
            DAST._IExpression _859___mcc_h72 = _source81.dtor_Some_a0;
            DAST._IExpression _860_init = _859___mcc_h72;
            DAM.Syntax._IStmt _out52;
            _out52 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_860_init);
            @out = _out52;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source78.is_Bool) {
          DAST._IOptional<DAST._IExpression> _source82 = _821___mcc_h1;
          if (_source82.is_Some) {
            DAST._IExpression _861___mcc_h74 = _source82.dtor_Some_a0;
            DAST._IExpression _862_init = _861___mcc_h74;
            DAM.Syntax._IStmt _out53;
            _out53 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_862_init);
            @out = _out53;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
          }
        } else {
          DAST._IOptional<DAST._IExpression> _source83 = _821___mcc_h1;
          if (_source83.is_Some) {
            DAST._IExpression _863___mcc_h77 = _source83.dtor_Some_a0;
            DAST._IExpression _864_init = _863___mcc_h77;
            DAM.Syntax._IStmt _out54;
            _out54 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_864_init);
            @out = _out54;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        }
      } else if (_source68.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _865___mcc_h79 = _source68.dtor_Passthrough_a0;
        DAST._IOptional<DAST._IExpression> _source84 = _821___mcc_h1;
        if (_source84.is_Some) {
          DAST._IExpression _866___mcc_h82 = _source84.dtor_Some_a0;
          DAST._IExpression _867_init = _866___mcc_h82;
          DAM.Syntax._IStmt _out55;
          _out55 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_867_init);
          @out = _out55;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _868___mcc_h84 = _source68.dtor_TypeArg_a0;
        DAST._IOptional<DAST._IExpression> _source85 = _821___mcc_h1;
        if (_source85.is_Some) {
          DAST._IExpression _869___mcc_h87 = _source85.dtor_Some_a0;
          DAST._IExpression _870_init = _869___mcc_h87;
          DAM.Syntax._IStmt _out56;
          _out56 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_870_init);
          @out = _out56;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      }
      return @out;
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      bool _871_traced;
      _871_traced = false;
      Dafny.ISequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>> _872_modules;
      _872_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _873_bindings;
      _873_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements();
      BigInteger _hi13 = new BigInteger((p).Count);
      for (BigInteger _874_i = BigInteger.Zero; _874_i < _hi13; _874_i++) {
        Dafny.ISequence<Dafny.Rune> _875_name;
        _875_name = ((p).Select(_874_i)).dtor_name;
        if (_871_traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Lowering module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_875_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" into the DAM instruction set...\n")).ToVerbatimString(false));
        }
        DAM.Syntax._IStmt _876_m;
        DAM.Syntax._IStmt _out57;
        _out57 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule((p).Select(_874_i));
        _876_m = _out57;
        DAM.Syntax._IExpr _877_mthunk;
        _877_mthunk = DAM.Syntax.Expr.create_Thunk(_876_m);
        DAM.Utils._IOption<DAM.Syntax._IPos> _878_mtype;
        _878_mtype = DAM.Statics.__default.SynthExpr(_873_bindings, _877_mthunk);
        if ((_878_mtype).is_None) {
          if (_871_traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unable to synthesize type for module ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_875_name).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!\n")).ToVerbatimString(false));
          }
          return s;
        }
        if (_871_traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Successfully synthesized type for module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_875_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        }
        _872_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.Concat(_872_modules, Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements(_System.Tuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>.create(_875_name, _877_mthunk, (_878_mtype).Extract())));
        _873_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_873_bindings, _875_name, (_878_mtype).Extract());
      }
      DAM.Syntax._IStmt _879_body;
      _879_body = DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__default")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"));
      BigInteger _hi14 = new BigInteger((_872_modules).Count);
      for (BigInteger _880_i = BigInteger.Zero; _880_i < _hi14; _880_i++) {
        _System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos> _let_tmp_rhs7 = (_872_modules).Select(((new BigInteger((_872_modules).Count)) - (_880_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _881_name = _let_tmp_rhs7.dtor__0;
        DAM.Syntax._IExpr _882_mod = _let_tmp_rhs7.dtor__1;
        DAM.Syntax._IPos _883_modtype = _let_tmp_rhs7.dtor__2;
        _879_body = DAM.Syntax.__default.Let(_882_mod, _881_name, _883_modtype, _879_body);
      }
      DAM.Utils._IOption<DAM.Syntax._INeg> _884_end;
      _884_end = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), _879_body);
      if (!((_884_end).is_Some)) {
        throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(347,6): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RDE Dafny -> DAM did not preserve typability!").ToVerbatimString(false));
      }
      if (_871_traced) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Tracing execution of _module.__default.Main() below\n")).ToVerbatimString(false));
      }
      DAM.Dynamics.__default.Interpret(_879_body, _871_traced);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _885___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_885___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _885___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_885___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in9 = (i).Drop(BigInteger.One);
          i = _in9;
          goto TAIL_CALL_START;
        } else {
          _885___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_885___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in10 = (i).Drop(BigInteger.One);
          i = _in10;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _886_body;
      Dafny.ISequence<Dafny.Rune> _out58;
      _out58 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _886_body = _out58;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _886_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _887_i;
      _887_i = BigInteger.Zero;
      while ((_887_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _888_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source86 = (body).Select(_887_i);
        if (_source86.is_Module) {
          DAST._IModule _889___mcc_h0 = _source86.dtor_Module_a0;
          DAST._IModule _890_m = _889___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenModule(_890_m, containingPath);
          _888_generated = _out59;
        } else if (_source86.is_Class) {
          DAST._IClass _891___mcc_h1 = _source86.dtor_Class_a0;
          DAST._IClass _892_c = _891___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenClass(_892_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_892_c).dtor_name)));
          _888_generated = _out60;
        } else if (_source86.is_Trait) {
          DAST._ITrait _893___mcc_h2 = _source86.dtor_Trait_a0;
          DAST._ITrait _894_t = _893___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenTrait(_894_t, containingPath);
          _888_generated = _out61;
        } else if (_source86.is_Newtype) {
          DAST._INewtype _895___mcc_h3 = _source86.dtor_Newtype_a0;
          DAST._INewtype _896_n = _895___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenNewtype(_896_n);
          _888_generated = _out62;
        } else {
          DAST._IDatatype _897___mcc_h4 = _source86.dtor_Datatype_a0;
          DAST._IDatatype _898_d = _897___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenDatatype(_898_d);
          _888_generated = _out63;
        }
        if ((_887_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _888_generated);
        _887_i = (_887_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _899_tpI;
      _899_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_899_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _900_tp;
          _900_tp = (@params).Select(_899_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_900_tp));
          Dafny.ISequence<Dafny.Rune> _901_genTp;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_900_tp, false, false);
          _901_genTp = _out64;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _902_baseConstraints;
          _902_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _901_genTp), _902_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _901_genTp), _902_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _901_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _899_tpI = (_899_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _903_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _904_typeParams;
      Dafny.ISequence<Dafny.Rune> _905_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _906_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _907_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _908_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _909_erasedParams;
      Dafny.ISet<DAST._IType> _out65;
      Dafny.ISequence<Dafny.Rune> _out66;
      Dafny.ISequence<Dafny.Rune> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out65, out _out66, out _out67, out _out68, out _out69, out _out70, out _out71);
      _903_typeParamsSet = _out65;
      _904_typeParams = _out66;
      _905_constrainedTypeParams = _out67;
      _906_whereConstraints = _out68;
      _907_constrainedEraseParams = _out69;
      _908_unerasedParams = _out70;
      _909_erasedParams = _out71;
      Dafny.ISequence<Dafny.Rune> _910_fields;
      _910_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _911_fieldInits;
      _911_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _912_fieldI;
      _912_fieldI = BigInteger.Zero;
      while ((_912_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _913_field;
        _913_field = ((c).dtor_fields).Select(_912_fieldI);
        Dafny.ISequence<Dafny.Rune> _914_fieldType;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((_913_field).dtor_formal).dtor_typ, false, false);
        _914_fieldType = _out72;
        _910_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_910_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_913_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _914_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source87 = (_913_field).dtor_defaultValue;
        if (_source87.is_Some) {
          DAST._IExpression _915___mcc_h0 = _source87.dtor_Some_a0;
          DAST._IExpression _916_e = _915___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _917_eStr;
            bool _918___v1;
            bool _919___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _920___v3;
            Dafny.ISequence<Dafny.Rune> _out73;
            bool _out74;
            bool _out75;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out76;
            DCOMP.COMP.GenExpr(_916_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out73, out _out74, out _out75, out _out76);
            _917_eStr = _out73;
            _918___v1 = _out74;
            _919___v2 = _out75;
            _920___v3 = _out76;
            _911_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_911_fieldInits, DCOMP.__default.escapeIdent(((_913_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _917_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _911_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_911_fieldInits, DCOMP.__default.escapeIdent(((_913_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _912_fieldI = (_912_fieldI) + (BigInteger.One);
      }
      BigInteger _921_typeParamI;
      _921_typeParamI = BigInteger.Zero;
      while ((_921_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _922_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out77;
        _out77 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_921_typeParamI), false, false);
        _922_tpeGen = _out77;
        _910_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_910_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_921_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _922_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _911_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_911_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_921_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _921_typeParamI = (_921_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _910_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _923_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _924_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out78;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out79;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _903_typeParamsSet, out _out78, out _out79);
      _923_implBody = _out78;
      _924_traitBodies = _out79;
      _923_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _911_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _923_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _905_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), _906_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _923_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _925_i;
        _925_i = BigInteger.Zero;
        while ((_925_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _926_superClass;
          _926_superClass = ((c).dtor_superClasses).Select(_925_i);
          DAST._IType _source88 = _926_superClass;
          if (_source88.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _927___mcc_h1 = _source88.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _928___mcc_h2 = _source88.dtor_typeArgs;
            DAST._IResolvedType _929___mcc_h3 = _source88.dtor_resolved;
            DAST._IResolvedType _source89 = _929___mcc_h3;
            if (_source89.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _930___mcc_h7 = _source89.dtor_path;
            } else if (_source89.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _931___mcc_h9 = _source89.dtor_path;
              Dafny.ISequence<DAST._IType> _932_typeArgs = _928___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _933_traitPath = _927___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _934_pathStr;
                Dafny.ISequence<Dafny.Rune> _out80;
                _out80 = DCOMP.COMP.GenPath(_933_traitPath);
                _934_pathStr = _out80;
                Dafny.ISequence<Dafny.Rune> _935_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out81;
                _out81 = DCOMP.COMP.GenTypeArgs(_932_typeArgs, false, false);
                _935_typeArgs = _out81;
                Dafny.ISequence<Dafny.Rune> _936_body;
                _936_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_924_traitBodies).Contains(_933_traitPath)) {
                  _936_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_924_traitBodies, _933_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _937_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out82;
                _out82 = DCOMP.COMP.GenPath(path);
                _937_genSelfPath = _out82;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _905_constrainedTypeParams), _934_pathStr), _935_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _937_genSelfPath), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _906_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _936_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _938___mcc_h11 = _source89.dtor_Newtype_a0;
            }
          } else if (_source88.is_Nullable) {
            DAST._IType _939___mcc_h13 = _source88.dtor_Nullable_a0;
          } else if (_source88.is_Tuple) {
            Dafny.ISequence<DAST._IType> _940___mcc_h15 = _source88.dtor_Tuple_a0;
          } else if (_source88.is_Array) {
            DAST._IType _941___mcc_h17 = _source88.dtor_element;
            BigInteger _942___mcc_h18 = _source88.dtor_dims;
          } else if (_source88.is_Seq) {
            DAST._IType _943___mcc_h21 = _source88.dtor_element;
          } else if (_source88.is_Set) {
            DAST._IType _944___mcc_h23 = _source88.dtor_element;
          } else if (_source88.is_Multiset) {
            DAST._IType _945___mcc_h25 = _source88.dtor_element;
          } else if (_source88.is_Map) {
            DAST._IType _946___mcc_h27 = _source88.dtor_key;
            DAST._IType _947___mcc_h28 = _source88.dtor_value;
          } else if (_source88.is_Arrow) {
            Dafny.ISequence<DAST._IType> _948___mcc_h31 = _source88.dtor_args;
            DAST._IType _949___mcc_h32 = _source88.dtor_result;
          } else if (_source88.is_Primitive) {
            DAST._IPrimitive _950___mcc_h35 = _source88.dtor_Primitive_a0;
          } else if (_source88.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _951___mcc_h37 = _source88.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _952___mcc_h39 = _source88.dtor_TypeArg_a0;
          }
          _925_i = (_925_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _953_defaultImpl;
      _953_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _905_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), _906_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _953_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_953_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _953_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_953_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _953_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_953_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _953_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_953_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _954_printImpl;
      _954_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _905_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _954_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_954_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _955_ptrPartialEqImpl;
      _955_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _955_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_955_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _955_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_955_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _955_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_955_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _956_identEraseImpls;
      _956_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _905_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _909_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _956_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_956_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _907_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _904_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _953_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _954_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _955_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _956_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _957_typeParamsSet;
      _957_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _958_typeParams;
      _958_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _959_tpI;
      _959_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _958_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_959_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _960_tp;
          _960_tp = ((t).dtor_typeParams).Select(_959_tpI);
          _957_typeParamsSet = Dafny.Set<DAST._IType>.Union(_957_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_960_tp));
          Dafny.ISequence<Dafny.Rune> _961_genTp;
          Dafny.ISequence<Dafny.Rune> _out83;
          _out83 = DCOMP.COMP.GenType(_960_tp, false, false);
          _961_genTp = _out83;
          _958_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_958_typeParams, _961_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _959_tpI = (_959_tpI) + (BigInteger.One);
        }
        _958_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_958_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _962_fullPath;
      _962_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _963_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _964___v6;
      Dafny.ISequence<Dafny.Rune> _out84;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out85;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_962_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_962_fullPath)), _957_typeParamsSet, out _out84, out _out85);
      _963_implBody = _out84;
      _964___v6 = _out85;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _958_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _963_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _965_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _966_typeParams;
      Dafny.ISequence<Dafny.Rune> _967_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _968_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _969___v7;
      Dafny.ISequence<Dafny.Rune> _970___v8;
      Dafny.ISequence<Dafny.Rune> _971___v9;
      Dafny.ISet<DAST._IType> _out86;
      Dafny.ISequence<Dafny.Rune> _out87;
      Dafny.ISequence<Dafny.Rune> _out88;
      Dafny.ISequence<Dafny.Rune> _out89;
      Dafny.ISequence<Dafny.Rune> _out90;
      Dafny.ISequence<Dafny.Rune> _out91;
      Dafny.ISequence<Dafny.Rune> _out92;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out86, out _out87, out _out88, out _out89, out _out90, out _out91, out _out92);
      _965_typeParamsSet = _out86;
      _966_typeParams = _out87;
      _967_constrainedTypeParams = _out88;
      _968_whereConstraints = _out89;
      _969___v7 = _out90;
      _970___v8 = _out91;
      _971___v9 = _out92;
      Dafny.ISequence<Dafny.Rune> _972_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out93;
      _out93 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _972_underlyingType = _out93;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _972_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _967_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _972_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _967_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _972_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _967_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _967_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), _968_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source90 = (c).dtor_witnessExpr;
      if (_source90.is_Some) {
        DAST._IExpression _973___mcc_h0 = _source90.dtor_Some_a0;
        DAST._IExpression _974_e = _973___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _975_eStr;
          bool _976___v10;
          bool _977___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _978___v12;
          Dafny.ISequence<Dafny.Rune> _out94;
          bool _out95;
          bool _out96;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out97;
          DCOMP.COMP.GenExpr(_974_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out94, out _out95, out _out96, out _out97);
          _975_eStr = _out94;
          _976___v10 = _out95;
          _977___v11 = _out96;
          _978___v12 = _out97;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _975_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _967_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _967_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _966_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _972_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _979_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _980_typeParams;
      Dafny.ISequence<Dafny.Rune> _981_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _982_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _983_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _984_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _985_erasedParams;
      Dafny.ISet<DAST._IType> _out98;
      Dafny.ISequence<Dafny.Rune> _out99;
      Dafny.ISequence<Dafny.Rune> _out100;
      Dafny.ISequence<Dafny.Rune> _out101;
      Dafny.ISequence<Dafny.Rune> _out102;
      Dafny.ISequence<Dafny.Rune> _out103;
      Dafny.ISequence<Dafny.Rune> _out104;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out98, out _out99, out _out100, out _out101, out _out102, out _out103, out _out104);
      _979_typeParamsSet = _out98;
      _980_typeParams = _out99;
      _981_constrainedTypeParams = _out100;
      _982_whereConstraints = _out101;
      _983_constrainedEraseParams = _out102;
      _984_unerasedParams = _out103;
      _985_erasedParams = _out104;
      Dafny.ISequence<Dafny.Rune> _986_ctors;
      _986_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _987_i;
      _987_i = BigInteger.Zero;
      while ((_987_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _988_ctor;
        _988_ctor = ((c).dtor_ctors).Select(_987_i);
        Dafny.ISequence<Dafny.Rune> _989_ctorBody;
        _989_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_988_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _990_j;
        _990_j = BigInteger.Zero;
        while ((_990_j) < (new BigInteger(((_988_ctor).dtor_args).Count))) {
          DAST._IFormal _991_formal;
          _991_formal = ((_988_ctor).dtor_args).Select(_990_j);
          Dafny.ISequence<Dafny.Rune> _992_formalType;
          Dafny.ISequence<Dafny.Rune> _out105;
          _out105 = DCOMP.COMP.GenType((_991_formal).dtor_typ, false, false);
          _992_formalType = _out105;
          if ((c).dtor_isCo) {
            _989_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_989_ctorBody, DCOMP.__default.escapeIdent((_991_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _992_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _989_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_989_ctorBody, DCOMP.__default.escapeIdent((_991_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _992_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _990_j = (_990_j) + (BigInteger.One);
        }
        _989_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_989_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _986_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_986_ctors, _989_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _987_i = (_987_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _993_selfPath;
      _993_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _994_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _995_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out106;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out107;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_993_selfPath)), _979_typeParamsSet, out _out106, out _out107);
      _994_implBody = _out106;
      _995_traitBodies = _out107;
      _987_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _996_emittedFields;
      _996_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_987_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _997_ctor;
        _997_ctor = ((c).dtor_ctors).Select(_987_i);
        BigInteger _998_j;
        _998_j = BigInteger.Zero;
        while ((_998_j) < (new BigInteger(((_997_ctor).dtor_args).Count))) {
          DAST._IFormal _999_formal;
          _999_formal = ((_997_ctor).dtor_args).Select(_998_j);
          if (!((_996_emittedFields).Contains((_999_formal).dtor_name))) {
            _996_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_996_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_999_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _1000_formalType;
            Dafny.ISequence<Dafny.Rune> _out108;
            _out108 = DCOMP.COMP.GenType((_999_formal).dtor_typ, false, false);
            _1000_formalType = _out108;
            Dafny.ISequence<Dafny.Rune> _1001_methodBody;
            _1001_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _1002_k;
            _1002_k = BigInteger.Zero;
            while ((_1002_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1003_ctor2;
              _1003_ctor2 = ((c).dtor_ctors).Select(_1002_k);
              Dafny.ISequence<Dafny.Rune> _1004_ctorMatch;
              _1004_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1003_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _1005_l;
              _1005_l = BigInteger.Zero;
              bool _1006_hasMatchingField;
              _1006_hasMatchingField = false;
              while ((_1005_l) < (new BigInteger(((_1003_ctor2).dtor_args).Count))) {
                DAST._IFormal _1007_formal2;
                _1007_formal2 = ((_1003_ctor2).dtor_args).Select(_1005_l);
                if (((_999_formal).dtor_name).Equals((_1007_formal2).dtor_name)) {
                  _1006_hasMatchingField = true;
                }
                _1004_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1004_ctorMatch, DCOMP.__default.escapeIdent((_1007_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1005_l = (_1005_l) + (BigInteger.One);
              }
              if (_1006_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1004_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1004_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_999_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _1004_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1004_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_999_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _1004_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1004_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _1001_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1001_methodBody, _1004_ctorMatch);
              _1002_k = (_1002_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1001_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1001_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _1001_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1001_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _994_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_994_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_999_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _1000_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1001_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _998_j = (_998_j) + (BigInteger.One);
        }
        _987_i = (_987_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _986_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_986_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _1008_typeI;
        _1008_typeI = BigInteger.Zero;
        while ((_1008_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_1008_typeI).Sign == 1) {
            _986_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_986_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1009_genTp;
          Dafny.ISequence<Dafny.Rune> _out109;
          _out109 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1008_typeI), false, false);
          _1009_genTp = _out109;
          _986_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_986_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _1009_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _1008_typeI = (_1008_typeI) + (BigInteger.One);
        }
        _986_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_986_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _1010_enumBody;
      _1010_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _980_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _986_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _981_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _980_typeParams), _982_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _994_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _1011_identEraseImpls;
      _1011_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _981_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _980_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _985_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _1011_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1011_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _983_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _984_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _980_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _1012_printImpl;
      _1012_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _981_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _980_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _987_i = BigInteger.Zero;
      while ((_987_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1013_ctor;
        _1013_ctor = ((c).dtor_ctors).Select(_987_i);
        Dafny.ISequence<Dafny.Rune> _1014_ctorMatch;
        _1014_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1013_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1015_modulePrefix;
        _1015_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _1016_printRhs;
        _1016_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _1015_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_1013_ctor).dtor_name), (((_1013_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _1017_j;
        _1017_j = BigInteger.Zero;
        while ((_1017_j) < (new BigInteger(((_1013_ctor).dtor_args).Count))) {
          DAST._IFormal _1018_formal;
          _1018_formal = ((_1013_ctor).dtor_args).Select(_1017_j);
          _1014_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1014_ctorMatch, DCOMP.__default.escapeIdent((_1018_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1017_j).Sign == 1) {
            _1016_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1016_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _1016_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1016_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_1018_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _1017_j = (_1017_j) + (BigInteger.One);
        }
        _1014_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1014_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1013_ctor).dtor_hasAnyArgs) {
          _1016_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1016_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _1016_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1016_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _1012_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1012_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1014_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _1016_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _987_i = (_987_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1012_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1012_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _1012_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1012_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _1019_defaultImpl;
      _1019_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1019_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _981_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _980_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _987_i = BigInteger.Zero;
        while ((_987_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1020_formal;
          _1020_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_987_i);
          _1019_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1019_defaultImpl, DCOMP.__default.escapeIdent((_1020_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _987_i = (_987_i) + (BigInteger.One);
        }
        _1019_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1019_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1010_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1011_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1012_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1019_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1021_i;
        _1021_i = BigInteger.Zero;
        while ((_1021_i) < (new BigInteger((p).Count))) {
          if ((_1021_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1021_i))));
          _1021_i = (_1021_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1022_i;
        _1022_i = BigInteger.Zero;
        while ((_1022_i) < (new BigInteger((args).Count))) {
          if ((_1022_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1023_genTp;
          Dafny.ISequence<Dafny.Rune> _out110;
          _out110 = DCOMP.COMP.GenType((args).Select(_1022_i), inBinding, inFn);
          _1023_genTp = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1023_genTp);
          _1022_i = (_1022_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source91 = c;
      if (_source91.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1024___mcc_h0 = _source91.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1025___mcc_h1 = _source91.dtor_typeArgs;
        DAST._IResolvedType _1026___mcc_h2 = _source91.dtor_resolved;
        DAST._IResolvedType _1027_resolved = _1026___mcc_h2;
        Dafny.ISequence<DAST._IType> _1028_args = _1025___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1029_p = _1024___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out111;
          _out111 = DCOMP.COMP.GenPath(_1029_p);
          s = _out111;
          Dafny.ISequence<Dafny.Rune> _1030_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out112;
          _out112 = DCOMP.COMP.GenTypeArgs(_1028_args, inBinding, inFn);
          _1030_typeArgs = _out112;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1030_typeArgs);
          DAST._IResolvedType _source92 = _1027_resolved;
          if (_source92.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1031___mcc_h18 = _source92.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source92.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1032___mcc_h20 = _source92.dtor_path;
            {
              if ((_1029_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _1033___mcc_h22 = _source92.dtor_Newtype_a0;
            DAST._IResolvedType _1034_Primitive = _1027_resolved;
          }
        }
      } else if (_source91.is_Nullable) {
        DAST._IType _1035___mcc_h3 = _source91.dtor_Nullable_a0;
        DAST._IType _1036_inner = _1035___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _1037_innerStr;
          Dafny.ISequence<Dafny.Rune> _out113;
          _out113 = DCOMP.COMP.GenType(_1036_inner, inBinding, inFn);
          _1037_innerStr = _out113;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1037_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1038___mcc_h4 = _source91.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1039_types = _1038___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _1040_i;
          _1040_i = BigInteger.Zero;
          while ((_1040_i) < (new BigInteger((_1039_types).Count))) {
            if ((_1040_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1041_generated;
            Dafny.ISequence<Dafny.Rune> _out114;
            _out114 = DCOMP.COMP.GenType((_1039_types).Select(_1040_i), inBinding, inFn);
            _1041_generated = _out114;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1041_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _1040_i = (_1040_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source91.is_Array) {
        DAST._IType _1042___mcc_h5 = _source91.dtor_element;
        BigInteger _1043___mcc_h6 = _source91.dtor_dims;
        BigInteger _1044_dims = _1043___mcc_h6;
        DAST._IType _1045_element = _1042___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _1046_elemStr;
          Dafny.ISequence<Dafny.Rune> _out115;
          _out115 = DCOMP.COMP.GenType(_1045_element, inBinding, inFn);
          _1046_elemStr = _out115;
          s = _1046_elemStr;
          BigInteger _1047_i;
          _1047_i = BigInteger.Zero;
          while ((_1047_i) < (_1044_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _1047_i = (_1047_i) + (BigInteger.One);
          }
        }
      } else if (_source91.is_Seq) {
        DAST._IType _1048___mcc_h7 = _source91.dtor_element;
        DAST._IType _1049_element = _1048___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _1050_elemStr;
          Dafny.ISequence<Dafny.Rune> _out116;
          _out116 = DCOMP.COMP.GenType(_1049_element, inBinding, inFn);
          _1050_elemStr = _out116;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1050_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Set) {
        DAST._IType _1051___mcc_h8 = _source91.dtor_element;
        DAST._IType _1052_element = _1051___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _1053_elemStr;
          Dafny.ISequence<Dafny.Rune> _out117;
          _out117 = DCOMP.COMP.GenType(_1052_element, inBinding, inFn);
          _1053_elemStr = _out117;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1053_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Multiset) {
        DAST._IType _1054___mcc_h9 = _source91.dtor_element;
        DAST._IType _1055_element = _1054___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1056_elemStr;
          Dafny.ISequence<Dafny.Rune> _out118;
          _out118 = DCOMP.COMP.GenType(_1055_element, inBinding, inFn);
          _1056_elemStr = _out118;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1056_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source91.is_Map) {
        DAST._IType _1057___mcc_h10 = _source91.dtor_key;
        DAST._IType _1058___mcc_h11 = _source91.dtor_value;
        DAST._IType _1059_value = _1058___mcc_h11;
        DAST._IType _1060_key = _1057___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _1061_keyStr;
          Dafny.ISequence<Dafny.Rune> _out119;
          _out119 = DCOMP.COMP.GenType(_1060_key, inBinding, inFn);
          _1061_keyStr = _out119;
          Dafny.ISequence<Dafny.Rune> _1062_valueStr;
          Dafny.ISequence<Dafny.Rune> _out120;
          _out120 = DCOMP.COMP.GenType(_1059_value, inBinding, inFn);
          _1062_valueStr = _out120;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1061_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1062_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1063___mcc_h12 = _source91.dtor_args;
        DAST._IType _1064___mcc_h13 = _source91.dtor_result;
        DAST._IType _1065_result = _1064___mcc_h13;
        Dafny.ISequence<DAST._IType> _1066_args = _1063___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1067_i;
          _1067_i = BigInteger.Zero;
          while ((_1067_i) < (new BigInteger((_1066_args).Count))) {
            if ((_1067_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1068_generated;
            Dafny.ISequence<Dafny.Rune> _out121;
            _out121 = DCOMP.COMP.GenType((_1066_args).Select(_1067_i), inBinding, true);
            _1068_generated = _out121;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1068_generated);
            _1067_i = (_1067_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1069_resultType;
          Dafny.ISequence<Dafny.Rune> _out122;
          _out122 = DCOMP.COMP.GenType(_1065_result, inBinding, (inFn) || (inBinding));
          _1069_resultType = _out122;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1069_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source91.is_Primitive) {
        DAST._IPrimitive _1070___mcc_h14 = _source91.dtor_Primitive_a0;
        DAST._IPrimitive _1071_p = _1070___mcc_h14;
        {
          DAST._IPrimitive _source93 = _1071_p;
          if (_source93.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source93.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source93.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source93.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source91.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1072___mcc_h15 = _source91.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1073_v = _1072___mcc_h15;
        s = _1073_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1074___mcc_h16 = _source91.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source94 = _1074___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1075___mcc_h17 = _source94;
        Dafny.ISequence<Dafny.Rune> _1076_name = _1075___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1076_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1077_i;
      _1077_i = BigInteger.Zero;
      while ((_1077_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source95 = (body).Select(_1077_i);
        DAST._IMethod _1078___mcc_h0 = _source95;
        DAST._IMethod _1079_m = _1078___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source96 = (_1079_m).dtor_overridingPath;
          if (_source96.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1080___mcc_h1 = _source96.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1081_p = _1080___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _1082_existing;
              _1082_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_1081_p)) {
                _1082_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _1081_p);
              }
              if ((new BigInteger((_1082_existing).Count)).Sign == 1) {
                _1082_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1082_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _1083_genMethod;
              Dafny.ISequence<Dafny.Rune> _out123;
              _out123 = DCOMP.COMP.GenMethod(_1079_m, true, enclosingType, enclosingTypeParams);
              _1083_genMethod = _out123;
              _1082_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1082_existing, _1083_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_1081_p, _1082_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _1084_generated;
              Dafny.ISequence<Dafny.Rune> _out124;
              _out124 = DCOMP.COMP.GenMethod(_1079_m, forTrait, enclosingType, enclosingTypeParams);
              _1084_generated = _out124;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1084_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _1077_i = (_1077_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1085_i;
      _1085_i = BigInteger.Zero;
      while ((_1085_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1086_param;
        _1086_param = (@params).Select(_1085_i);
        Dafny.ISequence<Dafny.Rune> _1087_paramType;
        Dafny.ISequence<Dafny.Rune> _out125;
        _out125 = DCOMP.COMP.GenType((_1086_param).dtor_typ, false, false);
        _1087_paramType = _out125;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_1086_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _1087_paramType);
        if ((_1085_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _1085_i = (_1085_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _1088_params;
      Dafny.ISequence<Dafny.Rune> _out126;
      _out126 = DCOMP.COMP.GenParams((m).dtor_params);
      _1088_params = _out126;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1089_paramNames;
      _1089_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1090_paramI;
      _1090_paramI = BigInteger.Zero;
      while ((_1090_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1089_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1089_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1090_paramI)).dtor_name));
        _1090_paramI = (_1090_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1088_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1088_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1091_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out127;
          _out127 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1091_enclosingTypeString = _out127;
          _1088_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _1091_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1088_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1092_retType;
      _1092_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1093_typeI;
      _1093_typeI = BigInteger.Zero;
      while ((_1093_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1093_typeI).Sign == 1) {
          _1092_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1092_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1094_typeString;
        Dafny.ISequence<Dafny.Rune> _out128;
        _out128 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1093_typeI), false, false);
        _1094_typeString = _out128;
        _1092_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1092_retType, _1094_typeString);
        _1093_typeI = (_1093_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1092_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1092_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _1095_typeParamsFiltered;
      _1095_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1096_typeParamI;
      _1096_typeParamI = BigInteger.Zero;
      while ((_1096_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1097_typeParam;
        _1097_typeParam = ((m).dtor_typeParams).Select(_1096_typeParamI);
        if (!((enclosingTypeParams).Contains(_1097_typeParam))) {
          _1095_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1095_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1097_typeParam));
        }
        _1096_typeParamI = (_1096_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1098_whereClauses;
      _1098_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_1095_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _1098_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1098_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1099_i;
        _1099_i = BigInteger.Zero;
        while ((_1099_i) < (new BigInteger((_1095_typeParamsFiltered).Count))) {
          if ((_1099_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _1098_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1098_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1100_typeString;
          Dafny.ISequence<Dafny.Rune> _out129;
          _out129 = DCOMP.COMP.GenType((_1095_typeParamsFiltered).Select(_1099_i), false, false);
          _1100_typeString = _out129;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1100_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1100_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _1098_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1098_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1100_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1099_i = (_1099_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1088_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1092_retType), _1098_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1101_earlyReturn;
        _1101_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source97 = (m).dtor_outVars;
        if (_source97.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1102___mcc_h0 = _source97.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1103_outVars = _1102___mcc_h0;
          {
            _1101_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1104_outI;
            _1104_outI = BigInteger.Zero;
            while ((_1104_outI) < (new BigInteger((_1103_outVars).Count))) {
              if ((_1104_outI).Sign == 1) {
                _1101_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1101_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1105_outVar;
              _1105_outVar = (_1103_outVars).Select(_1104_outI);
              _1101_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1101_earlyReturn, DCOMP.__default.escapeIdent((_1105_outVar)));
              _1104_outI = (_1104_outI) + (BigInteger.One);
            }
            _1101_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1101_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _1106_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1107___v15;
        Dafny.ISequence<Dafny.Rune> _out130;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1089_paramNames, true, _1101_earlyReturn, out _out130, out _out131);
        _1106_body = _out130;
        _1107___v15 = _out131;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1106_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1108_declarations;
      _1108_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1109_i;
      _1109_i = BigInteger.Zero;
      while ((_1109_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1110_stmt;
        _1110_stmt = (stmts).Select(_1109_i);
        Dafny.ISequence<Dafny.Rune> _1111_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1112_recIdents;
        Dafny.ISequence<Dafny.Rune> _out132;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out133;
        DCOMP.COMP.GenStmt(_1110_stmt, selfIdent, @params, (isLast) && ((_1109_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out132, out _out133);
        _1111_stmtString = _out132;
        _1112_recIdents = _out133;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1112_recIdents, _1108_declarations));
        DAST._IStatement _source98 = _1110_stmt;
        if (_source98.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1113___mcc_h0 = _source98.dtor_name;
          DAST._IType _1114___mcc_h1 = _source98.dtor_typ;
          DAST._IOptional<DAST._IExpression> _1115___mcc_h2 = _source98.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1116_name = _1113___mcc_h0;
          {
            _1108_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1108_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1116_name));
          }
        } else if (_source98.is_Assign) {
          DAST._IAssignLhs _1117___mcc_h6 = _source98.dtor_lhs;
          DAST._IExpression _1118___mcc_h7 = _source98.dtor_value;
        } else if (_source98.is_If) {
          DAST._IExpression _1119___mcc_h10 = _source98.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1120___mcc_h11 = _source98.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1121___mcc_h12 = _source98.dtor_els;
        } else if (_source98.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1122___mcc_h16 = _source98.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1123___mcc_h17 = _source98.dtor_body;
        } else if (_source98.is_While) {
          DAST._IExpression _1124___mcc_h20 = _source98.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1125___mcc_h21 = _source98.dtor_body;
        } else if (_source98.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1126___mcc_h24 = _source98.dtor_boundName;
          DAST._IType _1127___mcc_h25 = _source98.dtor_boundType;
          DAST._IExpression _1128___mcc_h26 = _source98.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1129___mcc_h27 = _source98.dtor_body;
        } else if (_source98.is_Call) {
          DAST._IExpression _1130___mcc_h32 = _source98.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1131___mcc_h33 = _source98.dtor_name;
          Dafny.ISequence<DAST._IType> _1132___mcc_h34 = _source98.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1133___mcc_h35 = _source98.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1134___mcc_h36 = _source98.dtor_outs;
        } else if (_source98.is_Return) {
          DAST._IExpression _1135___mcc_h42 = _source98.dtor_expr;
        } else if (_source98.is_EarlyReturn) {
        } else if (_source98.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1136___mcc_h44 = _source98.dtor_toLabel;
        } else if (_source98.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1137___mcc_h46 = _source98.dtor_body;
        } else if (_source98.is_JumpTailCallStart) {
        } else if (_source98.is_Halt) {
        } else {
          DAST._IExpression _1138___mcc_h48 = _source98.dtor_Print_a0;
        }
        if ((_1109_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1111_stmtString);
        _1109_i = (_1109_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source99 = lhs;
      if (_source99.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1139___mcc_h0 = _source99.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source100 = _1139___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1140___mcc_h1 = _source100;
        Dafny.ISequence<Dafny.Rune> _1141_id = _1140___mcc_h1;
        {
          if ((@params).Contains(_1141_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1141_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1141_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1141_id);
          needsIIFE = false;
        }
      } else if (_source99.is_Select) {
        DAST._IExpression _1142___mcc_h2 = _source99.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1143___mcc_h3 = _source99.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1144_field = _1143___mcc_h3;
        DAST._IExpression _1145_on = _1142___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1146_onExpr;
          bool _1147_onOwned;
          bool _1148_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1149_recIdents;
          Dafny.ISequence<Dafny.Rune> _out134;
          bool _out135;
          bool _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_1145_on, selfIdent, @params, false, out _out134, out _out135, out _out136, out _out137);
          _1146_onExpr = _out134;
          _1147_onOwned = _out135;
          _1148_onErased = _out136;
          _1149_recIdents = _out137;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1146_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1144_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1149_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1150___mcc_h4 = _source99.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1151___mcc_h5 = _source99.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1152_indices = _1151___mcc_h5;
        DAST._IExpression _1153_on = _1150___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1154_onExpr;
          bool _1155_onOwned;
          bool _1156_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1157_recIdents;
          Dafny.ISequence<Dafny.Rune> _out138;
          bool _out139;
          bool _out140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out141;
          DCOMP.COMP.GenExpr(_1153_on, selfIdent, @params, false, out _out138, out _out139, out _out140, out _out141);
          _1154_onExpr = _out138;
          _1155_onOwned = _out139;
          _1156_onErased = _out140;
          _1157_recIdents = _out141;
          readIdents = _1157_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1158_i;
          _1158_i = BigInteger.Zero;
          while ((_1158_i) < (new BigInteger((_1152_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1159_idx;
            bool _1160___v19;
            bool _1161_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1162_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out142;
            bool _out143;
            bool _out144;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out145;
            DCOMP.COMP.GenExpr((_1152_indices).Select(_1158_i), selfIdent, @params, true, out _out142, out _out143, out _out144, out _out145);
            _1159_idx = _out142;
            _1160___v19 = _out143;
            _1161_idxErased = _out144;
            _1162_recIdentsIdx = _out145;
            if (!(_1161_idxErased)) {
              _1159_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1159_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_1158_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1159_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1162_recIdentsIdx);
            _1158_i = (_1158_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1154_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1158_i = BigInteger.Zero;
          while ((_1158_i) < (new BigInteger((_1152_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_1158_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1158_i = (_1158_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source101 = stmt;
      if (_source101.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1163___mcc_h0 = _source101.dtor_name;
        DAST._IType _1164___mcc_h1 = _source101.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1165___mcc_h2 = _source101.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source102 = _1165___mcc_h2;
        if (_source102.is_Some) {
          DAST._IExpression _1166___mcc_h3 = _source102.dtor_Some_a0;
          DAST._IExpression _1167_expression = _1166___mcc_h3;
          DAST._IType _1168_typ = _1164___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1169_name = _1163___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1170_typeString;
            Dafny.ISequence<Dafny.Rune> _out146;
            _out146 = DCOMP.COMP.GenType(_1168_typ, true, false);
            _1170_typeString = _out146;
            Dafny.ISequence<Dafny.Rune> _1171_expr;
            bool _1172___v20;
            bool _1173_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1174_recIdents;
            Dafny.ISequence<Dafny.Rune> _out147;
            bool _out148;
            bool _out149;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out150;
            DCOMP.COMP.GenExpr(_1167_expression, selfIdent, @params, true, out _out147, out _out148, out _out149, out _out150);
            _1171_expr = _out147;
            _1172___v20 = _out148;
            _1173_recErased = _out149;
            _1174_recIdents = _out150;
            if (!(_1173_recErased)) {
              _1171_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1171_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1171_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1170_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1171_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1169_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1170_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1171_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1174_recIdents;
          }
        } else {
          DAST._IType _1175_typ = _1164___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1176_name = _1163___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1177_typeString;
            Dafny.ISequence<Dafny.Rune> _out151;
            _out151 = DCOMP.COMP.GenType(_1175_typ, true, false);
            _1177_typeString = _out151;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1176_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1177_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source101.is_Assign) {
        DAST._IAssignLhs _1178___mcc_h4 = _source101.dtor_lhs;
        DAST._IExpression _1179___mcc_h5 = _source101.dtor_value;
        DAST._IExpression _1180_expression = _1179___mcc_h5;
        DAST._IAssignLhs _1181_lhs = _1178___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1182_lhsGen;
          bool _1183_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1184_recIdents;
          Dafny.ISequence<Dafny.Rune> _out152;
          bool _out153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out154;
          DCOMP.COMP.GenAssignLhs(_1181_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out152, out _out153, out _out154);
          _1182_lhsGen = _out152;
          _1183_needsIIFE = _out153;
          _1184_recIdents = _out154;
          Dafny.ISequence<Dafny.Rune> _1185_exprGen;
          bool _1186___v21;
          bool _1187_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1188_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out155;
          bool _out156;
          bool _out157;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out158;
          DCOMP.COMP.GenExpr(_1180_expression, selfIdent, @params, true, out _out155, out _out156, out _out157, out _out158);
          _1185_exprGen = _out155;
          _1186___v21 = _out156;
          _1187_exprErased = _out157;
          _1188_exprIdents = _out158;
          if (!(_1187_exprErased)) {
            _1185_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1185_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1185_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1185_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1183_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1185_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1182_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1182_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1185_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1184_recIdents, _1188_exprIdents);
        }
      } else if (_source101.is_If) {
        DAST._IExpression _1189___mcc_h6 = _source101.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1190___mcc_h7 = _source101.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1191___mcc_h8 = _source101.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1192_els = _1191___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1193_thn = _1190___mcc_h7;
        DAST._IExpression _1194_cond = _1189___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1195_condString;
          bool _1196___v22;
          bool _1197_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1198_recIdents;
          Dafny.ISequence<Dafny.Rune> _out159;
          bool _out160;
          bool _out161;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out162;
          DCOMP.COMP.GenExpr(_1194_cond, selfIdent, @params, true, out _out159, out _out160, out _out161, out _out162);
          _1195_condString = _out159;
          _1196___v22 = _out160;
          _1197_condErased = _out161;
          _1198_recIdents = _out162;
          if (!(_1197_condErased)) {
            _1195_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1195_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1198_recIdents;
          Dafny.ISequence<Dafny.Rune> _1199_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1200_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out163;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out164;
          DCOMP.COMP.GenStmts(_1193_thn, selfIdent, @params, isLast, earlyReturn, out _out163, out _out164);
          _1199_thnString = _out163;
          _1200_thnIdents = _out164;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1200_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1201_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1202_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out165;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out166;
          DCOMP.COMP.GenStmts(_1192_els, selfIdent, @params, isLast, earlyReturn, out _out165, out _out166);
          _1201_elsString = _out165;
          _1202_elsIdents = _out166;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1202_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1195_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1199_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1201_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1203___mcc_h9 = _source101.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1204___mcc_h10 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1205_body = _1204___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1206_lbl = _1203___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1207_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1208_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out167;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out168;
          DCOMP.COMP.GenStmts(_1205_body, selfIdent, @params, isLast, earlyReturn, out _out167, out _out168);
          _1207_bodyString = _out167;
          _1208_bodyIdents = _out168;
          readIdents = _1208_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1206_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1207_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_While) {
        DAST._IExpression _1209___mcc_h11 = _source101.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1210___mcc_h12 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1211_body = _1210___mcc_h12;
        DAST._IExpression _1212_cond = _1209___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1213_condString;
          bool _1214___v23;
          bool _1215_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1216_recIdents;
          Dafny.ISequence<Dafny.Rune> _out169;
          bool _out170;
          bool _out171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out172;
          DCOMP.COMP.GenExpr(_1212_cond, selfIdent, @params, true, out _out169, out _out170, out _out171, out _out172);
          _1213_condString = _out169;
          _1214___v23 = _out170;
          _1215_condErased = _out171;
          _1216_recIdents = _out172;
          if (!(_1215_condErased)) {
            _1213_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1213_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1216_recIdents;
          Dafny.ISequence<Dafny.Rune> _1217_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1218_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out173;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out174;
          DCOMP.COMP.GenStmts(_1211_body, selfIdent, @params, false, earlyReturn, out _out173, out _out174);
          _1217_bodyString = _out173;
          _1218_bodyIdents = _out174;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1218_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1213_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1217_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1219___mcc_h13 = _source101.dtor_boundName;
        DAST._IType _1220___mcc_h14 = _source101.dtor_boundType;
        DAST._IExpression _1221___mcc_h15 = _source101.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1222___mcc_h16 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1223_body = _1222___mcc_h16;
        DAST._IExpression _1224_over = _1221___mcc_h15;
        DAST._IType _1225_boundType = _1220___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1226_boundName = _1219___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1227_overString;
          bool _1228___v24;
          bool _1229_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1230_recIdents;
          Dafny.ISequence<Dafny.Rune> _out175;
          bool _out176;
          bool _out177;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
          DCOMP.COMP.GenExpr(_1224_over, selfIdent, @params, true, out _out175, out _out176, out _out177, out _out178);
          _1227_overString = _out175;
          _1228___v24 = _out176;
          _1229_overErased = _out177;
          _1230_recIdents = _out178;
          Dafny.ISequence<Dafny.Rune> _1231_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out179;
          _out179 = DCOMP.COMP.GenType(_1225_boundType, false, false);
          _1231_boundTypeStr = _out179;
          readIdents = _1230_recIdents;
          Dafny.ISequence<Dafny.Rune> _1232_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1233_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
          DCOMP.COMP.GenStmts(_1223_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1226_boundName)), false, earlyReturn, out _out180, out _out181);
          _1232_bodyString = _out180;
          _1233_bodyIdents = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1233_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1226_boundName));
          Dafny.ISequence<Dafny.Rune> _1234_unerasedIter;
          _1234_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1229_overErased) {
            _1234_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1231_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1234_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1227_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1226_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1234_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1232_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_Call) {
        DAST._IExpression _1235___mcc_h17 = _source101.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1236___mcc_h18 = _source101.dtor_name;
        Dafny.ISequence<DAST._IType> _1237___mcc_h19 = _source101.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1238___mcc_h20 = _source101.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1239___mcc_h21 = _source101.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1240_maybeOutVars = _1239___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1241_args = _1238___mcc_h20;
        Dafny.ISequence<DAST._IType> _1242_typeArgs = _1237___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1243_name = _1236___mcc_h18;
        DAST._IExpression _1244_on = _1235___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1245_typeArgString;
          _1245_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1242_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1246_typeI;
            _1246_typeI = BigInteger.Zero;
            _1245_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1246_typeI) < (new BigInteger((_1242_typeArgs).Count))) {
              if ((_1246_typeI).Sign == 1) {
                _1245_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1245_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1247_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_1242_typeArgs).Select(_1246_typeI), false, false);
              _1247_typeString = _out182;
              _1245_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1245_typeArgString, _1247_typeString);
              _1246_typeI = (_1246_typeI) + (BigInteger.One);
            }
            _1245_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1245_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1248_argString;
          _1248_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1249_i;
          _1249_i = BigInteger.Zero;
          while ((_1249_i) < (new BigInteger((_1241_args).Count))) {
            if ((_1249_i).Sign == 1) {
              _1248_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1248_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1250_argExpr;
            bool _1251_isOwned;
            bool _1252_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1253_argIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_1241_args).Select(_1249_i), selfIdent, @params, false, out _out183, out _out184, out _out185, out _out186);
            _1250_argExpr = _out183;
            _1251_isOwned = _out184;
            _1252_argErased = _out185;
            _1253_argIdents = _out186;
            if (_1251_isOwned) {
              _1250_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1250_argExpr);
            }
            _1248_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1248_argString, _1250_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1253_argIdents);
            _1249_i = (_1249_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1254_enclosingString;
          bool _1255___v25;
          bool _1256___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1257_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out187;
          bool _out188;
          bool _out189;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out190;
          DCOMP.COMP.GenExpr(_1244_on, selfIdent, @params, false, out _out187, out _out188, out _out189, out _out190);
          _1254_enclosingString = _out187;
          _1255___v25 = _out188;
          _1256___v26 = _out189;
          _1257_enclosingIdents = _out190;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1257_enclosingIdents);
          DAST._IExpression _source103 = _1244_on;
          if (_source103.is_Literal) {
            DAST._ILiteral _1258___mcc_h26 = _source103.dtor_Literal_a0;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1259___mcc_h28 = _source103.dtor_Ident_a0;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1260___mcc_h30 = _source103.dtor_Companion_a0;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1254_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source103.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1261___mcc_h32 = _source103.dtor_Tuple_a0;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1262___mcc_h34 = _source103.dtor_path;
            Dafny.ISequence<DAST._IType> _1263___mcc_h35 = _source103.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1264___mcc_h36 = _source103.dtor_args;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1265___mcc_h40 = _source103.dtor_dims;
            DAST._IType _1266___mcc_h41 = _source103.dtor_typ;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1267___mcc_h44 = _source103.dtor_path;
            Dafny.ISequence<DAST._IType> _1268___mcc_h45 = _source103.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1269___mcc_h46 = _source103.dtor_variant;
            bool _1270___mcc_h47 = _source103.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1271___mcc_h48 = _source103.dtor_contents;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Convert) {
            DAST._IExpression _1272___mcc_h54 = _source103.dtor_value;
            DAST._IType _1273___mcc_h55 = _source103.dtor_from;
            DAST._IType _1274___mcc_h56 = _source103.dtor_typ;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SeqConstruct) {
            DAST._IExpression _1275___mcc_h60 = _source103.dtor_length;
            DAST._IExpression _1276___mcc_h61 = _source103.dtor_elem;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1277___mcc_h64 = _source103.dtor_elements;
            DAST._IType _1278___mcc_h65 = _source103.dtor_typ;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1279___mcc_h68 = _source103.dtor_elements;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1280___mcc_h70 = _source103.dtor_mapElems;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_This) {
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Ite) {
            DAST._IExpression _1281___mcc_h72 = _source103.dtor_cond;
            DAST._IExpression _1282___mcc_h73 = _source103.dtor_thn;
            DAST._IExpression _1283___mcc_h74 = _source103.dtor_els;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_UnOp) {
            DAST._IUnaryOp _1284___mcc_h78 = _source103.dtor_unOp;
            DAST._IExpression _1285___mcc_h79 = _source103.dtor_expr;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_BinOp) {
            DAST._IBinOp _1286___mcc_h82 = _source103.dtor_op;
            DAST._IExpression _1287___mcc_h83 = _source103.dtor_left;
            DAST._IExpression _1288___mcc_h84 = _source103.dtor_right;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_ArrayLen) {
            DAST._IExpression _1289___mcc_h88 = _source103.dtor_expr;
            BigInteger _1290___mcc_h89 = _source103.dtor_dim;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Select) {
            DAST._IExpression _1291___mcc_h92 = _source103.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1292___mcc_h93 = _source103.dtor_field;
            bool _1293___mcc_h94 = _source103.dtor_isConstant;
            bool _1294___mcc_h95 = _source103.dtor_onDatatype;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SelectFn) {
            DAST._IExpression _1295___mcc_h100 = _source103.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1296___mcc_h101 = _source103.dtor_field;
            bool _1297___mcc_h102 = _source103.dtor_onDatatype;
            bool _1298___mcc_h103 = _source103.dtor_isStatic;
            BigInteger _1299___mcc_h104 = _source103.dtor_arity;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Index) {
            DAST._IExpression _1300___mcc_h110 = _source103.dtor_expr;
            DAST._ICollKind _1301___mcc_h111 = _source103.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1302___mcc_h112 = _source103.dtor_indices;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_IndexRange) {
            DAST._IExpression _1303___mcc_h116 = _source103.dtor_expr;
            bool _1304___mcc_h117 = _source103.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1305___mcc_h118 = _source103.dtor_low;
            DAST._IOptional<DAST._IExpression> _1306___mcc_h119 = _source103.dtor_high;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_TupleSelect) {
            DAST._IExpression _1307___mcc_h124 = _source103.dtor_expr;
            BigInteger _1308___mcc_h125 = _source103.dtor_index;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Call) {
            DAST._IExpression _1309___mcc_h128 = _source103.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1310___mcc_h129 = _source103.dtor_name;
            Dafny.ISequence<DAST._IType> _1311___mcc_h130 = _source103.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1312___mcc_h131 = _source103.dtor_args;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1313___mcc_h136 = _source103.dtor_params;
            DAST._IType _1314___mcc_h137 = _source103.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1315___mcc_h138 = _source103.dtor_body;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1316___mcc_h142 = _source103.dtor_values;
            DAST._IType _1317___mcc_h143 = _source103.dtor_retType;
            DAST._IExpression _1318___mcc_h144 = _source103.dtor_expr;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1319___mcc_h148 = _source103.dtor_name;
            DAST._IType _1320___mcc_h149 = _source103.dtor_typ;
            DAST._IExpression _1321___mcc_h150 = _source103.dtor_value;
            DAST._IExpression _1322___mcc_h151 = _source103.dtor_iifeBody;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Apply) {
            DAST._IExpression _1323___mcc_h156 = _source103.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1324___mcc_h157 = _source103.dtor_args;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_TypeTest) {
            DAST._IExpression _1325___mcc_h160 = _source103.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1326___mcc_h161 = _source103.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1327___mcc_h162 = _source103.dtor_variant;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_InitializationValue) {
            DAST._IType _1328___mcc_h166 = _source103.dtor_typ;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_BoolBoundedPool) {
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SetBoundedPool) {
            DAST._IExpression _1329___mcc_h168 = _source103.dtor_of;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SeqBoundedPool) {
            DAST._IExpression _1330___mcc_h170 = _source103.dtor_of;
            bool _1331___mcc_h171 = _source103.dtor_includeDuplicates;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1332___mcc_h174 = _source103.dtor_lo;
            DAST._IExpression _1333___mcc_h175 = _source103.dtor_hi;
            {
              _1254_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1254_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1334_receiver;
          _1334_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source104 = _1240_maybeOutVars;
          if (_source104.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1335___mcc_h178 = _source104.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1336_outVars = _1335___mcc_h178;
            {
              if ((new BigInteger((_1336_outVars).Count)) > (BigInteger.One)) {
                _1334_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1337_outI;
              _1337_outI = BigInteger.Zero;
              while ((_1337_outI) < (new BigInteger((_1336_outVars).Count))) {
                if ((_1337_outI).Sign == 1) {
                  _1334_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1334_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1338_outVar;
                _1338_outVar = (_1336_outVars).Select(_1337_outI);
                _1334_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1334_receiver, (_1338_outVar));
                _1337_outI = (_1337_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1336_outVars).Count)) > (BigInteger.One)) {
                _1334_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1334_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1334_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1334_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1254_enclosingString), DCOMP.__default.escapeIdent(_1243_name)), _1245_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1248_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source101.is_Return) {
        DAST._IExpression _1339___mcc_h22 = _source101.dtor_expr;
        DAST._IExpression _1340_expr = _1339___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1341_exprString;
          bool _1342___v29;
          bool _1343_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1344_recIdents;
          Dafny.ISequence<Dafny.Rune> _out191;
          bool _out192;
          bool _out193;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
          DCOMP.COMP.GenExpr(_1340_expr, selfIdent, @params, true, out _out191, out _out192, out _out193, out _out194);
          _1341_exprString = _out191;
          _1342___v29 = _out192;
          _1343_recErased = _out193;
          _1344_recIdents = _out194;
          _1341_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1341_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1344_recIdents;
          if (isLast) {
            generated = _1341_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1341_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source101.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1345___mcc_h23 = _source101.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1346_toLabel = _1345___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source105 = _1346_toLabel;
          if (_source105.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1347___mcc_h179 = _source105.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1348_lbl = _1347___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1348_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1349___mcc_h24 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1350_body = _1349___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1351_paramI;
          _1351_paramI = BigInteger.Zero;
          while ((_1351_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1352_param;
            _1352_param = (@params).Select(_1351_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1352_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1352_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1351_paramI = (_1351_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1353_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1354_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out195;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out196;
          DCOMP.COMP.GenStmts(_1350_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out195, out _out196);
          _1353_bodyString = _out195;
          _1354_bodyIdents = _out196;
          readIdents = _1354_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1353_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1355___mcc_h25 = _source101.dtor_Print_a0;
        DAST._IExpression _1356_e = _1355___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1357_printedExpr;
          bool _1358_isOwned;
          bool _1359___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1360_recIdents;
          Dafny.ISequence<Dafny.Rune> _out197;
          bool _out198;
          bool _out199;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out200;
          DCOMP.COMP.GenExpr(_1356_e, selfIdent, @params, false, out _out197, out _out198, out _out199, out _out200);
          _1357_printedExpr = _out197;
          _1358_isOwned = _out198;
          _1359___v30 = _out199;
          _1360_recIdents = _out200;
          if (_1358_isOwned) {
            _1357_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1357_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1357_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1360_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source106 = e;
      if (_source106.is_Literal) {
        DAST._ILiteral _1361___mcc_h0 = _source106.dtor_Literal_a0;
        DAST._ILiteral _source107 = _1361___mcc_h0;
        if (_source107.is_BoolLiteral) {
          bool _1362___mcc_h1 = _source107.dtor_BoolLiteral_a0;
          if ((_1362___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source107.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1363___mcc_h2 = _source107.dtor_IntLiteral_a0;
          DAST._IType _1364___mcc_h3 = _source107.dtor_IntLiteral_a1;
          DAST._IType _1365_t = _1364___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1366_i = _1363___mcc_h2;
          {
            DAST._IType _source108 = _1365_t;
            if (_source108.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1367___mcc_h237 = _source108.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1368___mcc_h238 = _source108.dtor_typeArgs;
              DAST._IResolvedType _1369___mcc_h239 = _source108.dtor_resolved;
              DAST._IType _1370_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1371_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1370_o, false, false);
                _1371_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1371_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Nullable) {
              DAST._IType _1372___mcc_h243 = _source108.dtor_Nullable_a0;
              DAST._IType _1373_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1374_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1373_o, false, false);
                _1374_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1374_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1375___mcc_h245 = _source108.dtor_Tuple_a0;
              DAST._IType _1376_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1377_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1376_o, false, false);
                _1377_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1377_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Array) {
              DAST._IType _1378___mcc_h247 = _source108.dtor_element;
              BigInteger _1379___mcc_h248 = _source108.dtor_dims;
              DAST._IType _1380_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1381_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1380_o, false, false);
                _1381_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1381_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Seq) {
              DAST._IType _1382___mcc_h251 = _source108.dtor_element;
              DAST._IType _1383_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1384_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1383_o, false, false);
                _1384_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1384_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Set) {
              DAST._IType _1385___mcc_h253 = _source108.dtor_element;
              DAST._IType _1386_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1387_genType;
                Dafny.ISequence<Dafny.Rune> _out206;
                _out206 = DCOMP.COMP.GenType(_1386_o, false, false);
                _1387_genType = _out206;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1387_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Multiset) {
              DAST._IType _1388___mcc_h255 = _source108.dtor_element;
              DAST._IType _1389_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1390_genType;
                Dafny.ISequence<Dafny.Rune> _out207;
                _out207 = DCOMP.COMP.GenType(_1389_o, false, false);
                _1390_genType = _out207;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1390_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Map) {
              DAST._IType _1391___mcc_h257 = _source108.dtor_key;
              DAST._IType _1392___mcc_h258 = _source108.dtor_value;
              DAST._IType _1393_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1394_genType;
                Dafny.ISequence<Dafny.Rune> _out208;
                _out208 = DCOMP.COMP.GenType(_1393_o, false, false);
                _1394_genType = _out208;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1394_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1395___mcc_h261 = _source108.dtor_args;
              DAST._IType _1396___mcc_h262 = _source108.dtor_result;
              DAST._IType _1397_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1398_genType;
                Dafny.ISequence<Dafny.Rune> _out209;
                _out209 = DCOMP.COMP.GenType(_1397_o, false, false);
                _1398_genType = _out209;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1398_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Primitive) {
              DAST._IPrimitive _1399___mcc_h265 = _source108.dtor_Primitive_a0;
              DAST._IPrimitive _source109 = _1399___mcc_h265;
              if (_source109.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source109.is_Real) {
                DAST._IType _1400_o = _1365_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1401_genType;
                  Dafny.ISequence<Dafny.Rune> _out210;
                  _out210 = DCOMP.COMP.GenType(_1400_o, false, false);
                  _1401_genType = _out210;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1401_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source109.is_String) {
                DAST._IType _1402_o = _1365_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1403_genType;
                  Dafny.ISequence<Dafny.Rune> _out211;
                  _out211 = DCOMP.COMP.GenType(_1402_o, false, false);
                  _1403_genType = _out211;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1403_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source109.is_Bool) {
                DAST._IType _1404_o = _1365_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1405_genType;
                  Dafny.ISequence<Dafny.Rune> _out212;
                  _out212 = DCOMP.COMP.GenType(_1404_o, false, false);
                  _1405_genType = _out212;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1405_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1406_o = _1365_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1407_genType;
                  Dafny.ISequence<Dafny.Rune> _out213;
                  _out213 = DCOMP.COMP.GenType(_1406_o, false, false);
                  _1407_genType = _out213;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1407_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source108.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1408___mcc_h267 = _source108.dtor_Passthrough_a0;
              DAST._IType _1409_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1410_genType;
                Dafny.ISequence<Dafny.Rune> _out214;
                _out214 = DCOMP.COMP.GenType(_1409_o, false, false);
                _1410_genType = _out214;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1410_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1411___mcc_h269 = _source108.dtor_TypeArg_a0;
              DAST._IType _1412_o = _1365_t;
              {
                Dafny.ISequence<Dafny.Rune> _1413_genType;
                Dafny.ISequence<Dafny.Rune> _out215;
                _out215 = DCOMP.COMP.GenType(_1412_o, false, false);
                _1413_genType = _out215;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1413_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source107.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1414___mcc_h4 = _source107.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1415___mcc_h5 = _source107.dtor_DecLiteral_a1;
          DAST._IType _1416___mcc_h6 = _source107.dtor_DecLiteral_a2;
          DAST._IType _1417_t = _1416___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1418_d = _1415___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1419_n = _1414___mcc_h4;
          {
            DAST._IType _source110 = _1417_t;
            if (_source110.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1420___mcc_h271 = _source110.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1421___mcc_h272 = _source110.dtor_typeArgs;
              DAST._IResolvedType _1422___mcc_h273 = _source110.dtor_resolved;
              DAST._IType _1423_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1424_genType;
                Dafny.ISequence<Dafny.Rune> _out216;
                _out216 = DCOMP.COMP.GenType(_1423_o, false, false);
                _1424_genType = _out216;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1424_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Nullable) {
              DAST._IType _1425___mcc_h277 = _source110.dtor_Nullable_a0;
              DAST._IType _1426_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1427_genType;
                Dafny.ISequence<Dafny.Rune> _out217;
                _out217 = DCOMP.COMP.GenType(_1426_o, false, false);
                _1427_genType = _out217;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1427_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1428___mcc_h279 = _source110.dtor_Tuple_a0;
              DAST._IType _1429_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1430_genType;
                Dafny.ISequence<Dafny.Rune> _out218;
                _out218 = DCOMP.COMP.GenType(_1429_o, false, false);
                _1430_genType = _out218;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1430_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Array) {
              DAST._IType _1431___mcc_h281 = _source110.dtor_element;
              BigInteger _1432___mcc_h282 = _source110.dtor_dims;
              DAST._IType _1433_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1434_genType;
                Dafny.ISequence<Dafny.Rune> _out219;
                _out219 = DCOMP.COMP.GenType(_1433_o, false, false);
                _1434_genType = _out219;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1434_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Seq) {
              DAST._IType _1435___mcc_h285 = _source110.dtor_element;
              DAST._IType _1436_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1437_genType;
                Dafny.ISequence<Dafny.Rune> _out220;
                _out220 = DCOMP.COMP.GenType(_1436_o, false, false);
                _1437_genType = _out220;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1437_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Set) {
              DAST._IType _1438___mcc_h287 = _source110.dtor_element;
              DAST._IType _1439_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1440_genType;
                Dafny.ISequence<Dafny.Rune> _out221;
                _out221 = DCOMP.COMP.GenType(_1439_o, false, false);
                _1440_genType = _out221;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1440_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Multiset) {
              DAST._IType _1441___mcc_h289 = _source110.dtor_element;
              DAST._IType _1442_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1443_genType;
                Dafny.ISequence<Dafny.Rune> _out222;
                _out222 = DCOMP.COMP.GenType(_1442_o, false, false);
                _1443_genType = _out222;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1443_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Map) {
              DAST._IType _1444___mcc_h291 = _source110.dtor_key;
              DAST._IType _1445___mcc_h292 = _source110.dtor_value;
              DAST._IType _1446_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1447_genType;
                Dafny.ISequence<Dafny.Rune> _out223;
                _out223 = DCOMP.COMP.GenType(_1446_o, false, false);
                _1447_genType = _out223;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1447_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1448___mcc_h295 = _source110.dtor_args;
              DAST._IType _1449___mcc_h296 = _source110.dtor_result;
              DAST._IType _1450_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1451_genType;
                Dafny.ISequence<Dafny.Rune> _out224;
                _out224 = DCOMP.COMP.GenType(_1450_o, false, false);
                _1451_genType = _out224;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1451_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Primitive) {
              DAST._IPrimitive _1452___mcc_h299 = _source110.dtor_Primitive_a0;
              DAST._IPrimitive _source111 = _1452___mcc_h299;
              if (_source111.is_Int) {
                DAST._IType _1453_o = _1417_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1454_genType;
                  Dafny.ISequence<Dafny.Rune> _out225;
                  _out225 = DCOMP.COMP.GenType(_1453_o, false, false);
                  _1454_genType = _out225;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1454_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source111.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source111.is_String) {
                DAST._IType _1455_o = _1417_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1456_genType;
                  Dafny.ISequence<Dafny.Rune> _out226;
                  _out226 = DCOMP.COMP.GenType(_1455_o, false, false);
                  _1456_genType = _out226;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1456_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source111.is_Bool) {
                DAST._IType _1457_o = _1417_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1458_genType;
                  Dafny.ISequence<Dafny.Rune> _out227;
                  _out227 = DCOMP.COMP.GenType(_1457_o, false, false);
                  _1458_genType = _out227;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1458_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1459_o = _1417_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1460_genType;
                  Dafny.ISequence<Dafny.Rune> _out228;
                  _out228 = DCOMP.COMP.GenType(_1459_o, false, false);
                  _1460_genType = _out228;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1460_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source110.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1461___mcc_h301 = _source110.dtor_Passthrough_a0;
              DAST._IType _1462_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1463_genType;
                Dafny.ISequence<Dafny.Rune> _out229;
                _out229 = DCOMP.COMP.GenType(_1462_o, false, false);
                _1463_genType = _out229;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1463_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1464___mcc_h303 = _source110.dtor_TypeArg_a0;
              DAST._IType _1465_o = _1417_t;
              {
                Dafny.ISequence<Dafny.Rune> _1466_genType;
                Dafny.ISequence<Dafny.Rune> _out230;
                _out230 = DCOMP.COMP.GenType(_1465_o, false, false);
                _1466_genType = _out230;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1419_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1418_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1466_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source107.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1467___mcc_h7 = _source107.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1468_l = _1467___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1468_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source107.is_CharLiteral) {
          Dafny.Rune _1469___mcc_h8 = _source107.dtor_CharLiteral_a0;
          Dafny.Rune _1470_c = _1469___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1470_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1471___mcc_h9 = _source107.dtor_Null_a0;
          DAST._IType _1472_tpe = _1471___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1473_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out231;
            _out231 = DCOMP.COMP.GenType(_1472_tpe, false, false);
            _1473_tpeGen = _out231;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1473_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source106.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1474___mcc_h10 = _source106.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1475_name = _1474___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1475_name);
          if (!((@params).Contains(_1475_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1475_name);
        }
      } else if (_source106.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1476___mcc_h11 = _source106.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1477_path = _1476___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out232;
          _out232 = DCOMP.COMP.GenPath(_1477_path);
          s = _out232;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source106.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1478___mcc_h12 = _source106.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1479_values = _1478___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1480_i;
          _1480_i = BigInteger.Zero;
          while ((_1480_i) < (new BigInteger((_1479_values).Count))) {
            if ((_1480_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1481_recursiveGen;
            bool _1482___v31;
            bool _1483_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1484_recIdents;
            Dafny.ISequence<Dafny.Rune> _out233;
            bool _out234;
            bool _out235;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out236;
            DCOMP.COMP.GenExpr((_1479_values).Select(_1480_i), selfIdent, @params, true, out _out233, out _out234, out _out235, out _out236);
            _1481_recursiveGen = _out233;
            _1482___v31 = _out234;
            _1483_isErased = _out235;
            _1484_recIdents = _out236;
            if (_1483_isErased) {
              _1481_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1481_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1481_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1484_recIdents);
            _1480_i = (_1480_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1485___mcc_h13 = _source106.dtor_path;
        Dafny.ISequence<DAST._IType> _1486___mcc_h14 = _source106.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1487___mcc_h15 = _source106.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1488_args = _1487___mcc_h15;
        Dafny.ISequence<DAST._IType> _1489_typeArgs = _1486___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1490_path = _1485___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1491_path;
          Dafny.ISequence<Dafny.Rune> _out237;
          _out237 = DCOMP.COMP.GenPath(_1490_path);
          _1491_path = _out237;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1491_path);
          if ((new BigInteger((_1489_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1492_i;
            _1492_i = BigInteger.Zero;
            while ((_1492_i) < (new BigInteger((_1489_typeArgs).Count))) {
              if ((_1492_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1493_typeString;
              Dafny.ISequence<Dafny.Rune> _out238;
              _out238 = DCOMP.COMP.GenType((_1489_typeArgs).Select(_1492_i), false, false);
              _1493_typeString = _out238;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1493_typeString);
              _1492_i = (_1492_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1494_i;
          _1494_i = BigInteger.Zero;
          while ((_1494_i) < (new BigInteger((_1488_args).Count))) {
            if ((_1494_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1495_recursiveGen;
            bool _1496___v32;
            bool _1497_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1498_recIdents;
            Dafny.ISequence<Dafny.Rune> _out239;
            bool _out240;
            bool _out241;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
            DCOMP.COMP.GenExpr((_1488_args).Select(_1494_i), selfIdent, @params, true, out _out239, out _out240, out _out241, out _out242);
            _1495_recursiveGen = _out239;
            _1496___v32 = _out240;
            _1497_isErased = _out241;
            _1498_recIdents = _out242;
            if (_1497_isErased) {
              _1495_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1495_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1495_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1498_recIdents);
            _1494_i = (_1494_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source106.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1499___mcc_h16 = _source106.dtor_dims;
        DAST._IType _1500___mcc_h17 = _source106.dtor_typ;
        DAST._IType _1501_typ = _1500___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1502_dims = _1499___mcc_h16;
        {
          BigInteger _1503_i;
          _1503_i = (new BigInteger((_1502_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1504_genTyp;
          Dafny.ISequence<Dafny.Rune> _out243;
          _out243 = DCOMP.COMP.GenType(_1501_typ, false, false);
          _1504_genTyp = _out243;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1504_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1503_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1505_recursiveGen;
            bool _1506___v33;
            bool _1507_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1508_recIdents;
            Dafny.ISequence<Dafny.Rune> _out244;
            bool _out245;
            bool _out246;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
            DCOMP.COMP.GenExpr((_1502_dims).Select(_1503_i), selfIdent, @params, true, out _out244, out _out245, out _out246, out _out247);
            _1505_recursiveGen = _out244;
            _1506___v33 = _out245;
            _1507_isErased = _out246;
            _1508_recIdents = _out247;
            if (!(_1507_isErased)) {
              _1505_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1505_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1505_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1508_recIdents);
            _1503_i = (_1503_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1509___mcc_h18 = _source106.dtor_path;
        Dafny.ISequence<DAST._IType> _1510___mcc_h19 = _source106.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1511___mcc_h20 = _source106.dtor_variant;
        bool _1512___mcc_h21 = _source106.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1513___mcc_h22 = _source106.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1514_values = _1513___mcc_h22;
        bool _1515_isCo = _1512___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1516_variant = _1511___mcc_h20;
        Dafny.ISequence<DAST._IType> _1517_typeArgs = _1510___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1518_path = _1509___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1519_path;
          Dafny.ISequence<Dafny.Rune> _out248;
          _out248 = DCOMP.COMP.GenPath(_1518_path);
          _1519_path = _out248;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1519_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1517_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1520_i;
            _1520_i = BigInteger.Zero;
            while ((_1520_i) < (new BigInteger((_1517_typeArgs).Count))) {
              if ((_1520_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1521_typeString;
              Dafny.ISequence<Dafny.Rune> _out249;
              _out249 = DCOMP.COMP.GenType((_1517_typeArgs).Select(_1520_i), false, false);
              _1521_typeString = _out249;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1521_typeString);
              _1520_i = (_1520_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1516_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1522_i;
          _1522_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1522_i) < (new BigInteger((_1514_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs8 = (_1514_values).Select(_1522_i);
            Dafny.ISequence<Dafny.Rune> _1523_name = _let_tmp_rhs8.dtor__0;
            DAST._IExpression _1524_value = _let_tmp_rhs8.dtor__1;
            if ((_1522_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1515_isCo) {
              Dafny.ISequence<Dafny.Rune> _1525_recursiveGen;
              bool _1526___v34;
              bool _1527_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1528_recIdents;
              Dafny.ISequence<Dafny.Rune> _out250;
              bool _out251;
              bool _out252;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out253;
              DCOMP.COMP.GenExpr(_1524_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out250, out _out251, out _out252, out _out253);
              _1525_recursiveGen = _out250;
              _1526___v34 = _out251;
              _1527_isErased = _out252;
              _1528_recIdents = _out253;
              if (!(_1527_isErased)) {
                _1525_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1525_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1528_recIdents);
              Dafny.ISequence<Dafny.Rune> _1529_allReadCloned;
              _1529_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1528_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1530_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1528_recIdents).Elements) {
                  _1530_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1528_recIdents).Contains(_1530_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1529_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1529_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1530_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1530_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1528_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1528_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1530_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1523_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1529_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1531_recursiveGen;
              bool _1532___v35;
              bool _1533_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1534_recIdents;
              Dafny.ISequence<Dafny.Rune> _out254;
              bool _out255;
              bool _out256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out257;
              DCOMP.COMP.GenExpr(_1524_value, selfIdent, @params, true, out _out254, out _out255, out _out256, out _out257);
              _1531_recursiveGen = _out254;
              _1532___v35 = _out255;
              _1533_isErased = _out256;
              _1534_recIdents = _out257;
              if (!(_1533_isErased)) {
                _1531_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1531_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1523_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1534_recIdents);
            }
            _1522_i = (_1522_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_Convert) {
        DAST._IExpression _1535___mcc_h23 = _source106.dtor_value;
        DAST._IType _1536___mcc_h24 = _source106.dtor_from;
        DAST._IType _1537___mcc_h25 = _source106.dtor_typ;
        DAST._IType _1538_toTpe = _1537___mcc_h25;
        DAST._IType _1539_fromTpe = _1536___mcc_h24;
        DAST._IExpression _1540_expr = _1535___mcc_h23;
        {
          if (object.Equals(_1539_fromTpe, _1538_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1541_recursiveGen;
            bool _1542_recOwned;
            bool _1543_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1544_recIdents;
            Dafny.ISequence<Dafny.Rune> _out258;
            bool _out259;
            bool _out260;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out261;
            DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out258, out _out259, out _out260, out _out261);
            _1541_recursiveGen = _out258;
            _1542_recOwned = _out259;
            _1543_recErased = _out260;
            _1544_recIdents = _out261;
            s = _1541_recursiveGen;
            isOwned = _1542_recOwned;
            isErased = _1543_recErased;
            readIdents = _1544_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source112 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1539_fromTpe, _1538_toTpe);
            DAST._IType _1545___mcc_h305 = _source112.dtor__0;
            DAST._IType _1546___mcc_h306 = _source112.dtor__1;
            DAST._IType _source113 = _1545___mcc_h305;
            if (_source113.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1547___mcc_h309 = _source113.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1548___mcc_h310 = _source113.dtor_typeArgs;
              DAST._IResolvedType _1549___mcc_h311 = _source113.dtor_resolved;
              DAST._IResolvedType _source114 = _1549___mcc_h311;
              if (_source114.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1550___mcc_h321 = _source114.dtor_path;
                DAST._IType _source115 = _1546___mcc_h306;
                if (_source115.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1551___mcc_h325 = _source115.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1552___mcc_h326 = _source115.dtor_typeArgs;
                  DAST._IResolvedType _1553___mcc_h327 = _source115.dtor_resolved;
                  DAST._IResolvedType _source116 = _1553___mcc_h327;
                  if (_source116.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1554___mcc_h331 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1555_recursiveGen;
                      bool _1556_recOwned;
                      bool _1557_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1558_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out262;
                      bool _out263;
                      bool _out264;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out262, out _out263, out _out264, out _out265);
                      _1555_recursiveGen = _out262;
                      _1556_recOwned = _out263;
                      _1557_recErased = _out264;
                      _1558_recIdents = _out265;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1555_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1556_recOwned;
                      isErased = _1557_recErased;
                      readIdents = _1558_recIdents;
                    }
                  } else if (_source116.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1559___mcc_h333 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1560_recursiveGen;
                      bool _1561_recOwned;
                      bool _1562_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1563_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out266;
                      bool _out267;
                      bool _out268;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out269;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out266, out _out267, out _out268, out _out269);
                      _1560_recursiveGen = _out266;
                      _1561_recOwned = _out267;
                      _1562_recErased = _out268;
                      _1563_recIdents = _out269;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1561_recOwned;
                      isErased = _1562_recErased;
                      readIdents = _1563_recIdents;
                    }
                  } else {
                    DAST._IType _1564___mcc_h335 = _source116.dtor_Newtype_a0;
                    DAST._IType _1565_b = _1564___mcc_h335;
                    {
                      if (object.Equals(_1539_fromTpe, _1565_b)) {
                        Dafny.ISequence<Dafny.Rune> _1566_recursiveGen;
                        bool _1567_recOwned;
                        bool _1568_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1569_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out270;
                        bool _out271;
                        bool _out272;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out273;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out270, out _out271, out _out272, out _out273);
                        _1566_recursiveGen = _out270;
                        _1567_recOwned = _out271;
                        _1568_recErased = _out272;
                        _1569_recIdents = _out273;
                        Dafny.ISequence<Dafny.Rune> _1570_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out274;
                        _out274 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _1570_rhsType = _out274;
                        Dafny.ISequence<Dafny.Rune> _1571_uneraseFn;
                        _1571_uneraseFn = ((_1567_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1570_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1571_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1566_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1567_recOwned;
                        isErased = false;
                        readIdents = _1569_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1565_b), _1565_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        s = _out275;
                        isOwned = _out276;
                        isErased = _out277;
                        readIdents = _out278;
                      }
                    }
                  }
                } else if (_source115.is_Nullable) {
                  DAST._IType _1572___mcc_h337 = _source115.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1573_recursiveGen;
                    bool _1574_recOwned;
                    bool _1575_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1576_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out279;
                    bool _out280;
                    bool _out281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out282;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281, out _out282);
                    _1573_recursiveGen = _out279;
                    _1574_recOwned = _out280;
                    _1575_recErased = _out281;
                    _1576_recIdents = _out282;
                    if (!(_1574_recOwned)) {
                      _1573_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1573_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1573_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1575_recErased;
                    readIdents = _1576_recIdents;
                  }
                } else if (_source115.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1577___mcc_h339 = _source115.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1578_recursiveGen;
                    bool _1579_recOwned;
                    bool _1580_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1581_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out283;
                    bool _out284;
                    bool _out285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out286;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out283, out _out284, out _out285, out _out286);
                    _1578_recursiveGen = _out283;
                    _1579_recOwned = _out284;
                    _1580_recErased = _out285;
                    _1581_recIdents = _out286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1579_recOwned;
                    isErased = _1580_recErased;
                    readIdents = _1581_recIdents;
                  }
                } else if (_source115.is_Array) {
                  DAST._IType _1582___mcc_h341 = _source115.dtor_element;
                  BigInteger _1583___mcc_h342 = _source115.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1584_recursiveGen;
                    bool _1585_recOwned;
                    bool _1586_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1587_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out287;
                    bool _out288;
                    bool _out289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out287, out _out288, out _out289, out _out290);
                    _1584_recursiveGen = _out287;
                    _1585_recOwned = _out288;
                    _1586_recErased = _out289;
                    _1587_recIdents = _out290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1584_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1585_recOwned;
                    isErased = _1586_recErased;
                    readIdents = _1587_recIdents;
                  }
                } else if (_source115.is_Seq) {
                  DAST._IType _1588___mcc_h345 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1589_recursiveGen;
                    bool _1590_recOwned;
                    bool _1591_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1592_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out291;
                    bool _out292;
                    bool _out293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out294;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out291, out _out292, out _out293, out _out294);
                    _1589_recursiveGen = _out291;
                    _1590_recOwned = _out292;
                    _1591_recErased = _out293;
                    _1592_recIdents = _out294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1590_recOwned;
                    isErased = _1591_recErased;
                    readIdents = _1592_recIdents;
                  }
                } else if (_source115.is_Set) {
                  DAST._IType _1593___mcc_h347 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1594_recursiveGen;
                    bool _1595_recOwned;
                    bool _1596_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1597_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out295;
                    bool _out296;
                    bool _out297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out298;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out295, out _out296, out _out297, out _out298);
                    _1594_recursiveGen = _out295;
                    _1595_recOwned = _out296;
                    _1596_recErased = _out297;
                    _1597_recIdents = _out298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1594_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1595_recOwned;
                    isErased = _1596_recErased;
                    readIdents = _1597_recIdents;
                  }
                } else if (_source115.is_Multiset) {
                  DAST._IType _1598___mcc_h349 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1599_recursiveGen;
                    bool _1600_recOwned;
                    bool _1601_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1602_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out299;
                    bool _out300;
                    bool _out301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out302;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out299, out _out300, out _out301, out _out302);
                    _1599_recursiveGen = _out299;
                    _1600_recOwned = _out300;
                    _1601_recErased = _out301;
                    _1602_recIdents = _out302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1600_recOwned;
                    isErased = _1601_recErased;
                    readIdents = _1602_recIdents;
                  }
                } else if (_source115.is_Map) {
                  DAST._IType _1603___mcc_h351 = _source115.dtor_key;
                  DAST._IType _1604___mcc_h352 = _source115.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1605_recursiveGen;
                    bool _1606_recOwned;
                    bool _1607_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1608_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out303;
                    bool _out304;
                    bool _out305;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out303, out _out304, out _out305, out _out306);
                    _1605_recursiveGen = _out303;
                    _1606_recOwned = _out304;
                    _1607_recErased = _out305;
                    _1608_recIdents = _out306;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1605_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1606_recOwned;
                    isErased = _1607_recErased;
                    readIdents = _1608_recIdents;
                  }
                } else if (_source115.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1609___mcc_h355 = _source115.dtor_args;
                  DAST._IType _1610___mcc_h356 = _source115.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1611_recursiveGen;
                    bool _1612_recOwned;
                    bool _1613_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1614_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out307;
                    bool _out308;
                    bool _out309;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out307, out _out308, out _out309, out _out310);
                    _1611_recursiveGen = _out307;
                    _1612_recOwned = _out308;
                    _1613_recErased = _out309;
                    _1614_recIdents = _out310;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1612_recOwned;
                    isErased = _1613_recErased;
                    readIdents = _1614_recIdents;
                  }
                } else if (_source115.is_Primitive) {
                  DAST._IPrimitive _1615___mcc_h359 = _source115.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1616_recursiveGen;
                    bool _1617_recOwned;
                    bool _1618_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1619_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out311;
                    bool _out312;
                    bool _out313;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out314;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out311, out _out312, out _out313, out _out314);
                    _1616_recursiveGen = _out311;
                    _1617_recOwned = _out312;
                    _1618_recErased = _out313;
                    _1619_recIdents = _out314;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1616_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1617_recOwned;
                    isErased = _1618_recErased;
                    readIdents = _1619_recIdents;
                  }
                } else if (_source115.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1620___mcc_h361 = _source115.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1621_recursiveGen;
                    bool _1622_recOwned;
                    bool _1623_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1624_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out315;
                    bool _out316;
                    bool _out317;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out315, out _out316, out _out317, out _out318);
                    _1621_recursiveGen = _out315;
                    _1622_recOwned = _out316;
                    _1623_recErased = _out317;
                    _1624_recIdents = _out318;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1621_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1622_recOwned;
                    isErased = _1623_recErased;
                    readIdents = _1624_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1625___mcc_h363 = _source115.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1626_recursiveGen;
                    bool _1627_recOwned;
                    bool _1628_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1629_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out319;
                    bool _out320;
                    bool _out321;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out322;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out319, out _out320, out _out321, out _out322);
                    _1626_recursiveGen = _out319;
                    _1627_recOwned = _out320;
                    _1628_recErased = _out321;
                    _1629_recIdents = _out322;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1626_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1627_recOwned;
                    isErased = _1628_recErased;
                    readIdents = _1629_recIdents;
                  }
                }
              } else if (_source114.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1630___mcc_h365 = _source114.dtor_path;
                DAST._IType _source117 = _1546___mcc_h306;
                if (_source117.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1631___mcc_h369 = _source117.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1632___mcc_h370 = _source117.dtor_typeArgs;
                  DAST._IResolvedType _1633___mcc_h371 = _source117.dtor_resolved;
                  DAST._IResolvedType _source118 = _1633___mcc_h371;
                  if (_source118.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1634___mcc_h375 = _source118.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1635_recursiveGen;
                      bool _1636_recOwned;
                      bool _1637_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1638_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out323;
                      bool _out324;
                      bool _out325;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out326;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out323, out _out324, out _out325, out _out326);
                      _1635_recursiveGen = _out323;
                      _1636_recOwned = _out324;
                      _1637_recErased = _out325;
                      _1638_recIdents = _out326;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1636_recOwned;
                      isErased = _1637_recErased;
                      readIdents = _1638_recIdents;
                    }
                  } else if (_source118.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1639___mcc_h377 = _source118.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1640_recursiveGen;
                      bool _1641_recOwned;
                      bool _1642_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1643_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out327;
                      bool _out328;
                      bool _out329;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out330;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out327, out _out328, out _out329, out _out330);
                      _1640_recursiveGen = _out327;
                      _1641_recOwned = _out328;
                      _1642_recErased = _out329;
                      _1643_recIdents = _out330;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1641_recOwned;
                      isErased = _1642_recErased;
                      readIdents = _1643_recIdents;
                    }
                  } else {
                    DAST._IType _1644___mcc_h379 = _source118.dtor_Newtype_a0;
                    DAST._IType _1645_b = _1644___mcc_h379;
                    {
                      if (object.Equals(_1539_fromTpe, _1645_b)) {
                        Dafny.ISequence<Dafny.Rune> _1646_recursiveGen;
                        bool _1647_recOwned;
                        bool _1648_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1649_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out331;
                        bool _out332;
                        bool _out333;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out334;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out331, out _out332, out _out333, out _out334);
                        _1646_recursiveGen = _out331;
                        _1647_recOwned = _out332;
                        _1648_recErased = _out333;
                        _1649_recIdents = _out334;
                        Dafny.ISequence<Dafny.Rune> _1650_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out335;
                        _out335 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _1650_rhsType = _out335;
                        Dafny.ISequence<Dafny.Rune> _1651_uneraseFn;
                        _1651_uneraseFn = ((_1647_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1650_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1651_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1647_recOwned;
                        isErased = false;
                        readIdents = _1649_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1645_b), _1645_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        s = _out336;
                        isOwned = _out337;
                        isErased = _out338;
                        readIdents = _out339;
                      }
                    }
                  }
                } else if (_source117.is_Nullable) {
                  DAST._IType _1652___mcc_h381 = _source117.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1653_recursiveGen;
                    bool _1654_recOwned;
                    bool _1655_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1656_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out340;
                    bool _out341;
                    bool _out342;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                    _1653_recursiveGen = _out340;
                    _1654_recOwned = _out341;
                    _1655_recErased = _out342;
                    _1656_recIdents = _out343;
                    if (!(_1654_recOwned)) {
                      _1653_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1653_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1653_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1655_recErased;
                    readIdents = _1656_recIdents;
                  }
                } else if (_source117.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1657___mcc_h383 = _source117.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                    bool _1659_recOwned;
                    bool _1660_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out344;
                    bool _out345;
                    bool _out346;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                    _1658_recursiveGen = _out344;
                    _1659_recOwned = _out345;
                    _1660_recErased = _out346;
                    _1661_recIdents = _out347;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1659_recOwned;
                    isErased = _1660_recErased;
                    readIdents = _1661_recIdents;
                  }
                } else if (_source117.is_Array) {
                  DAST._IType _1662___mcc_h385 = _source117.dtor_element;
                  BigInteger _1663___mcc_h386 = _source117.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1664_recursiveGen;
                    bool _1665_recOwned;
                    bool _1666_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1667_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out348;
                    bool _out349;
                    bool _out350;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out348, out _out349, out _out350, out _out351);
                    _1664_recursiveGen = _out348;
                    _1665_recOwned = _out349;
                    _1666_recErased = _out350;
                    _1667_recIdents = _out351;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1664_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1665_recOwned;
                    isErased = _1666_recErased;
                    readIdents = _1667_recIdents;
                  }
                } else if (_source117.is_Seq) {
                  DAST._IType _1668___mcc_h389 = _source117.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1669_recursiveGen;
                    bool _1670_recOwned;
                    bool _1671_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1672_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out352;
                    bool _out353;
                    bool _out354;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out352, out _out353, out _out354, out _out355);
                    _1669_recursiveGen = _out352;
                    _1670_recOwned = _out353;
                    _1671_recErased = _out354;
                    _1672_recIdents = _out355;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1669_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1670_recOwned;
                    isErased = _1671_recErased;
                    readIdents = _1672_recIdents;
                  }
                } else if (_source117.is_Set) {
                  DAST._IType _1673___mcc_h391 = _source117.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1674_recursiveGen;
                    bool _1675_recOwned;
                    bool _1676_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1677_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out356;
                    bool _out357;
                    bool _out358;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out359;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out356, out _out357, out _out358, out _out359);
                    _1674_recursiveGen = _out356;
                    _1675_recOwned = _out357;
                    _1676_recErased = _out358;
                    _1677_recIdents = _out359;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1675_recOwned;
                    isErased = _1676_recErased;
                    readIdents = _1677_recIdents;
                  }
                } else if (_source117.is_Multiset) {
                  DAST._IType _1678___mcc_h393 = _source117.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1679_recursiveGen;
                    bool _1680_recOwned;
                    bool _1681_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1682_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out360;
                    bool _out361;
                    bool _out362;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out363;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out360, out _out361, out _out362, out _out363);
                    _1679_recursiveGen = _out360;
                    _1680_recOwned = _out361;
                    _1681_recErased = _out362;
                    _1682_recIdents = _out363;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1679_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1680_recOwned;
                    isErased = _1681_recErased;
                    readIdents = _1682_recIdents;
                  }
                } else if (_source117.is_Map) {
                  DAST._IType _1683___mcc_h395 = _source117.dtor_key;
                  DAST._IType _1684___mcc_h396 = _source117.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1685_recursiveGen;
                    bool _1686_recOwned;
                    bool _1687_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1688_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out364;
                    bool _out365;
                    bool _out366;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out364, out _out365, out _out366, out _out367);
                    _1685_recursiveGen = _out364;
                    _1686_recOwned = _out365;
                    _1687_recErased = _out366;
                    _1688_recIdents = _out367;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1686_recOwned;
                    isErased = _1687_recErased;
                    readIdents = _1688_recIdents;
                  }
                } else if (_source117.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1689___mcc_h399 = _source117.dtor_args;
                  DAST._IType _1690___mcc_h400 = _source117.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1691_recursiveGen;
                    bool _1692_recOwned;
                    bool _1693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out368;
                    bool _out369;
                    bool _out370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out368, out _out369, out _out370, out _out371);
                    _1691_recursiveGen = _out368;
                    _1692_recOwned = _out369;
                    _1693_recErased = _out370;
                    _1694_recIdents = _out371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1692_recOwned;
                    isErased = _1693_recErased;
                    readIdents = _1694_recIdents;
                  }
                } else if (_source117.is_Primitive) {
                  DAST._IPrimitive _1695___mcc_h403 = _source117.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1696_recursiveGen;
                    bool _1697_recOwned;
                    bool _1698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out372;
                    bool _out373;
                    bool _out374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out375;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out372, out _out373, out _out374, out _out375);
                    _1696_recursiveGen = _out372;
                    _1697_recOwned = _out373;
                    _1698_recErased = _out374;
                    _1699_recIdents = _out375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1697_recOwned;
                    isErased = _1698_recErased;
                    readIdents = _1699_recIdents;
                  }
                } else if (_source117.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1700___mcc_h405 = _source117.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1701_recursiveGen;
                    bool _1702_recOwned;
                    bool _1703_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1704_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out376;
                    bool _out377;
                    bool _out378;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out376, out _out377, out _out378, out _out379);
                    _1701_recursiveGen = _out376;
                    _1702_recOwned = _out377;
                    _1703_recErased = _out378;
                    _1704_recIdents = _out379;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1701_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1702_recOwned;
                    isErased = _1703_recErased;
                    readIdents = _1704_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1705___mcc_h407 = _source117.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1706_recursiveGen;
                    bool _1707_recOwned;
                    bool _1708_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1709_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out380;
                    bool _out381;
                    bool _out382;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out383;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out380, out _out381, out _out382, out _out383);
                    _1706_recursiveGen = _out380;
                    _1707_recOwned = _out381;
                    _1708_recErased = _out382;
                    _1709_recIdents = _out383;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1706_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1707_recOwned;
                    isErased = _1708_recErased;
                    readIdents = _1709_recIdents;
                  }
                }
              } else {
                DAST._IType _1710___mcc_h409 = _source114.dtor_Newtype_a0;
                DAST._IType _source119 = _1546___mcc_h306;
                if (_source119.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1711___mcc_h413 = _source119.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1712___mcc_h414 = _source119.dtor_typeArgs;
                  DAST._IResolvedType _1713___mcc_h415 = _source119.dtor_resolved;
                  DAST._IResolvedType _source120 = _1713___mcc_h415;
                  if (_source120.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1714___mcc_h422 = _source120.dtor_path;
                    DAST._IType _1715_b = _1710___mcc_h409;
                    {
                      if (object.Equals(_1715_b, _1538_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1716_recursiveGen;
                        bool _1717_recOwned;
                        bool _1718_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1719_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out384;
                        bool _out385;
                        bool _out386;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out387;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out384, out _out385, out _out386, out _out387);
                        _1716_recursiveGen = _out384;
                        _1717_recOwned = _out385;
                        _1718_recErased = _out386;
                        _1719_recIdents = _out387;
                        Dafny.ISequence<Dafny.Rune> _1720_uneraseFn;
                        _1720_uneraseFn = ((_1717_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1720_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1717_recOwned;
                        isErased = true;
                        readIdents = _1719_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out388;
                        bool _out389;
                        bool _out390;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1715_b), _1715_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out388, out _out389, out _out390, out _out391);
                        s = _out388;
                        isOwned = _out389;
                        isErased = _out390;
                        readIdents = _out391;
                      }
                    }
                  } else if (_source120.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1721___mcc_h425 = _source120.dtor_path;
                    DAST._IType _1722_b = _1710___mcc_h409;
                    {
                      if (object.Equals(_1722_b, _1538_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1723_recursiveGen;
                        bool _1724_recOwned;
                        bool _1725_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1726_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out392;
                        bool _out393;
                        bool _out394;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out395;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out392, out _out393, out _out394, out _out395);
                        _1723_recursiveGen = _out392;
                        _1724_recOwned = _out393;
                        _1725_recErased = _out394;
                        _1726_recIdents = _out395;
                        Dafny.ISequence<Dafny.Rune> _1727_uneraseFn;
                        _1727_uneraseFn = ((_1724_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1727_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1723_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1724_recOwned;
                        isErased = true;
                        readIdents = _1726_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out396;
                        bool _out397;
                        bool _out398;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out399;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1722_b), _1722_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out396, out _out397, out _out398, out _out399);
                        s = _out396;
                        isOwned = _out397;
                        isErased = _out398;
                        readIdents = _out399;
                      }
                    }
                  } else {
                    DAST._IType _1728___mcc_h428 = _source120.dtor_Newtype_a0;
                    DAST._IType _1729_b = _1728___mcc_h428;
                    {
                      if (object.Equals(_1539_fromTpe, _1729_b)) {
                        Dafny.ISequence<Dafny.Rune> _1730_recursiveGen;
                        bool _1731_recOwned;
                        bool _1732_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1733_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out400;
                        bool _out401;
                        bool _out402;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out400, out _out401, out _out402, out _out403);
                        _1730_recursiveGen = _out400;
                        _1731_recOwned = _out401;
                        _1732_recErased = _out402;
                        _1733_recIdents = _out403;
                        Dafny.ISequence<Dafny.Rune> _1734_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out404;
                        _out404 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _1734_rhsType = _out404;
                        Dafny.ISequence<Dafny.Rune> _1735_uneraseFn;
                        _1735_uneraseFn = ((_1731_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1734_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1735_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1731_recOwned;
                        isErased = false;
                        readIdents = _1733_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out405;
                        bool _out406;
                        bool _out407;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1729_b), _1729_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                        s = _out405;
                        isOwned = _out406;
                        isErased = _out407;
                        readIdents = _out408;
                      }
                    }
                  }
                } else if (_source119.is_Nullable) {
                  DAST._IType _1736___mcc_h431 = _source119.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1737_recursiveGen;
                    bool _1738_recOwned;
                    bool _1739_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1740_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out409;
                    bool _out410;
                    bool _out411;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                    _1737_recursiveGen = _out409;
                    _1738_recOwned = _out410;
                    _1739_recErased = _out411;
                    _1740_recIdents = _out412;
                    if (!(_1738_recOwned)) {
                      _1737_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1737_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1739_recErased;
                    readIdents = _1740_recIdents;
                  }
                } else if (_source119.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1741___mcc_h434 = _source119.dtor_Tuple_a0;
                  DAST._IType _1742_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1742_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                      bool _1744_recOwned;
                      bool _1745_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _1743_recursiveGen = _out413;
                      _1744_recOwned = _out414;
                      _1745_recErased = _out415;
                      _1746_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _1747_uneraseFn;
                      _1747_uneraseFn = ((_1744_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1747_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1744_recOwned;
                      isErased = true;
                      readIdents = _1746_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1742_b), _1742_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source119.is_Array) {
                  DAST._IType _1748___mcc_h437 = _source119.dtor_element;
                  BigInteger _1749___mcc_h438 = _source119.dtor_dims;
                  DAST._IType _1750_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1750_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1751_recursiveGen;
                      bool _1752_recOwned;
                      bool _1753_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1754_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _1751_recursiveGen = _out421;
                      _1752_recOwned = _out422;
                      _1753_recErased = _out423;
                      _1754_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _1755_uneraseFn;
                      _1755_uneraseFn = ((_1752_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1755_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1751_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1752_recOwned;
                      isErased = true;
                      readIdents = _1754_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1750_b), _1750_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else if (_source119.is_Seq) {
                  DAST._IType _1756___mcc_h443 = _source119.dtor_element;
                  DAST._IType _1757_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1757_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1758_recursiveGen;
                      bool _1759_recOwned;
                      bool _1760_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1761_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _1758_recursiveGen = _out429;
                      _1759_recOwned = _out430;
                      _1760_recErased = _out431;
                      _1761_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _1762_uneraseFn;
                      _1762_uneraseFn = ((_1759_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1762_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1758_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1759_recOwned;
                      isErased = true;
                      readIdents = _1761_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1757_b), _1757_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                } else if (_source119.is_Set) {
                  DAST._IType _1763___mcc_h446 = _source119.dtor_element;
                  DAST._IType _1764_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1764_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1765_recursiveGen;
                      bool _1766_recOwned;
                      bool _1767_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1768_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out437;
                      bool _out438;
                      bool _out439;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                      _1765_recursiveGen = _out437;
                      _1766_recOwned = _out438;
                      _1767_recErased = _out439;
                      _1768_recIdents = _out440;
                      Dafny.ISequence<Dafny.Rune> _1769_uneraseFn;
                      _1769_uneraseFn = ((_1766_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1769_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1765_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1766_recOwned;
                      isErased = true;
                      readIdents = _1768_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out441;
                      bool _out442;
                      bool _out443;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1764_b), _1764_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                      s = _out441;
                      isOwned = _out442;
                      isErased = _out443;
                      readIdents = _out444;
                    }
                  }
                } else if (_source119.is_Multiset) {
                  DAST._IType _1770___mcc_h449 = _source119.dtor_element;
                  DAST._IType _1771_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1771_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1772_recursiveGen;
                      bool _1773_recOwned;
                      bool _1774_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1775_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out445;
                      bool _out446;
                      bool _out447;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                      _1772_recursiveGen = _out445;
                      _1773_recOwned = _out446;
                      _1774_recErased = _out447;
                      _1775_recIdents = _out448;
                      Dafny.ISequence<Dafny.Rune> _1776_uneraseFn;
                      _1776_uneraseFn = ((_1773_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1776_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1773_recOwned;
                      isErased = true;
                      readIdents = _1775_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out449;
                      bool _out450;
                      bool _out451;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1771_b), _1771_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                      s = _out449;
                      isOwned = _out450;
                      isErased = _out451;
                      readIdents = _out452;
                    }
                  }
                } else if (_source119.is_Map) {
                  DAST._IType _1777___mcc_h452 = _source119.dtor_key;
                  DAST._IType _1778___mcc_h453 = _source119.dtor_value;
                  DAST._IType _1779_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1779_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1780_recursiveGen;
                      bool _1781_recOwned;
                      bool _1782_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1783_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out453;
                      bool _out454;
                      bool _out455;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                      _1780_recursiveGen = _out453;
                      _1781_recOwned = _out454;
                      _1782_recErased = _out455;
                      _1783_recIdents = _out456;
                      Dafny.ISequence<Dafny.Rune> _1784_uneraseFn;
                      _1784_uneraseFn = ((_1781_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1784_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1781_recOwned;
                      isErased = true;
                      readIdents = _1783_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out457;
                      bool _out458;
                      bool _out459;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1779_b), _1779_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                      s = _out457;
                      isOwned = _out458;
                      isErased = _out459;
                      readIdents = _out460;
                    }
                  }
                } else if (_source119.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1785___mcc_h458 = _source119.dtor_args;
                  DAST._IType _1786___mcc_h459 = _source119.dtor_result;
                  DAST._IType _1787_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1787_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1788_recursiveGen;
                      bool _1789_recOwned;
                      bool _1790_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1791_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out461;
                      bool _out462;
                      bool _out463;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                      _1788_recursiveGen = _out461;
                      _1789_recOwned = _out462;
                      _1790_recErased = _out463;
                      _1791_recIdents = _out464;
                      Dafny.ISequence<Dafny.Rune> _1792_uneraseFn;
                      _1792_uneraseFn = ((_1789_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1792_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1789_recOwned;
                      isErased = true;
                      readIdents = _1791_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out465;
                      bool _out466;
                      bool _out467;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1787_b), _1787_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                      s = _out465;
                      isOwned = _out466;
                      isErased = _out467;
                      readIdents = _out468;
                    }
                  }
                } else if (_source119.is_Primitive) {
                  DAST._IPrimitive _1793___mcc_h464 = _source119.dtor_Primitive_a0;
                  DAST._IType _1794_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1794_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                      bool _1796_recOwned;
                      bool _1797_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out469;
                      bool _out470;
                      bool _out471;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                      _1795_recursiveGen = _out469;
                      _1796_recOwned = _out470;
                      _1797_recErased = _out471;
                      _1798_recIdents = _out472;
                      Dafny.ISequence<Dafny.Rune> _1799_uneraseFn;
                      _1799_uneraseFn = ((_1796_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1799_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1796_recOwned;
                      isErased = true;
                      readIdents = _1798_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out473;
                      bool _out474;
                      bool _out475;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1794_b), _1794_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                      s = _out473;
                      isOwned = _out474;
                      isErased = _out475;
                      readIdents = _out476;
                    }
                  }
                } else if (_source119.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1800___mcc_h467 = _source119.dtor_Passthrough_a0;
                  DAST._IType _1801_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1801_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1802_recursiveGen;
                      bool _1803_recOwned;
                      bool _1804_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1805_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out477;
                      bool _out478;
                      bool _out479;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                      _1802_recursiveGen = _out477;
                      _1803_recOwned = _out478;
                      _1804_recErased = _out479;
                      _1805_recIdents = _out480;
                      Dafny.ISequence<Dafny.Rune> _1806_uneraseFn;
                      _1806_uneraseFn = ((_1803_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1806_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1802_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1803_recOwned;
                      isErased = true;
                      readIdents = _1805_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out481;
                      bool _out482;
                      bool _out483;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1801_b), _1801_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                      s = _out481;
                      isOwned = _out482;
                      isErased = _out483;
                      readIdents = _out484;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1807___mcc_h470 = _source119.dtor_TypeArg_a0;
                  DAST._IType _1808_b = _1710___mcc_h409;
                  {
                    if (object.Equals(_1808_b, _1538_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1809_recursiveGen;
                      bool _1810_recOwned;
                      bool _1811_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1812_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out485;
                      bool _out486;
                      bool _out487;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                      _1809_recursiveGen = _out485;
                      _1810_recOwned = _out486;
                      _1811_recErased = _out487;
                      _1812_recIdents = _out488;
                      Dafny.ISequence<Dafny.Rune> _1813_uneraseFn;
                      _1813_uneraseFn = ((_1810_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1813_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1810_recOwned;
                      isErased = true;
                      readIdents = _1812_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out489;
                      bool _out490;
                      bool _out491;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1808_b), _1808_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                      s = _out489;
                      isOwned = _out490;
                      isErased = _out491;
                      readIdents = _out492;
                    }
                  }
                }
              }
            } else if (_source113.is_Nullable) {
              DAST._IType _1814___mcc_h473 = _source113.dtor_Nullable_a0;
              DAST._IType _source121 = _1546___mcc_h306;
              if (_source121.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1815___mcc_h477 = _source121.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1816___mcc_h478 = _source121.dtor_typeArgs;
                DAST._IResolvedType _1817___mcc_h479 = _source121.dtor_resolved;
                DAST._IResolvedType _source122 = _1817___mcc_h479;
                if (_source122.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1818___mcc_h486 = _source122.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1819_recursiveGen;
                    bool _1820_recOwned;
                    bool _1821_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1822_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1819_recursiveGen = _out493;
                    _1820_recOwned = _out494;
                    _1821_recErased = _out495;
                    _1822_recIdents = _out496;
                    if (!(_1820_recOwned)) {
                      _1819_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1819_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1819_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1820_recOwned;
                    isErased = _1821_recErased;
                    readIdents = _1822_recIdents;
                  }
                } else if (_source122.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1823___mcc_h489 = _source122.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1824_recursiveGen;
                    bool _1825_recOwned;
                    bool _1826_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1827_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1824_recursiveGen = _out497;
                    _1825_recOwned = _out498;
                    _1826_recErased = _out499;
                    _1827_recIdents = _out500;
                    if (!(_1825_recOwned)) {
                      _1824_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1824_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1824_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1825_recOwned;
                    isErased = _1826_recErased;
                    readIdents = _1827_recIdents;
                  }
                } else {
                  DAST._IType _1828___mcc_h492 = _source122.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1829_recursiveGen;
                    bool _1830_recOwned;
                    bool _1831_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1832_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out501;
                    bool _out502;
                    bool _out503;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                    _1829_recursiveGen = _out501;
                    _1830_recOwned = _out502;
                    _1831_recErased = _out503;
                    _1832_recIdents = _out504;
                    if (!(_1830_recOwned)) {
                      _1829_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1829_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1829_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1830_recOwned;
                    isErased = _1831_recErased;
                    readIdents = _1832_recIdents;
                  }
                }
              } else if (_source121.is_Nullable) {
                DAST._IType _1833___mcc_h495 = _source121.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1834_recursiveGen;
                  bool _1835_recOwned;
                  bool _1836_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1837_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out505;
                  bool _out506;
                  bool _out507;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out508;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out505, out _out506, out _out507, out _out508);
                  _1834_recursiveGen = _out505;
                  _1835_recOwned = _out506;
                  _1836_recErased = _out507;
                  _1837_recIdents = _out508;
                  if (!(_1835_recOwned)) {
                    _1834_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1834_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1834_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1835_recOwned;
                  isErased = _1836_recErased;
                  readIdents = _1837_recIdents;
                }
              } else if (_source121.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1838___mcc_h498 = _source121.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1839_recursiveGen;
                  bool _1840_recOwned;
                  bool _1841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out509;
                  bool _out510;
                  bool _out511;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out512;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out509, out _out510, out _out511, out _out512);
                  _1839_recursiveGen = _out509;
                  _1840_recOwned = _out510;
                  _1841_recErased = _out511;
                  _1842_recIdents = _out512;
                  if (!(_1840_recOwned)) {
                    _1839_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1839_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1839_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1840_recOwned;
                  isErased = _1841_recErased;
                  readIdents = _1842_recIdents;
                }
              } else if (_source121.is_Array) {
                DAST._IType _1843___mcc_h501 = _source121.dtor_element;
                BigInteger _1844___mcc_h502 = _source121.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1845_recursiveGen;
                  bool _1846_recOwned;
                  bool _1847_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1848_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out513;
                  bool _out514;
                  bool _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out513, out _out514, out _out515, out _out516);
                  _1845_recursiveGen = _out513;
                  _1846_recOwned = _out514;
                  _1847_recErased = _out515;
                  _1848_recIdents = _out516;
                  if (!(_1846_recOwned)) {
                    _1845_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1845_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1845_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1846_recOwned;
                  isErased = _1847_recErased;
                  readIdents = _1848_recIdents;
                }
              } else if (_source121.is_Seq) {
                DAST._IType _1849___mcc_h507 = _source121.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1850_recursiveGen;
                  bool _1851_recOwned;
                  bool _1852_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1853_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out517;
                  bool _out518;
                  bool _out519;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out520;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out517, out _out518, out _out519, out _out520);
                  _1850_recursiveGen = _out517;
                  _1851_recOwned = _out518;
                  _1852_recErased = _out519;
                  _1853_recIdents = _out520;
                  if (!(_1851_recOwned)) {
                    _1850_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1850_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1850_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1851_recOwned;
                  isErased = _1852_recErased;
                  readIdents = _1853_recIdents;
                }
              } else if (_source121.is_Set) {
                DAST._IType _1854___mcc_h510 = _source121.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1855_recursiveGen;
                  bool _1856_recOwned;
                  bool _1857_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1858_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out521;
                  bool _out522;
                  bool _out523;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out521, out _out522, out _out523, out _out524);
                  _1855_recursiveGen = _out521;
                  _1856_recOwned = _out522;
                  _1857_recErased = _out523;
                  _1858_recIdents = _out524;
                  if (!(_1856_recOwned)) {
                    _1855_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1855_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1855_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1856_recOwned;
                  isErased = _1857_recErased;
                  readIdents = _1858_recIdents;
                }
              } else if (_source121.is_Multiset) {
                DAST._IType _1859___mcc_h513 = _source121.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1860_recursiveGen;
                  bool _1861_recOwned;
                  bool _1862_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1863_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out525;
                  bool _out526;
                  bool _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out525, out _out526, out _out527, out _out528);
                  _1860_recursiveGen = _out525;
                  _1861_recOwned = _out526;
                  _1862_recErased = _out527;
                  _1863_recIdents = _out528;
                  if (!(_1861_recOwned)) {
                    _1860_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1860_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1860_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1861_recOwned;
                  isErased = _1862_recErased;
                  readIdents = _1863_recIdents;
                }
              } else if (_source121.is_Map) {
                DAST._IType _1864___mcc_h516 = _source121.dtor_key;
                DAST._IType _1865___mcc_h517 = _source121.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1866_recursiveGen;
                  bool _1867_recOwned;
                  bool _1868_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1869_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out529;
                  bool _out530;
                  bool _out531;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out532;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out529, out _out530, out _out531, out _out532);
                  _1866_recursiveGen = _out529;
                  _1867_recOwned = _out530;
                  _1868_recErased = _out531;
                  _1869_recIdents = _out532;
                  if (!(_1867_recOwned)) {
                    _1866_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1867_recOwned;
                  isErased = _1868_recErased;
                  readIdents = _1869_recIdents;
                }
              } else if (_source121.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1870___mcc_h522 = _source121.dtor_args;
                DAST._IType _1871___mcc_h523 = _source121.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1872_recursiveGen;
                  bool _1873_recOwned;
                  bool _1874_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1875_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out533;
                  bool _out534;
                  bool _out535;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out536;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out533, out _out534, out _out535, out _out536);
                  _1872_recursiveGen = _out533;
                  _1873_recOwned = _out534;
                  _1874_recErased = _out535;
                  _1875_recIdents = _out536;
                  if (!(_1873_recOwned)) {
                    _1872_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1873_recOwned;
                  isErased = _1874_recErased;
                  readIdents = _1875_recIdents;
                }
              } else if (_source121.is_Primitive) {
                DAST._IPrimitive _1876___mcc_h528 = _source121.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1877_recursiveGen;
                  bool _1878_recOwned;
                  bool _1879_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1880_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out537;
                  bool _out538;
                  bool _out539;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out537, out _out538, out _out539, out _out540);
                  _1877_recursiveGen = _out537;
                  _1878_recOwned = _out538;
                  _1879_recErased = _out539;
                  _1880_recIdents = _out540;
                  if (!(_1878_recOwned)) {
                    _1877_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1877_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1877_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1878_recOwned;
                  isErased = _1879_recErased;
                  readIdents = _1880_recIdents;
                }
              } else if (_source121.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1881___mcc_h531 = _source121.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1882_recursiveGen;
                  bool _1883_recOwned;
                  bool _1884_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1885_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out541;
                  bool _out542;
                  bool _out543;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out541, out _out542, out _out543, out _out544);
                  _1882_recursiveGen = _out541;
                  _1883_recOwned = _out542;
                  _1884_recErased = _out543;
                  _1885_recIdents = _out544;
                  if (!(_1883_recOwned)) {
                    _1882_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1882_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1882_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1883_recOwned;
                  isErased = _1884_recErased;
                  readIdents = _1885_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1886___mcc_h534 = _source121.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1887_recursiveGen;
                  bool _1888_recOwned;
                  bool _1889_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1890_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out545;
                  bool _out546;
                  bool _out547;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out548;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out545, out _out546, out _out547, out _out548);
                  _1887_recursiveGen = _out545;
                  _1888_recOwned = _out546;
                  _1889_recErased = _out547;
                  _1890_recIdents = _out548;
                  if (!(_1888_recOwned)) {
                    _1887_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1887_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1887_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1888_recOwned;
                  isErased = _1889_recErased;
                  readIdents = _1890_recIdents;
                }
              }
            } else if (_source113.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1891___mcc_h537 = _source113.dtor_Tuple_a0;
              DAST._IType _source123 = _1546___mcc_h306;
              if (_source123.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1892___mcc_h541 = _source123.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1893___mcc_h542 = _source123.dtor_typeArgs;
                DAST._IResolvedType _1894___mcc_h543 = _source123.dtor_resolved;
                DAST._IResolvedType _source124 = _1894___mcc_h543;
                if (_source124.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1895___mcc_h547 = _source124.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1896_recursiveGen;
                    bool _1897_recOwned;
                    bool _1898_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1899_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out549;
                    bool _out550;
                    bool _out551;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out552;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out549, out _out550, out _out551, out _out552);
                    _1896_recursiveGen = _out549;
                    _1897_recOwned = _out550;
                    _1898_recErased = _out551;
                    _1899_recIdents = _out552;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1897_recOwned;
                    isErased = _1898_recErased;
                    readIdents = _1899_recIdents;
                  }
                } else if (_source124.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1900___mcc_h549 = _source124.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1901_recursiveGen;
                    bool _1902_recOwned;
                    bool _1903_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1904_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out553;
                    bool _out554;
                    bool _out555;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out553, out _out554, out _out555, out _out556);
                    _1901_recursiveGen = _out553;
                    _1902_recOwned = _out554;
                    _1903_recErased = _out555;
                    _1904_recIdents = _out556;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1902_recOwned;
                    isErased = _1903_recErased;
                    readIdents = _1904_recIdents;
                  }
                } else {
                  DAST._IType _1905___mcc_h551 = _source124.dtor_Newtype_a0;
                  DAST._IType _1906_b = _1905___mcc_h551;
                  {
                    if (object.Equals(_1539_fromTpe, _1906_b)) {
                      Dafny.ISequence<Dafny.Rune> _1907_recursiveGen;
                      bool _1908_recOwned;
                      bool _1909_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1910_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out557;
                      bool _out558;
                      bool _out559;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out560;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out557, out _out558, out _out559, out _out560);
                      _1907_recursiveGen = _out557;
                      _1908_recOwned = _out558;
                      _1909_recErased = _out559;
                      _1910_recIdents = _out560;
                      Dafny.ISequence<Dafny.Rune> _1911_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out561;
                      _out561 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _1911_rhsType = _out561;
                      Dafny.ISequence<Dafny.Rune> _1912_uneraseFn;
                      _1912_uneraseFn = ((_1908_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1911_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1912_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1908_recOwned;
                      isErased = false;
                      readIdents = _1910_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1906_b), _1906_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      s = _out562;
                      isOwned = _out563;
                      isErased = _out564;
                      readIdents = _out565;
                    }
                  }
                }
              } else if (_source123.is_Nullable) {
                DAST._IType _1913___mcc_h553 = _source123.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1914_recursiveGen;
                  bool _1915_recOwned;
                  bool _1916_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1917_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out566;
                  bool _out567;
                  bool _out568;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568, out _out569);
                  _1914_recursiveGen = _out566;
                  _1915_recOwned = _out567;
                  _1916_recErased = _out568;
                  _1917_recIdents = _out569;
                  if (!(_1915_recOwned)) {
                    _1914_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1914_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1916_recErased;
                  readIdents = _1917_recIdents;
                }
              } else if (_source123.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1918___mcc_h555 = _source123.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1919_recursiveGen;
                  bool _1920_recOwned;
                  bool _1921_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1922_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out570;
                  bool _out571;
                  bool _out572;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out573;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out570, out _out571, out _out572, out _out573);
                  _1919_recursiveGen = _out570;
                  _1920_recOwned = _out571;
                  _1921_recErased = _out572;
                  _1922_recIdents = _out573;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1920_recOwned;
                  isErased = _1921_recErased;
                  readIdents = _1922_recIdents;
                }
              } else if (_source123.is_Array) {
                DAST._IType _1923___mcc_h557 = _source123.dtor_element;
                BigInteger _1924___mcc_h558 = _source123.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1925_recursiveGen;
                  bool _1926_recOwned;
                  bool _1927_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out574;
                  bool _out575;
                  bool _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out574, out _out575, out _out576, out _out577);
                  _1925_recursiveGen = _out574;
                  _1926_recOwned = _out575;
                  _1927_recErased = _out576;
                  _1928_recIdents = _out577;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1926_recOwned;
                  isErased = _1927_recErased;
                  readIdents = _1928_recIdents;
                }
              } else if (_source123.is_Seq) {
                DAST._IType _1929___mcc_h561 = _source123.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1930_recursiveGen;
                  bool _1931_recOwned;
                  bool _1932_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out578;
                  bool _out579;
                  bool _out580;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out581;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out578, out _out579, out _out580, out _out581);
                  _1930_recursiveGen = _out578;
                  _1931_recOwned = _out579;
                  _1932_recErased = _out580;
                  _1933_recIdents = _out581;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1931_recOwned;
                  isErased = _1932_recErased;
                  readIdents = _1933_recIdents;
                }
              } else if (_source123.is_Set) {
                DAST._IType _1934___mcc_h563 = _source123.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                  bool _1936_recOwned;
                  bool _1937_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out582;
                  bool _out583;
                  bool _out584;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out585;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out582, out _out583, out _out584, out _out585);
                  _1935_recursiveGen = _out582;
                  _1936_recOwned = _out583;
                  _1937_recErased = _out584;
                  _1938_recIdents = _out585;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1936_recOwned;
                  isErased = _1937_recErased;
                  readIdents = _1938_recIdents;
                }
              } else if (_source123.is_Multiset) {
                DAST._IType _1939___mcc_h565 = _source123.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1940_recursiveGen;
                  bool _1941_recOwned;
                  bool _1942_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1943_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out586;
                  bool _out587;
                  bool _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out586, out _out587, out _out588, out _out589);
                  _1940_recursiveGen = _out586;
                  _1941_recOwned = _out587;
                  _1942_recErased = _out588;
                  _1943_recIdents = _out589;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1940_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1941_recOwned;
                  isErased = _1942_recErased;
                  readIdents = _1943_recIdents;
                }
              } else if (_source123.is_Map) {
                DAST._IType _1944___mcc_h567 = _source123.dtor_key;
                DAST._IType _1945___mcc_h568 = _source123.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1946_recursiveGen;
                  bool _1947_recOwned;
                  bool _1948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out590;
                  bool _out591;
                  bool _out592;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out593;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out590, out _out591, out _out592, out _out593);
                  _1946_recursiveGen = _out590;
                  _1947_recOwned = _out591;
                  _1948_recErased = _out592;
                  _1949_recIdents = _out593;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1947_recOwned;
                  isErased = _1948_recErased;
                  readIdents = _1949_recIdents;
                }
              } else if (_source123.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1950___mcc_h571 = _source123.dtor_args;
                DAST._IType _1951___mcc_h572 = _source123.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1952_recursiveGen;
                  bool _1953_recOwned;
                  bool _1954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out594;
                  bool _out595;
                  bool _out596;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out597;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out594, out _out595, out _out596, out _out597);
                  _1952_recursiveGen = _out594;
                  _1953_recOwned = _out595;
                  _1954_recErased = _out596;
                  _1955_recIdents = _out597;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1953_recOwned;
                  isErased = _1954_recErased;
                  readIdents = _1955_recIdents;
                }
              } else if (_source123.is_Primitive) {
                DAST._IPrimitive _1956___mcc_h575 = _source123.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1957_recursiveGen;
                  bool _1958_recOwned;
                  bool _1959_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out598;
                  bool _out599;
                  bool _out600;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out598, out _out599, out _out600, out _out601);
                  _1957_recursiveGen = _out598;
                  _1958_recOwned = _out599;
                  _1959_recErased = _out600;
                  _1960_recIdents = _out601;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1958_recOwned;
                  isErased = _1959_recErased;
                  readIdents = _1960_recIdents;
                }
              } else if (_source123.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1961___mcc_h577 = _source123.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                  bool _1963_recOwned;
                  bool _1964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out602;
                  bool _out603;
                  bool _out604;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out602, out _out603, out _out604, out _out605);
                  _1962_recursiveGen = _out602;
                  _1963_recOwned = _out603;
                  _1964_recErased = _out604;
                  _1965_recIdents = _out605;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1963_recOwned;
                  isErased = _1964_recErased;
                  readIdents = _1965_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1966___mcc_h579 = _source123.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1967_recursiveGen;
                  bool _1968_recOwned;
                  bool _1969_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1970_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out606;
                  bool _out607;
                  bool _out608;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out609;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out606, out _out607, out _out608, out _out609);
                  _1967_recursiveGen = _out606;
                  _1968_recOwned = _out607;
                  _1969_recErased = _out608;
                  _1970_recIdents = _out609;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1967_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1968_recOwned;
                  isErased = _1969_recErased;
                  readIdents = _1970_recIdents;
                }
              }
            } else if (_source113.is_Array) {
              DAST._IType _1971___mcc_h581 = _source113.dtor_element;
              BigInteger _1972___mcc_h582 = _source113.dtor_dims;
              DAST._IType _source125 = _1546___mcc_h306;
              if (_source125.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1973___mcc_h589 = _source125.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1974___mcc_h590 = _source125.dtor_typeArgs;
                DAST._IResolvedType _1975___mcc_h591 = _source125.dtor_resolved;
                DAST._IResolvedType _source126 = _1975___mcc_h591;
                if (_source126.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1976___mcc_h595 = _source126.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1977_recursiveGen;
                    bool _1978_recOwned;
                    bool _1979_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1980_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out610;
                    bool _out611;
                    bool _out612;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out613;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out610, out _out611, out _out612, out _out613);
                    _1977_recursiveGen = _out610;
                    _1978_recOwned = _out611;
                    _1979_recErased = _out612;
                    _1980_recIdents = _out613;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1978_recOwned;
                    isErased = _1979_recErased;
                    readIdents = _1980_recIdents;
                  }
                } else if (_source126.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1981___mcc_h597 = _source126.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1982_recursiveGen;
                    bool _1983_recOwned;
                    bool _1984_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1985_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out614;
                    bool _out615;
                    bool _out616;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out614, out _out615, out _out616, out _out617);
                    _1982_recursiveGen = _out614;
                    _1983_recOwned = _out615;
                    _1984_recErased = _out616;
                    _1985_recIdents = _out617;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1982_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1983_recOwned;
                    isErased = _1984_recErased;
                    readIdents = _1985_recIdents;
                  }
                } else {
                  DAST._IType _1986___mcc_h599 = _source126.dtor_Newtype_a0;
                  DAST._IType _1987_b = _1986___mcc_h599;
                  {
                    if (object.Equals(_1539_fromTpe, _1987_b)) {
                      Dafny.ISequence<Dafny.Rune> _1988_recursiveGen;
                      bool _1989_recOwned;
                      bool _1990_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1991_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out618;
                      bool _out619;
                      bool _out620;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out621;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out618, out _out619, out _out620, out _out621);
                      _1988_recursiveGen = _out618;
                      _1989_recOwned = _out619;
                      _1990_recErased = _out620;
                      _1991_recIdents = _out621;
                      Dafny.ISequence<Dafny.Rune> _1992_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out622;
                      _out622 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _1992_rhsType = _out622;
                      Dafny.ISequence<Dafny.Rune> _1993_uneraseFn;
                      _1993_uneraseFn = ((_1989_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1992_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1993_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1988_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1989_recOwned;
                      isErased = false;
                      readIdents = _1991_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _1987_b), _1987_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      s = _out623;
                      isOwned = _out624;
                      isErased = _out625;
                      readIdents = _out626;
                    }
                  }
                }
              } else if (_source125.is_Nullable) {
                DAST._IType _1994___mcc_h601 = _source125.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1995_recursiveGen;
                  bool _1996_recOwned;
                  bool _1997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out627;
                  bool _out628;
                  bool _out629;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629, out _out630);
                  _1995_recursiveGen = _out627;
                  _1996_recOwned = _out628;
                  _1997_recErased = _out629;
                  _1998_recIdents = _out630;
                  if (!(_1996_recOwned)) {
                    _1995_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1995_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1997_recErased;
                  readIdents = _1998_recIdents;
                }
              } else if (_source125.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1999___mcc_h603 = _source125.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2000_recursiveGen;
                  bool _2001_recOwned;
                  bool _2002_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2003_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out631;
                  bool _out632;
                  bool _out633;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out631, out _out632, out _out633, out _out634);
                  _2000_recursiveGen = _out631;
                  _2001_recOwned = _out632;
                  _2002_recErased = _out633;
                  _2003_recIdents = _out634;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2000_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2001_recOwned;
                  isErased = _2002_recErased;
                  readIdents = _2003_recIdents;
                }
              } else if (_source125.is_Array) {
                DAST._IType _2004___mcc_h605 = _source125.dtor_element;
                BigInteger _2005___mcc_h606 = _source125.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2006_recursiveGen;
                  bool _2007_recOwned;
                  bool _2008_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2009_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out635;
                  bool _out636;
                  bool _out637;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out635, out _out636, out _out637, out _out638);
                  _2006_recursiveGen = _out635;
                  _2007_recOwned = _out636;
                  _2008_recErased = _out637;
                  _2009_recIdents = _out638;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2006_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2007_recOwned;
                  isErased = _2008_recErased;
                  readIdents = _2009_recIdents;
                }
              } else if (_source125.is_Seq) {
                DAST._IType _2010___mcc_h609 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2011_recursiveGen;
                  bool _2012_recOwned;
                  bool _2013_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2014_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out639;
                  bool _out640;
                  bool _out641;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out642;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out639, out _out640, out _out641, out _out642);
                  _2011_recursiveGen = _out639;
                  _2012_recOwned = _out640;
                  _2013_recErased = _out641;
                  _2014_recIdents = _out642;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2011_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2012_recOwned;
                  isErased = _2013_recErased;
                  readIdents = _2014_recIdents;
                }
              } else if (_source125.is_Set) {
                DAST._IType _2015___mcc_h611 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2016_recursiveGen;
                  bool _2017_recOwned;
                  bool _2018_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2019_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out643;
                  bool _out644;
                  bool _out645;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out643, out _out644, out _out645, out _out646);
                  _2016_recursiveGen = _out643;
                  _2017_recOwned = _out644;
                  _2018_recErased = _out645;
                  _2019_recIdents = _out646;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2016_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2017_recOwned;
                  isErased = _2018_recErased;
                  readIdents = _2019_recIdents;
                }
              } else if (_source125.is_Multiset) {
                DAST._IType _2020___mcc_h613 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2021_recursiveGen;
                  bool _2022_recOwned;
                  bool _2023_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2024_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out647;
                  bool _out648;
                  bool _out649;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out647, out _out648, out _out649, out _out650);
                  _2021_recursiveGen = _out647;
                  _2022_recOwned = _out648;
                  _2023_recErased = _out649;
                  _2024_recIdents = _out650;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2021_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2022_recOwned;
                  isErased = _2023_recErased;
                  readIdents = _2024_recIdents;
                }
              } else if (_source125.is_Map) {
                DAST._IType _2025___mcc_h615 = _source125.dtor_key;
                DAST._IType _2026___mcc_h616 = _source125.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2027_recursiveGen;
                  bool _2028_recOwned;
                  bool _2029_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2030_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out651;
                  bool _out652;
                  bool _out653;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out654;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out651, out _out652, out _out653, out _out654);
                  _2027_recursiveGen = _out651;
                  _2028_recOwned = _out652;
                  _2029_recErased = _out653;
                  _2030_recIdents = _out654;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2028_recOwned;
                  isErased = _2029_recErased;
                  readIdents = _2030_recIdents;
                }
              } else if (_source125.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2031___mcc_h619 = _source125.dtor_args;
                DAST._IType _2032___mcc_h620 = _source125.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2033_recursiveGen;
                  bool _2034_recOwned;
                  bool _2035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out655;
                  bool _out656;
                  bool _out657;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out658;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out655, out _out656, out _out657, out _out658);
                  _2033_recursiveGen = _out655;
                  _2034_recOwned = _out656;
                  _2035_recErased = _out657;
                  _2036_recIdents = _out658;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2034_recOwned;
                  isErased = _2035_recErased;
                  readIdents = _2036_recIdents;
                }
              } else if (_source125.is_Primitive) {
                DAST._IPrimitive _2037___mcc_h623 = _source125.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2038_recursiveGen;
                  bool _2039_recOwned;
                  bool _2040_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2041_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out659;
                  bool _out660;
                  bool _out661;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out662;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out659, out _out660, out _out661, out _out662);
                  _2038_recursiveGen = _out659;
                  _2039_recOwned = _out660;
                  _2040_recErased = _out661;
                  _2041_recIdents = _out662;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2039_recOwned;
                  isErased = _2040_recErased;
                  readIdents = _2041_recIdents;
                }
              } else if (_source125.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2042___mcc_h625 = _source125.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2043_recursiveGen;
                  bool _2044_recOwned;
                  bool _2045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out663;
                  bool _out664;
                  bool _out665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out663, out _out664, out _out665, out _out666);
                  _2043_recursiveGen = _out663;
                  _2044_recOwned = _out664;
                  _2045_recErased = _out665;
                  _2046_recIdents = _out666;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2044_recOwned;
                  isErased = _2045_recErased;
                  readIdents = _2046_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2047___mcc_h627 = _source125.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2048_recursiveGen;
                  bool _2049_recOwned;
                  bool _2050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out667;
                  bool _out668;
                  bool _out669;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out667, out _out668, out _out669, out _out670);
                  _2048_recursiveGen = _out667;
                  _2049_recOwned = _out668;
                  _2050_recErased = _out669;
                  _2051_recIdents = _out670;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2049_recOwned;
                  isErased = _2050_recErased;
                  readIdents = _2051_recIdents;
                }
              }
            } else if (_source113.is_Seq) {
              DAST._IType _2052___mcc_h629 = _source113.dtor_element;
              DAST._IType _source127 = _1546___mcc_h306;
              if (_source127.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2053___mcc_h633 = _source127.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2054___mcc_h634 = _source127.dtor_typeArgs;
                DAST._IResolvedType _2055___mcc_h635 = _source127.dtor_resolved;
                DAST._IResolvedType _source128 = _2055___mcc_h635;
                if (_source128.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2056___mcc_h639 = _source128.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2057_recursiveGen;
                    bool _2058_recOwned;
                    bool _2059_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2060_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out671;
                    bool _out672;
                    bool _out673;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out674;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out671, out _out672, out _out673, out _out674);
                    _2057_recursiveGen = _out671;
                    _2058_recOwned = _out672;
                    _2059_recErased = _out673;
                    _2060_recIdents = _out674;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2057_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2058_recOwned;
                    isErased = _2059_recErased;
                    readIdents = _2060_recIdents;
                  }
                } else if (_source128.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2061___mcc_h641 = _source128.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2062_recursiveGen;
                    bool _2063_recOwned;
                    bool _2064_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2065_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out675;
                    bool _out676;
                    bool _out677;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out678;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out675, out _out676, out _out677, out _out678);
                    _2062_recursiveGen = _out675;
                    _2063_recOwned = _out676;
                    _2064_recErased = _out677;
                    _2065_recIdents = _out678;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2062_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2063_recOwned;
                    isErased = _2064_recErased;
                    readIdents = _2065_recIdents;
                  }
                } else {
                  DAST._IType _2066___mcc_h643 = _source128.dtor_Newtype_a0;
                  DAST._IType _2067_b = _2066___mcc_h643;
                  {
                    if (object.Equals(_1539_fromTpe, _2067_b)) {
                      Dafny.ISequence<Dafny.Rune> _2068_recursiveGen;
                      bool _2069_recOwned;
                      bool _2070_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2071_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out679;
                      bool _out680;
                      bool _out681;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out682;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out679, out _out680, out _out681, out _out682);
                      _2068_recursiveGen = _out679;
                      _2069_recOwned = _out680;
                      _2070_recErased = _out681;
                      _2071_recIdents = _out682;
                      Dafny.ISequence<Dafny.Rune> _2072_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out683;
                      _out683 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2072_rhsType = _out683;
                      Dafny.ISequence<Dafny.Rune> _2073_uneraseFn;
                      _2073_uneraseFn = ((_2069_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2072_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2073_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2068_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2069_recOwned;
                      isErased = false;
                      readIdents = _2071_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2067_b), _2067_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      s = _out684;
                      isOwned = _out685;
                      isErased = _out686;
                      readIdents = _out687;
                    }
                  }
                }
              } else if (_source127.is_Nullable) {
                DAST._IType _2074___mcc_h645 = _source127.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                  bool _2076_recOwned;
                  bool _2077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out688;
                  bool _out689;
                  bool _out690;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690, out _out691);
                  _2075_recursiveGen = _out688;
                  _2076_recOwned = _out689;
                  _2077_recErased = _out690;
                  _2078_recIdents = _out691;
                  if (!(_2076_recOwned)) {
                    _2075_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2075_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2077_recErased;
                  readIdents = _2078_recIdents;
                }
              } else if (_source127.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2079___mcc_h647 = _source127.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2080_recursiveGen;
                  bool _2081_recOwned;
                  bool _2082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out692;
                  bool _out693;
                  bool _out694;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out695;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out692, out _out693, out _out694, out _out695);
                  _2080_recursiveGen = _out692;
                  _2081_recOwned = _out693;
                  _2082_recErased = _out694;
                  _2083_recIdents = _out695;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2081_recOwned;
                  isErased = _2082_recErased;
                  readIdents = _2083_recIdents;
                }
              } else if (_source127.is_Array) {
                DAST._IType _2084___mcc_h649 = _source127.dtor_element;
                BigInteger _2085___mcc_h650 = _source127.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2086_recursiveGen;
                  bool _2087_recOwned;
                  bool _2088_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out696;
                  bool _out697;
                  bool _out698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out699;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out696, out _out697, out _out698, out _out699);
                  _2086_recursiveGen = _out696;
                  _2087_recOwned = _out697;
                  _2088_recErased = _out698;
                  _2089_recIdents = _out699;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2087_recOwned;
                  isErased = _2088_recErased;
                  readIdents = _2089_recIdents;
                }
              } else if (_source127.is_Seq) {
                DAST._IType _2090___mcc_h653 = _source127.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2091_recursiveGen;
                  bool _2092_recOwned;
                  bool _2093_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2094_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out700;
                  bool _out701;
                  bool _out702;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out700, out _out701, out _out702, out _out703);
                  _2091_recursiveGen = _out700;
                  _2092_recOwned = _out701;
                  _2093_recErased = _out702;
                  _2094_recIdents = _out703;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2091_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2092_recOwned;
                  isErased = _2093_recErased;
                  readIdents = _2094_recIdents;
                }
              } else if (_source127.is_Set) {
                DAST._IType _2095___mcc_h655 = _source127.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2096_recursiveGen;
                  bool _2097_recOwned;
                  bool _2098_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2099_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out704;
                  bool _out705;
                  bool _out706;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out707;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out704, out _out705, out _out706, out _out707);
                  _2096_recursiveGen = _out704;
                  _2097_recOwned = _out705;
                  _2098_recErased = _out706;
                  _2099_recIdents = _out707;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2097_recOwned;
                  isErased = _2098_recErased;
                  readIdents = _2099_recIdents;
                }
              } else if (_source127.is_Multiset) {
                DAST._IType _2100___mcc_h657 = _source127.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2101_recursiveGen;
                  bool _2102_recOwned;
                  bool _2103_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2104_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out708;
                  bool _out709;
                  bool _out710;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out708, out _out709, out _out710, out _out711);
                  _2101_recursiveGen = _out708;
                  _2102_recOwned = _out709;
                  _2103_recErased = _out710;
                  _2104_recIdents = _out711;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2102_recOwned;
                  isErased = _2103_recErased;
                  readIdents = _2104_recIdents;
                }
              } else if (_source127.is_Map) {
                DAST._IType _2105___mcc_h659 = _source127.dtor_key;
                DAST._IType _2106___mcc_h660 = _source127.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2107_recursiveGen;
                  bool _2108_recOwned;
                  bool _2109_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2110_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out712;
                  bool _out713;
                  bool _out714;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out712, out _out713, out _out714, out _out715);
                  _2107_recursiveGen = _out712;
                  _2108_recOwned = _out713;
                  _2109_recErased = _out714;
                  _2110_recIdents = _out715;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2108_recOwned;
                  isErased = _2109_recErased;
                  readIdents = _2110_recIdents;
                }
              } else if (_source127.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2111___mcc_h663 = _source127.dtor_args;
                DAST._IType _2112___mcc_h664 = _source127.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2113_recursiveGen;
                  bool _2114_recOwned;
                  bool _2115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out716;
                  bool _out717;
                  bool _out718;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out719;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out716, out _out717, out _out718, out _out719);
                  _2113_recursiveGen = _out716;
                  _2114_recOwned = _out717;
                  _2115_recErased = _out718;
                  _2116_recIdents = _out719;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2114_recOwned;
                  isErased = _2115_recErased;
                  readIdents = _2116_recIdents;
                }
              } else if (_source127.is_Primitive) {
                DAST._IPrimitive _2117___mcc_h667 = _source127.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2118_recursiveGen;
                  bool _2119_recOwned;
                  bool _2120_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2121_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out720;
                  bool _out721;
                  bool _out722;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out723;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out720, out _out721, out _out722, out _out723);
                  _2118_recursiveGen = _out720;
                  _2119_recOwned = _out721;
                  _2120_recErased = _out722;
                  _2121_recIdents = _out723;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2119_recOwned;
                  isErased = _2120_recErased;
                  readIdents = _2121_recIdents;
                }
              } else if (_source127.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2122___mcc_h669 = _source127.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2123_recursiveGen;
                  bool _2124_recOwned;
                  bool _2125_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2126_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out724;
                  bool _out725;
                  bool _out726;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out724, out _out725, out _out726, out _out727);
                  _2123_recursiveGen = _out724;
                  _2124_recOwned = _out725;
                  _2125_recErased = _out726;
                  _2126_recIdents = _out727;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2124_recOwned;
                  isErased = _2125_recErased;
                  readIdents = _2126_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2127___mcc_h671 = _source127.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2128_recursiveGen;
                  bool _2129_recOwned;
                  bool _2130_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2131_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out728;
                  bool _out729;
                  bool _out730;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out728, out _out729, out _out730, out _out731);
                  _2128_recursiveGen = _out728;
                  _2129_recOwned = _out729;
                  _2130_recErased = _out730;
                  _2131_recIdents = _out731;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2129_recOwned;
                  isErased = _2130_recErased;
                  readIdents = _2131_recIdents;
                }
              }
            } else if (_source113.is_Set) {
              DAST._IType _2132___mcc_h673 = _source113.dtor_element;
              DAST._IType _source129 = _1546___mcc_h306;
              if (_source129.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2133___mcc_h677 = _source129.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2134___mcc_h678 = _source129.dtor_typeArgs;
                DAST._IResolvedType _2135___mcc_h679 = _source129.dtor_resolved;
                DAST._IResolvedType _source130 = _2135___mcc_h679;
                if (_source130.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2136___mcc_h683 = _source130.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2137_recursiveGen;
                    bool _2138_recOwned;
                    bool _2139_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2140_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out732;
                    bool _out733;
                    bool _out734;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out735;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out732, out _out733, out _out734, out _out735);
                    _2137_recursiveGen = _out732;
                    _2138_recOwned = _out733;
                    _2139_recErased = _out734;
                    _2140_recIdents = _out735;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2138_recOwned;
                    isErased = _2139_recErased;
                    readIdents = _2140_recIdents;
                  }
                } else if (_source130.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2141___mcc_h685 = _source130.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2142_recursiveGen;
                    bool _2143_recOwned;
                    bool _2144_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2145_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out736;
                    bool _out737;
                    bool _out738;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out739;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out736, out _out737, out _out738, out _out739);
                    _2142_recursiveGen = _out736;
                    _2143_recOwned = _out737;
                    _2144_recErased = _out738;
                    _2145_recIdents = _out739;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2142_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2143_recOwned;
                    isErased = _2144_recErased;
                    readIdents = _2145_recIdents;
                  }
                } else {
                  DAST._IType _2146___mcc_h687 = _source130.dtor_Newtype_a0;
                  DAST._IType _2147_b = _2146___mcc_h687;
                  {
                    if (object.Equals(_1539_fromTpe, _2147_b)) {
                      Dafny.ISequence<Dafny.Rune> _2148_recursiveGen;
                      bool _2149_recOwned;
                      bool _2150_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out740;
                      bool _out741;
                      bool _out742;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out743;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out740, out _out741, out _out742, out _out743);
                      _2148_recursiveGen = _out740;
                      _2149_recOwned = _out741;
                      _2150_recErased = _out742;
                      _2151_recIdents = _out743;
                      Dafny.ISequence<Dafny.Rune> _2152_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out744;
                      _out744 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2152_rhsType = _out744;
                      Dafny.ISequence<Dafny.Rune> _2153_uneraseFn;
                      _2153_uneraseFn = ((_2149_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2152_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2153_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2149_recOwned;
                      isErased = false;
                      readIdents = _2151_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2147_b), _2147_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      s = _out745;
                      isOwned = _out746;
                      isErased = _out747;
                      readIdents = _out748;
                    }
                  }
                }
              } else if (_source129.is_Nullable) {
                DAST._IType _2154___mcc_h689 = _source129.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2155_recursiveGen;
                  bool _2156_recOwned;
                  bool _2157_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2158_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out749;
                  bool _out750;
                  bool _out751;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out749, out _out750, out _out751, out _out752);
                  _2155_recursiveGen = _out749;
                  _2156_recOwned = _out750;
                  _2157_recErased = _out751;
                  _2158_recIdents = _out752;
                  if (!(_2156_recOwned)) {
                    _2155_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2155_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2155_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2157_recErased;
                  readIdents = _2158_recIdents;
                }
              } else if (_source129.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2159___mcc_h691 = _source129.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2160_recursiveGen;
                  bool _2161_recOwned;
                  bool _2162_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2163_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out753;
                  bool _out754;
                  bool _out755;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755, out _out756);
                  _2160_recursiveGen = _out753;
                  _2161_recOwned = _out754;
                  _2162_recErased = _out755;
                  _2163_recIdents = _out756;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2160_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2161_recOwned;
                  isErased = _2162_recErased;
                  readIdents = _2163_recIdents;
                }
              } else if (_source129.is_Array) {
                DAST._IType _2164___mcc_h693 = _source129.dtor_element;
                BigInteger _2165___mcc_h694 = _source129.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2166_recursiveGen;
                  bool _2167_recOwned;
                  bool _2168_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2169_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out757;
                  bool _out758;
                  bool _out759;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out757, out _out758, out _out759, out _out760);
                  _2166_recursiveGen = _out757;
                  _2167_recOwned = _out758;
                  _2168_recErased = _out759;
                  _2169_recIdents = _out760;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2167_recOwned;
                  isErased = _2168_recErased;
                  readIdents = _2169_recIdents;
                }
              } else if (_source129.is_Seq) {
                DAST._IType _2170___mcc_h697 = _source129.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2171_recursiveGen;
                  bool _2172_recOwned;
                  bool _2173_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2174_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out761;
                  bool _out762;
                  bool _out763;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out761, out _out762, out _out763, out _out764);
                  _2171_recursiveGen = _out761;
                  _2172_recOwned = _out762;
                  _2173_recErased = _out763;
                  _2174_recIdents = _out764;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2171_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2172_recOwned;
                  isErased = _2173_recErased;
                  readIdents = _2174_recIdents;
                }
              } else if (_source129.is_Set) {
                DAST._IType _2175___mcc_h699 = _source129.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2176_recursiveGen;
                  bool _2177_recOwned;
                  bool _2178_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2179_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out765;
                  bool _out766;
                  bool _out767;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out768;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out765, out _out766, out _out767, out _out768);
                  _2176_recursiveGen = _out765;
                  _2177_recOwned = _out766;
                  _2178_recErased = _out767;
                  _2179_recIdents = _out768;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2176_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2177_recOwned;
                  isErased = _2178_recErased;
                  readIdents = _2179_recIdents;
                }
              } else if (_source129.is_Multiset) {
                DAST._IType _2180___mcc_h701 = _source129.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2181_recursiveGen;
                  bool _2182_recOwned;
                  bool _2183_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2184_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out769;
                  bool _out770;
                  bool _out771;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out769, out _out770, out _out771, out _out772);
                  _2181_recursiveGen = _out769;
                  _2182_recOwned = _out770;
                  _2183_recErased = _out771;
                  _2184_recIdents = _out772;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2181_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2182_recOwned;
                  isErased = _2183_recErased;
                  readIdents = _2184_recIdents;
                }
              } else if (_source129.is_Map) {
                DAST._IType _2185___mcc_h703 = _source129.dtor_key;
                DAST._IType _2186___mcc_h704 = _source129.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2187_recursiveGen;
                  bool _2188_recOwned;
                  bool _2189_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2190_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out773;
                  bool _out774;
                  bool _out775;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out773, out _out774, out _out775, out _out776);
                  _2187_recursiveGen = _out773;
                  _2188_recOwned = _out774;
                  _2189_recErased = _out775;
                  _2190_recIdents = _out776;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2187_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2188_recOwned;
                  isErased = _2189_recErased;
                  readIdents = _2190_recIdents;
                }
              } else if (_source129.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2191___mcc_h707 = _source129.dtor_args;
                DAST._IType _2192___mcc_h708 = _source129.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2193_recursiveGen;
                  bool _2194_recOwned;
                  bool _2195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out777;
                  bool _out778;
                  bool _out779;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out780;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out777, out _out778, out _out779, out _out780);
                  _2193_recursiveGen = _out777;
                  _2194_recOwned = _out778;
                  _2195_recErased = _out779;
                  _2196_recIdents = _out780;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2194_recOwned;
                  isErased = _2195_recErased;
                  readIdents = _2196_recIdents;
                }
              } else if (_source129.is_Primitive) {
                DAST._IPrimitive _2197___mcc_h711 = _source129.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2198_recursiveGen;
                  bool _2199_recOwned;
                  bool _2200_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2201_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out781;
                  bool _out782;
                  bool _out783;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out781, out _out782, out _out783, out _out784);
                  _2198_recursiveGen = _out781;
                  _2199_recOwned = _out782;
                  _2200_recErased = _out783;
                  _2201_recIdents = _out784;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2199_recOwned;
                  isErased = _2200_recErased;
                  readIdents = _2201_recIdents;
                }
              } else if (_source129.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2202___mcc_h713 = _source129.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2203_recursiveGen;
                  bool _2204_recOwned;
                  bool _2205_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2206_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out785;
                  bool _out786;
                  bool _out787;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out788;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out785, out _out786, out _out787, out _out788);
                  _2203_recursiveGen = _out785;
                  _2204_recOwned = _out786;
                  _2205_recErased = _out787;
                  _2206_recIdents = _out788;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2203_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2204_recOwned;
                  isErased = _2205_recErased;
                  readIdents = _2206_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2207___mcc_h715 = _source129.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2208_recursiveGen;
                  bool _2209_recOwned;
                  bool _2210_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2211_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out789;
                  bool _out790;
                  bool _out791;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out789, out _out790, out _out791, out _out792);
                  _2208_recursiveGen = _out789;
                  _2209_recOwned = _out790;
                  _2210_recErased = _out791;
                  _2211_recIdents = _out792;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2208_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2209_recOwned;
                  isErased = _2210_recErased;
                  readIdents = _2211_recIdents;
                }
              }
            } else if (_source113.is_Multiset) {
              DAST._IType _2212___mcc_h717 = _source113.dtor_element;
              DAST._IType _source131 = _1546___mcc_h306;
              if (_source131.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2213___mcc_h721 = _source131.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2214___mcc_h722 = _source131.dtor_typeArgs;
                DAST._IResolvedType _2215___mcc_h723 = _source131.dtor_resolved;
                DAST._IResolvedType _source132 = _2215___mcc_h723;
                if (_source132.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2216___mcc_h727 = _source132.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2217_recursiveGen;
                    bool _2218_recOwned;
                    bool _2219_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out793;
                    bool _out794;
                    bool _out795;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out793, out _out794, out _out795, out _out796);
                    _2217_recursiveGen = _out793;
                    _2218_recOwned = _out794;
                    _2219_recErased = _out795;
                    _2220_recIdents = _out796;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2218_recOwned;
                    isErased = _2219_recErased;
                    readIdents = _2220_recIdents;
                  }
                } else if (_source132.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2221___mcc_h729 = _source132.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2222_recursiveGen;
                    bool _2223_recOwned;
                    bool _2224_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2225_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out797;
                    bool _out798;
                    bool _out799;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out797, out _out798, out _out799, out _out800);
                    _2222_recursiveGen = _out797;
                    _2223_recOwned = _out798;
                    _2224_recErased = _out799;
                    _2225_recIdents = _out800;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2222_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2223_recOwned;
                    isErased = _2224_recErased;
                    readIdents = _2225_recIdents;
                  }
                } else {
                  DAST._IType _2226___mcc_h731 = _source132.dtor_Newtype_a0;
                  DAST._IType _2227_b = _2226___mcc_h731;
                  {
                    if (object.Equals(_1539_fromTpe, _2227_b)) {
                      Dafny.ISequence<Dafny.Rune> _2228_recursiveGen;
                      bool _2229_recOwned;
                      bool _2230_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2231_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out801;
                      bool _out802;
                      bool _out803;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out804;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out801, out _out802, out _out803, out _out804);
                      _2228_recursiveGen = _out801;
                      _2229_recOwned = _out802;
                      _2230_recErased = _out803;
                      _2231_recIdents = _out804;
                      Dafny.ISequence<Dafny.Rune> _2232_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out805;
                      _out805 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2232_rhsType = _out805;
                      Dafny.ISequence<Dafny.Rune> _2233_uneraseFn;
                      _2233_uneraseFn = ((_2229_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2232_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2233_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2229_recOwned;
                      isErased = false;
                      readIdents = _2231_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2227_b), _2227_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      s = _out806;
                      isOwned = _out807;
                      isErased = _out808;
                      readIdents = _out809;
                    }
                  }
                }
              } else if (_source131.is_Nullable) {
                DAST._IType _2234___mcc_h733 = _source131.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2235_recursiveGen;
                  bool _2236_recOwned;
                  bool _2237_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2238_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out810;
                  bool _out811;
                  bool _out812;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out813;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812, out _out813);
                  _2235_recursiveGen = _out810;
                  _2236_recOwned = _out811;
                  _2237_recErased = _out812;
                  _2238_recIdents = _out813;
                  if (!(_2236_recOwned)) {
                    _2235_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2235_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2237_recErased;
                  readIdents = _2238_recIdents;
                }
              } else if (_source131.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2239___mcc_h735 = _source131.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2240_recursiveGen;
                  bool _2241_recOwned;
                  bool _2242_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2243_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out814;
                  bool _out815;
                  bool _out816;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out814, out _out815, out _out816, out _out817);
                  _2240_recursiveGen = _out814;
                  _2241_recOwned = _out815;
                  _2242_recErased = _out816;
                  _2243_recIdents = _out817;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2240_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2241_recOwned;
                  isErased = _2242_recErased;
                  readIdents = _2243_recIdents;
                }
              } else if (_source131.is_Array) {
                DAST._IType _2244___mcc_h737 = _source131.dtor_element;
                BigInteger _2245___mcc_h738 = _source131.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2246_recursiveGen;
                  bool _2247_recOwned;
                  bool _2248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out818;
                  bool _out819;
                  bool _out820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out818, out _out819, out _out820, out _out821);
                  _2246_recursiveGen = _out818;
                  _2247_recOwned = _out819;
                  _2248_recErased = _out820;
                  _2249_recIdents = _out821;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2246_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2247_recOwned;
                  isErased = _2248_recErased;
                  readIdents = _2249_recIdents;
                }
              } else if (_source131.is_Seq) {
                DAST._IType _2250___mcc_h741 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2251_recursiveGen;
                  bool _2252_recOwned;
                  bool _2253_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2254_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out822;
                  bool _out823;
                  bool _out824;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out825;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out822, out _out823, out _out824, out _out825);
                  _2251_recursiveGen = _out822;
                  _2252_recOwned = _out823;
                  _2253_recErased = _out824;
                  _2254_recIdents = _out825;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2252_recOwned;
                  isErased = _2253_recErased;
                  readIdents = _2254_recIdents;
                }
              } else if (_source131.is_Set) {
                DAST._IType _2255___mcc_h743 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                  bool _2257_recOwned;
                  bool _2258_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out826;
                  bool _out827;
                  bool _out828;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out829;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out826, out _out827, out _out828, out _out829);
                  _2256_recursiveGen = _out826;
                  _2257_recOwned = _out827;
                  _2258_recErased = _out828;
                  _2259_recIdents = _out829;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2257_recOwned;
                  isErased = _2258_recErased;
                  readIdents = _2259_recIdents;
                }
              } else if (_source131.is_Multiset) {
                DAST._IType _2260___mcc_h745 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2261_recursiveGen;
                  bool _2262_recOwned;
                  bool _2263_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2264_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out830;
                  bool _out831;
                  bool _out832;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out830, out _out831, out _out832, out _out833);
                  _2261_recursiveGen = _out830;
                  _2262_recOwned = _out831;
                  _2263_recErased = _out832;
                  _2264_recIdents = _out833;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2262_recOwned;
                  isErased = _2263_recErased;
                  readIdents = _2264_recIdents;
                }
              } else if (_source131.is_Map) {
                DAST._IType _2265___mcc_h747 = _source131.dtor_key;
                DAST._IType _2266___mcc_h748 = _source131.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
                  bool _2268_recOwned;
                  bool _2269_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out834;
                  bool _out835;
                  bool _out836;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out834, out _out835, out _out836, out _out837);
                  _2267_recursiveGen = _out834;
                  _2268_recOwned = _out835;
                  _2269_recErased = _out836;
                  _2270_recIdents = _out837;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2268_recOwned;
                  isErased = _2269_recErased;
                  readIdents = _2270_recIdents;
                }
              } else if (_source131.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2271___mcc_h751 = _source131.dtor_args;
                DAST._IType _2272___mcc_h752 = _source131.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2273_recursiveGen;
                  bool _2274_recOwned;
                  bool _2275_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2276_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out838;
                  bool _out839;
                  bool _out840;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out841;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out838, out _out839, out _out840, out _out841);
                  _2273_recursiveGen = _out838;
                  _2274_recOwned = _out839;
                  _2275_recErased = _out840;
                  _2276_recIdents = _out841;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2274_recOwned;
                  isErased = _2275_recErased;
                  readIdents = _2276_recIdents;
                }
              } else if (_source131.is_Primitive) {
                DAST._IPrimitive _2277___mcc_h755 = _source131.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2278_recursiveGen;
                  bool _2279_recOwned;
                  bool _2280_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2281_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out842;
                  bool _out843;
                  bool _out844;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out842, out _out843, out _out844, out _out845);
                  _2278_recursiveGen = _out842;
                  _2279_recOwned = _out843;
                  _2280_recErased = _out844;
                  _2281_recIdents = _out845;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2279_recOwned;
                  isErased = _2280_recErased;
                  readIdents = _2281_recIdents;
                }
              } else if (_source131.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2282___mcc_h757 = _source131.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
                  bool _2284_recOwned;
                  bool _2285_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out846;
                  bool _out847;
                  bool _out848;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out849;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out846, out _out847, out _out848, out _out849);
                  _2283_recursiveGen = _out846;
                  _2284_recOwned = _out847;
                  _2285_recErased = _out848;
                  _2286_recIdents = _out849;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2284_recOwned;
                  isErased = _2285_recErased;
                  readIdents = _2286_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2287___mcc_h759 = _source131.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2288_recursiveGen;
                  bool _2289_recOwned;
                  bool _2290_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2291_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out850;
                  bool _out851;
                  bool _out852;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out850, out _out851, out _out852, out _out853);
                  _2288_recursiveGen = _out850;
                  _2289_recOwned = _out851;
                  _2290_recErased = _out852;
                  _2291_recIdents = _out853;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2289_recOwned;
                  isErased = _2290_recErased;
                  readIdents = _2291_recIdents;
                }
              }
            } else if (_source113.is_Map) {
              DAST._IType _2292___mcc_h761 = _source113.dtor_key;
              DAST._IType _2293___mcc_h762 = _source113.dtor_value;
              DAST._IType _source133 = _1546___mcc_h306;
              if (_source133.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2294___mcc_h769 = _source133.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2295___mcc_h770 = _source133.dtor_typeArgs;
                DAST._IResolvedType _2296___mcc_h771 = _source133.dtor_resolved;
                DAST._IResolvedType _source134 = _2296___mcc_h771;
                if (_source134.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2297___mcc_h775 = _source134.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2298_recursiveGen;
                    bool _2299_recOwned;
                    bool _2300_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2301_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out854;
                    bool _out855;
                    bool _out856;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out857;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out854, out _out855, out _out856, out _out857);
                    _2298_recursiveGen = _out854;
                    _2299_recOwned = _out855;
                    _2300_recErased = _out856;
                    _2301_recIdents = _out857;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2298_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2299_recOwned;
                    isErased = _2300_recErased;
                    readIdents = _2301_recIdents;
                  }
                } else if (_source134.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2302___mcc_h777 = _source134.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2303_recursiveGen;
                    bool _2304_recOwned;
                    bool _2305_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2306_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out858;
                    bool _out859;
                    bool _out860;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out861;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out858, out _out859, out _out860, out _out861);
                    _2303_recursiveGen = _out858;
                    _2304_recOwned = _out859;
                    _2305_recErased = _out860;
                    _2306_recIdents = _out861;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2303_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2304_recOwned;
                    isErased = _2305_recErased;
                    readIdents = _2306_recIdents;
                  }
                } else {
                  DAST._IType _2307___mcc_h779 = _source134.dtor_Newtype_a0;
                  DAST._IType _2308_b = _2307___mcc_h779;
                  {
                    if (object.Equals(_1539_fromTpe, _2308_b)) {
                      Dafny.ISequence<Dafny.Rune> _2309_recursiveGen;
                      bool _2310_recOwned;
                      bool _2311_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2312_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out862;
                      bool _out863;
                      bool _out864;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out865;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out862, out _out863, out _out864, out _out865);
                      _2309_recursiveGen = _out862;
                      _2310_recOwned = _out863;
                      _2311_recErased = _out864;
                      _2312_recIdents = _out865;
                      Dafny.ISequence<Dafny.Rune> _2313_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out866;
                      _out866 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2313_rhsType = _out866;
                      Dafny.ISequence<Dafny.Rune> _2314_uneraseFn;
                      _2314_uneraseFn = ((_2310_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2313_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2314_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2310_recOwned;
                      isErased = false;
                      readIdents = _2312_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2308_b), _2308_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      s = _out867;
                      isOwned = _out868;
                      isErased = _out869;
                      readIdents = _out870;
                    }
                  }
                }
              } else if (_source133.is_Nullable) {
                DAST._IType _2315___mcc_h781 = _source133.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2316_recursiveGen;
                  bool _2317_recOwned;
                  bool _2318_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2319_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out871;
                  bool _out872;
                  bool _out873;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873, out _out874);
                  _2316_recursiveGen = _out871;
                  _2317_recOwned = _out872;
                  _2318_recErased = _out873;
                  _2319_recIdents = _out874;
                  if (!(_2317_recOwned)) {
                    _2316_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2316_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2318_recErased;
                  readIdents = _2319_recIdents;
                }
              } else if (_source133.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2320___mcc_h783 = _source133.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2321_recursiveGen;
                  bool _2322_recOwned;
                  bool _2323_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2324_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out875;
                  bool _out876;
                  bool _out877;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out875, out _out876, out _out877, out _out878);
                  _2321_recursiveGen = _out875;
                  _2322_recOwned = _out876;
                  _2323_recErased = _out877;
                  _2324_recIdents = _out878;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2322_recOwned;
                  isErased = _2323_recErased;
                  readIdents = _2324_recIdents;
                }
              } else if (_source133.is_Array) {
                DAST._IType _2325___mcc_h785 = _source133.dtor_element;
                BigInteger _2326___mcc_h786 = _source133.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2327_recursiveGen;
                  bool _2328_recOwned;
                  bool _2329_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2330_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out879;
                  bool _out880;
                  bool _out881;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out882;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out879, out _out880, out _out881, out _out882);
                  _2327_recursiveGen = _out879;
                  _2328_recOwned = _out880;
                  _2329_recErased = _out881;
                  _2330_recIdents = _out882;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2328_recOwned;
                  isErased = _2329_recErased;
                  readIdents = _2330_recIdents;
                }
              } else if (_source133.is_Seq) {
                DAST._IType _2331___mcc_h789 = _source133.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2332_recursiveGen;
                  bool _2333_recOwned;
                  bool _2334_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2335_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out883;
                  bool _out884;
                  bool _out885;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out883, out _out884, out _out885, out _out886);
                  _2332_recursiveGen = _out883;
                  _2333_recOwned = _out884;
                  _2334_recErased = _out885;
                  _2335_recIdents = _out886;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2333_recOwned;
                  isErased = _2334_recErased;
                  readIdents = _2335_recIdents;
                }
              } else if (_source133.is_Set) {
                DAST._IType _2336___mcc_h791 = _source133.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2337_recursiveGen;
                  bool _2338_recOwned;
                  bool _2339_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2340_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out887;
                  bool _out888;
                  bool _out889;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out890;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out887, out _out888, out _out889, out _out890);
                  _2337_recursiveGen = _out887;
                  _2338_recOwned = _out888;
                  _2339_recErased = _out889;
                  _2340_recIdents = _out890;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2338_recOwned;
                  isErased = _2339_recErased;
                  readIdents = _2340_recIdents;
                }
              } else if (_source133.is_Multiset) {
                DAST._IType _2341___mcc_h793 = _source133.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2342_recursiveGen;
                  bool _2343_recOwned;
                  bool _2344_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2345_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out891;
                  bool _out892;
                  bool _out893;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out894;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out891, out _out892, out _out893, out _out894);
                  _2342_recursiveGen = _out891;
                  _2343_recOwned = _out892;
                  _2344_recErased = _out893;
                  _2345_recIdents = _out894;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2342_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2343_recOwned;
                  isErased = _2344_recErased;
                  readIdents = _2345_recIdents;
                }
              } else if (_source133.is_Map) {
                DAST._IType _2346___mcc_h795 = _source133.dtor_key;
                DAST._IType _2347___mcc_h796 = _source133.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2348_recursiveGen;
                  bool _2349_recOwned;
                  bool _2350_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out895;
                  bool _out896;
                  bool _out897;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out895, out _out896, out _out897, out _out898);
                  _2348_recursiveGen = _out895;
                  _2349_recOwned = _out896;
                  _2350_recErased = _out897;
                  _2351_recIdents = _out898;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2348_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2349_recOwned;
                  isErased = _2350_recErased;
                  readIdents = _2351_recIdents;
                }
              } else if (_source133.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2352___mcc_h799 = _source133.dtor_args;
                DAST._IType _2353___mcc_h800 = _source133.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2354_recursiveGen;
                  bool _2355_recOwned;
                  bool _2356_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2357_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out899;
                  bool _out900;
                  bool _out901;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out902;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out899, out _out900, out _out901, out _out902);
                  _2354_recursiveGen = _out899;
                  _2355_recOwned = _out900;
                  _2356_recErased = _out901;
                  _2357_recIdents = _out902;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2355_recOwned;
                  isErased = _2356_recErased;
                  readIdents = _2357_recIdents;
                }
              } else if (_source133.is_Primitive) {
                DAST._IPrimitive _2358___mcc_h803 = _source133.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2359_recursiveGen;
                  bool _2360_recOwned;
                  bool _2361_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2362_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out903;
                  bool _out904;
                  bool _out905;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out906;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out903, out _out904, out _out905, out _out906);
                  _2359_recursiveGen = _out903;
                  _2360_recOwned = _out904;
                  _2361_recErased = _out905;
                  _2362_recIdents = _out906;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2360_recOwned;
                  isErased = _2361_recErased;
                  readIdents = _2362_recIdents;
                }
              } else if (_source133.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2363___mcc_h805 = _source133.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2364_recursiveGen;
                  bool _2365_recOwned;
                  bool _2366_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2367_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out907;
                  bool _out908;
                  bool _out909;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out907, out _out908, out _out909, out _out910);
                  _2364_recursiveGen = _out907;
                  _2365_recOwned = _out908;
                  _2366_recErased = _out909;
                  _2367_recIdents = _out910;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2364_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2365_recOwned;
                  isErased = _2366_recErased;
                  readIdents = _2367_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2368___mcc_h807 = _source133.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2369_recursiveGen;
                  bool _2370_recOwned;
                  bool _2371_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2372_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out911;
                  bool _out912;
                  bool _out913;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out914;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out911, out _out912, out _out913, out _out914);
                  _2369_recursiveGen = _out911;
                  _2370_recOwned = _out912;
                  _2371_recErased = _out913;
                  _2372_recIdents = _out914;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2370_recOwned;
                  isErased = _2371_recErased;
                  readIdents = _2372_recIdents;
                }
              }
            } else if (_source113.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2373___mcc_h809 = _source113.dtor_args;
              DAST._IType _2374___mcc_h810 = _source113.dtor_result;
              DAST._IType _source135 = _1546___mcc_h306;
              if (_source135.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2375___mcc_h817 = _source135.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2376___mcc_h818 = _source135.dtor_typeArgs;
                DAST._IResolvedType _2377___mcc_h819 = _source135.dtor_resolved;
                DAST._IResolvedType _source136 = _2377___mcc_h819;
                if (_source136.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2378___mcc_h823 = _source136.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2379_recursiveGen;
                    bool _2380_recOwned;
                    bool _2381_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2382_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out915;
                    bool _out916;
                    bool _out917;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out915, out _out916, out _out917, out _out918);
                    _2379_recursiveGen = _out915;
                    _2380_recOwned = _out916;
                    _2381_recErased = _out917;
                    _2382_recIdents = _out918;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2380_recOwned;
                    isErased = _2381_recErased;
                    readIdents = _2382_recIdents;
                  }
                } else if (_source136.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2383___mcc_h825 = _source136.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2384_recursiveGen;
                    bool _2385_recOwned;
                    bool _2386_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2387_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out919;
                    bool _out920;
                    bool _out921;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out919, out _out920, out _out921, out _out922);
                    _2384_recursiveGen = _out919;
                    _2385_recOwned = _out920;
                    _2386_recErased = _out921;
                    _2387_recIdents = _out922;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2384_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2385_recOwned;
                    isErased = _2386_recErased;
                    readIdents = _2387_recIdents;
                  }
                } else {
                  DAST._IType _2388___mcc_h827 = _source136.dtor_Newtype_a0;
                  DAST._IType _2389_b = _2388___mcc_h827;
                  {
                    if (object.Equals(_1539_fromTpe, _2389_b)) {
                      Dafny.ISequence<Dafny.Rune> _2390_recursiveGen;
                      bool _2391_recOwned;
                      bool _2392_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2393_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out923;
                      bool _out924;
                      bool _out925;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out926;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out923, out _out924, out _out925, out _out926);
                      _2390_recursiveGen = _out923;
                      _2391_recOwned = _out924;
                      _2392_recErased = _out925;
                      _2393_recIdents = _out926;
                      Dafny.ISequence<Dafny.Rune> _2394_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out927;
                      _out927 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2394_rhsType = _out927;
                      Dafny.ISequence<Dafny.Rune> _2395_uneraseFn;
                      _2395_uneraseFn = ((_2391_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2394_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2395_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2390_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2391_recOwned;
                      isErased = false;
                      readIdents = _2393_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out928;
                      bool _out929;
                      bool _out930;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2389_b), _2389_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                      s = _out928;
                      isOwned = _out929;
                      isErased = _out930;
                      readIdents = _out931;
                    }
                  }
                }
              } else if (_source135.is_Nullable) {
                DAST._IType _2396___mcc_h829 = _source135.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2397_recursiveGen;
                  bool _2398_recOwned;
                  bool _2399_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2400_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out932;
                  bool _out933;
                  bool _out934;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934, out _out935);
                  _2397_recursiveGen = _out932;
                  _2398_recOwned = _out933;
                  _2399_recErased = _out934;
                  _2400_recIdents = _out935;
                  if (!(_2398_recOwned)) {
                    _2397_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2397_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2399_recErased;
                  readIdents = _2400_recIdents;
                }
              } else if (_source135.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2401___mcc_h831 = _source135.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2402_recursiveGen;
                  bool _2403_recOwned;
                  bool _2404_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2405_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out936;
                  bool _out937;
                  bool _out938;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out939;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out936, out _out937, out _out938, out _out939);
                  _2402_recursiveGen = _out936;
                  _2403_recOwned = _out937;
                  _2404_recErased = _out938;
                  _2405_recIdents = _out939;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2403_recOwned;
                  isErased = _2404_recErased;
                  readIdents = _2405_recIdents;
                }
              } else if (_source135.is_Array) {
                DAST._IType _2406___mcc_h833 = _source135.dtor_element;
                BigInteger _2407___mcc_h834 = _source135.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2408_recursiveGen;
                  bool _2409_recOwned;
                  bool _2410_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2411_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out940;
                  bool _out941;
                  bool _out942;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out940, out _out941, out _out942, out _out943);
                  _2408_recursiveGen = _out940;
                  _2409_recOwned = _out941;
                  _2410_recErased = _out942;
                  _2411_recIdents = _out943;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2409_recOwned;
                  isErased = _2410_recErased;
                  readIdents = _2411_recIdents;
                }
              } else if (_source135.is_Seq) {
                DAST._IType _2412___mcc_h837 = _source135.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2413_recursiveGen;
                  bool _2414_recOwned;
                  bool _2415_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2416_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out944;
                  bool _out945;
                  bool _out946;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out947;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out944, out _out945, out _out946, out _out947);
                  _2413_recursiveGen = _out944;
                  _2414_recOwned = _out945;
                  _2415_recErased = _out946;
                  _2416_recIdents = _out947;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2413_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2414_recOwned;
                  isErased = _2415_recErased;
                  readIdents = _2416_recIdents;
                }
              } else if (_source135.is_Set) {
                DAST._IType _2417___mcc_h839 = _source135.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2418_recursiveGen;
                  bool _2419_recOwned;
                  bool _2420_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2421_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out948;
                  bool _out949;
                  bool _out950;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out951;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out948, out _out949, out _out950, out _out951);
                  _2418_recursiveGen = _out948;
                  _2419_recOwned = _out949;
                  _2420_recErased = _out950;
                  _2421_recIdents = _out951;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2418_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2419_recOwned;
                  isErased = _2420_recErased;
                  readIdents = _2421_recIdents;
                }
              } else if (_source135.is_Multiset) {
                DAST._IType _2422___mcc_h841 = _source135.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2423_recursiveGen;
                  bool _2424_recOwned;
                  bool _2425_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out952;
                  bool _out953;
                  bool _out954;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out955;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out952, out _out953, out _out954, out _out955);
                  _2423_recursiveGen = _out952;
                  _2424_recOwned = _out953;
                  _2425_recErased = _out954;
                  _2426_recIdents = _out955;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2423_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2424_recOwned;
                  isErased = _2425_recErased;
                  readIdents = _2426_recIdents;
                }
              } else if (_source135.is_Map) {
                DAST._IType _2427___mcc_h843 = _source135.dtor_key;
                DAST._IType _2428___mcc_h844 = _source135.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2429_recursiveGen;
                  bool _2430_recOwned;
                  bool _2431_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2432_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out956;
                  bool _out957;
                  bool _out958;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out956, out _out957, out _out958, out _out959);
                  _2429_recursiveGen = _out956;
                  _2430_recOwned = _out957;
                  _2431_recErased = _out958;
                  _2432_recIdents = _out959;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2429_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2430_recOwned;
                  isErased = _2431_recErased;
                  readIdents = _2432_recIdents;
                }
              } else if (_source135.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2433___mcc_h847 = _source135.dtor_args;
                DAST._IType _2434___mcc_h848 = _source135.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2435_recursiveGen;
                  bool _2436_recOwned;
                  bool _2437_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2438_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out960;
                  bool _out961;
                  bool _out962;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out963;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out960, out _out961, out _out962, out _out963);
                  _2435_recursiveGen = _out960;
                  _2436_recOwned = _out961;
                  _2437_recErased = _out962;
                  _2438_recIdents = _out963;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2436_recOwned;
                  isErased = _2437_recErased;
                  readIdents = _2438_recIdents;
                }
              } else if (_source135.is_Primitive) {
                DAST._IPrimitive _2439___mcc_h851 = _source135.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2440_recursiveGen;
                  bool _2441_recOwned;
                  bool _2442_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2443_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out964;
                  bool _out965;
                  bool _out966;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out967;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out964, out _out965, out _out966, out _out967);
                  _2440_recursiveGen = _out964;
                  _2441_recOwned = _out965;
                  _2442_recErased = _out966;
                  _2443_recIdents = _out967;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2440_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2441_recOwned;
                  isErased = _2442_recErased;
                  readIdents = _2443_recIdents;
                }
              } else if (_source135.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2444___mcc_h853 = _source135.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2445_recursiveGen;
                  bool _2446_recOwned;
                  bool _2447_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2448_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out968;
                  bool _out969;
                  bool _out970;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out971;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out968, out _out969, out _out970, out _out971);
                  _2445_recursiveGen = _out968;
                  _2446_recOwned = _out969;
                  _2447_recErased = _out970;
                  _2448_recIdents = _out971;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2445_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2446_recOwned;
                  isErased = _2447_recErased;
                  readIdents = _2448_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2449___mcc_h855 = _source135.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2450_recursiveGen;
                  bool _2451_recOwned;
                  bool _2452_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2453_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out972;
                  bool _out973;
                  bool _out974;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out975;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out972, out _out973, out _out974, out _out975);
                  _2450_recursiveGen = _out972;
                  _2451_recOwned = _out973;
                  _2452_recErased = _out974;
                  _2453_recIdents = _out975;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2450_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2451_recOwned;
                  isErased = _2452_recErased;
                  readIdents = _2453_recIdents;
                }
              }
            } else if (_source113.is_Primitive) {
              DAST._IPrimitive _2454___mcc_h857 = _source113.dtor_Primitive_a0;
              DAST._IPrimitive _source137 = _2454___mcc_h857;
              if (_source137.is_Int) {
                DAST._IType _source138 = _1546___mcc_h306;
                if (_source138.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2455___mcc_h861 = _source138.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2456___mcc_h862 = _source138.dtor_typeArgs;
                  DAST._IResolvedType _2457___mcc_h863 = _source138.dtor_resolved;
                  DAST._IResolvedType _source139 = _2457___mcc_h863;
                  if (_source139.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2458___mcc_h867 = _source139.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2459_recursiveGen;
                      bool _2460_recOwned;
                      bool _2461_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2462_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out976;
                      bool _out977;
                      bool _out978;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out976, out _out977, out _out978, out _out979);
                      _2459_recursiveGen = _out976;
                      _2460_recOwned = _out977;
                      _2461_recErased = _out978;
                      _2462_recIdents = _out979;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2460_recOwned;
                      isErased = _2461_recErased;
                      readIdents = _2462_recIdents;
                    }
                  } else if (_source139.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2463___mcc_h869 = _source139.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2464_recursiveGen;
                      bool _2465_recOwned;
                      bool _2466_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2467_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out980;
                      bool _out981;
                      bool _out982;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out983;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out980, out _out981, out _out982, out _out983);
                      _2464_recursiveGen = _out980;
                      _2465_recOwned = _out981;
                      _2466_recErased = _out982;
                      _2467_recIdents = _out983;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2464_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2465_recOwned;
                      isErased = _2466_recErased;
                      readIdents = _2467_recIdents;
                    }
                  } else {
                    DAST._IType _2468___mcc_h871 = _source139.dtor_Newtype_a0;
                    DAST._IType _2469_b = _2468___mcc_h871;
                    {
                      if (object.Equals(_1539_fromTpe, _2469_b)) {
                        Dafny.ISequence<Dafny.Rune> _2470_recursiveGen;
                        bool _2471_recOwned;
                        bool _2472_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2473_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out984;
                        bool _out985;
                        bool _out986;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out987;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out984, out _out985, out _out986, out _out987);
                        _2470_recursiveGen = _out984;
                        _2471_recOwned = _out985;
                        _2472_recErased = _out986;
                        _2473_recIdents = _out987;
                        Dafny.ISequence<Dafny.Rune> _2474_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out988;
                        _out988 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _2474_rhsType = _out988;
                        Dafny.ISequence<Dafny.Rune> _2475_uneraseFn;
                        _2475_uneraseFn = ((_2471_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2474_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2475_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2470_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2471_recOwned;
                        isErased = false;
                        readIdents = _2473_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out989;
                        bool _out990;
                        bool _out991;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2469_b), _2469_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out989, out _out990, out _out991, out _out992);
                        s = _out989;
                        isOwned = _out990;
                        isErased = _out991;
                        readIdents = _out992;
                      }
                    }
                  }
                } else if (_source138.is_Nullable) {
                  DAST._IType _2476___mcc_h873 = _source138.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2477_recursiveGen;
                    bool _2478_recOwned;
                    bool _2479_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2480_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out993;
                    bool _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out993, out _out994, out _out995, out _out996);
                    _2477_recursiveGen = _out993;
                    _2478_recOwned = _out994;
                    _2479_recErased = _out995;
                    _2480_recIdents = _out996;
                    if (!(_2478_recOwned)) {
                      _2477_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2477_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2477_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2479_recErased;
                    readIdents = _2480_recIdents;
                  }
                } else if (_source138.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2481___mcc_h875 = _source138.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2482_recursiveGen;
                    bool _2483_recOwned;
                    bool _2484_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2485_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out997;
                    bool _out998;
                    bool _out999;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999, out _out1000);
                    _2482_recursiveGen = _out997;
                    _2483_recOwned = _out998;
                    _2484_recErased = _out999;
                    _2485_recIdents = _out1000;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2483_recOwned;
                    isErased = _2484_recErased;
                    readIdents = _2485_recIdents;
                  }
                } else if (_source138.is_Array) {
                  DAST._IType _2486___mcc_h877 = _source138.dtor_element;
                  BigInteger _2487___mcc_h878 = _source138.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2488_recursiveGen;
                    bool _2489_recOwned;
                    bool _2490_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2491_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1001;
                    bool _out1002;
                    bool _out1003;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1001, out _out1002, out _out1003, out _out1004);
                    _2488_recursiveGen = _out1001;
                    _2489_recOwned = _out1002;
                    _2490_recErased = _out1003;
                    _2491_recIdents = _out1004;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2489_recOwned;
                    isErased = _2490_recErased;
                    readIdents = _2491_recIdents;
                  }
                } else if (_source138.is_Seq) {
                  DAST._IType _2492___mcc_h881 = _source138.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2493_recursiveGen;
                    bool _2494_recOwned;
                    bool _2495_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2496_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1005;
                    bool _out1006;
                    bool _out1007;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1008;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1005, out _out1006, out _out1007, out _out1008);
                    _2493_recursiveGen = _out1005;
                    _2494_recOwned = _out1006;
                    _2495_recErased = _out1007;
                    _2496_recIdents = _out1008;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2493_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2494_recOwned;
                    isErased = _2495_recErased;
                    readIdents = _2496_recIdents;
                  }
                } else if (_source138.is_Set) {
                  DAST._IType _2497___mcc_h883 = _source138.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2498_recursiveGen;
                    bool _2499_recOwned;
                    bool _2500_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2501_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1009;
                    bool _out1010;
                    bool _out1011;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1009, out _out1010, out _out1011, out _out1012);
                    _2498_recursiveGen = _out1009;
                    _2499_recOwned = _out1010;
                    _2500_recErased = _out1011;
                    _2501_recIdents = _out1012;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2499_recOwned;
                    isErased = _2500_recErased;
                    readIdents = _2501_recIdents;
                  }
                } else if (_source138.is_Multiset) {
                  DAST._IType _2502___mcc_h885 = _source138.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2503_recursiveGen;
                    bool _2504_recOwned;
                    bool _2505_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2506_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1013;
                    bool _out1014;
                    bool _out1015;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1013, out _out1014, out _out1015, out _out1016);
                    _2503_recursiveGen = _out1013;
                    _2504_recOwned = _out1014;
                    _2505_recErased = _out1015;
                    _2506_recIdents = _out1016;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2503_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2504_recOwned;
                    isErased = _2505_recErased;
                    readIdents = _2506_recIdents;
                  }
                } else if (_source138.is_Map) {
                  DAST._IType _2507___mcc_h887 = _source138.dtor_key;
                  DAST._IType _2508___mcc_h888 = _source138.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2509_recursiveGen;
                    bool _2510_recOwned;
                    bool _2511_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2512_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1017;
                    bool _out1018;
                    bool _out1019;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1020;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1017, out _out1018, out _out1019, out _out1020);
                    _2509_recursiveGen = _out1017;
                    _2510_recOwned = _out1018;
                    _2511_recErased = _out1019;
                    _2512_recIdents = _out1020;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2510_recOwned;
                    isErased = _2511_recErased;
                    readIdents = _2512_recIdents;
                  }
                } else if (_source138.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2513___mcc_h891 = _source138.dtor_args;
                  DAST._IType _2514___mcc_h892 = _source138.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2515_recursiveGen;
                    bool _2516_recOwned;
                    bool _2517_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2518_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1021;
                    bool _out1022;
                    bool _out1023;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1021, out _out1022, out _out1023, out _out1024);
                    _2515_recursiveGen = _out1021;
                    _2516_recOwned = _out1022;
                    _2517_recErased = _out1023;
                    _2518_recIdents = _out1024;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2516_recOwned;
                    isErased = _2517_recErased;
                    readIdents = _2518_recIdents;
                  }
                } else if (_source138.is_Primitive) {
                  DAST._IPrimitive _2519___mcc_h895 = _source138.dtor_Primitive_a0;
                  DAST._IPrimitive _source140 = _2519___mcc_h895;
                  if (_source140.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2520_recursiveGen;
                      bool _2521_recOwned;
                      bool _2522_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2523_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1025;
                      bool _out1026;
                      bool _out1027;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                      _2520_recursiveGen = _out1025;
                      _2521_recOwned = _out1026;
                      _2522_recErased = _out1027;
                      _2523_recIdents = _out1028;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2521_recOwned;
                      isErased = _2522_recErased;
                      readIdents = _2523_recIdents;
                    }
                  } else if (_source140.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2524_recursiveGen;
                      bool _2525___v46;
                      bool _2526___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2527_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1029;
                      bool _out1030;
                      bool _out1031;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, true, out _out1029, out _out1030, out _out1031, out _out1032);
                      _2524_recursiveGen = _out1029;
                      _2525___v46 = _out1030;
                      _2526___v47 = _out1031;
                      _2527_recIdents = _out1032;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2524_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2527_recIdents;
                    }
                  } else if (_source140.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2528_recursiveGen;
                      bool _2529_recOwned;
                      bool _2530_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1033;
                      bool _out1034;
                      bool _out1035;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                      _2528_recursiveGen = _out1033;
                      _2529_recOwned = _out1034;
                      _2530_recErased = _out1035;
                      _2531_recIdents = _out1036;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2529_recOwned;
                      isErased = _2530_recErased;
                      readIdents = _2531_recIdents;
                    }
                  } else if (_source140.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2532_recursiveGen;
                      bool _2533_recOwned;
                      bool _2534_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2535_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1037;
                      bool _out1038;
                      bool _out1039;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                      _2532_recursiveGen = _out1037;
                      _2533_recOwned = _out1038;
                      _2534_recErased = _out1039;
                      _2535_recIdents = _out1040;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2532_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2533_recOwned;
                      isErased = _2534_recErased;
                      readIdents = _2535_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2536_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1041;
                      _out1041 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2536_rhsType = _out1041;
                      Dafny.ISequence<Dafny.Rune> _2537_recursiveGen;
                      bool _2538___v56;
                      bool _2539___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2540_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1042;
                      bool _out1043;
                      bool _out1044;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, true, out _out1042, out _out1043, out _out1044, out _out1045);
                      _2537_recursiveGen = _out1042;
                      _2538___v56 = _out1043;
                      _2539___v57 = _out1044;
                      _2540_recIdents = _out1045;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2537_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2540_recIdents;
                    }
                  }
                } else if (_source138.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2541___mcc_h897 = _source138.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2542_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1046;
                    _out1046 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                    _2542_rhsType = _out1046;
                    Dafny.ISequence<Dafny.Rune> _2543_recursiveGen;
                    bool _2544___v51;
                    bool _2545___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1047;
                    bool _out1048;
                    bool _out1049;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, true, out _out1047, out _out1048, out _out1049, out _out1050);
                    _2543_recursiveGen = _out1047;
                    _2544___v51 = _out1048;
                    _2545___v52 = _out1049;
                    _2546_recIdents = _out1050;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2542_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2543_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2546_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2547___mcc_h899 = _source138.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2548_recursiveGen;
                    bool _2549_recOwned;
                    bool _2550_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2551_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1051;
                    bool _out1052;
                    bool _out1053;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1054;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1051, out _out1052, out _out1053, out _out1054);
                    _2548_recursiveGen = _out1051;
                    _2549_recOwned = _out1052;
                    _2550_recErased = _out1053;
                    _2551_recIdents = _out1054;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2548_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2549_recOwned;
                    isErased = _2550_recErased;
                    readIdents = _2551_recIdents;
                  }
                }
              } else if (_source137.is_Real) {
                DAST._IType _source141 = _1546___mcc_h306;
                if (_source141.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2552___mcc_h901 = _source141.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2553___mcc_h902 = _source141.dtor_typeArgs;
                  DAST._IResolvedType _2554___mcc_h903 = _source141.dtor_resolved;
                  DAST._IResolvedType _source142 = _2554___mcc_h903;
                  if (_source142.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2555___mcc_h907 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2556_recursiveGen;
                      bool _2557_recOwned;
                      bool _2558_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2559_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1055;
                      bool _out1056;
                      bool _out1057;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1058;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1055, out _out1056, out _out1057, out _out1058);
                      _2556_recursiveGen = _out1055;
                      _2557_recOwned = _out1056;
                      _2558_recErased = _out1057;
                      _2559_recIdents = _out1058;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2557_recOwned;
                      isErased = _2558_recErased;
                      readIdents = _2559_recIdents;
                    }
                  } else if (_source142.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2560___mcc_h909 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2561_recursiveGen;
                      bool _2562_recOwned;
                      bool _2563_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2564_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1059;
                      bool _out1060;
                      bool _out1061;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1062;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1059, out _out1060, out _out1061, out _out1062);
                      _2561_recursiveGen = _out1059;
                      _2562_recOwned = _out1060;
                      _2563_recErased = _out1061;
                      _2564_recIdents = _out1062;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2561_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2562_recOwned;
                      isErased = _2563_recErased;
                      readIdents = _2564_recIdents;
                    }
                  } else {
                    DAST._IType _2565___mcc_h911 = _source142.dtor_Newtype_a0;
                    DAST._IType _2566_b = _2565___mcc_h911;
                    {
                      if (object.Equals(_1539_fromTpe, _2566_b)) {
                        Dafny.ISequence<Dafny.Rune> _2567_recursiveGen;
                        bool _2568_recOwned;
                        bool _2569_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2570_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1063;
                        bool _out1064;
                        bool _out1065;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1066;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1063, out _out1064, out _out1065, out _out1066);
                        _2567_recursiveGen = _out1063;
                        _2568_recOwned = _out1064;
                        _2569_recErased = _out1065;
                        _2570_recIdents = _out1066;
                        Dafny.ISequence<Dafny.Rune> _2571_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1067;
                        _out1067 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _2571_rhsType = _out1067;
                        Dafny.ISequence<Dafny.Rune> _2572_uneraseFn;
                        _2572_uneraseFn = ((_2568_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2571_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2572_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2567_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2568_recOwned;
                        isErased = false;
                        readIdents = _2570_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1068;
                        bool _out1069;
                        bool _out1070;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2566_b), _2566_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                        s = _out1068;
                        isOwned = _out1069;
                        isErased = _out1070;
                        readIdents = _out1071;
                      }
                    }
                  }
                } else if (_source141.is_Nullable) {
                  DAST._IType _2573___mcc_h913 = _source141.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2574_recursiveGen;
                    bool _2575_recOwned;
                    bool _2576_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _2574_recursiveGen = _out1072;
                    _2575_recOwned = _out1073;
                    _2576_recErased = _out1074;
                    _2577_recIdents = _out1075;
                    if (!(_2575_recOwned)) {
                      _2574_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2574_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2574_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2576_recErased;
                    readIdents = _2577_recIdents;
                  }
                } else if (_source141.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2578___mcc_h915 = _source141.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2579_recursiveGen;
                    bool _2580_recOwned;
                    bool _2581_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1076;
                    bool _out1077;
                    bool _out1078;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                    _2579_recursiveGen = _out1076;
                    _2580_recOwned = _out1077;
                    _2581_recErased = _out1078;
                    _2582_recIdents = _out1079;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2580_recOwned;
                    isErased = _2581_recErased;
                    readIdents = _2582_recIdents;
                  }
                } else if (_source141.is_Array) {
                  DAST._IType _2583___mcc_h917 = _source141.dtor_element;
                  BigInteger _2584___mcc_h918 = _source141.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2585_recursiveGen;
                    bool _2586_recOwned;
                    bool _2587_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2588_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1080;
                    bool _out1081;
                    bool _out1082;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                    _2585_recursiveGen = _out1080;
                    _2586_recOwned = _out1081;
                    _2587_recErased = _out1082;
                    _2588_recIdents = _out1083;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2585_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2586_recOwned;
                    isErased = _2587_recErased;
                    readIdents = _2588_recIdents;
                  }
                } else if (_source141.is_Seq) {
                  DAST._IType _2589___mcc_h921 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2590_recursiveGen;
                    bool _2591_recOwned;
                    bool _2592_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2593_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1084;
                    bool _out1085;
                    bool _out1086;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                    _2590_recursiveGen = _out1084;
                    _2591_recOwned = _out1085;
                    _2592_recErased = _out1086;
                    _2593_recIdents = _out1087;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2590_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2591_recOwned;
                    isErased = _2592_recErased;
                    readIdents = _2593_recIdents;
                  }
                } else if (_source141.is_Set) {
                  DAST._IType _2594___mcc_h923 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2595_recursiveGen;
                    bool _2596_recOwned;
                    bool _2597_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2598_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1088;
                    bool _out1089;
                    bool _out1090;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1091;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1088, out _out1089, out _out1090, out _out1091);
                    _2595_recursiveGen = _out1088;
                    _2596_recOwned = _out1089;
                    _2597_recErased = _out1090;
                    _2598_recIdents = _out1091;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2595_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2596_recOwned;
                    isErased = _2597_recErased;
                    readIdents = _2598_recIdents;
                  }
                } else if (_source141.is_Multiset) {
                  DAST._IType _2599___mcc_h925 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2600_recursiveGen;
                    bool _2601_recOwned;
                    bool _2602_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2603_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1092;
                    bool _out1093;
                    bool _out1094;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1092, out _out1093, out _out1094, out _out1095);
                    _2600_recursiveGen = _out1092;
                    _2601_recOwned = _out1093;
                    _2602_recErased = _out1094;
                    _2603_recIdents = _out1095;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2601_recOwned;
                    isErased = _2602_recErased;
                    readIdents = _2603_recIdents;
                  }
                } else if (_source141.is_Map) {
                  DAST._IType _2604___mcc_h927 = _source141.dtor_key;
                  DAST._IType _2605___mcc_h928 = _source141.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2606_recursiveGen;
                    bool _2607_recOwned;
                    bool _2608_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2609_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1096;
                    bool _out1097;
                    bool _out1098;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1096, out _out1097, out _out1098, out _out1099);
                    _2606_recursiveGen = _out1096;
                    _2607_recOwned = _out1097;
                    _2608_recErased = _out1098;
                    _2609_recIdents = _out1099;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2606_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2607_recOwned;
                    isErased = _2608_recErased;
                    readIdents = _2609_recIdents;
                  }
                } else if (_source141.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2610___mcc_h931 = _source141.dtor_args;
                  DAST._IType _2611___mcc_h932 = _source141.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2612_recursiveGen;
                    bool _2613_recOwned;
                    bool _2614_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2615_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1100;
                    bool _out1101;
                    bool _out1102;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1103;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1100, out _out1101, out _out1102, out _out1103);
                    _2612_recursiveGen = _out1100;
                    _2613_recOwned = _out1101;
                    _2614_recErased = _out1102;
                    _2615_recIdents = _out1103;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2613_recOwned;
                    isErased = _2614_recErased;
                    readIdents = _2615_recIdents;
                  }
                } else if (_source141.is_Primitive) {
                  DAST._IPrimitive _2616___mcc_h935 = _source141.dtor_Primitive_a0;
                  DAST._IPrimitive _source143 = _2616___mcc_h935;
                  if (_source143.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2617_recursiveGen;
                      bool _2618___v48;
                      bool _2619___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2620_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1104;
                      bool _out1105;
                      bool _out1106;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1107;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, false, out _out1104, out _out1105, out _out1106, out _out1107);
                      _2617_recursiveGen = _out1104;
                      _2618___v48 = _out1105;
                      _2619___v49 = _out1106;
                      _2620_recIdents = _out1107;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2617_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2620_recIdents;
                    }
                  } else if (_source143.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2621_recursiveGen;
                      bool _2622_recOwned;
                      bool _2623_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2624_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1108;
                      bool _out1109;
                      bool _out1110;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1108, out _out1109, out _out1110, out _out1111);
                      _2621_recursiveGen = _out1108;
                      _2622_recOwned = _out1109;
                      _2623_recErased = _out1110;
                      _2624_recIdents = _out1111;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2621_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2622_recOwned;
                      isErased = _2623_recErased;
                      readIdents = _2624_recIdents;
                    }
                  } else if (_source143.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
                      bool _2626_recOwned;
                      bool _2627_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1112;
                      bool _out1113;
                      bool _out1114;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1112, out _out1113, out _out1114, out _out1115);
                      _2625_recursiveGen = _out1112;
                      _2626_recOwned = _out1113;
                      _2627_recErased = _out1114;
                      _2628_recIdents = _out1115;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2626_recOwned;
                      isErased = _2627_recErased;
                      readIdents = _2628_recIdents;
                    }
                  } else if (_source143.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2629_recursiveGen;
                      bool _2630_recOwned;
                      bool _2631_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2632_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1116;
                      bool _out1117;
                      bool _out1118;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1119;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1116, out _out1117, out _out1118, out _out1119);
                      _2629_recursiveGen = _out1116;
                      _2630_recOwned = _out1117;
                      _2631_recErased = _out1118;
                      _2632_recIdents = _out1119;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2629_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2630_recOwned;
                      isErased = _2631_recErased;
                      readIdents = _2632_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2633_recursiveGen;
                      bool _2634_recOwned;
                      bool _2635_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2636_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1120;
                      bool _out1121;
                      bool _out1122;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1123;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1120, out _out1121, out _out1122, out _out1123);
                      _2633_recursiveGen = _out1120;
                      _2634_recOwned = _out1121;
                      _2635_recErased = _out1122;
                      _2636_recIdents = _out1123;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2634_recOwned;
                      isErased = _2635_recErased;
                      readIdents = _2636_recIdents;
                    }
                  }
                } else if (_source141.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2637___mcc_h937 = _source141.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2638_recursiveGen;
                    bool _2639_recOwned;
                    bool _2640_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2641_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1124;
                    bool _out1125;
                    bool _out1126;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1127;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1124, out _out1125, out _out1126, out _out1127);
                    _2638_recursiveGen = _out1124;
                    _2639_recOwned = _out1125;
                    _2640_recErased = _out1126;
                    _2641_recIdents = _out1127;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2638_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2639_recOwned;
                    isErased = _2640_recErased;
                    readIdents = _2641_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2642___mcc_h939 = _source141.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2643_recursiveGen;
                    bool _2644_recOwned;
                    bool _2645_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2646_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1128;
                    bool _out1129;
                    bool _out1130;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1131;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1128, out _out1129, out _out1130, out _out1131);
                    _2643_recursiveGen = _out1128;
                    _2644_recOwned = _out1129;
                    _2645_recErased = _out1130;
                    _2646_recIdents = _out1131;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2644_recOwned;
                    isErased = _2645_recErased;
                    readIdents = _2646_recIdents;
                  }
                }
              } else if (_source137.is_String) {
                DAST._IType _source144 = _1546___mcc_h306;
                if (_source144.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2647___mcc_h941 = _source144.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2648___mcc_h942 = _source144.dtor_typeArgs;
                  DAST._IResolvedType _2649___mcc_h943 = _source144.dtor_resolved;
                  DAST._IResolvedType _source145 = _2649___mcc_h943;
                  if (_source145.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2650___mcc_h947 = _source145.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2651_recursiveGen;
                      bool _2652_recOwned;
                      bool _2653_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2654_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1132;
                      bool _out1133;
                      bool _out1134;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1135;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1132, out _out1133, out _out1134, out _out1135);
                      _2651_recursiveGen = _out1132;
                      _2652_recOwned = _out1133;
                      _2653_recErased = _out1134;
                      _2654_recIdents = _out1135;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2652_recOwned;
                      isErased = _2653_recErased;
                      readIdents = _2654_recIdents;
                    }
                  } else if (_source145.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2655___mcc_h949 = _source145.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2656_recursiveGen;
                      bool _2657_recOwned;
                      bool _2658_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2659_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1136;
                      bool _out1137;
                      bool _out1138;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1139;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1136, out _out1137, out _out1138, out _out1139);
                      _2656_recursiveGen = _out1136;
                      _2657_recOwned = _out1137;
                      _2658_recErased = _out1138;
                      _2659_recIdents = _out1139;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2657_recOwned;
                      isErased = _2658_recErased;
                      readIdents = _2659_recIdents;
                    }
                  } else {
                    DAST._IType _2660___mcc_h951 = _source145.dtor_Newtype_a0;
                    DAST._IType _2661_b = _2660___mcc_h951;
                    {
                      if (object.Equals(_1539_fromTpe, _2661_b)) {
                        Dafny.ISequence<Dafny.Rune> _2662_recursiveGen;
                        bool _2663_recOwned;
                        bool _2664_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2665_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1140;
                        bool _out1141;
                        bool _out1142;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1143;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1140, out _out1141, out _out1142, out _out1143);
                        _2662_recursiveGen = _out1140;
                        _2663_recOwned = _out1141;
                        _2664_recErased = _out1142;
                        _2665_recIdents = _out1143;
                        Dafny.ISequence<Dafny.Rune> _2666_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1144;
                        _out1144 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _2666_rhsType = _out1144;
                        Dafny.ISequence<Dafny.Rune> _2667_uneraseFn;
                        _2667_uneraseFn = ((_2663_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2666_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2667_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2663_recOwned;
                        isErased = false;
                        readIdents = _2665_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2661_b), _2661_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        s = _out1145;
                        isOwned = _out1146;
                        isErased = _out1147;
                        readIdents = _out1148;
                      }
                    }
                  }
                } else if (_source144.is_Nullable) {
                  DAST._IType _2668___mcc_h953 = _source144.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2669_recursiveGen;
                    bool _2670_recOwned;
                    bool _2671_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2672_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1149;
                    bool _out1150;
                    bool _out1151;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1149, out _out1150, out _out1151, out _out1152);
                    _2669_recursiveGen = _out1149;
                    _2670_recOwned = _out1150;
                    _2671_recErased = _out1151;
                    _2672_recIdents = _out1152;
                    if (!(_2670_recOwned)) {
                      _2669_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2669_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2669_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2671_recErased;
                    readIdents = _2672_recIdents;
                  }
                } else if (_source144.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2673___mcc_h955 = _source144.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2674_recursiveGen;
                    bool _2675_recOwned;
                    bool _2676_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2677_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1153;
                    bool _out1154;
                    bool _out1155;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1153, out _out1154, out _out1155, out _out1156);
                    _2674_recursiveGen = _out1153;
                    _2675_recOwned = _out1154;
                    _2676_recErased = _out1155;
                    _2677_recIdents = _out1156;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2675_recOwned;
                    isErased = _2676_recErased;
                    readIdents = _2677_recIdents;
                  }
                } else if (_source144.is_Array) {
                  DAST._IType _2678___mcc_h957 = _source144.dtor_element;
                  BigInteger _2679___mcc_h958 = _source144.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2680_recursiveGen;
                    bool _2681_recOwned;
                    bool _2682_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2683_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1157;
                    bool _out1158;
                    bool _out1159;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1157, out _out1158, out _out1159, out _out1160);
                    _2680_recursiveGen = _out1157;
                    _2681_recOwned = _out1158;
                    _2682_recErased = _out1159;
                    _2683_recIdents = _out1160;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2681_recOwned;
                    isErased = _2682_recErased;
                    readIdents = _2683_recIdents;
                  }
                } else if (_source144.is_Seq) {
                  DAST._IType _2684___mcc_h961 = _source144.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2685_recursiveGen;
                    bool _2686_recOwned;
                    bool _2687_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2688_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1161;
                    bool _out1162;
                    bool _out1163;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1164;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1161, out _out1162, out _out1163, out _out1164);
                    _2685_recursiveGen = _out1161;
                    _2686_recOwned = _out1162;
                    _2687_recErased = _out1163;
                    _2688_recIdents = _out1164;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2686_recOwned;
                    isErased = _2687_recErased;
                    readIdents = _2688_recIdents;
                  }
                } else if (_source144.is_Set) {
                  DAST._IType _2689___mcc_h963 = _source144.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2690_recursiveGen;
                    bool _2691_recOwned;
                    bool _2692_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2693_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1165;
                    bool _out1166;
                    bool _out1167;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1168;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1165, out _out1166, out _out1167, out _out1168);
                    _2690_recursiveGen = _out1165;
                    _2691_recOwned = _out1166;
                    _2692_recErased = _out1167;
                    _2693_recIdents = _out1168;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2690_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2691_recOwned;
                    isErased = _2692_recErased;
                    readIdents = _2693_recIdents;
                  }
                } else if (_source144.is_Multiset) {
                  DAST._IType _2694___mcc_h965 = _source144.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2695_recursiveGen;
                    bool _2696_recOwned;
                    bool _2697_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2698_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1169;
                    bool _out1170;
                    bool _out1171;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1169, out _out1170, out _out1171, out _out1172);
                    _2695_recursiveGen = _out1169;
                    _2696_recOwned = _out1170;
                    _2697_recErased = _out1171;
                    _2698_recIdents = _out1172;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2695_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2696_recOwned;
                    isErased = _2697_recErased;
                    readIdents = _2698_recIdents;
                  }
                } else if (_source144.is_Map) {
                  DAST._IType _2699___mcc_h967 = _source144.dtor_key;
                  DAST._IType _2700___mcc_h968 = _source144.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2701_recursiveGen;
                    bool _2702_recOwned;
                    bool _2703_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2704_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1173;
                    bool _out1174;
                    bool _out1175;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1173, out _out1174, out _out1175, out _out1176);
                    _2701_recursiveGen = _out1173;
                    _2702_recOwned = _out1174;
                    _2703_recErased = _out1175;
                    _2704_recIdents = _out1176;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2701_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2702_recOwned;
                    isErased = _2703_recErased;
                    readIdents = _2704_recIdents;
                  }
                } else if (_source144.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2705___mcc_h971 = _source144.dtor_args;
                  DAST._IType _2706___mcc_h972 = _source144.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2707_recursiveGen;
                    bool _2708_recOwned;
                    bool _2709_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2710_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1177;
                    bool _out1178;
                    bool _out1179;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1180;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1177, out _out1178, out _out1179, out _out1180);
                    _2707_recursiveGen = _out1177;
                    _2708_recOwned = _out1178;
                    _2709_recErased = _out1179;
                    _2710_recIdents = _out1180;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2707_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2708_recOwned;
                    isErased = _2709_recErased;
                    readIdents = _2710_recIdents;
                  }
                } else if (_source144.is_Primitive) {
                  DAST._IPrimitive _2711___mcc_h975 = _source144.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2712_recursiveGen;
                    bool _2713_recOwned;
                    bool _2714_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2715_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1181;
                    bool _out1182;
                    bool _out1183;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1181, out _out1182, out _out1183, out _out1184);
                    _2712_recursiveGen = _out1181;
                    _2713_recOwned = _out1182;
                    _2714_recErased = _out1183;
                    _2715_recIdents = _out1184;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2712_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2713_recOwned;
                    isErased = _2714_recErased;
                    readIdents = _2715_recIdents;
                  }
                } else if (_source144.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2716___mcc_h977 = _source144.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2717_recursiveGen;
                    bool _2718_recOwned;
                    bool _2719_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2720_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1185;
                    bool _out1186;
                    bool _out1187;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1188;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1185, out _out1186, out _out1187, out _out1188);
                    _2717_recursiveGen = _out1185;
                    _2718_recOwned = _out1186;
                    _2719_recErased = _out1187;
                    _2720_recIdents = _out1188;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2717_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2718_recOwned;
                    isErased = _2719_recErased;
                    readIdents = _2720_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2721___mcc_h979 = _source144.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2722_recursiveGen;
                    bool _2723_recOwned;
                    bool _2724_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2725_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1189;
                    bool _out1190;
                    bool _out1191;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1192;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1189, out _out1190, out _out1191, out _out1192);
                    _2722_recursiveGen = _out1189;
                    _2723_recOwned = _out1190;
                    _2724_recErased = _out1191;
                    _2725_recIdents = _out1192;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2722_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2723_recOwned;
                    isErased = _2724_recErased;
                    readIdents = _2725_recIdents;
                  }
                }
              } else if (_source137.is_Bool) {
                DAST._IType _source146 = _1546___mcc_h306;
                if (_source146.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2726___mcc_h981 = _source146.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2727___mcc_h982 = _source146.dtor_typeArgs;
                  DAST._IResolvedType _2728___mcc_h983 = _source146.dtor_resolved;
                  DAST._IResolvedType _source147 = _2728___mcc_h983;
                  if (_source147.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2729___mcc_h987 = _source147.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2730_recursiveGen;
                      bool _2731_recOwned;
                      bool _2732_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2733_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1193;
                      bool _out1194;
                      bool _out1195;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1193, out _out1194, out _out1195, out _out1196);
                      _2730_recursiveGen = _out1193;
                      _2731_recOwned = _out1194;
                      _2732_recErased = _out1195;
                      _2733_recIdents = _out1196;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2731_recOwned;
                      isErased = _2732_recErased;
                      readIdents = _2733_recIdents;
                    }
                  } else if (_source147.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2734___mcc_h989 = _source147.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2735_recursiveGen;
                      bool _2736_recOwned;
                      bool _2737_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2738_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1197;
                      bool _out1198;
                      bool _out1199;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1200;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1197, out _out1198, out _out1199, out _out1200);
                      _2735_recursiveGen = _out1197;
                      _2736_recOwned = _out1198;
                      _2737_recErased = _out1199;
                      _2738_recIdents = _out1200;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2736_recOwned;
                      isErased = _2737_recErased;
                      readIdents = _2738_recIdents;
                    }
                  } else {
                    DAST._IType _2739___mcc_h991 = _source147.dtor_Newtype_a0;
                    DAST._IType _2740_b = _2739___mcc_h991;
                    {
                      if (object.Equals(_1539_fromTpe, _2740_b)) {
                        Dafny.ISequence<Dafny.Rune> _2741_recursiveGen;
                        bool _2742_recOwned;
                        bool _2743_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2744_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1201;
                        bool _out1202;
                        bool _out1203;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1204;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1201, out _out1202, out _out1203, out _out1204);
                        _2741_recursiveGen = _out1201;
                        _2742_recOwned = _out1202;
                        _2743_recErased = _out1203;
                        _2744_recIdents = _out1204;
                        Dafny.ISequence<Dafny.Rune> _2745_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1205;
                        _out1205 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _2745_rhsType = _out1205;
                        Dafny.ISequence<Dafny.Rune> _2746_uneraseFn;
                        _2746_uneraseFn = ((_2742_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2745_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2746_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2742_recOwned;
                        isErased = false;
                        readIdents = _2744_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2740_b), _2740_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        s = _out1206;
                        isOwned = _out1207;
                        isErased = _out1208;
                        readIdents = _out1209;
                      }
                    }
                  }
                } else if (_source146.is_Nullable) {
                  DAST._IType _2747___mcc_h993 = _source146.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2748_recursiveGen;
                    bool _2749_recOwned;
                    bool _2750_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1210;
                    bool _out1211;
                    bool _out1212;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1213;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1210, out _out1211, out _out1212, out _out1213);
                    _2748_recursiveGen = _out1210;
                    _2749_recOwned = _out1211;
                    _2750_recErased = _out1212;
                    _2751_recIdents = _out1213;
                    if (!(_2749_recOwned)) {
                      _2748_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2748_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2750_recErased;
                    readIdents = _2751_recIdents;
                  }
                } else if (_source146.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2752___mcc_h995 = _source146.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2753_recursiveGen;
                    bool _2754_recOwned;
                    bool _2755_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2756_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1214;
                    bool _out1215;
                    bool _out1216;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1214, out _out1215, out _out1216, out _out1217);
                    _2753_recursiveGen = _out1214;
                    _2754_recOwned = _out1215;
                    _2755_recErased = _out1216;
                    _2756_recIdents = _out1217;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2754_recOwned;
                    isErased = _2755_recErased;
                    readIdents = _2756_recIdents;
                  }
                } else if (_source146.is_Array) {
                  DAST._IType _2757___mcc_h997 = _source146.dtor_element;
                  BigInteger _2758___mcc_h998 = _source146.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2759_recursiveGen;
                    bool _2760_recOwned;
                    bool _2761_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1218;
                    bool _out1219;
                    bool _out1220;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1221;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1218, out _out1219, out _out1220, out _out1221);
                    _2759_recursiveGen = _out1218;
                    _2760_recOwned = _out1219;
                    _2761_recErased = _out1220;
                    _2762_recIdents = _out1221;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2760_recOwned;
                    isErased = _2761_recErased;
                    readIdents = _2762_recIdents;
                  }
                } else if (_source146.is_Seq) {
                  DAST._IType _2763___mcc_h1001 = _source146.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2764_recursiveGen;
                    bool _2765_recOwned;
                    bool _2766_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1222;
                    bool _out1223;
                    bool _out1224;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1225;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1222, out _out1223, out _out1224, out _out1225);
                    _2764_recursiveGen = _out1222;
                    _2765_recOwned = _out1223;
                    _2766_recErased = _out1224;
                    _2767_recIdents = _out1225;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2765_recOwned;
                    isErased = _2766_recErased;
                    readIdents = _2767_recIdents;
                  }
                } else if (_source146.is_Set) {
                  DAST._IType _2768___mcc_h1003 = _source146.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2769_recursiveGen;
                    bool _2770_recOwned;
                    bool _2771_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2772_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1226;
                    bool _out1227;
                    bool _out1228;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1226, out _out1227, out _out1228, out _out1229);
                    _2769_recursiveGen = _out1226;
                    _2770_recOwned = _out1227;
                    _2771_recErased = _out1228;
                    _2772_recIdents = _out1229;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2770_recOwned;
                    isErased = _2771_recErased;
                    readIdents = _2772_recIdents;
                  }
                } else if (_source146.is_Multiset) {
                  DAST._IType _2773___mcc_h1005 = _source146.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2774_recursiveGen;
                    bool _2775_recOwned;
                    bool _2776_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2777_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1230;
                    bool _out1231;
                    bool _out1232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1233;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1230, out _out1231, out _out1232, out _out1233);
                    _2774_recursiveGen = _out1230;
                    _2775_recOwned = _out1231;
                    _2776_recErased = _out1232;
                    _2777_recIdents = _out1233;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2774_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2775_recOwned;
                    isErased = _2776_recErased;
                    readIdents = _2777_recIdents;
                  }
                } else if (_source146.is_Map) {
                  DAST._IType _2778___mcc_h1007 = _source146.dtor_key;
                  DAST._IType _2779___mcc_h1008 = _source146.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2780_recursiveGen;
                    bool _2781_recOwned;
                    bool _2782_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2783_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1234;
                    bool _out1235;
                    bool _out1236;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1234, out _out1235, out _out1236, out _out1237);
                    _2780_recursiveGen = _out1234;
                    _2781_recOwned = _out1235;
                    _2782_recErased = _out1236;
                    _2783_recIdents = _out1237;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2781_recOwned;
                    isErased = _2782_recErased;
                    readIdents = _2783_recIdents;
                  }
                } else if (_source146.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2784___mcc_h1011 = _source146.dtor_args;
                  DAST._IType _2785___mcc_h1012 = _source146.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2786_recursiveGen;
                    bool _2787_recOwned;
                    bool _2788_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2789_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1238;
                    bool _out1239;
                    bool _out1240;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1238, out _out1239, out _out1240, out _out1241);
                    _2786_recursiveGen = _out1238;
                    _2787_recOwned = _out1239;
                    _2788_recErased = _out1240;
                    _2789_recIdents = _out1241;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2787_recOwned;
                    isErased = _2788_recErased;
                    readIdents = _2789_recIdents;
                  }
                } else if (_source146.is_Primitive) {
                  DAST._IPrimitive _2790___mcc_h1015 = _source146.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2791_recursiveGen;
                    bool _2792_recOwned;
                    bool _2793_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2794_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1242;
                    bool _out1243;
                    bool _out1244;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1245;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1242, out _out1243, out _out1244, out _out1245);
                    _2791_recursiveGen = _out1242;
                    _2792_recOwned = _out1243;
                    _2793_recErased = _out1244;
                    _2794_recIdents = _out1245;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2792_recOwned;
                    isErased = _2793_recErased;
                    readIdents = _2794_recIdents;
                  }
                } else if (_source146.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2795___mcc_h1017 = _source146.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2796_recursiveGen;
                    bool _2797_recOwned;
                    bool _2798_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2799_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1246;
                    bool _out1247;
                    bool _out1248;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1249;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1246, out _out1247, out _out1248, out _out1249);
                    _2796_recursiveGen = _out1246;
                    _2797_recOwned = _out1247;
                    _2798_recErased = _out1248;
                    _2799_recIdents = _out1249;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2796_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2797_recOwned;
                    isErased = _2798_recErased;
                    readIdents = _2799_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2800___mcc_h1019 = _source146.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2801_recursiveGen;
                    bool _2802_recOwned;
                    bool _2803_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2804_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1250;
                    bool _out1251;
                    bool _out1252;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1250, out _out1251, out _out1252, out _out1253);
                    _2801_recursiveGen = _out1250;
                    _2802_recOwned = _out1251;
                    _2803_recErased = _out1252;
                    _2804_recIdents = _out1253;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2802_recOwned;
                    isErased = _2803_recErased;
                    readIdents = _2804_recIdents;
                  }
                }
              } else {
                DAST._IType _source148 = _1546___mcc_h306;
                if (_source148.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2805___mcc_h1021 = _source148.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2806___mcc_h1022 = _source148.dtor_typeArgs;
                  DAST._IResolvedType _2807___mcc_h1023 = _source148.dtor_resolved;
                  DAST._IResolvedType _source149 = _2807___mcc_h1023;
                  if (_source149.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2808___mcc_h1027 = _source149.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2809_recursiveGen;
                      bool _2810_recOwned;
                      bool _2811_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2812_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1254;
                      bool _out1255;
                      bool _out1256;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1254, out _out1255, out _out1256, out _out1257);
                      _2809_recursiveGen = _out1254;
                      _2810_recOwned = _out1255;
                      _2811_recErased = _out1256;
                      _2812_recIdents = _out1257;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2810_recOwned;
                      isErased = _2811_recErased;
                      readIdents = _2812_recIdents;
                    }
                  } else if (_source149.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2813___mcc_h1029 = _source149.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2814_recursiveGen;
                      bool _2815_recOwned;
                      bool _2816_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2817_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1258;
                      bool _out1259;
                      bool _out1260;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1261;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1258, out _out1259, out _out1260, out _out1261);
                      _2814_recursiveGen = _out1258;
                      _2815_recOwned = _out1259;
                      _2816_recErased = _out1260;
                      _2817_recIdents = _out1261;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2815_recOwned;
                      isErased = _2816_recErased;
                      readIdents = _2817_recIdents;
                    }
                  } else {
                    DAST._IType _2818___mcc_h1031 = _source149.dtor_Newtype_a0;
                    DAST._IType _2819_b = _2818___mcc_h1031;
                    {
                      if (object.Equals(_1539_fromTpe, _2819_b)) {
                        Dafny.ISequence<Dafny.Rune> _2820_recursiveGen;
                        bool _2821_recOwned;
                        bool _2822_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2823_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1262;
                        bool _out1263;
                        bool _out1264;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
                        DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1262, out _out1263, out _out1264, out _out1265);
                        _2820_recursiveGen = _out1262;
                        _2821_recOwned = _out1263;
                        _2822_recErased = _out1264;
                        _2823_recIdents = _out1265;
                        Dafny.ISequence<Dafny.Rune> _2824_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1266;
                        _out1266 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                        _2824_rhsType = _out1266;
                        Dafny.ISequence<Dafny.Rune> _2825_uneraseFn;
                        _2825_uneraseFn = ((_2821_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2824_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2825_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2820_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2821_recOwned;
                        isErased = false;
                        readIdents = _2823_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1267;
                        bool _out1268;
                        bool _out1269;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1270;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2819_b), _2819_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out1267, out _out1268, out _out1269, out _out1270);
                        s = _out1267;
                        isOwned = _out1268;
                        isErased = _out1269;
                        readIdents = _out1270;
                      }
                    }
                  }
                } else if (_source148.is_Nullable) {
                  DAST._IType _2826___mcc_h1033 = _source148.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2827_recursiveGen;
                    bool _2828_recOwned;
                    bool _2829_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1271;
                    bool _out1272;
                    bool _out1273;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1271, out _out1272, out _out1273, out _out1274);
                    _2827_recursiveGen = _out1271;
                    _2828_recOwned = _out1272;
                    _2829_recErased = _out1273;
                    _2830_recIdents = _out1274;
                    if (!(_2828_recOwned)) {
                      _2827_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2827_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2829_recErased;
                    readIdents = _2830_recIdents;
                  }
                } else if (_source148.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2831___mcc_h1035 = _source148.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2832_recursiveGen;
                    bool _2833_recOwned;
                    bool _2834_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1275;
                    bool _out1276;
                    bool _out1277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1275, out _out1276, out _out1277, out _out1278);
                    _2832_recursiveGen = _out1275;
                    _2833_recOwned = _out1276;
                    _2834_recErased = _out1277;
                    _2835_recIdents = _out1278;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2833_recOwned;
                    isErased = _2834_recErased;
                    readIdents = _2835_recIdents;
                  }
                } else if (_source148.is_Array) {
                  DAST._IType _2836___mcc_h1037 = _source148.dtor_element;
                  BigInteger _2837___mcc_h1038 = _source148.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2838_recursiveGen;
                    bool _2839_recOwned;
                    bool _2840_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2841_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1279;
                    bool _out1280;
                    bool _out1281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1279, out _out1280, out _out1281, out _out1282);
                    _2838_recursiveGen = _out1279;
                    _2839_recOwned = _out1280;
                    _2840_recErased = _out1281;
                    _2841_recIdents = _out1282;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2838_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2839_recOwned;
                    isErased = _2840_recErased;
                    readIdents = _2841_recIdents;
                  }
                } else if (_source148.is_Seq) {
                  DAST._IType _2842___mcc_h1041 = _source148.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2843_recursiveGen;
                    bool _2844_recOwned;
                    bool _2845_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2846_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1283;
                    bool _out1284;
                    bool _out1285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1286;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1283, out _out1284, out _out1285, out _out1286);
                    _2843_recursiveGen = _out1283;
                    _2844_recOwned = _out1284;
                    _2845_recErased = _out1285;
                    _2846_recIdents = _out1286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2843_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2844_recOwned;
                    isErased = _2845_recErased;
                    readIdents = _2846_recIdents;
                  }
                } else if (_source148.is_Set) {
                  DAST._IType _2847___mcc_h1043 = _source148.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2848_recursiveGen;
                    bool _2849_recOwned;
                    bool _2850_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2851_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1287;
                    bool _out1288;
                    bool _out1289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1287, out _out1288, out _out1289, out _out1290);
                    _2848_recursiveGen = _out1287;
                    _2849_recOwned = _out1288;
                    _2850_recErased = _out1289;
                    _2851_recIdents = _out1290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2848_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2849_recOwned;
                    isErased = _2850_recErased;
                    readIdents = _2851_recIdents;
                  }
                } else if (_source148.is_Multiset) {
                  DAST._IType _2852___mcc_h1045 = _source148.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2853_recursiveGen;
                    bool _2854_recOwned;
                    bool _2855_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2856_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1291;
                    bool _out1292;
                    bool _out1293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1294;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1291, out _out1292, out _out1293, out _out1294);
                    _2853_recursiveGen = _out1291;
                    _2854_recOwned = _out1292;
                    _2855_recErased = _out1293;
                    _2856_recIdents = _out1294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2854_recOwned;
                    isErased = _2855_recErased;
                    readIdents = _2856_recIdents;
                  }
                } else if (_source148.is_Map) {
                  DAST._IType _2857___mcc_h1047 = _source148.dtor_key;
                  DAST._IType _2858___mcc_h1048 = _source148.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2859_recursiveGen;
                    bool _2860_recOwned;
                    bool _2861_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2862_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1295;
                    bool _out1296;
                    bool _out1297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1295, out _out1296, out _out1297, out _out1298);
                    _2859_recursiveGen = _out1295;
                    _2860_recOwned = _out1296;
                    _2861_recErased = _out1297;
                    _2862_recIdents = _out1298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2860_recOwned;
                    isErased = _2861_recErased;
                    readIdents = _2862_recIdents;
                  }
                } else if (_source148.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2863___mcc_h1051 = _source148.dtor_args;
                  DAST._IType _2864___mcc_h1052 = _source148.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2865_recursiveGen;
                    bool _2866_recOwned;
                    bool _2867_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2868_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1299;
                    bool _out1300;
                    bool _out1301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1299, out _out1300, out _out1301, out _out1302);
                    _2865_recursiveGen = _out1299;
                    _2866_recOwned = _out1300;
                    _2867_recErased = _out1301;
                    _2868_recIdents = _out1302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2866_recOwned;
                    isErased = _2867_recErased;
                    readIdents = _2868_recIdents;
                  }
                } else if (_source148.is_Primitive) {
                  DAST._IPrimitive _2869___mcc_h1055 = _source148.dtor_Primitive_a0;
                  DAST._IPrimitive _source150 = _2869___mcc_h1055;
                  if (_source150.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2870_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1303;
                      _out1303 = DCOMP.COMP.GenType(_1539_fromTpe, true, false);
                      _2870_rhsType = _out1303;
                      Dafny.ISequence<Dafny.Rune> _2871_recursiveGen;
                      bool _2872___v58;
                      bool _2873___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2874_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1304;
                      bool _out1305;
                      bool _out1306;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, true, out _out1304, out _out1305, out _out1306, out _out1307);
                      _2871_recursiveGen = _out1304;
                      _2872___v58 = _out1305;
                      _2873___v59 = _out1306;
                      _2874_recIdents = _out1307;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2874_recIdents;
                    }
                  } else if (_source150.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2875_recursiveGen;
                      bool _2876_recOwned;
                      bool _2877_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2878_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1308;
                      bool _out1309;
                      bool _out1310;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1308, out _out1309, out _out1310, out _out1311);
                      _2875_recursiveGen = _out1308;
                      _2876_recOwned = _out1309;
                      _2877_recErased = _out1310;
                      _2878_recIdents = _out1311;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2875_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2876_recOwned;
                      isErased = _2877_recErased;
                      readIdents = _2878_recIdents;
                    }
                  } else if (_source150.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2879_recursiveGen;
                      bool _2880_recOwned;
                      bool _2881_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2882_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1312;
                      bool _out1313;
                      bool _out1314;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1315;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1312, out _out1313, out _out1314, out _out1315);
                      _2879_recursiveGen = _out1312;
                      _2880_recOwned = _out1313;
                      _2881_recErased = _out1314;
                      _2882_recIdents = _out1315;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2880_recOwned;
                      isErased = _2881_recErased;
                      readIdents = _2882_recIdents;
                    }
                  } else if (_source150.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2883_recursiveGen;
                      bool _2884_recOwned;
                      bool _2885_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2886_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1316;
                      bool _out1317;
                      bool _out1318;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1319;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1316, out _out1317, out _out1318, out _out1319);
                      _2883_recursiveGen = _out1316;
                      _2884_recOwned = _out1317;
                      _2885_recErased = _out1318;
                      _2886_recIdents = _out1319;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2884_recOwned;
                      isErased = _2885_recErased;
                      readIdents = _2886_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2887_recursiveGen;
                      bool _2888_recOwned;
                      bool _2889_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2890_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1320;
                      bool _out1321;
                      bool _out1322;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1320, out _out1321, out _out1322, out _out1323);
                      _2887_recursiveGen = _out1320;
                      _2888_recOwned = _out1321;
                      _2889_recErased = _out1322;
                      _2890_recIdents = _out1323;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2888_recOwned;
                      isErased = _2889_recErased;
                      readIdents = _2890_recIdents;
                    }
                  }
                } else if (_source148.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2891___mcc_h1057 = _source148.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2892_recursiveGen;
                    bool _2893_recOwned;
                    bool _2894_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2895_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1324;
                    bool _out1325;
                    bool _out1326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1327;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1324, out _out1325, out _out1326, out _out1327);
                    _2892_recursiveGen = _out1324;
                    _2893_recOwned = _out1325;
                    _2894_recErased = _out1326;
                    _2895_recIdents = _out1327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2893_recOwned;
                    isErased = _2894_recErased;
                    readIdents = _2895_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2896___mcc_h1059 = _source148.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2897_recursiveGen;
                    bool _2898_recOwned;
                    bool _2899_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2900_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1328;
                    bool _out1329;
                    bool _out1330;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1331;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1328, out _out1329, out _out1330, out _out1331);
                    _2897_recursiveGen = _out1328;
                    _2898_recOwned = _out1329;
                    _2899_recErased = _out1330;
                    _2900_recIdents = _out1331;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2897_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2898_recOwned;
                    isErased = _2899_recErased;
                    readIdents = _2900_recIdents;
                  }
                }
              }
            } else if (_source113.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2901___mcc_h1061 = _source113.dtor_Passthrough_a0;
              DAST._IType _source151 = _1546___mcc_h306;
              if (_source151.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2902___mcc_h1065 = _source151.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2903___mcc_h1066 = _source151.dtor_typeArgs;
                DAST._IResolvedType _2904___mcc_h1067 = _source151.dtor_resolved;
                DAST._IResolvedType _source152 = _2904___mcc_h1067;
                if (_source152.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2905___mcc_h1071 = _source152.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2906_recursiveGen;
                    bool _2907_recOwned;
                    bool _2908_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2909_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1332;
                    bool _out1333;
                    bool _out1334;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1335;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1332, out _out1333, out _out1334, out _out1335);
                    _2906_recursiveGen = _out1332;
                    _2907_recOwned = _out1333;
                    _2908_recErased = _out1334;
                    _2909_recIdents = _out1335;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2906_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2907_recOwned;
                    isErased = _2908_recErased;
                    readIdents = _2909_recIdents;
                  }
                } else if (_source152.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2910___mcc_h1073 = _source152.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2911_recursiveGen;
                    bool _2912_recOwned;
                    bool _2913_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2914_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1336;
                    bool _out1337;
                    bool _out1338;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1339;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1336, out _out1337, out _out1338, out _out1339);
                    _2911_recursiveGen = _out1336;
                    _2912_recOwned = _out1337;
                    _2913_recErased = _out1338;
                    _2914_recIdents = _out1339;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2911_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2912_recOwned;
                    isErased = _2913_recErased;
                    readIdents = _2914_recIdents;
                  }
                } else {
                  DAST._IType _2915___mcc_h1075 = _source152.dtor_Newtype_a0;
                  DAST._IType _2916_b = _2915___mcc_h1075;
                  {
                    if (object.Equals(_1539_fromTpe, _2916_b)) {
                      Dafny.ISequence<Dafny.Rune> _2917_recursiveGen;
                      bool _2918_recOwned;
                      bool _2919_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2920_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1340;
                      bool _out1341;
                      bool _out1342;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1340, out _out1341, out _out1342, out _out1343);
                      _2917_recursiveGen = _out1340;
                      _2918_recOwned = _out1341;
                      _2919_recErased = _out1342;
                      _2920_recIdents = _out1343;
                      Dafny.ISequence<Dafny.Rune> _2921_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1344;
                      _out1344 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _2921_rhsType = _out1344;
                      Dafny.ISequence<Dafny.Rune> _2922_uneraseFn;
                      _2922_uneraseFn = ((_2918_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2921_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2922_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2917_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2918_recOwned;
                      isErased = false;
                      readIdents = _2920_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1345;
                      bool _out1346;
                      bool _out1347;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _2916_b), _2916_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out1345, out _out1346, out _out1347, out _out1348);
                      s = _out1345;
                      isOwned = _out1346;
                      isErased = _out1347;
                      readIdents = _out1348;
                    }
                  }
                }
              } else if (_source151.is_Nullable) {
                DAST._IType _2923___mcc_h1077 = _source151.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2924_recursiveGen;
                  bool _2925_recOwned;
                  bool _2926_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2927_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1349;
                  bool _out1350;
                  bool _out1351;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1349, out _out1350, out _out1351, out _out1352);
                  _2924_recursiveGen = _out1349;
                  _2925_recOwned = _out1350;
                  _2926_recErased = _out1351;
                  _2927_recIdents = _out1352;
                  if (!(_2925_recOwned)) {
                    _2924_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2924_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2926_recErased;
                  readIdents = _2927_recIdents;
                }
              } else if (_source151.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2928___mcc_h1079 = _source151.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2929_recursiveGen;
                  bool _2930_recOwned;
                  bool _2931_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2932_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1353;
                  bool _out1354;
                  bool _out1355;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1353, out _out1354, out _out1355, out _out1356);
                  _2929_recursiveGen = _out1353;
                  _2930_recOwned = _out1354;
                  _2931_recErased = _out1355;
                  _2932_recIdents = _out1356;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2929_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2930_recOwned;
                  isErased = _2931_recErased;
                  readIdents = _2932_recIdents;
                }
              } else if (_source151.is_Array) {
                DAST._IType _2933___mcc_h1081 = _source151.dtor_element;
                BigInteger _2934___mcc_h1082 = _source151.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2935_recursiveGen;
                  bool _2936_recOwned;
                  bool _2937_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2938_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1357;
                  bool _out1358;
                  bool _out1359;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1360;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1357, out _out1358, out _out1359, out _out1360);
                  _2935_recursiveGen = _out1357;
                  _2936_recOwned = _out1358;
                  _2937_recErased = _out1359;
                  _2938_recIdents = _out1360;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2936_recOwned;
                  isErased = _2937_recErased;
                  readIdents = _2938_recIdents;
                }
              } else if (_source151.is_Seq) {
                DAST._IType _2939___mcc_h1085 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2940_recursiveGen;
                  bool _2941_recOwned;
                  bool _2942_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2943_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1361;
                  bool _out1362;
                  bool _out1363;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1364;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1361, out _out1362, out _out1363, out _out1364);
                  _2940_recursiveGen = _out1361;
                  _2941_recOwned = _out1362;
                  _2942_recErased = _out1363;
                  _2943_recIdents = _out1364;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2940_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2941_recOwned;
                  isErased = _2942_recErased;
                  readIdents = _2943_recIdents;
                }
              } else if (_source151.is_Set) {
                DAST._IType _2944___mcc_h1087 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2945_recursiveGen;
                  bool _2946_recOwned;
                  bool _2947_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2948_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1365;
                  bool _out1366;
                  bool _out1367;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1365, out _out1366, out _out1367, out _out1368);
                  _2945_recursiveGen = _out1365;
                  _2946_recOwned = _out1366;
                  _2947_recErased = _out1367;
                  _2948_recIdents = _out1368;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2945_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2946_recOwned;
                  isErased = _2947_recErased;
                  readIdents = _2948_recIdents;
                }
              } else if (_source151.is_Multiset) {
                DAST._IType _2949___mcc_h1089 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2950_recursiveGen;
                  bool _2951_recOwned;
                  bool _2952_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2953_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1369;
                  bool _out1370;
                  bool _out1371;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1372;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1369, out _out1370, out _out1371, out _out1372);
                  _2950_recursiveGen = _out1369;
                  _2951_recOwned = _out1370;
                  _2952_recErased = _out1371;
                  _2953_recIdents = _out1372;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2950_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2951_recOwned;
                  isErased = _2952_recErased;
                  readIdents = _2953_recIdents;
                }
              } else if (_source151.is_Map) {
                DAST._IType _2954___mcc_h1091 = _source151.dtor_key;
                DAST._IType _2955___mcc_h1092 = _source151.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2956_recursiveGen;
                  bool _2957_recOwned;
                  bool _2958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1373;
                  bool _out1374;
                  bool _out1375;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1373, out _out1374, out _out1375, out _out1376);
                  _2956_recursiveGen = _out1373;
                  _2957_recOwned = _out1374;
                  _2958_recErased = _out1375;
                  _2959_recIdents = _out1376;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2957_recOwned;
                  isErased = _2958_recErased;
                  readIdents = _2959_recIdents;
                }
              } else if (_source151.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2960___mcc_h1095 = _source151.dtor_args;
                DAST._IType _2961___mcc_h1096 = _source151.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2962_recursiveGen;
                  bool _2963_recOwned;
                  bool _2964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1377;
                  bool _out1378;
                  bool _out1379;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1380;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1377, out _out1378, out _out1379, out _out1380);
                  _2962_recursiveGen = _out1377;
                  _2963_recOwned = _out1378;
                  _2964_recErased = _out1379;
                  _2965_recIdents = _out1380;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2963_recOwned;
                  isErased = _2964_recErased;
                  readIdents = _2965_recIdents;
                }
              } else if (_source151.is_Primitive) {
                DAST._IPrimitive _2966___mcc_h1099 = _source151.dtor_Primitive_a0;
                DAST._IPrimitive _source153 = _2966___mcc_h1099;
                if (_source153.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2967_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1381;
                    _out1381 = DCOMP.COMP.GenType(_1539_fromTpe, true, false);
                    _2967_rhsType = _out1381;
                    Dafny.ISequence<Dafny.Rune> _2968_recursiveGen;
                    bool _2969___v54;
                    bool _2970___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2971_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1382;
                    bool _out1383;
                    bool _out1384;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, true, out _out1382, out _out1383, out _out1384, out _out1385);
                    _2968_recursiveGen = _out1382;
                    _2969___v54 = _out1383;
                    _2970___v55 = _out1384;
                    _2971_recIdents = _out1385;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2971_recIdents;
                  }
                } else if (_source153.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2972_recursiveGen;
                    bool _2973_recOwned;
                    bool _2974_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1386;
                    bool _out1387;
                    bool _out1388;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1386, out _out1387, out _out1388, out _out1389);
                    _2972_recursiveGen = _out1386;
                    _2973_recOwned = _out1387;
                    _2974_recErased = _out1388;
                    _2975_recIdents = _out1389;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2972_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2973_recOwned;
                    isErased = _2974_recErased;
                    readIdents = _2975_recIdents;
                  }
                } else if (_source153.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2976_recursiveGen;
                    bool _2977_recOwned;
                    bool _2978_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2979_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1390;
                    bool _out1391;
                    bool _out1392;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1390, out _out1391, out _out1392, out _out1393);
                    _2976_recursiveGen = _out1390;
                    _2977_recOwned = _out1391;
                    _2978_recErased = _out1392;
                    _2979_recIdents = _out1393;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2976_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2977_recOwned;
                    isErased = _2978_recErased;
                    readIdents = _2979_recIdents;
                  }
                } else if (_source153.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2980_recursiveGen;
                    bool _2981_recOwned;
                    bool _2982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1394;
                    bool _out1395;
                    bool _out1396;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1397;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1394, out _out1395, out _out1396, out _out1397);
                    _2980_recursiveGen = _out1394;
                    _2981_recOwned = _out1395;
                    _2982_recErased = _out1396;
                    _2983_recIdents = _out1397;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2980_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2981_recOwned;
                    isErased = _2982_recErased;
                    readIdents = _2983_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2984_recursiveGen;
                    bool _2985_recOwned;
                    bool _2986_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1398;
                    bool _out1399;
                    bool _out1400;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1401;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1398, out _out1399, out _out1400, out _out1401);
                    _2984_recursiveGen = _out1398;
                    _2985_recOwned = _out1399;
                    _2986_recErased = _out1400;
                    _2987_recIdents = _out1401;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2985_recOwned;
                    isErased = _2986_recErased;
                    readIdents = _2987_recIdents;
                  }
                }
              } else if (_source151.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2988___mcc_h1101 = _source151.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2989_recursiveGen;
                  bool _2990___v62;
                  bool _2991___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2992_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1402;
                  bool _out1403;
                  bool _out1404;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1405;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, true, out _out1402, out _out1403, out _out1404, out _out1405);
                  _2989_recursiveGen = _out1402;
                  _2990___v62 = _out1403;
                  _2991___v63 = _out1404;
                  _2992_recIdents = _out1405;
                  Dafny.ISequence<Dafny.Rune> _2993_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1406;
                  _out1406 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                  _2993_toTpeGen = _out1406;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2993_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2992_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2994___mcc_h1103 = _source151.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2995_recursiveGen;
                  bool _2996_recOwned;
                  bool _2997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1407;
                  bool _out1408;
                  bool _out1409;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1410;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1407, out _out1408, out _out1409, out _out1410);
                  _2995_recursiveGen = _out1407;
                  _2996_recOwned = _out1408;
                  _2997_recErased = _out1409;
                  _2998_recIdents = _out1410;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2996_recOwned;
                  isErased = _2997_recErased;
                  readIdents = _2998_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2999___mcc_h1105 = _source113.dtor_TypeArg_a0;
              DAST._IType _source154 = _1546___mcc_h306;
              if (_source154.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3000___mcc_h1109 = _source154.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3001___mcc_h1110 = _source154.dtor_typeArgs;
                DAST._IResolvedType _3002___mcc_h1111 = _source154.dtor_resolved;
                DAST._IResolvedType _source155 = _3002___mcc_h1111;
                if (_source155.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3003___mcc_h1115 = _source155.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3004_recursiveGen;
                    bool _3005_recOwned;
                    bool _3006_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3007_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1411;
                    bool _out1412;
                    bool _out1413;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1411, out _out1412, out _out1413, out _out1414);
                    _3004_recursiveGen = _out1411;
                    _3005_recOwned = _out1412;
                    _3006_recErased = _out1413;
                    _3007_recIdents = _out1414;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3005_recOwned;
                    isErased = _3006_recErased;
                    readIdents = _3007_recIdents;
                  }
                } else if (_source155.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3008___mcc_h1117 = _source155.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3009_recursiveGen;
                    bool _3010_recOwned;
                    bool _3011_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3012_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1415;
                    bool _out1416;
                    bool _out1417;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1418;
                    DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1415, out _out1416, out _out1417, out _out1418);
                    _3009_recursiveGen = _out1415;
                    _3010_recOwned = _out1416;
                    _3011_recErased = _out1417;
                    _3012_recIdents = _out1418;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3009_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3010_recOwned;
                    isErased = _3011_recErased;
                    readIdents = _3012_recIdents;
                  }
                } else {
                  DAST._IType _3013___mcc_h1119 = _source155.dtor_Newtype_a0;
                  DAST._IType _3014_b = _3013___mcc_h1119;
                  {
                    if (object.Equals(_1539_fromTpe, _3014_b)) {
                      Dafny.ISequence<Dafny.Rune> _3015_recursiveGen;
                      bool _3016_recOwned;
                      bool _3017_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3018_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1419;
                      bool _out1420;
                      bool _out1421;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1422;
                      DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1419, out _out1420, out _out1421, out _out1422);
                      _3015_recursiveGen = _out1419;
                      _3016_recOwned = _out1420;
                      _3017_recErased = _out1421;
                      _3018_recIdents = _out1422;
                      Dafny.ISequence<Dafny.Rune> _3019_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1423;
                      _out1423 = DCOMP.COMP.GenType(_1538_toTpe, true, false);
                      _3019_rhsType = _out1423;
                      Dafny.ISequence<Dafny.Rune> _3020_uneraseFn;
                      _3020_uneraseFn = ((_3016_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3019_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3020_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3016_recOwned;
                      isErased = false;
                      readIdents = _3018_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1424;
                      bool _out1425;
                      bool _out1426;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1540_expr, _1539_fromTpe, _3014_b), _3014_b, _1538_toTpe), selfIdent, @params, mustOwn, out _out1424, out _out1425, out _out1426, out _out1427);
                      s = _out1424;
                      isOwned = _out1425;
                      isErased = _out1426;
                      readIdents = _out1427;
                    }
                  }
                }
              } else if (_source154.is_Nullable) {
                DAST._IType _3021___mcc_h1121 = _source154.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3022_recursiveGen;
                  bool _3023_recOwned;
                  bool _3024_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3025_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1428;
                  bool _out1429;
                  bool _out1430;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1428, out _out1429, out _out1430, out _out1431);
                  _3022_recursiveGen = _out1428;
                  _3023_recOwned = _out1429;
                  _3024_recErased = _out1430;
                  _3025_recIdents = _out1431;
                  if (!(_3023_recOwned)) {
                    _3022_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3022_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3024_recErased;
                  readIdents = _3025_recIdents;
                }
              } else if (_source154.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3026___mcc_h1123 = _source154.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3027_recursiveGen;
                  bool _3028_recOwned;
                  bool _3029_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1432;
                  bool _out1433;
                  bool _out1434;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1435;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1432, out _out1433, out _out1434, out _out1435);
                  _3027_recursiveGen = _out1432;
                  _3028_recOwned = _out1433;
                  _3029_recErased = _out1434;
                  _3030_recIdents = _out1435;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3028_recOwned;
                  isErased = _3029_recErased;
                  readIdents = _3030_recIdents;
                }
              } else if (_source154.is_Array) {
                DAST._IType _3031___mcc_h1125 = _source154.dtor_element;
                BigInteger _3032___mcc_h1126 = _source154.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3033_recursiveGen;
                  bool _3034_recOwned;
                  bool _3035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1436;
                  bool _out1437;
                  bool _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1436, out _out1437, out _out1438, out _out1439);
                  _3033_recursiveGen = _out1436;
                  _3034_recOwned = _out1437;
                  _3035_recErased = _out1438;
                  _3036_recIdents = _out1439;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3034_recOwned;
                  isErased = _3035_recErased;
                  readIdents = _3036_recIdents;
                }
              } else if (_source154.is_Seq) {
                DAST._IType _3037___mcc_h1129 = _source154.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3038_recursiveGen;
                  bool _3039_recOwned;
                  bool _3040_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3041_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1440;
                  bool _out1441;
                  bool _out1442;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1443;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1440, out _out1441, out _out1442, out _out1443);
                  _3038_recursiveGen = _out1440;
                  _3039_recOwned = _out1441;
                  _3040_recErased = _out1442;
                  _3041_recIdents = _out1443;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3039_recOwned;
                  isErased = _3040_recErased;
                  readIdents = _3041_recIdents;
                }
              } else if (_source154.is_Set) {
                DAST._IType _3042___mcc_h1131 = _source154.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3043_recursiveGen;
                  bool _3044_recOwned;
                  bool _3045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1444;
                  bool _out1445;
                  bool _out1446;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1447;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1444, out _out1445, out _out1446, out _out1447);
                  _3043_recursiveGen = _out1444;
                  _3044_recOwned = _out1445;
                  _3045_recErased = _out1446;
                  _3046_recIdents = _out1447;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3044_recOwned;
                  isErased = _3045_recErased;
                  readIdents = _3046_recIdents;
                }
              } else if (_source154.is_Multiset) {
                DAST._IType _3047___mcc_h1133 = _source154.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3048_recursiveGen;
                  bool _3049_recOwned;
                  bool _3050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1448;
                  bool _out1449;
                  bool _out1450;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1451;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1448, out _out1449, out _out1450, out _out1451);
                  _3048_recursiveGen = _out1448;
                  _3049_recOwned = _out1449;
                  _3050_recErased = _out1450;
                  _3051_recIdents = _out1451;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3049_recOwned;
                  isErased = _3050_recErased;
                  readIdents = _3051_recIdents;
                }
              } else if (_source154.is_Map) {
                DAST._IType _3052___mcc_h1135 = _source154.dtor_key;
                DAST._IType _3053___mcc_h1136 = _source154.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3054_recursiveGen;
                  bool _3055_recOwned;
                  bool _3056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1452;
                  bool _out1453;
                  bool _out1454;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1455;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1452, out _out1453, out _out1454, out _out1455);
                  _3054_recursiveGen = _out1452;
                  _3055_recOwned = _out1453;
                  _3056_recErased = _out1454;
                  _3057_recIdents = _out1455;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3055_recOwned;
                  isErased = _3056_recErased;
                  readIdents = _3057_recIdents;
                }
              } else if (_source154.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3058___mcc_h1139 = _source154.dtor_args;
                DAST._IType _3059___mcc_h1140 = _source154.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3060_recursiveGen;
                  bool _3061_recOwned;
                  bool _3062_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3063_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1456;
                  bool _out1457;
                  bool _out1458;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1459;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1456, out _out1457, out _out1458, out _out1459);
                  _3060_recursiveGen = _out1456;
                  _3061_recOwned = _out1457;
                  _3062_recErased = _out1458;
                  _3063_recIdents = _out1459;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3061_recOwned;
                  isErased = _3062_recErased;
                  readIdents = _3063_recIdents;
                }
              } else if (_source154.is_Primitive) {
                DAST._IPrimitive _3064___mcc_h1143 = _source154.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3065_recursiveGen;
                  bool _3066_recOwned;
                  bool _3067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1460;
                  bool _out1461;
                  bool _out1462;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1463;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1460, out _out1461, out _out1462, out _out1463);
                  _3065_recursiveGen = _out1460;
                  _3066_recOwned = _out1461;
                  _3067_recErased = _out1462;
                  _3068_recIdents = _out1463;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3066_recOwned;
                  isErased = _3067_recErased;
                  readIdents = _3068_recIdents;
                }
              } else if (_source154.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3069___mcc_h1145 = _source154.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3070_recursiveGen;
                  bool _3071_recOwned;
                  bool _3072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1464;
                  bool _out1465;
                  bool _out1466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1467;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1464, out _out1465, out _out1466, out _out1467);
                  _3070_recursiveGen = _out1464;
                  _3071_recOwned = _out1465;
                  _3072_recErased = _out1466;
                  _3073_recIdents = _out1467;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3071_recOwned;
                  isErased = _3072_recErased;
                  readIdents = _3073_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3074___mcc_h1147 = _source154.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3075_recursiveGen;
                  bool _3076_recOwned;
                  bool _3077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1468;
                  bool _out1469;
                  bool _out1470;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
                  DCOMP.COMP.GenExpr(_1540_expr, selfIdent, @params, mustOwn, out _out1468, out _out1469, out _out1470, out _out1471);
                  _3075_recursiveGen = _out1468;
                  _3076_recOwned = _out1469;
                  _3077_recErased = _out1470;
                  _3078_recIdents = _out1471;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3076_recOwned;
                  isErased = _3077_recErased;
                  readIdents = _3078_recIdents;
                }
              }
            }
          }
        }
      } else if (_source106.is_SeqConstruct) {
        DAST._IExpression _3079___mcc_h26 = _source106.dtor_length;
        DAST._IExpression _3080___mcc_h27 = _source106.dtor_elem;
        DAST._IExpression _3081_expr = _3080___mcc_h27;
        DAST._IExpression _3082_length = _3079___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3083_recursiveGen;
          bool _3084___v65;
          bool _3085_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3086_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1472;
          bool _out1473;
          bool _out1474;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1475;
          DCOMP.COMP.GenExpr(_3081_expr, selfIdent, @params, true, out _out1472, out _out1473, out _out1474, out _out1475);
          _3083_recursiveGen = _out1472;
          _3084___v65 = _out1473;
          _3085_eErased = _out1474;
          _3086_recIdents = _out1475;
          Dafny.ISequence<Dafny.Rune> _3087_lengthGen;
          bool _3088___v66;
          bool _3089_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3090_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1476;
          bool _out1477;
          bool _out1478;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1479;
          DCOMP.COMP.GenExpr(_3082_length, selfIdent, @params, true, out _out1476, out _out1477, out _out1478, out _out1479);
          _3087_lengthGen = _out1476;
          _3088___v66 = _out1477;
          _3089_lengthErased = _out1478;
          _3090_lengthIdents = _out1479;
          if (!(_3089_lengthErased)) {
            _3087_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3087_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3083_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3087_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3086_recIdents, _3090_lengthIdents);
          isOwned = true;
          isErased = _3085_eErased;
        }
      } else if (_source106.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3091___mcc_h28 = _source106.dtor_elements;
        DAST._IType _3092___mcc_h29 = _source106.dtor_typ;
        DAST._IType _3093_typ = _3092___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3094_exprs = _3091___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3095_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1480;
          _out1480 = DCOMP.COMP.GenType(_3093_typ, false, false);
          _3095_genTpe = _out1480;
          BigInteger _3096_i;
          _3096_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3096_i = BigInteger.Zero;
          while ((_3096_i) < (new BigInteger((_3094_exprs).Count))) {
            if ((_3096_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3097_recursiveGen;
            bool _3098___v67;
            bool _3099_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3100_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr((_3094_exprs).Select(_3096_i), selfIdent, @params, true, out _out1481, out _out1482, out _out1483, out _out1484);
            _3097_recursiveGen = _out1481;
            _3098___v67 = _out1482;
            _3099_isErased = _out1483;
            _3100_recIdents = _out1484;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3100_recIdents);
            if (_3099_isErased) {
              _3097_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3097_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3097_recursiveGen);
            _3096_i = (_3096_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3095_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3101___mcc_h30 = _source106.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3102_exprs = _3101___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3103_generatedValues;
          _3103_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3104_i;
          _3104_i = BigInteger.Zero;
          bool _3105_allErased;
          _3105_allErased = true;
          while ((_3104_i) < (new BigInteger((_3102_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3106_recursiveGen;
            bool _3107___v68;
            bool _3108_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3109_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr((_3102_exprs).Select(_3104_i), selfIdent, @params, true, out _out1485, out _out1486, out _out1487, out _out1488);
            _3106_recursiveGen = _out1485;
            _3107___v68 = _out1486;
            _3108_isErased = _out1487;
            _3109_recIdents = _out1488;
            _3105_allErased = (_3105_allErased) && (_3108_isErased);
            _3103_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3103_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3106_recursiveGen, _3108_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3109_recIdents);
            _3104_i = (_3104_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3104_i = BigInteger.Zero;
          while ((_3104_i) < (new BigInteger((_3103_generatedValues).Count))) {
            if ((_3104_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3110_gen;
            _3110_gen = ((_3103_generatedValues).Select(_3104_i)).dtor__0;
            if ((((_3103_generatedValues).Select(_3104_i)).dtor__1) && (!(_3105_allErased))) {
              _3110_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3110_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3110_gen);
            _3104_i = (_3104_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3105_allErased;
        }
      } else if (_source106.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3111___mcc_h31 = _source106.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3112_mapElems = _3111___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3113_generatedValues;
          _3113_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3114_i;
          _3114_i = BigInteger.Zero;
          bool _3115_allErased;
          _3115_allErased = true;
          while ((_3114_i) < (new BigInteger((_3112_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3116_recursiveGenKey;
            bool _3117___v69;
            bool _3118_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3119_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(((_3112_mapElems).Select(_3114_i)).dtor__0, selfIdent, @params, true, out _out1489, out _out1490, out _out1491, out _out1492);
            _3116_recursiveGenKey = _out1489;
            _3117___v69 = _out1490;
            _3118_isErasedKey = _out1491;
            _3119_recIdentsKey = _out1492;
            Dafny.ISequence<Dafny.Rune> _3120_recursiveGenValue;
            bool _3121___v70;
            bool _3122_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3123_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(((_3112_mapElems).Select(_3114_i)).dtor__1, selfIdent, @params, true, out _out1493, out _out1494, out _out1495, out _out1496);
            _3120_recursiveGenValue = _out1493;
            _3121___v70 = _out1494;
            _3122_isErasedValue = _out1495;
            _3123_recIdentsValue = _out1496;
            _3115_allErased = ((_3115_allErased) && (_3118_isErasedKey)) && (_3122_isErasedValue);
            _3113_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3113_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3116_recursiveGenKey, _3120_recursiveGenValue, _3118_isErasedKey, _3122_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3119_recIdentsKey), _3123_recIdentsValue);
            _3114_i = (_3114_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3114_i = BigInteger.Zero;
          while ((_3114_i) < (new BigInteger((_3113_generatedValues).Count))) {
            if ((_3114_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3124_genKey;
            _3124_genKey = ((_3113_generatedValues).Select(_3114_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3125_genValue;
            _3125_genValue = ((_3113_generatedValues).Select(_3114_i)).dtor__1;
            if ((((_3113_generatedValues).Select(_3114_i)).dtor__2) && (!(_3115_allErased))) {
              _3124_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3124_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3113_generatedValues).Select(_3114_i)).dtor__3) && (!(_3115_allErased))) {
              _3125_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3125_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3124_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3125_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3114_i = (_3114_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3115_allErased;
        }
      } else if (_source106.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source156 = selfIdent;
          if (_source156.is_Some) {
            Dafny.ISequence<Dafny.Rune> _3126___mcc_h1149 = _source156.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _3127_id = _3126___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3127_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3127_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3127_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3127_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source106.is_Ite) {
        DAST._IExpression _3128___mcc_h32 = _source106.dtor_cond;
        DAST._IExpression _3129___mcc_h33 = _source106.dtor_thn;
        DAST._IExpression _3130___mcc_h34 = _source106.dtor_els;
        DAST._IExpression _3131_f = _3130___mcc_h34;
        DAST._IExpression _3132_t = _3129___mcc_h33;
        DAST._IExpression _3133_cond = _3128___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3134_condString;
          bool _3135___v71;
          bool _3136_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3137_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1497;
          bool _out1498;
          bool _out1499;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
          DCOMP.COMP.GenExpr(_3133_cond, selfIdent, @params, true, out _out1497, out _out1498, out _out1499, out _out1500);
          _3134_condString = _out1497;
          _3135___v71 = _out1498;
          _3136_condErased = _out1499;
          _3137_recIdentsCond = _out1500;
          if (!(_3136_condErased)) {
            _3134_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3134_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3138___v72;
          bool _3139_tHasToBeOwned;
          bool _3140___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3141___v74;
          Dafny.ISequence<Dafny.Rune> _out1501;
          bool _out1502;
          bool _out1503;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
          DCOMP.COMP.GenExpr(_3132_t, selfIdent, @params, mustOwn, out _out1501, out _out1502, out _out1503, out _out1504);
          _3138___v72 = _out1501;
          _3139_tHasToBeOwned = _out1502;
          _3140___v73 = _out1503;
          _3141___v74 = _out1504;
          Dafny.ISequence<Dafny.Rune> _3142_fString;
          bool _3143_fOwned;
          bool _3144_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3145_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1505;
          bool _out1506;
          bool _out1507;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
          DCOMP.COMP.GenExpr(_3131_f, selfIdent, @params, _3139_tHasToBeOwned, out _out1505, out _out1506, out _out1507, out _out1508);
          _3142_fString = _out1505;
          _3143_fOwned = _out1506;
          _3144_fErased = _out1507;
          _3145_recIdentsF = _out1508;
          Dafny.ISequence<Dafny.Rune> _3146_tString;
          bool _3147___v75;
          bool _3148_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3149_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1509;
          bool _out1510;
          bool _out1511;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
          DCOMP.COMP.GenExpr(_3132_t, selfIdent, @params, _3143_fOwned, out _out1509, out _out1510, out _out1511, out _out1512);
          _3146_tString = _out1509;
          _3147___v75 = _out1510;
          _3148_tErased = _out1511;
          _3149_recIdentsT = _out1512;
          if ((!(_3144_fErased)) || (!(_3148_tErased))) {
            if (_3144_fErased) {
              _3142_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3142_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3148_tErased) {
              _3146_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3146_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3134_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3146_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3142_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3143_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3137_recIdentsCond, _3149_recIdentsT), _3145_recIdentsF);
          isErased = (_3144_fErased) || (_3148_tErased);
        }
      } else if (_source106.is_UnOp) {
        DAST._IUnaryOp _3150___mcc_h35 = _source106.dtor_unOp;
        DAST._IExpression _3151___mcc_h36 = _source106.dtor_expr;
        DAST._IUnaryOp _source157 = _3150___mcc_h35;
        if (_source157.is_Not) {
          DAST._IExpression _3152_e = _3151___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3153_recursiveGen;
            bool _3154___v76;
            bool _3155_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3156_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_3152_e, selfIdent, @params, true, out _out1513, out _out1514, out _out1515, out _out1516);
            _3153_recursiveGen = _out1513;
            _3154___v76 = _out1514;
            _3155_recErased = _out1515;
            _3156_recIdents = _out1516;
            if (!(_3155_recErased)) {
              _3153_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3156_recIdents;
            isErased = true;
          }
        } else if (_source157.is_BitwiseNot) {
          DAST._IExpression _3157_e = _3151___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3158_recursiveGen;
            bool _3159___v77;
            bool _3160_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3161_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_3157_e, selfIdent, @params, true, out _out1517, out _out1518, out _out1519, out _out1520);
            _3158_recursiveGen = _out1517;
            _3159___v77 = _out1518;
            _3160_recErased = _out1519;
            _3161_recIdents = _out1520;
            if (!(_3160_recErased)) {
              _3158_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3161_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3162_e = _3151___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3163_recursiveGen;
            bool _3164_recOwned;
            bool _3165_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3166_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_3162_e, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _3163_recursiveGen = _out1521;
            _3164_recOwned = _out1522;
            _3165_recErased = _out1523;
            _3166_recIdents = _out1524;
            if (!(_3165_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3167_eraseFn;
              _3167_eraseFn = ((_3164_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3163_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3167_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3166_recIdents;
            isErased = true;
          }
        }
      } else if (_source106.is_BinOp) {
        DAST._IBinOp _3168___mcc_h37 = _source106.dtor_op;
        DAST._IExpression _3169___mcc_h38 = _source106.dtor_left;
        DAST._IExpression _3170___mcc_h39 = _source106.dtor_right;
        DAST._IExpression _3171_r = _3170___mcc_h39;
        DAST._IExpression _3172_l = _3169___mcc_h38;
        DAST._IBinOp _3173_op = _3168___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3174_left;
          bool _3175___v78;
          bool _3176_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3177_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1525;
          bool _out1526;
          bool _out1527;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
          DCOMP.COMP.GenExpr(_3172_l, selfIdent, @params, true, out _out1525, out _out1526, out _out1527, out _out1528);
          _3174_left = _out1525;
          _3175___v78 = _out1526;
          _3176_leftErased = _out1527;
          _3177_recIdentsL = _out1528;
          Dafny.ISequence<Dafny.Rune> _3178_right;
          bool _3179___v79;
          bool _3180_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3181_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1529;
          bool _out1530;
          bool _out1531;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
          DCOMP.COMP.GenExpr(_3171_r, selfIdent, @params, true, out _out1529, out _out1530, out _out1531, out _out1532);
          _3178_right = _out1529;
          _3179___v79 = _out1530;
          _3180_rightErased = _out1531;
          _3181_recIdentsR = _out1532;
          DAST._IBinOp _source158 = _3173_op;
          if (_source158.is_Eq) {
            bool _3182___mcc_h1150 = _source158.dtor_referential;
            bool _3183___mcc_h1151 = _source158.dtor_nullable;
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source159 = _3173_op;
              if (_source159.is_Eq) {
                bool _3184___mcc_h1160 = _source159.dtor_referential;
                bool _3185___mcc_h1161 = _source159.dtor_nullable;
                bool _3186_nullable = _3185___mcc_h1161;
                bool _3187_referential = _3184___mcc_h1160;
                {
                  if (_3187_referential) {
                    if (_3186_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source159.is_Neq) {
                bool _3188___mcc_h1162 = _source159.dtor_referential;
                bool _3189___mcc_h1163 = _source159.dtor_nullable;
                bool _3190_nullable = _3189___mcc_h1163;
                bool _3191_referential = _3188___mcc_h1162;
                {
                  if (_3191_referential) {
                    if (_3190_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source159.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3192___mcc_h1164 = _source159.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3193_op = _3192___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3193_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Neq) {
            bool _3194___mcc_h1154 = _source158.dtor_referential;
            bool _3195___mcc_h1155 = _source158.dtor_nullable;
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source160 = _3173_op;
              if (_source160.is_Eq) {
                bool _3196___mcc_h1165 = _source160.dtor_referential;
                bool _3197___mcc_h1166 = _source160.dtor_nullable;
                bool _3198_nullable = _3197___mcc_h1166;
                bool _3199_referential = _3196___mcc_h1165;
                {
                  if (_3199_referential) {
                    if (_3198_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source160.is_Neq) {
                bool _3200___mcc_h1167 = _source160.dtor_referential;
                bool _3201___mcc_h1168 = _source160.dtor_nullable;
                bool _3202_nullable = _3201___mcc_h1168;
                bool _3203_referential = _3200___mcc_h1167;
                {
                  if (_3203_referential) {
                    if (_3202_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source160.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3204___mcc_h1169 = _source160.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3205_op = _3204___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3205_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Div) {
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source161 = _3173_op;
              if (_source161.is_Eq) {
                bool _3206___mcc_h1170 = _source161.dtor_referential;
                bool _3207___mcc_h1171 = _source161.dtor_nullable;
                bool _3208_nullable = _3207___mcc_h1171;
                bool _3209_referential = _3206___mcc_h1170;
                {
                  if (_3209_referential) {
                    if (_3208_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source161.is_Neq) {
                bool _3210___mcc_h1172 = _source161.dtor_referential;
                bool _3211___mcc_h1173 = _source161.dtor_nullable;
                bool _3212_nullable = _3211___mcc_h1173;
                bool _3213_referential = _3210___mcc_h1172;
                {
                  if (_3213_referential) {
                    if (_3212_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source161.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3214___mcc_h1174 = _source161.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3215_op = _3214___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3215_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_EuclidianDiv) {
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source162 = _3173_op;
              if (_source162.is_Eq) {
                bool _3216___mcc_h1175 = _source162.dtor_referential;
                bool _3217___mcc_h1176 = _source162.dtor_nullable;
                bool _3218_nullable = _3217___mcc_h1176;
                bool _3219_referential = _3216___mcc_h1175;
                {
                  if (_3219_referential) {
                    if (_3218_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source162.is_Neq) {
                bool _3220___mcc_h1177 = _source162.dtor_referential;
                bool _3221___mcc_h1178 = _source162.dtor_nullable;
                bool _3222_nullable = _3221___mcc_h1178;
                bool _3223_referential = _3220___mcc_h1177;
                {
                  if (_3223_referential) {
                    if (_3222_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source162.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3224___mcc_h1179 = _source162.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3225_op = _3224___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3225_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Mod) {
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source163 = _3173_op;
              if (_source163.is_Eq) {
                bool _3226___mcc_h1180 = _source163.dtor_referential;
                bool _3227___mcc_h1181 = _source163.dtor_nullable;
                bool _3228_nullable = _3227___mcc_h1181;
                bool _3229_referential = _3226___mcc_h1180;
                {
                  if (_3229_referential) {
                    if (_3228_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source163.is_Neq) {
                bool _3230___mcc_h1182 = _source163.dtor_referential;
                bool _3231___mcc_h1183 = _source163.dtor_nullable;
                bool _3232_nullable = _3231___mcc_h1183;
                bool _3233_referential = _3230___mcc_h1182;
                {
                  if (_3233_referential) {
                    if (_3232_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source163.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3234___mcc_h1184 = _source163.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3235_op = _3234___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3235_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_EuclidianMod) {
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source164 = _3173_op;
              if (_source164.is_Eq) {
                bool _3236___mcc_h1185 = _source164.dtor_referential;
                bool _3237___mcc_h1186 = _source164.dtor_nullable;
                bool _3238_nullable = _3237___mcc_h1186;
                bool _3239_referential = _3236___mcc_h1185;
                {
                  if (_3239_referential) {
                    if (_3238_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source164.is_Neq) {
                bool _3240___mcc_h1187 = _source164.dtor_referential;
                bool _3241___mcc_h1188 = _source164.dtor_nullable;
                bool _3242_nullable = _3241___mcc_h1188;
                bool _3243_referential = _3240___mcc_h1187;
                {
                  if (_3243_referential) {
                    if (_3242_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source164.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3244___mcc_h1189 = _source164.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3245_op = _3244___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3245_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3178_right);
            }
          } else if (_source158.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source158.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source158.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source158.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3246___mcc_h1158 = _source158.dtor_Passthrough_a0;
            {
              if (!(_3176_leftErased)) {
                _3174_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3180_rightErased)) {
                _3178_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source165 = _3173_op;
              if (_source165.is_Eq) {
                bool _3247___mcc_h1190 = _source165.dtor_referential;
                bool _3248___mcc_h1191 = _source165.dtor_nullable;
                bool _3249_nullable = _3248___mcc_h1191;
                bool _3250_referential = _3247___mcc_h1190;
                {
                  if (_3250_referential) {
                    if (_3249_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3178_right);
                  }
                }
              } else if (_source165.is_Neq) {
                bool _3251___mcc_h1192 = _source165.dtor_referential;
                bool _3252___mcc_h1193 = _source165.dtor_nullable;
                bool _3253_nullable = _3252___mcc_h1193;
                bool _3254_referential = _3251___mcc_h1192;
                {
                  if (_3254_referential) {
                    if (_3253_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3174_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3178_right);
                  }
                }
              } else if (_source165.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3255___mcc_h1194 = _source165.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3256_op = _3255___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3256_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3178_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3177_recIdentsL, _3181_recIdentsR);
          isErased = true;
        }
      } else if (_source106.is_ArrayLen) {
        DAST._IExpression _3257___mcc_h40 = _source106.dtor_expr;
        BigInteger _3258___mcc_h41 = _source106.dtor_dim;
        BigInteger _3259_dim = _3258___mcc_h41;
        DAST._IExpression _3260_expr = _3257___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3261_recursiveGen;
          bool _3262___v81;
          bool _3263_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3264_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1533;
          bool _out1534;
          bool _out1535;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
          DCOMP.COMP.GenExpr(_3260_expr, selfIdent, @params, true, out _out1533, out _out1534, out _out1535, out _out1536);
          _3261_recursiveGen = _out1533;
          _3262___v81 = _out1534;
          _3263_recErased = _out1535;
          _3264_recIdents = _out1536;
          if ((_3259_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3265_i;
            _3265_i = BigInteger.One;
            while ((_3265_i) < (_3259_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3265_i = (_3265_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3264_recIdents;
          isErased = true;
        }
      } else if (_source106.is_Select) {
        DAST._IExpression _3266___mcc_h42 = _source106.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3267___mcc_h43 = _source106.dtor_field;
        bool _3268___mcc_h44 = _source106.dtor_isConstant;
        bool _3269___mcc_h45 = _source106.dtor_onDatatype;
        DAST._IExpression _source166 = _3266___mcc_h42;
        if (_source166.is_Literal) {
          DAST._ILiteral _3270___mcc_h46 = _source166.dtor_Literal_a0;
          bool _3271_isDatatype = _3269___mcc_h45;
          bool _3272_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3273_field = _3267___mcc_h43;
          DAST._IExpression _3274_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3275_onString;
            bool _3276_onOwned;
            bool _3277_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3278_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_3274_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _3275_onString = _out1537;
            _3276_onOwned = _out1538;
            _3277_onErased = _out1539;
            _3278_recIdents = _out1540;
            if ((_3271_isDatatype) || (_3272_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3275_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3273_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3272_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3275_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3273_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3278_recIdents;
          }
        } else if (_source166.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3279___mcc_h48 = _source166.dtor_Ident_a0;
          bool _3280_isDatatype = _3269___mcc_h45;
          bool _3281_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3282_field = _3267___mcc_h43;
          DAST._IExpression _3283_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3284_onString;
            bool _3285_onOwned;
            bool _3286_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3287_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_3283_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _3284_onString = _out1541;
            _3285_onOwned = _out1542;
            _3286_onErased = _out1543;
            _3287_recIdents = _out1544;
            if ((_3280_isDatatype) || (_3281_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3284_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3282_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3281_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3284_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3282_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3287_recIdents;
          }
        } else if (_source166.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3288___mcc_h50 = _source166.dtor_Companion_a0;
          bool _3289_isDatatype = _3269___mcc_h45;
          bool _3290_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3291_field = _3267___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3292_c = _3288___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3293_onString;
            bool _3294_onOwned;
            bool _3295_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3296_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3292_c), selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _3293_onString = _out1545;
            _3294_onOwned = _out1546;
            _3295_onErased = _out1547;
            _3296_recIdents = _out1548;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3293_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3291_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3296_recIdents;
          }
        } else if (_source166.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3297___mcc_h52 = _source166.dtor_Tuple_a0;
          bool _3298_isDatatype = _3269___mcc_h45;
          bool _3299_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3300_field = _3267___mcc_h43;
          DAST._IExpression _3301_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3302_onString;
            bool _3303_onOwned;
            bool _3304_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3305_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_3301_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _3302_onString = _out1549;
            _3303_onOwned = _out1550;
            _3304_onErased = _out1551;
            _3305_recIdents = _out1552;
            if ((_3298_isDatatype) || (_3299_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3299_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3305_recIdents;
          }
        } else if (_source166.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3306___mcc_h54 = _source166.dtor_path;
          Dafny.ISequence<DAST._IType> _3307___mcc_h55 = _source166.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3308___mcc_h56 = _source166.dtor_args;
          bool _3309_isDatatype = _3269___mcc_h45;
          bool _3310_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3311_field = _3267___mcc_h43;
          DAST._IExpression _3312_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3313_onString;
            bool _3314_onOwned;
            bool _3315_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3316_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_3312_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _3313_onString = _out1553;
            _3314_onOwned = _out1554;
            _3315_onErased = _out1555;
            _3316_recIdents = _out1556;
            if ((_3309_isDatatype) || (_3310_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3313_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3311_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3310_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3313_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3311_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3316_recIdents;
          }
        } else if (_source166.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3317___mcc_h60 = _source166.dtor_dims;
          DAST._IType _3318___mcc_h61 = _source166.dtor_typ;
          bool _3319_isDatatype = _3269___mcc_h45;
          bool _3320_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3321_field = _3267___mcc_h43;
          DAST._IExpression _3322_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3323_onString;
            bool _3324_onOwned;
            bool _3325_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3326_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_3322_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _3323_onString = _out1557;
            _3324_onOwned = _out1558;
            _3325_onErased = _out1559;
            _3326_recIdents = _out1560;
            if ((_3319_isDatatype) || (_3320_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3323_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3321_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3320_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3323_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3321_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3326_recIdents;
          }
        } else if (_source166.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3327___mcc_h64 = _source166.dtor_path;
          Dafny.ISequence<DAST._IType> _3328___mcc_h65 = _source166.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3329___mcc_h66 = _source166.dtor_variant;
          bool _3330___mcc_h67 = _source166.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3331___mcc_h68 = _source166.dtor_contents;
          bool _3332_isDatatype = _3269___mcc_h45;
          bool _3333_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3334_field = _3267___mcc_h43;
          DAST._IExpression _3335_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3336_onString;
            bool _3337_onOwned;
            bool _3338_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3339_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_3335_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _3336_onString = _out1561;
            _3337_onOwned = _out1562;
            _3338_onErased = _out1563;
            _3339_recIdents = _out1564;
            if ((_3332_isDatatype) || (_3333_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3336_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3334_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3333_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3336_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3334_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3339_recIdents;
          }
        } else if (_source166.is_Convert) {
          DAST._IExpression _3340___mcc_h74 = _source166.dtor_value;
          DAST._IType _3341___mcc_h75 = _source166.dtor_from;
          DAST._IType _3342___mcc_h76 = _source166.dtor_typ;
          bool _3343_isDatatype = _3269___mcc_h45;
          bool _3344_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3345_field = _3267___mcc_h43;
          DAST._IExpression _3346_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3347_onString;
            bool _3348_onOwned;
            bool _3349_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3350_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_3346_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _3347_onString = _out1565;
            _3348_onOwned = _out1566;
            _3349_onErased = _out1567;
            _3350_recIdents = _out1568;
            if ((_3343_isDatatype) || (_3344_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3347_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3345_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3344_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3347_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3345_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3350_recIdents;
          }
        } else if (_source166.is_SeqConstruct) {
          DAST._IExpression _3351___mcc_h80 = _source166.dtor_length;
          DAST._IExpression _3352___mcc_h81 = _source166.dtor_elem;
          bool _3353_isDatatype = _3269___mcc_h45;
          bool _3354_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3355_field = _3267___mcc_h43;
          DAST._IExpression _3356_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3357_onString;
            bool _3358_onOwned;
            bool _3359_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3360_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_3356_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _3357_onString = _out1569;
            _3358_onOwned = _out1570;
            _3359_onErased = _out1571;
            _3360_recIdents = _out1572;
            if ((_3353_isDatatype) || (_3354_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3357_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3355_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3354_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3357_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3355_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3360_recIdents;
          }
        } else if (_source166.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3361___mcc_h84 = _source166.dtor_elements;
          DAST._IType _3362___mcc_h85 = _source166.dtor_typ;
          bool _3363_isDatatype = _3269___mcc_h45;
          bool _3364_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3365_field = _3267___mcc_h43;
          DAST._IExpression _3366_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3367_onString;
            bool _3368_onOwned;
            bool _3369_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3370_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_3366_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _3367_onString = _out1573;
            _3368_onOwned = _out1574;
            _3369_onErased = _out1575;
            _3370_recIdents = _out1576;
            if ((_3363_isDatatype) || (_3364_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3367_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3365_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3364_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3367_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3365_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3370_recIdents;
          }
        } else if (_source166.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3371___mcc_h88 = _source166.dtor_elements;
          bool _3372_isDatatype = _3269___mcc_h45;
          bool _3373_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3374_field = _3267___mcc_h43;
          DAST._IExpression _3375_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3376_onString;
            bool _3377_onOwned;
            bool _3378_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3379_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_3375_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _3376_onString = _out1577;
            _3377_onOwned = _out1578;
            _3378_onErased = _out1579;
            _3379_recIdents = _out1580;
            if ((_3372_isDatatype) || (_3373_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3376_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3374_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3373_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3376_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3374_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3379_recIdents;
          }
        } else if (_source166.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3380___mcc_h90 = _source166.dtor_mapElems;
          bool _3381_isDatatype = _3269___mcc_h45;
          bool _3382_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3383_field = _3267___mcc_h43;
          DAST._IExpression _3384_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3385_onString;
            bool _3386_onOwned;
            bool _3387_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3388_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_3384_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _3385_onString = _out1581;
            _3386_onOwned = _out1582;
            _3387_onErased = _out1583;
            _3388_recIdents = _out1584;
            if ((_3381_isDatatype) || (_3382_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3385_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3383_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3382_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3385_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3383_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3388_recIdents;
          }
        } else if (_source166.is_This) {
          bool _3389_isDatatype = _3269___mcc_h45;
          bool _3390_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3391_field = _3267___mcc_h43;
          DAST._IExpression _3392_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3393_onString;
            bool _3394_onOwned;
            bool _3395_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3396_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_3392_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _3393_onString = _out1585;
            _3394_onOwned = _out1586;
            _3395_onErased = _out1587;
            _3396_recIdents = _out1588;
            if ((_3389_isDatatype) || (_3390_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3390_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3396_recIdents;
          }
        } else if (_source166.is_Ite) {
          DAST._IExpression _3397___mcc_h92 = _source166.dtor_cond;
          DAST._IExpression _3398___mcc_h93 = _source166.dtor_thn;
          DAST._IExpression _3399___mcc_h94 = _source166.dtor_els;
          bool _3400_isDatatype = _3269___mcc_h45;
          bool _3401_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3402_field = _3267___mcc_h43;
          DAST._IExpression _3403_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3404_onString;
            bool _3405_onOwned;
            bool _3406_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3407_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_3403_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _3404_onString = _out1589;
            _3405_onOwned = _out1590;
            _3406_onErased = _out1591;
            _3407_recIdents = _out1592;
            if ((_3400_isDatatype) || (_3401_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3404_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3401_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3404_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3407_recIdents;
          }
        } else if (_source166.is_UnOp) {
          DAST._IUnaryOp _3408___mcc_h98 = _source166.dtor_unOp;
          DAST._IExpression _3409___mcc_h99 = _source166.dtor_expr;
          bool _3410_isDatatype = _3269___mcc_h45;
          bool _3411_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3412_field = _3267___mcc_h43;
          DAST._IExpression _3413_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3414_onString;
            bool _3415_onOwned;
            bool _3416_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3417_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_3413_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _3414_onString = _out1593;
            _3415_onOwned = _out1594;
            _3416_onErased = _out1595;
            _3417_recIdents = _out1596;
            if ((_3410_isDatatype) || (_3411_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3414_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3411_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3414_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3417_recIdents;
          }
        } else if (_source166.is_BinOp) {
          DAST._IBinOp _3418___mcc_h102 = _source166.dtor_op;
          DAST._IExpression _3419___mcc_h103 = _source166.dtor_left;
          DAST._IExpression _3420___mcc_h104 = _source166.dtor_right;
          bool _3421_isDatatype = _3269___mcc_h45;
          bool _3422_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3423_field = _3267___mcc_h43;
          DAST._IExpression _3424_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3425_onString;
            bool _3426_onOwned;
            bool _3427_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3428_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_3424_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _3425_onString = _out1597;
            _3426_onOwned = _out1598;
            _3427_onErased = _out1599;
            _3428_recIdents = _out1600;
            if ((_3421_isDatatype) || (_3422_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3425_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3423_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3422_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3425_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3423_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3428_recIdents;
          }
        } else if (_source166.is_ArrayLen) {
          DAST._IExpression _3429___mcc_h108 = _source166.dtor_expr;
          BigInteger _3430___mcc_h109 = _source166.dtor_dim;
          bool _3431_isDatatype = _3269___mcc_h45;
          bool _3432_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3433_field = _3267___mcc_h43;
          DAST._IExpression _3434_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3435_onString;
            bool _3436_onOwned;
            bool _3437_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3438_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_3434_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _3435_onString = _out1601;
            _3436_onOwned = _out1602;
            _3437_onErased = _out1603;
            _3438_recIdents = _out1604;
            if ((_3431_isDatatype) || (_3432_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3435_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3433_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3432_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3435_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3433_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3438_recIdents;
          }
        } else if (_source166.is_Select) {
          DAST._IExpression _3439___mcc_h112 = _source166.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3440___mcc_h113 = _source166.dtor_field;
          bool _3441___mcc_h114 = _source166.dtor_isConstant;
          bool _3442___mcc_h115 = _source166.dtor_onDatatype;
          bool _3443_isDatatype = _3269___mcc_h45;
          bool _3444_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3445_field = _3267___mcc_h43;
          DAST._IExpression _3446_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3447_onString;
            bool _3448_onOwned;
            bool _3449_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3450_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_3446_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _3447_onString = _out1605;
            _3448_onOwned = _out1606;
            _3449_onErased = _out1607;
            _3450_recIdents = _out1608;
            if ((_3443_isDatatype) || (_3444_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3447_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3445_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3444_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3447_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3445_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3450_recIdents;
          }
        } else if (_source166.is_SelectFn) {
          DAST._IExpression _3451___mcc_h120 = _source166.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3452___mcc_h121 = _source166.dtor_field;
          bool _3453___mcc_h122 = _source166.dtor_onDatatype;
          bool _3454___mcc_h123 = _source166.dtor_isStatic;
          BigInteger _3455___mcc_h124 = _source166.dtor_arity;
          bool _3456_isDatatype = _3269___mcc_h45;
          bool _3457_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3458_field = _3267___mcc_h43;
          DAST._IExpression _3459_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3460_onString;
            bool _3461_onOwned;
            bool _3462_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3463_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_3459_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _3460_onString = _out1609;
            _3461_onOwned = _out1610;
            _3462_onErased = _out1611;
            _3463_recIdents = _out1612;
            if ((_3456_isDatatype) || (_3457_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3460_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3458_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3457_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3460_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3458_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3463_recIdents;
          }
        } else if (_source166.is_Index) {
          DAST._IExpression _3464___mcc_h130 = _source166.dtor_expr;
          DAST._ICollKind _3465___mcc_h131 = _source166.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3466___mcc_h132 = _source166.dtor_indices;
          bool _3467_isDatatype = _3269___mcc_h45;
          bool _3468_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3469_field = _3267___mcc_h43;
          DAST._IExpression _3470_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3471_onString;
            bool _3472_onOwned;
            bool _3473_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3474_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1613;
            bool _out1614;
            bool _out1615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
            DCOMP.COMP.GenExpr(_3470_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
            _3471_onString = _out1613;
            _3472_onOwned = _out1614;
            _3473_onErased = _out1615;
            _3474_recIdents = _out1616;
            if ((_3467_isDatatype) || (_3468_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3471_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3469_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3468_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3471_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3469_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3474_recIdents;
          }
        } else if (_source166.is_IndexRange) {
          DAST._IExpression _3475___mcc_h136 = _source166.dtor_expr;
          bool _3476___mcc_h137 = _source166.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3477___mcc_h138 = _source166.dtor_low;
          DAST._IOptional<DAST._IExpression> _3478___mcc_h139 = _source166.dtor_high;
          bool _3479_isDatatype = _3269___mcc_h45;
          bool _3480_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3481_field = _3267___mcc_h43;
          DAST._IExpression _3482_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3483_onString;
            bool _3484_onOwned;
            bool _3485_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3486_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1617;
            bool _out1618;
            bool _out1619;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
            DCOMP.COMP.GenExpr(_3482_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
            _3483_onString = _out1617;
            _3484_onOwned = _out1618;
            _3485_onErased = _out1619;
            _3486_recIdents = _out1620;
            if ((_3479_isDatatype) || (_3480_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3483_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3480_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3483_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3486_recIdents;
          }
        } else if (_source166.is_TupleSelect) {
          DAST._IExpression _3487___mcc_h144 = _source166.dtor_expr;
          BigInteger _3488___mcc_h145 = _source166.dtor_index;
          bool _3489_isDatatype = _3269___mcc_h45;
          bool _3490_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3491_field = _3267___mcc_h43;
          DAST._IExpression _3492_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3493_onString;
            bool _3494_onOwned;
            bool _3495_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3496_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1621;
            bool _out1622;
            bool _out1623;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
            DCOMP.COMP.GenExpr(_3492_on, selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
            _3493_onString = _out1621;
            _3494_onOwned = _out1622;
            _3495_onErased = _out1623;
            _3496_recIdents = _out1624;
            if ((_3489_isDatatype) || (_3490_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3493_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3491_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3490_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3493_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3491_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3496_recIdents;
          }
        } else if (_source166.is_Call) {
          DAST._IExpression _3497___mcc_h148 = _source166.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3498___mcc_h149 = _source166.dtor_name;
          Dafny.ISequence<DAST._IType> _3499___mcc_h150 = _source166.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3500___mcc_h151 = _source166.dtor_args;
          bool _3501_isDatatype = _3269___mcc_h45;
          bool _3502_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3503_field = _3267___mcc_h43;
          DAST._IExpression _3504_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3505_onString;
            bool _3506_onOwned;
            bool _3507_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3508_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1625;
            bool _out1626;
            bool _out1627;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
            DCOMP.COMP.GenExpr(_3504_on, selfIdent, @params, false, out _out1625, out _out1626, out _out1627, out _out1628);
            _3505_onString = _out1625;
            _3506_onOwned = _out1626;
            _3507_onErased = _out1627;
            _3508_recIdents = _out1628;
            if ((_3501_isDatatype) || (_3502_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3505_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3503_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3502_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3505_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3503_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3508_recIdents;
          }
        } else if (_source166.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3509___mcc_h156 = _source166.dtor_params;
          DAST._IType _3510___mcc_h157 = _source166.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3511___mcc_h158 = _source166.dtor_body;
          bool _3512_isDatatype = _3269___mcc_h45;
          bool _3513_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3514_field = _3267___mcc_h43;
          DAST._IExpression _3515_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3516_onString;
            bool _3517_onOwned;
            bool _3518_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3519_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1629;
            bool _out1630;
            bool _out1631;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
            DCOMP.COMP.GenExpr(_3515_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
            _3516_onString = _out1629;
            _3517_onOwned = _out1630;
            _3518_onErased = _out1631;
            _3519_recIdents = _out1632;
            if ((_3512_isDatatype) || (_3513_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3516_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3514_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3513_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3516_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3514_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3519_recIdents;
          }
        } else if (_source166.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3520___mcc_h162 = _source166.dtor_values;
          DAST._IType _3521___mcc_h163 = _source166.dtor_retType;
          DAST._IExpression _3522___mcc_h164 = _source166.dtor_expr;
          bool _3523_isDatatype = _3269___mcc_h45;
          bool _3524_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3525_field = _3267___mcc_h43;
          DAST._IExpression _3526_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3527_onString;
            bool _3528_onOwned;
            bool _3529_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3530_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1633;
            bool _out1634;
            bool _out1635;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
            DCOMP.COMP.GenExpr(_3526_on, selfIdent, @params, false, out _out1633, out _out1634, out _out1635, out _out1636);
            _3527_onString = _out1633;
            _3528_onOwned = _out1634;
            _3529_onErased = _out1635;
            _3530_recIdents = _out1636;
            if ((_3523_isDatatype) || (_3524_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3527_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3525_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3524_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3527_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3525_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3530_recIdents;
          }
        } else if (_source166.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3531___mcc_h168 = _source166.dtor_name;
          DAST._IType _3532___mcc_h169 = _source166.dtor_typ;
          DAST._IExpression _3533___mcc_h170 = _source166.dtor_value;
          DAST._IExpression _3534___mcc_h171 = _source166.dtor_iifeBody;
          bool _3535_isDatatype = _3269___mcc_h45;
          bool _3536_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3537_field = _3267___mcc_h43;
          DAST._IExpression _3538_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3539_onString;
            bool _3540_onOwned;
            bool _3541_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1637;
            bool _out1638;
            bool _out1639;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
            DCOMP.COMP.GenExpr(_3538_on, selfIdent, @params, false, out _out1637, out _out1638, out _out1639, out _out1640);
            _3539_onString = _out1637;
            _3540_onOwned = _out1638;
            _3541_onErased = _out1639;
            _3542_recIdents = _out1640;
            if ((_3535_isDatatype) || (_3536_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3539_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3537_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3536_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3539_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3537_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3542_recIdents;
          }
        } else if (_source166.is_Apply) {
          DAST._IExpression _3543___mcc_h176 = _source166.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3544___mcc_h177 = _source166.dtor_args;
          bool _3545_isDatatype = _3269___mcc_h45;
          bool _3546_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3547_field = _3267___mcc_h43;
          DAST._IExpression _3548_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3549_onString;
            bool _3550_onOwned;
            bool _3551_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3552_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1641;
            bool _out1642;
            bool _out1643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
            DCOMP.COMP.GenExpr(_3548_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
            _3549_onString = _out1641;
            _3550_onOwned = _out1642;
            _3551_onErased = _out1643;
            _3552_recIdents = _out1644;
            if ((_3545_isDatatype) || (_3546_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3549_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3547_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3546_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3549_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3547_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3552_recIdents;
          }
        } else if (_source166.is_TypeTest) {
          DAST._IExpression _3553___mcc_h180 = _source166.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3554___mcc_h181 = _source166.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3555___mcc_h182 = _source166.dtor_variant;
          bool _3556_isDatatype = _3269___mcc_h45;
          bool _3557_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3558_field = _3267___mcc_h43;
          DAST._IExpression _3559_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3560_onString;
            bool _3561_onOwned;
            bool _3562_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3563_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1645;
            bool _out1646;
            bool _out1647;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
            DCOMP.COMP.GenExpr(_3559_on, selfIdent, @params, false, out _out1645, out _out1646, out _out1647, out _out1648);
            _3560_onString = _out1645;
            _3561_onOwned = _out1646;
            _3562_onErased = _out1647;
            _3563_recIdents = _out1648;
            if ((_3556_isDatatype) || (_3557_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3560_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3558_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3557_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3560_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3558_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3563_recIdents;
          }
        } else if (_source166.is_InitializationValue) {
          DAST._IType _3564___mcc_h186 = _source166.dtor_typ;
          bool _3565_isDatatype = _3269___mcc_h45;
          bool _3566_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3567_field = _3267___mcc_h43;
          DAST._IExpression _3568_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3569_onString;
            bool _3570_onOwned;
            bool _3571_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3572_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1649;
            bool _out1650;
            bool _out1651;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1652;
            DCOMP.COMP.GenExpr(_3568_on, selfIdent, @params, false, out _out1649, out _out1650, out _out1651, out _out1652);
            _3569_onString = _out1649;
            _3570_onOwned = _out1650;
            _3571_onErased = _out1651;
            _3572_recIdents = _out1652;
            if ((_3565_isDatatype) || (_3566_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3569_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3567_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3566_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3569_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3567_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3572_recIdents;
          }
        } else if (_source166.is_BoolBoundedPool) {
          bool _3573_isDatatype = _3269___mcc_h45;
          bool _3574_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3575_field = _3267___mcc_h43;
          DAST._IExpression _3576_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3577_onString;
            bool _3578_onOwned;
            bool _3579_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3580_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1653;
            bool _out1654;
            bool _out1655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1656;
            DCOMP.COMP.GenExpr(_3576_on, selfIdent, @params, false, out _out1653, out _out1654, out _out1655, out _out1656);
            _3577_onString = _out1653;
            _3578_onOwned = _out1654;
            _3579_onErased = _out1655;
            _3580_recIdents = _out1656;
            if ((_3573_isDatatype) || (_3574_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3577_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3575_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3574_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3577_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3575_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3580_recIdents;
          }
        } else if (_source166.is_SetBoundedPool) {
          DAST._IExpression _3581___mcc_h188 = _source166.dtor_of;
          bool _3582_isDatatype = _3269___mcc_h45;
          bool _3583_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3584_field = _3267___mcc_h43;
          DAST._IExpression _3585_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3586_onString;
            bool _3587_onOwned;
            bool _3588_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3589_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1657;
            bool _out1658;
            bool _out1659;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
            DCOMP.COMP.GenExpr(_3585_on, selfIdent, @params, false, out _out1657, out _out1658, out _out1659, out _out1660);
            _3586_onString = _out1657;
            _3587_onOwned = _out1658;
            _3588_onErased = _out1659;
            _3589_recIdents = _out1660;
            if ((_3582_isDatatype) || (_3583_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3586_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3583_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3586_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3589_recIdents;
          }
        } else if (_source166.is_SeqBoundedPool) {
          DAST._IExpression _3590___mcc_h190 = _source166.dtor_of;
          bool _3591___mcc_h191 = _source166.dtor_includeDuplicates;
          bool _3592_isDatatype = _3269___mcc_h45;
          bool _3593_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3594_field = _3267___mcc_h43;
          DAST._IExpression _3595_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3596_onString;
            bool _3597_onOwned;
            bool _3598_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3599_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1661;
            bool _out1662;
            bool _out1663;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
            DCOMP.COMP.GenExpr(_3595_on, selfIdent, @params, false, out _out1661, out _out1662, out _out1663, out _out1664);
            _3596_onString = _out1661;
            _3597_onOwned = _out1662;
            _3598_onErased = _out1663;
            _3599_recIdents = _out1664;
            if ((_3592_isDatatype) || (_3593_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3596_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3594_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3593_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3596_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3594_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3599_recIdents;
          }
        } else {
          DAST._IExpression _3600___mcc_h194 = _source166.dtor_lo;
          DAST._IExpression _3601___mcc_h195 = _source166.dtor_hi;
          bool _3602_isDatatype = _3269___mcc_h45;
          bool _3603_isConstant = _3268___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3604_field = _3267___mcc_h43;
          DAST._IExpression _3605_on = _3266___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3606_onString;
            bool _3607_onOwned;
            bool _3608_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3609_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1665;
            bool _out1666;
            bool _out1667;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
            DCOMP.COMP.GenExpr(_3605_on, selfIdent, @params, false, out _out1665, out _out1666, out _out1667, out _out1668);
            _3606_onString = _out1665;
            _3607_onOwned = _out1666;
            _3608_onErased = _out1667;
            _3609_recIdents = _out1668;
            if ((_3602_isDatatype) || (_3603_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3606_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3604_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3603_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3606_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3604_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3609_recIdents;
          }
        }
      } else if (_source106.is_SelectFn) {
        DAST._IExpression _3610___mcc_h198 = _source106.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3611___mcc_h199 = _source106.dtor_field;
        bool _3612___mcc_h200 = _source106.dtor_onDatatype;
        bool _3613___mcc_h201 = _source106.dtor_isStatic;
        BigInteger _3614___mcc_h202 = _source106.dtor_arity;
        BigInteger _3615_arity = _3614___mcc_h202;
        bool _3616_isStatic = _3613___mcc_h201;
        bool _3617_isDatatype = _3612___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3618_field = _3611___mcc_h199;
        DAST._IExpression _3619_on = _3610___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3620_onString;
          bool _3621_onOwned;
          bool _3622___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3623_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1669;
          bool _out1670;
          bool _out1671;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1672;
          DCOMP.COMP.GenExpr(_3619_on, selfIdent, @params, false, out _out1669, out _out1670, out _out1671, out _out1672);
          _3620_onString = _out1669;
          _3621_onOwned = _out1670;
          _3622___v82 = _out1671;
          _3623_recIdents = _out1672;
          if (_3616_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3620_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3618_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3620_onString), ((_3621_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3624_args;
            _3624_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3625_i;
            _3625_i = BigInteger.Zero;
            while ((_3625_i) < (_3615_arity)) {
              if ((_3625_i).Sign == 1) {
                _3624_args = Dafny.Sequence<Dafny.Rune>.Concat(_3624_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3624_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3624_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3625_i));
              _3625_i = (_3625_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3624_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3618_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3624_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3626_typeShape;
          _3626_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3627_i;
          _3627_i = BigInteger.Zero;
          while ((_3627_i) < (_3615_arity)) {
            if ((_3627_i).Sign == 1) {
              _3626_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3626_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3626_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3626_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3627_i = (_3627_i) + (BigInteger.One);
          }
          _3626_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3626_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3626_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3623_recIdents;
        }
      } else if (_source106.is_Index) {
        DAST._IExpression _3628___mcc_h203 = _source106.dtor_expr;
        DAST._ICollKind _3629___mcc_h204 = _source106.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3630___mcc_h205 = _source106.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3631_indices = _3630___mcc_h205;
        DAST._ICollKind _3632_collKind = _3629___mcc_h204;
        DAST._IExpression _3633_on = _3628___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3634_onString;
          bool _3635_onOwned;
          bool _3636_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3637_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1673;
          bool _out1674;
          bool _out1675;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
          DCOMP.COMP.GenExpr(_3633_on, selfIdent, @params, false, out _out1673, out _out1674, out _out1675, out _out1676);
          _3634_onString = _out1673;
          _3635_onOwned = _out1674;
          _3636_onErased = _out1675;
          _3637_recIdents = _out1676;
          readIdents = _3637_recIdents;
          s = _3634_onString;
          BigInteger _3638_i;
          _3638_i = BigInteger.Zero;
          while ((_3638_i) < (new BigInteger((_3631_indices).Count))) {
            if (object.Equals(_3632_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3632_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3639_idx;
              bool _3640_idxOwned;
              bool _3641_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3642_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1677;
              bool _out1678;
              bool _out1679;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1680;
              DCOMP.COMP.GenExpr((_3631_indices).Select(_3638_i), selfIdent, @params, false, out _out1677, out _out1678, out _out1679, out _out1680);
              _3639_idx = _out1677;
              _3640_idxOwned = _out1678;
              _3641_idxErased = _out1679;
              _3642_recIdentsIdx = _out1680;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3640_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3639_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3642_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3643_idx;
              bool _3644___v83;
              bool _3645_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3646_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1681;
              bool _out1682;
              bool _out1683;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
              DCOMP.COMP.GenExpr((_3631_indices).Select(_3638_i), selfIdent, @params, true, out _out1681, out _out1682, out _out1683, out _out1684);
              _3643_idx = _out1681;
              _3644___v83 = _out1682;
              _3645_idxErased = _out1683;
              _3646_recIdentsIdx = _out1684;
              if (!(_3645_idxErased)) {
                _3643_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3643_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3643_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3646_recIdentsIdx);
            }
            _3638_i = (_3638_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3636_onErased;
        }
      } else if (_source106.is_IndexRange) {
        DAST._IExpression _3647___mcc_h206 = _source106.dtor_expr;
        bool _3648___mcc_h207 = _source106.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3649___mcc_h208 = _source106.dtor_low;
        DAST._IOptional<DAST._IExpression> _3650___mcc_h209 = _source106.dtor_high;
        DAST._IOptional<DAST._IExpression> _3651_high = _3650___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3652_low = _3649___mcc_h208;
        bool _3653_isArray = _3648___mcc_h207;
        DAST._IExpression _3654_on = _3647___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3655_onString;
          bool _3656_onOwned;
          bool _3657_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3658_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3654_on, selfIdent, @params, false, out _out1685, out _out1686, out _out1687, out _out1688);
          _3655_onString = _out1685;
          _3656_onOwned = _out1686;
          _3657_onErased = _out1687;
          _3658_recIdents = _out1688;
          readIdents = _3658_recIdents;
          s = _3655_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3659_lowString;
          _3659_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source167 = _3652_low;
          if (_source167.is_Some) {
            DAST._IExpression _3660___mcc_h1195 = _source167.dtor_Some_a0;
            DAST._IExpression _3661_l = _3660___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3662_lString;
              bool _3663___v84;
              bool _3664_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3665_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1689;
              bool _out1690;
              bool _out1691;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
              DCOMP.COMP.GenExpr(_3661_l, selfIdent, @params, true, out _out1689, out _out1690, out _out1691, out _out1692);
              _3662_lString = _out1689;
              _3663___v84 = _out1690;
              _3664_lErased = _out1691;
              _3665_recIdentsL = _out1692;
              if (!(_3664_lErased)) {
                _3662_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3662_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3659_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3662_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3665_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3666_highString;
          _3666_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source168 = _3651_high;
          if (_source168.is_Some) {
            DAST._IExpression _3667___mcc_h1196 = _source168.dtor_Some_a0;
            DAST._IExpression _3668_h = _3667___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3669_hString;
              bool _3670___v85;
              bool _3671_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3672_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1693;
              bool _out1694;
              bool _out1695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
              DCOMP.COMP.GenExpr(_3668_h, selfIdent, @params, true, out _out1693, out _out1694, out _out1695, out _out1696);
              _3669_hString = _out1693;
              _3670___v85 = _out1694;
              _3671_hErased = _out1695;
              _3672_recIdentsH = _out1696;
              if (!(_3671_hErased)) {
                _3669_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3669_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3666_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3669_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3672_recIdentsH);
            }
          } else {
          }
          if (_3653_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source169) => {
            if (_source169.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3673___mcc_h1197 = _source169.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3674_l = _3673___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3674_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3659_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source170) => {
            if (_source170.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3675___mcc_h1198 = _source170.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3676_h = _3675___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3676_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3666_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3657_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source106.is_TupleSelect) {
        DAST._IExpression _3677___mcc_h210 = _source106.dtor_expr;
        BigInteger _3678___mcc_h211 = _source106.dtor_index;
        BigInteger _3679_idx = _3678___mcc_h211;
        DAST._IExpression _3680_on = _3677___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3681_onString;
          bool _3682___v86;
          bool _3683_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3684_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1697;
          bool _out1698;
          bool _out1699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
          DCOMP.COMP.GenExpr(_3680_on, selfIdent, @params, false, out _out1697, out _out1698, out _out1699, out _out1700);
          _3681_onString = _out1697;
          _3682___v86 = _out1698;
          _3683_tupErased = _out1699;
          _3684_recIdents = _out1700;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3681_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3679_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3683_tupErased;
          readIdents = _3684_recIdents;
        }
      } else if (_source106.is_Call) {
        DAST._IExpression _3685___mcc_h212 = _source106.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3686___mcc_h213 = _source106.dtor_name;
        Dafny.ISequence<DAST._IType> _3687___mcc_h214 = _source106.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3688___mcc_h215 = _source106.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3689_args = _3688___mcc_h215;
        Dafny.ISequence<DAST._IType> _3690_typeArgs = _3687___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3691_name = _3686___mcc_h213;
        DAST._IExpression _3692_on = _3685___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3693_typeArgString;
          _3693_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3690_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3694_typeI;
            _3694_typeI = BigInteger.Zero;
            _3693_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3694_typeI) < (new BigInteger((_3690_typeArgs).Count))) {
              if ((_3694_typeI).Sign == 1) {
                _3693_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3693_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3695_typeString;
              Dafny.ISequence<Dafny.Rune> _out1701;
              _out1701 = DCOMP.COMP.GenType((_3690_typeArgs).Select(_3694_typeI), false, false);
              _3695_typeString = _out1701;
              _3693_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3693_typeArgString, _3695_typeString);
              _3694_typeI = (_3694_typeI) + (BigInteger.One);
            }
            _3693_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3693_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3696_argString;
          _3696_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3697_i;
          _3697_i = BigInteger.Zero;
          while ((_3697_i) < (new BigInteger((_3689_args).Count))) {
            if ((_3697_i).Sign == 1) {
              _3696_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3696_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3698_argExpr;
            bool _3699_isOwned;
            bool _3700_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3701_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1702;
            bool _out1703;
            bool _out1704;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
            DCOMP.COMP.GenExpr((_3689_args).Select(_3697_i), selfIdent, @params, false, out _out1702, out _out1703, out _out1704, out _out1705);
            _3698_argExpr = _out1702;
            _3699_isOwned = _out1703;
            _3700_argErased = _out1704;
            _3701_argIdents = _out1705;
            if (_3699_isOwned) {
              _3698_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3698_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3700_argErased)) {
              _3698_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3698_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3698_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3698_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3696_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3696_argString, _3698_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3701_argIdents);
            _3697_i = (_3697_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3702_enclosingString;
          bool _3703___v87;
          bool _3704___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3705_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1706;
          bool _out1707;
          bool _out1708;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
          DCOMP.COMP.GenExpr(_3692_on, selfIdent, @params, false, out _out1706, out _out1707, out _out1708, out _out1709);
          _3702_enclosingString = _out1706;
          _3703___v87 = _out1707;
          _3704___v88 = _out1708;
          _3705_recIdents = _out1709;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3705_recIdents);
          DAST._IExpression _source171 = _3692_on;
          if (_source171.is_Literal) {
            DAST._ILiteral _3706___mcc_h1199 = _source171.dtor_Literal_a0;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3707___mcc_h1201 = _source171.dtor_Ident_a0;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3708___mcc_h1203 = _source171.dtor_Companion_a0;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3702_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3709___mcc_h1205 = _source171.dtor_Tuple_a0;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3710___mcc_h1207 = _source171.dtor_path;
            Dafny.ISequence<DAST._IType> _3711___mcc_h1208 = _source171.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3712___mcc_h1209 = _source171.dtor_args;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3713___mcc_h1213 = _source171.dtor_dims;
            DAST._IType _3714___mcc_h1214 = _source171.dtor_typ;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3715___mcc_h1217 = _source171.dtor_path;
            Dafny.ISequence<DAST._IType> _3716___mcc_h1218 = _source171.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3717___mcc_h1219 = _source171.dtor_variant;
            bool _3718___mcc_h1220 = _source171.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3719___mcc_h1221 = _source171.dtor_contents;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Convert) {
            DAST._IExpression _3720___mcc_h1227 = _source171.dtor_value;
            DAST._IType _3721___mcc_h1228 = _source171.dtor_from;
            DAST._IType _3722___mcc_h1229 = _source171.dtor_typ;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_SeqConstruct) {
            DAST._IExpression _3723___mcc_h1233 = _source171.dtor_length;
            DAST._IExpression _3724___mcc_h1234 = _source171.dtor_elem;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3725___mcc_h1237 = _source171.dtor_elements;
            DAST._IType _3726___mcc_h1238 = _source171.dtor_typ;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3727___mcc_h1241 = _source171.dtor_elements;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3728___mcc_h1243 = _source171.dtor_mapElems;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_This) {
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Ite) {
            DAST._IExpression _3729___mcc_h1245 = _source171.dtor_cond;
            DAST._IExpression _3730___mcc_h1246 = _source171.dtor_thn;
            DAST._IExpression _3731___mcc_h1247 = _source171.dtor_els;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_UnOp) {
            DAST._IUnaryOp _3732___mcc_h1251 = _source171.dtor_unOp;
            DAST._IExpression _3733___mcc_h1252 = _source171.dtor_expr;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_BinOp) {
            DAST._IBinOp _3734___mcc_h1255 = _source171.dtor_op;
            DAST._IExpression _3735___mcc_h1256 = _source171.dtor_left;
            DAST._IExpression _3736___mcc_h1257 = _source171.dtor_right;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_ArrayLen) {
            DAST._IExpression _3737___mcc_h1261 = _source171.dtor_expr;
            BigInteger _3738___mcc_h1262 = _source171.dtor_dim;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Select) {
            DAST._IExpression _3739___mcc_h1265 = _source171.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3740___mcc_h1266 = _source171.dtor_field;
            bool _3741___mcc_h1267 = _source171.dtor_isConstant;
            bool _3742___mcc_h1268 = _source171.dtor_onDatatype;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_SelectFn) {
            DAST._IExpression _3743___mcc_h1273 = _source171.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3744___mcc_h1274 = _source171.dtor_field;
            bool _3745___mcc_h1275 = _source171.dtor_onDatatype;
            bool _3746___mcc_h1276 = _source171.dtor_isStatic;
            BigInteger _3747___mcc_h1277 = _source171.dtor_arity;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Index) {
            DAST._IExpression _3748___mcc_h1283 = _source171.dtor_expr;
            DAST._ICollKind _3749___mcc_h1284 = _source171.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3750___mcc_h1285 = _source171.dtor_indices;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_IndexRange) {
            DAST._IExpression _3751___mcc_h1289 = _source171.dtor_expr;
            bool _3752___mcc_h1290 = _source171.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3753___mcc_h1291 = _source171.dtor_low;
            DAST._IOptional<DAST._IExpression> _3754___mcc_h1292 = _source171.dtor_high;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_TupleSelect) {
            DAST._IExpression _3755___mcc_h1297 = _source171.dtor_expr;
            BigInteger _3756___mcc_h1298 = _source171.dtor_index;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Call) {
            DAST._IExpression _3757___mcc_h1301 = _source171.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3758___mcc_h1302 = _source171.dtor_name;
            Dafny.ISequence<DAST._IType> _3759___mcc_h1303 = _source171.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3760___mcc_h1304 = _source171.dtor_args;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3761___mcc_h1309 = _source171.dtor_params;
            DAST._IType _3762___mcc_h1310 = _source171.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3763___mcc_h1311 = _source171.dtor_body;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3764___mcc_h1315 = _source171.dtor_values;
            DAST._IType _3765___mcc_h1316 = _source171.dtor_retType;
            DAST._IExpression _3766___mcc_h1317 = _source171.dtor_expr;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3767___mcc_h1321 = _source171.dtor_name;
            DAST._IType _3768___mcc_h1322 = _source171.dtor_typ;
            DAST._IExpression _3769___mcc_h1323 = _source171.dtor_value;
            DAST._IExpression _3770___mcc_h1324 = _source171.dtor_iifeBody;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_Apply) {
            DAST._IExpression _3771___mcc_h1329 = _source171.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3772___mcc_h1330 = _source171.dtor_args;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_TypeTest) {
            DAST._IExpression _3773___mcc_h1333 = _source171.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3774___mcc_h1334 = _source171.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3775___mcc_h1335 = _source171.dtor_variant;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_InitializationValue) {
            DAST._IType _3776___mcc_h1339 = _source171.dtor_typ;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_BoolBoundedPool) {
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_SetBoundedPool) {
            DAST._IExpression _3777___mcc_h1341 = _source171.dtor_of;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else if (_source171.is_SeqBoundedPool) {
            DAST._IExpression _3778___mcc_h1343 = _source171.dtor_of;
            bool _3779___mcc_h1344 = _source171.dtor_includeDuplicates;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          } else {
            DAST._IExpression _3780___mcc_h1347 = _source171.dtor_lo;
            DAST._IExpression _3781___mcc_h1348 = _source171.dtor_hi;
            {
              _3702_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3691_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3702_enclosingString, _3693_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3696_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3782___mcc_h216 = _source106.dtor_params;
        DAST._IType _3783___mcc_h217 = _source106.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3784___mcc_h218 = _source106.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3785_body = _3784___mcc_h218;
        DAST._IType _3786_retType = _3783___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3787_params = _3782___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3788_paramNames;
          _3788_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3789_i;
          _3789_i = BigInteger.Zero;
          while ((_3789_i) < (new BigInteger((_3787_params).Count))) {
            _3788_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3788_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3787_params).Select(_3789_i)).dtor_name));
            _3789_i = (_3789_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3790_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3791_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1710;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1711;
          DCOMP.COMP.GenStmts(_3785_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3788_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1710, out _out1711);
          _3790_recursiveGen = _out1710;
          _3791_recIdents = _out1711;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3792_allReadCloned;
          _3792_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3791_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3793_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3791_recIdents).Elements) {
              _3793_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3791_recIdents).Contains(_3793_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3793_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3792_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3792_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3788_paramNames).Contains(_3793_next))) {
              _3792_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3792_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3793_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3793_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3793_next));
            }
            _3791_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3791_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3793_next));
          }
          Dafny.ISequence<Dafny.Rune> _3794_paramsString;
          _3794_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3795_paramTypes;
          _3795_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3789_i = BigInteger.Zero;
          while ((_3789_i) < (new BigInteger((_3787_params).Count))) {
            if ((_3789_i).Sign == 1) {
              _3794_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3794_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3795_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3795_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3796_typStr;
            Dafny.ISequence<Dafny.Rune> _out1712;
            _out1712 = DCOMP.COMP.GenType(((_3787_params).Select(_3789_i)).dtor_typ, false, true);
            _3796_typStr = _out1712;
            _3794_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3794_paramsString, ((_3787_params).Select(_3789_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3796_typStr);
            _3795_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3795_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3796_typStr);
            _3789_i = (_3789_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3797_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1713;
          _out1713 = DCOMP.COMP.GenType(_3786_retType, false, true);
          _3797_retTypeGen = _out1713;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3795_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3797_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3792_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3794_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3797_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3798___mcc_h219 = _source106.dtor_values;
        DAST._IType _3799___mcc_h220 = _source106.dtor_retType;
        DAST._IExpression _3800___mcc_h221 = _source106.dtor_expr;
        DAST._IExpression _3801_expr = _3800___mcc_h221;
        DAST._IType _3802_retType = _3799___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3803_values = _3798___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3804_paramNames;
          _3804_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3805_paramNamesSet;
          _3805_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3806_i;
          _3806_i = BigInteger.Zero;
          while ((_3806_i) < (new BigInteger((_3803_values).Count))) {
            _3804_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3804_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3803_values).Select(_3806_i)).dtor__0).dtor_name));
            _3805_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3805_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3803_values).Select(_3806_i)).dtor__0).dtor_name));
            _3806_i = (_3806_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3807_paramsString;
          _3807_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3806_i = BigInteger.Zero;
          while ((_3806_i) < (new BigInteger((_3803_values).Count))) {
            if ((_3806_i).Sign == 1) {
              _3807_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3807_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3808_typStr;
            Dafny.ISequence<Dafny.Rune> _out1714;
            _out1714 = DCOMP.COMP.GenType((((_3803_values).Select(_3806_i)).dtor__0).dtor_typ, false, true);
            _3808_typStr = _out1714;
            Dafny.ISequence<Dafny.Rune> _3809_valueGen;
            bool _3810___v91;
            bool _3811_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3812_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1715;
            bool _out1716;
            bool _out1717;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
            DCOMP.COMP.GenExpr(((_3803_values).Select(_3806_i)).dtor__1, selfIdent, @params, true, out _out1715, out _out1716, out _out1717, out _out1718);
            _3809_valueGen = _out1715;
            _3810___v91 = _out1716;
            _3811_valueErased = _out1717;
            _3812_recIdents = _out1718;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3803_values).Select(_3806_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3808_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3812_recIdents);
            if (_3811_valueErased) {
              _3809_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3809_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3809_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3806_i = (_3806_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3813_recGen;
          bool _3814_recOwned;
          bool _3815_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3816_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1719;
          bool _out1720;
          bool _out1721;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1722;
          DCOMP.COMP.GenExpr(_3801_expr, selfIdent, _3804_paramNames, mustOwn, out _out1719, out _out1720, out _out1721, out _out1722);
          _3813_recGen = _out1719;
          _3814_recOwned = _out1720;
          _3815_recErased = _out1721;
          _3816_recIdents = _out1722;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3816_recIdents, _3805_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3813_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3814_recOwned;
          isErased = _3815_recErased;
        }
      } else if (_source106.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3817___mcc_h222 = _source106.dtor_name;
        DAST._IType _3818___mcc_h223 = _source106.dtor_typ;
        DAST._IExpression _3819___mcc_h224 = _source106.dtor_value;
        DAST._IExpression _3820___mcc_h225 = _source106.dtor_iifeBody;
        DAST._IExpression _3821_iifeBody = _3820___mcc_h225;
        DAST._IExpression _3822_value = _3819___mcc_h224;
        DAST._IType _3823_tpe = _3818___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3824_name = _3817___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3825_valueGen;
          bool _3826___v92;
          bool _3827_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3828_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1723;
          bool _out1724;
          bool _out1725;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
          DCOMP.COMP.GenExpr(_3822_value, selfIdent, @params, true, out _out1723, out _out1724, out _out1725, out _out1726);
          _3825_valueGen = _out1723;
          _3826___v92 = _out1724;
          _3827_valueErased = _out1725;
          _3828_recIdents = _out1726;
          if (_3827_valueErased) {
            _3825_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3825_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3828_recIdents;
          Dafny.ISequence<Dafny.Rune> _3829_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1727;
          _out1727 = DCOMP.COMP.GenType(_3823_tpe, false, true);
          _3829_valueTypeGen = _out1727;
          Dafny.ISequence<Dafny.Rune> _3830_bodyGen;
          bool _3831___v93;
          bool _3832_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3833_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1728;
          bool _out1729;
          bool _out1730;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
          DCOMP.COMP.GenExpr(_3821_iifeBody, selfIdent, @params, true, out _out1728, out _out1729, out _out1730, out _out1731);
          _3830_bodyGen = _out1728;
          _3831___v93 = _out1729;
          _3832_bodyErased = _out1730;
          _3833_bodyIdents = _out1731;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3833_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3824_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3824_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3829_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3825_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3830_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3832_bodyErased;
        }
      } else if (_source106.is_Apply) {
        DAST._IExpression _3834___mcc_h226 = _source106.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3835___mcc_h227 = _source106.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3836_args = _3835___mcc_h227;
        DAST._IExpression _3837_func = _3834___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3838_funcString;
          bool _3839___v94;
          bool _3840_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3841_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1732;
          bool _out1733;
          bool _out1734;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1735;
          DCOMP.COMP.GenExpr(_3837_func, selfIdent, @params, false, out _out1732, out _out1733, out _out1734, out _out1735);
          _3838_funcString = _out1732;
          _3839___v94 = _out1733;
          _3840_funcErased = _out1734;
          _3841_recIdents = _out1735;
          readIdents = _3841_recIdents;
          Dafny.ISequence<Dafny.Rune> _3842_argString;
          _3842_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3843_i;
          _3843_i = BigInteger.Zero;
          while ((_3843_i) < (new BigInteger((_3836_args).Count))) {
            if ((_3843_i).Sign == 1) {
              _3842_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3842_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3844_argExpr;
            bool _3845_isOwned;
            bool _3846_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3847_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1736;
            bool _out1737;
            bool _out1738;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
            DCOMP.COMP.GenExpr((_3836_args).Select(_3843_i), selfIdent, @params, false, out _out1736, out _out1737, out _out1738, out _out1739);
            _3844_argExpr = _out1736;
            _3845_isOwned = _out1737;
            _3846_argErased = _out1738;
            _3847_argIdents = _out1739;
            if (_3845_isOwned) {
              _3844_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3844_argExpr);
            }
            _3842_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3842_argString, _3844_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3847_argIdents);
            _3843_i = (_3843_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3838_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3842_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_TypeTest) {
        DAST._IExpression _3848___mcc_h228 = _source106.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3849___mcc_h229 = _source106.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3850___mcc_h230 = _source106.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3851_variant = _3850___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3852_dType = _3849___mcc_h229;
        DAST._IExpression _3853_on = _3848___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3854_exprGen;
          bool _3855___v95;
          bool _3856_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3857_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1740;
          bool _out1741;
          bool _out1742;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1743;
          DCOMP.COMP.GenExpr(_3853_on, selfIdent, @params, false, out _out1740, out _out1741, out _out1742, out _out1743);
          _3854_exprGen = _out1740;
          _3855___v95 = _out1741;
          _3856_exprErased = _out1742;
          _3857_recIdents = _out1743;
          Dafny.ISequence<Dafny.Rune> _3858_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1744;
          _out1744 = DCOMP.COMP.GenPath(_3852_dType);
          _3858_dTypePath = _out1744;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3854_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3858_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3851_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3857_recIdents;
        }
      } else if (_source106.is_InitializationValue) {
        DAST._IType _3859___mcc_h231 = _source106.dtor_typ;
        DAST._IType _3860_typ = _3859___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3861_typString;
          Dafny.ISequence<Dafny.Rune> _out1745;
          _out1745 = DCOMP.COMP.GenType(_3860_typ, false, false);
          _3861_typString = _out1745;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3861_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source106.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source106.is_SetBoundedPool) {
        DAST._IExpression _3862___mcc_h232 = _source106.dtor_of;
        DAST._IExpression _3863_of = _3862___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3864_exprGen;
          bool _3865___v96;
          bool _3866_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3867_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1746;
          bool _out1747;
          bool _out1748;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
          DCOMP.COMP.GenExpr(_3863_of, selfIdent, @params, false, out _out1746, out _out1747, out _out1748, out _out1749);
          _3864_exprGen = _out1746;
          _3865___v96 = _out1747;
          _3866_exprErased = _out1748;
          _3867_recIdents = _out1749;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3864_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3866_exprErased;
          readIdents = _3867_recIdents;
        }
      } else if (_source106.is_SeqBoundedPool) {
        DAST._IExpression _3868___mcc_h233 = _source106.dtor_of;
        bool _3869___mcc_h234 = _source106.dtor_includeDuplicates;
        bool _3870_includeDuplicates = _3869___mcc_h234;
        DAST._IExpression _3871_of = _3868___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3872_exprGen;
          bool _3873___v97;
          bool _3874_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3875_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1750;
          bool _out1751;
          bool _out1752;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1753;
          DCOMP.COMP.GenExpr(_3871_of, selfIdent, @params, false, out _out1750, out _out1751, out _out1752, out _out1753);
          _3872_exprGen = _out1750;
          _3873___v97 = _out1751;
          _3874_exprErased = _out1752;
          _3875_recIdents = _out1753;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3872_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3870_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3874_exprErased;
          readIdents = _3875_recIdents;
        }
      } else {
        DAST._IExpression _3876___mcc_h235 = _source106.dtor_lo;
        DAST._IExpression _3877___mcc_h236 = _source106.dtor_hi;
        DAST._IExpression _3878_hi = _3877___mcc_h236;
        DAST._IExpression _3879_lo = _3876___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3880_loString;
          bool _3881___v98;
          bool _3882_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3883_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1754;
          bool _out1755;
          bool _out1756;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1757;
          DCOMP.COMP.GenExpr(_3879_lo, selfIdent, @params, true, out _out1754, out _out1755, out _out1756, out _out1757);
          _3880_loString = _out1754;
          _3881___v98 = _out1755;
          _3882_loErased = _out1756;
          _3883_recIdentsLo = _out1757;
          Dafny.ISequence<Dafny.Rune> _3884_hiString;
          bool _3885___v99;
          bool _3886_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3887_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1758;
          bool _out1759;
          bool _out1760;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1761;
          DCOMP.COMP.GenExpr(_3878_hi, selfIdent, @params, true, out _out1758, out _out1759, out _out1760, out _out1761);
          _3884_hiString = _out1758;
          _3885___v99 = _out1759;
          _3886_hiErased = _out1760;
          _3887_recIdentsHi = _out1761;
          if (!(_3882_loErased)) {
            _3880_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3880_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3886_hiErased)) {
            _3884_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3884_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3880_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3884_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3883_recIdentsLo, _3887_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3888_i;
      _3888_i = BigInteger.Zero;
      while ((_3888_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3889_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1762;
        _out1762 = DCOMP.COMP.GenModule((p).Select(_3888_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3889_generated = _out1762;
        if ((_3888_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3889_generated);
        _3888_i = (_3888_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3890_i;
      _3890_i = BigInteger.Zero;
      while ((_3890_i) < (new BigInteger((fullName).Count))) {
        if ((_3890_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3890_i));
        _3890_i = (_3890_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

