// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error) {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default) {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error) {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs) {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).Elements) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
    TAIL_CALL_START:;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v) {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length) {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys) {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator) {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim) {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START:;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7231)");
      after__ASSIGN_SUCH_THAT_0:;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a) {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq) {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y) {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y) {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d) {
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d) {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d) {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m) {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e) {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START:;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow) {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit, _148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.HexConversion.__default.HEX__DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit, _165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.DecimalConversion.__default.DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape) {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _801___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static byte PUB {
      get {
        return (byte)(1);
      }
    }
    public static byte PRIV {
      get {
        return (byte)(0);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _802___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _803___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _804_body = _803___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _805_name = _802___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _805_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_804_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_806_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_807_modDecl) => {
          return (_807_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_806_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _808___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _809_name = _808___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _809_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind) {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_810_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_811_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_811_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _810_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._IType> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._IType> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _812_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _813_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _814_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _813_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_815_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_816_field) => {
          return (_816_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_815_ind, RAST.__default.IND));
        })))(ind), _812_separator)), _814_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _817_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_818_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_819_t) => {
          return (_819_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_818_ind, RAST.__default.IND));
        })))(ind), _817_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._IType> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._IType> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_821_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _820_ind), RAST.__default.IND), (_821_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content) {
      return new TypeParam(content);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> ind) {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_823_t) => {
          return RAST.TypeParam._ToString(_823_t, Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IType {
    bool is_Self { get; }
    bool is_SelfOwned { get; }
    bool is_SelfMut { get; }
    bool is_RawType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_Self();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Self() {
      return new Type_Self();
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_SelfMut() {
      return new Type_SelfMut();
    }
    public static _IType create_RawType(Dafny.ISequence<Dafny.Rune> content) {
      return new Type_RawType(content);
    }
    public bool is_Self { get { return this is Type_Self; } }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_SelfMut { get { return this is Type_SelfMut; } }
    public bool is_RawType { get { return this is Type_RawType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Type_RawType)d)._content;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_Self) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self");
      } else if ((this).is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if ((this).is_SelfMut) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut Self");
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class Type_Self : Type {
    public Type_Self() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Self();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Self;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Self";
      return s;
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_SelfMut : Type {
    public Type_SelfMut() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfMut();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfMut";
      return s;
    }
  }
  public class Type_RawType : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Type_RawType(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_RawType(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_RawType;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.RawType";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_825_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _824_ind), RAST.__default.IND), (_825_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_826_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_827_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _826_ind), RAST.__default.IND), (_827_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_826_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    byte dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(byte pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public byte dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_pub) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly byte _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(byte pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && this._pub == oth._pub && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public partial class VISIBILITY {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (((this).dtor_tpe).is_Self)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (((this).dtor_tpe).is_SelfMut)) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.Type.create_Self());
      }
    }
    public static RAST._IFormal selfOwned {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IFormal selfMut {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.Type.create_SelfMut());
      }
    }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _828_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _829_rhsString = ((this).dtor_rhs)._ToString(_828_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_829_rhsString).Contains(new Dafny.Rune('\n'))) && (((_829_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _829_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _829_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    _IExpr DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        return ((Expr_Block)d)._underlying;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public abstract _IExpr DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_Match) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), ((this).dtor_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>((this).dtor_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_830_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_831_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _830_ind), RAST.__default.IND), (_831_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_830_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if ((this).is_StmtExpr) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((this).dtor_stmt)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), ind), ((this).dtor_rhs)._ToString(ind));
      } else if ((this).is_Block) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), ((this).dtor_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if ((this).is_StructBuild) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>((this).dtor_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_832_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_833_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _832_ind), RAST.__default.IND), (_833_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_832_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger(((this).dtor_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        return RAST.__default.AddIndent((this).dtor_content, ind);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      return RAST.Expr.create_StmtExpr(this, rhs2);
    }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_834_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_835_formal) => {
        return (_835_formal)._ToString(_834_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source26) => {
        if (_source26.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _836___mcc_h0 = _source26.dtor_value;
          RAST._IType _837_t = _836___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_837_t)._ToString(_pat_let_tv4));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source27) => {
        if (_source27.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _838___mcc_h2 = _source27.dtor_value;
          RAST._IExpr _839_body = _838___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv5), RAST.__default.IND), (_839_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv6, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv7), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> runtime(Dafny.ISequence<Dafny.Rune> suffix) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime"), suffix);
    }
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in111 = (i).Drop(new BigInteger(2));
            i = _in111;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in112 = (i).Drop(BigInteger.One);
        i = _in112;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _840___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_840___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _840___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_840___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
        i = _in113;
        goto TAIL_CALL_START;
      } else {
        _840___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_840___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _841___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_841___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _841___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_841___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(BigInteger.One);
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _841___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_841___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _842_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _842_r);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DafnyErasable {
      get {
        return DCOMP.__default.runtime(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::DafnyErasable"));
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return RAST.__default.IND;
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _843_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _843_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _843_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _844_i;
      _844_i = BigInteger.Zero;
      while ((_844_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _845_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source28 = (body).Select(_844_i);
        if (_source28.is_Module) {
          DAST._IModule _846___mcc_h0 = _source28.dtor_Module_a0;
          DAST._IModule _847_m = _846___mcc_h0;
          RAST._IMod _848_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_847_m, containingPath);
          _848_mm = _out16;
          _845_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_848_mm));
        } else if (_source28.is_Class) {
          DAST._IClass _849___mcc_h1 = _source28.dtor_Class_a0;
          DAST._IClass _850_c = _849___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_850_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_850_c).dtor_name)));
          _845_generated = _out17;
        } else if (_source28.is_Trait) {
          DAST._ITrait _851___mcc_h2 = _source28.dtor_Trait_a0;
          DAST._ITrait _852_t = _851___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _853_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_852_t, containingPath);
          _853_tt = _out18;
          _845_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_853_tt));
        } else if (_source28.is_Newtype) {
          DAST._INewtype _854___mcc_h3 = _source28.dtor_Newtype_a0;
          DAST._INewtype _855_n = _854___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_855_n);
          _845_generated = _out19;
        } else {
          DAST._IDatatype _856___mcc_h4 = _source28.dtor_Datatype_a0;
          DAST._IDatatype _857_d = _856___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_857_d);
          _845_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _845_generated);
        _844_i = (_844_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _858_tpI;
      _858_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_858_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _859_tp;
          _859_tp = (@params).Select(_858_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_859_tp));
          Dafny.ISequence<Dafny.Rune> _860_genTp;
          Dafny.ISequence<Dafny.Rune> _out21;
          _out21 = DCOMP.COMP.GenType(_859_tp, false, false);
          _860_genTp = _out21;
          typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_860_genTp));
          Dafny.ISequence<Dafny.Rune> _861_baseConstraints;
          _861_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_860_genTp, _861_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static"))));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_860_genTp, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _860_genTp), _861_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static"))));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _858_tpI = (_858_tpI) + (BigInteger.One);
        }
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _862_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _863_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _864_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _865_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _866_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _867_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _868_erasedParams;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out23;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out26;
      Dafny.ISequence<Dafny.Rune> _out27;
      Dafny.ISequence<Dafny.Rune> _out28;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25, out _out26, out _out27, out _out28);
      _862_typeParamsSet = _out22;
      _863_sTypeParams = _out23;
      _864_sConstrainedTypeParams = _out24;
      _865_whereConstraints = _out25;
      _866_constrainedEraseParams = _out26;
      _867_unerasedParams = _out27;
      _868_erasedParams = _out28;
      Dafny.ISequence<Dafny.Rune> _869_constrainedTypeParams;
      _869_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_864_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _870_fields;
      _870_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _871_fieldInits;
      _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _872_fieldI;
      _872_fieldI = BigInteger.Zero;
      while ((_872_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _873_field;
        _873_field = ((c).dtor_fields).Select(_872_fieldI);
        Dafny.ISequence<Dafny.Rune> _874_fieldType;
        Dafny.ISequence<Dafny.Rune> _out29;
        _out29 = DCOMP.COMP.GenType(((_873_field).dtor_formal).dtor_typ, false, false);
        _874_fieldType = _out29;
        _870_fields = Dafny.Sequence<RAST._IFormal>.Concat(_870_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_873_field).dtor_formal).dtor_name)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell<"), _874_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
        Std.Wrappers._IOption<DAST._IExpression> _source29 = (_873_field).dtor_defaultValue;
        if (_source29.is_None) {
          {
            _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_871_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_873_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _875___mcc_h0 = _source29.dtor_value;
          DAST._IExpression _876_e = _875___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _877_eStr;
            bool _878___v1;
            bool _879___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _880___v3;
            Dafny.ISequence<Dafny.Rune> _out30;
            bool _out31;
            bool _out32;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out33;
            DCOMP.COMP.GenExpr(_876_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out30, out _out31, out _out32, out _out33);
            _877_eStr = _out30;
            _878___v1 = _out31;
            _879___v2 = _out32;
            _880___v3 = _out33;
            _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_871_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_873_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), _877_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _872_fieldI = (_872_fieldI) + (BigInteger.One);
      }
      BigInteger _881_typeParamI;
      _881_typeParamI = BigInteger.Zero;
      while ((_881_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _882_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out34;
        _out34 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_881_typeParamI), false, false);
        _882_tpeGen = _out34;
        _870_fields = Dafny.Sequence<RAST._IFormal>.Concat(_870_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_881_typeParamI)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData<"), _882_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
        _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_871_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_881_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _881_typeParamI = (_881_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _883_struct;
      _883_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _863_sTypeParams, RAST.Formals.create_NamedFormals(_870_fields));
      Dafny.ISequence<Dafny.Rune> _884_typeParams;
      _884_typeParams = RAST.TypeParam.ToStringMultiple(_863_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_883_struct));
      Dafny.ISequence<RAST._IImplMember> _885_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _886_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out35;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out36;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _862_typeParamsSet, out _out35, out _out36);
      _885_implBodyRaw = _out35;
      _886_traitBodies = _out36;
      Dafny.ISequence<RAST._IImplMember> _887_implBody;
      _887_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _871_fieldInits))))), _885_implBodyRaw);
      RAST._IImpl _888_i;
      _888_i = RAST.Impl.create_Impl(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), _865_whereConstraints, _887_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_888_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _889_i;
        _889_i = BigInteger.Zero;
        while ((_889_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _890_superClass;
          _890_superClass = ((c).dtor_superClasses).Select(_889_i);
          DAST._IType _source30 = _890_superClass;
          if (_source30.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _891___mcc_h1 = _source30.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _892___mcc_h2 = _source30.dtor_typeArgs;
            DAST._IResolvedType _893___mcc_h3 = _source30.dtor_resolved;
            DAST._IResolvedType _source31 = _893___mcc_h3;
            if (_source31.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _894___mcc_h7 = _source31.dtor_path;
            } else if (_source31.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _895___mcc_h9 = _source31.dtor_path;
              Dafny.ISequence<DAST._IType> _896_typeArgs = _892___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _897_traitPath = _891___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _898_pathStr;
                Dafny.ISequence<Dafny.Rune> _out37;
                _out37 = DCOMP.COMP.GenPath(_897_traitPath);
                _898_pathStr = _out37;
                Dafny.ISequence<Dafny.Rune> _899_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out38;
                _out38 = DCOMP.COMP.GenTypeArgs(_896_typeArgs, false, false);
                _899_typeArgs = _out38;
                Dafny.ISequence<RAST._IImplMember> _900_body;
                _900_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_886_traitBodies).Contains(_897_traitPath)) {
                  _900_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_886_traitBodies, _897_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _901_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out39;
                _out39 = DCOMP.COMP.GenPath(path);
                _901_genSelfPath = _out39;
                RAST._IModDecl _902_x;
                _902_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(_898_pathStr, _899_typeArgs)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), _901_genSelfPath), _884_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), _865_whereConstraints, _900_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_902_x));
              }
            } else {
              DAST._IType _903___mcc_h11 = _source31.dtor_Newtype_a0;
            }
          } else if (_source30.is_Nullable) {
            DAST._IType _904___mcc_h13 = _source30.dtor_Nullable_a0;
          } else if (_source30.is_Tuple) {
            Dafny.ISequence<DAST._IType> _905___mcc_h15 = _source30.dtor_Tuple_a0;
          } else if (_source30.is_Array) {
            DAST._IType _906___mcc_h17 = _source30.dtor_element;
            BigInteger _907___mcc_h18 = _source30.dtor_dims;
          } else if (_source30.is_Seq) {
            DAST._IType _908___mcc_h21 = _source30.dtor_element;
          } else if (_source30.is_Set) {
            DAST._IType _909___mcc_h23 = _source30.dtor_element;
          } else if (_source30.is_Multiset) {
            DAST._IType _910___mcc_h25 = _source30.dtor_element;
          } else if (_source30.is_Map) {
            DAST._IType _911___mcc_h27 = _source30.dtor_key;
            DAST._IType _912___mcc_h28 = _source30.dtor_value;
          } else if (_source30.is_Arrow) {
            Dafny.ISequence<DAST._IType> _913___mcc_h31 = _source30.dtor_args;
            DAST._IType _914___mcc_h32 = _source30.dtor_result;
          } else if (_source30.is_Primitive) {
            DAST._IPrimitive _915___mcc_h35 = _source30.dtor_Primitive_a0;
          } else if (_source30.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _916___mcc_h37 = _source30.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _917___mcc_h39 = _source30.dtor_TypeArg_a0;
          }
          _889_i = (_889_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _918_d;
      _918_d = RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), _865_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _919_defaultImpl;
      _919_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_918_d));
      RAST._IImpl _920_p;
      _920_p = RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _921_printImpl;
      _921_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_920_p));
      RAST._IImpl _922_pp;
      _922_pp = RAST.Impl.create_ImplFor(_863_sTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.Type.create_Self())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _923_ptrPartialEqImpl;
      _923_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_922_pp));
      RAST._IModDecl _924_ii;
      _924_ii = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _868_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))))));
      RAST._IModDecl _925_u;
      _925_u = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_866_constrainedEraseParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _867_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()));
      Dafny.ISequence<RAST._IModDecl> _926_identEraseImpls;
      _926_identEraseImpls = Dafny.Sequence<RAST._IModDecl>.FromElements(_924_ii, _925_u);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _919_defaultImpl), _921_printImpl), _923_ptrPartialEqImpl), _926_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _927_typeParamsSet;
      _927_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _928_typeParams;
      _928_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _929_tpI;
      _929_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _928_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_929_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _930_tp;
          _930_tp = ((t).dtor_typeParams).Select(_929_tpI);
          _927_typeParamsSet = Dafny.Set<DAST._IType>.Union(_927_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_930_tp));
          Dafny.ISequence<Dafny.Rune> _931_genTp;
          Dafny.ISequence<Dafny.Rune> _out40;
          _out40 = DCOMP.COMP.GenType(_930_tp, false, false);
          _931_genTp = _out40;
          _928_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_928_typeParams, _931_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _929_tpI = (_929_tpI) + (BigInteger.One);
        }
        _928_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_928_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _932_fullPath;
      _932_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _933_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _934___v6;
      Dafny.ISequence<RAST._IImplMember> _out41;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out42;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_932_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_932_fullPath)), _927_typeParamsSet, out _out41, out _out42);
      _933_implBody = _out41;
      _934___v6 = _out42;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((t).dtor_name), _928_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _933_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _935_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _936_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _937_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _938_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _939___v7;
      Dafny.ISequence<Dafny.Rune> _940___v8;
      Dafny.ISequence<Dafny.Rune> _941___v9;
      Dafny.ISet<DAST._IType> _out43;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out44;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48, out _out49);
      _935_typeParamsSet = _out43;
      _936_sTypeParams = _out44;
      _937_sConstrainedTypeParams = _out45;
      _938_whereConstraints = _out46;
      _939___v7 = _out47;
      _940___v8 = _out48;
      _941___v9 = _out49;
      Dafny.ISequence<Dafny.Rune> _942_typeParams;
      _942_typeParams = RAST.TypeParam.ToStringMultiple(_936_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _943_constrainedTypeParams;
      _943_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_937_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _944_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out50;
      _out50 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _944_underlyingType = _out50;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _936_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), _944_underlyingType)))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), _944_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), _944_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _942_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()))));
      Dafny.ISequence<Dafny.Rune> _945_fnBody;
      _945_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source32 = (c).dtor_witnessExpr;
      if (_source32.is_None) {
        {
          _945_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_945_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _946___mcc_h0 = _source32.dtor_value;
        DAST._IExpression _947_e = _946___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _948_eStr;
          bool _949___v10;
          bool _950___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _951___v12;
          Dafny.ISequence<Dafny.Rune> _out51;
          bool _out52;
          bool _out53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out54;
          DCOMP.COMP.GenExpr(_947_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out51, out _out52, out _out53, out _out54);
          _948_eStr = _out51;
          _949___v10 = _out52;
          _950___v11 = _out53;
          _951___v12 = _out54;
          _945_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_945_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _948_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _952_body;
      _952_body = RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_945_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), _938_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_952_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), _944_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _953_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _954_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _955_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _956_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _957_sConstrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _958_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _959_erasedParams;
      Dafny.ISet<DAST._IType> _out55;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out56;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out57;
      Dafny.ISequence<Dafny.Rune> _out58;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out59;
      Dafny.ISequence<Dafny.Rune> _out60;
      Dafny.ISequence<Dafny.Rune> _out61;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out55, out _out56, out _out57, out _out58, out _out59, out _out60, out _out61);
      _953_typeParamsSet = _out55;
      _954_sTypeParams = _out56;
      _955_sConstrainedTypeParams = _out57;
      _956_whereConstraints = _out58;
      _957_sConstrainedEraseParams = _out59;
      _958_unerasedParams = _out60;
      _959_erasedParams = _out61;
      Dafny.ISequence<Dafny.Rune> _960_typeParams;
      _960_typeParams = RAST.TypeParam.ToStringMultiple(_954_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _961_constrainedTypeParams;
      _961_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_955_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _962_constrainedEraseParams;
      _962_constrainedEraseParams = RAST.TypeParam.ToStringMultiple(_957_sConstrainedEraseParams, DCOMP.__default.IND);
      Dafny.ISequence<RAST._IEnumCase> _963_ctors;
      _963_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _964_i;
      _964_i = BigInteger.Zero;
      while ((_964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _965_ctor;
        _965_ctor = ((c).dtor_ctors).Select(_964_i);
        Dafny.ISequence<RAST._IFormal> _966_ctorArgs;
        _966_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _967_j;
        _967_j = BigInteger.Zero;
        while ((_967_j) < (new BigInteger(((_965_ctor).dtor_args).Count))) {
          DAST._IFormal _968_formal;
          _968_formal = ((_965_ctor).dtor_args).Select(_967_j);
          Dafny.ISequence<Dafny.Rune> _969_formalType;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType((_968_formal).dtor_typ, false, false);
          _969_formalType = _out62;
          if ((c).dtor_isCo) {
            _966_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_966_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_968_formal).dtor_name), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper<"), _969_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
          } else {
            _966_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_966_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_968_formal).dtor_name), RAST.Type.create_RawType(_969_formalType))));
          }
          _967_j = (_967_j) + (BigInteger.One);
        }
        _963_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_963_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_965_ctor).dtor_name), RAST.Formals.create_NamedFormals(_966_ctorArgs))));
        _964_i = (_964_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _970_selfPath;
      _970_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _971_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _972_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out63;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out64;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_970_selfPath)), _953_typeParamsSet, out _out63, out _out64);
      _971_implBodyRaw = _out63;
      _972_traitBodies = _out64;
      Dafny.ISequence<RAST._IImplMember> _973_implBody;
      _973_implBody = _971_implBodyRaw;
      _964_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _974_emittedFields;
      _974_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _975_ctor;
        _975_ctor = ((c).dtor_ctors).Select(_964_i);
        BigInteger _976_j;
        _976_j = BigInteger.Zero;
        while ((_976_j) < (new BigInteger(((_975_ctor).dtor_args).Count))) {
          DAST._IFormal _977_formal;
          _977_formal = ((_975_ctor).dtor_args).Select(_976_j);
          if (!((_974_emittedFields).Contains((_977_formal).dtor_name))) {
            _974_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_974_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_977_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _978_formalType;
            Dafny.ISequence<Dafny.Rune> _out65;
            _out65 = DCOMP.COMP.GenType((_977_formal).dtor_typ, false, false);
            _978_formalType = _out65;
            Dafny.ISequence<RAST._IMatchCase> _979_cases;
            _979_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _980_k;
            _980_k = BigInteger.Zero;
            while ((_980_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _981_ctor2;
              _981_ctor2 = ((c).dtor_ctors).Select(_980_k);
              Dafny.ISequence<Dafny.Rune> _982_pattern;
              _982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_981_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _983_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _984_l;
              _984_l = BigInteger.Zero;
              bool _985_hasMatchingField;
              _985_hasMatchingField = false;
              while ((_984_l) < (new BigInteger(((_981_ctor2).dtor_args).Count))) {
                DAST._IFormal _986_formal2;
                _986_formal2 = ((_981_ctor2).dtor_args).Select(_984_l);
                if (((_977_formal).dtor_name).Equals((_986_formal2).dtor_name)) {
                  _985_hasMatchingField = true;
                }
                _982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_982_pattern, DCOMP.__default.escapeIdent((_986_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _984_l = (_984_l) + (BigInteger.One);
              }
              _982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_982_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_985_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _983_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_977_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _983_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_977_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _983_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _987_ctorMatch;
              _987_ctorMatch = RAST.MatchCase.create(_982_pattern, RAST.Expr.create_RawExpr(_983_rhs));
              _979_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_979_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_987_ctorMatch));
              _980_k = (_980_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _979_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_979_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _988_methodBody;
            _988_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _979_cases);
            _973_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_973_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(DCOMP.__default.escapeIdent((_977_formal).dtor_name), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _978_formalType))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_988_methodBody)))));
          }
          _976_j = (_976_j) + (BigInteger.One);
        }
        _964_i = (_964_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _989_typeI;
        _989_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _990_types;
        _990_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_989_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          Dafny.ISequence<Dafny.Rune> _991_genTp;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_989_typeI), false, false);
          _991_genTp = _out66;
          _990_types = Dafny.Sequence<RAST._IType>.Concat(_990_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<"), _991_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
          _989_typeI = (_989_typeI) + (BigInteger.One);
        }
        _963_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_963_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(_990_types))));
      }
      Dafny.ISequence<RAST._IModDecl> _992_enumBody;
      _992_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _954_sTypeParams, _963_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), _956_whereConstraints, _973_implBody)));
      Dafny.ISequence<RAST._IModDecl> _993_identEraseImpls;
      _993_identEraseImpls = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _959_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_957_sConstrainedEraseParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _958_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements())));
      _964_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _994_printImplBodyCases;
      _994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _995_ctor;
        _995_ctor = ((c).dtor_ctors).Select(_964_i);
        Dafny.ISequence<Dafny.Rune> _996_ctorMatch;
        _996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_995_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _997_modulePrefix;
        _997_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _998_printRhs;
        _998_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _997_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_995_ctor).dtor_name)), (((_995_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _999_j;
        _999_j = BigInteger.Zero;
        while ((_999_j) < (new BigInteger(((_995_ctor).dtor_args).Count))) {
          DAST._IFormal _1000_formal;
          _1000_formal = ((_995_ctor).dtor_args).Select(_999_j);
          _996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_996_ctorMatch, DCOMP.__default.escapeIdent((_1000_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_999_j).Sign == 1) {
            _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_1000_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _999_j = (_999_j) + (BigInteger.One);
        }
        _996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_996_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_995_ctor).dtor_hasAnyArgs) {
          _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_994_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _996_ctorMatch), RAST.Expr.create_Block(_998_printRhs))));
        _964_i = (_964_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_994_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _1001_printImplBody;
      _1001_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _994_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _1002_printImpl;
      _1002_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1001_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _1003_defaultImpl;
      _1003_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _964_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _1004_structName;
        _1004_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _1005_structAssignments;
        _1005_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_964_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1006_formal;
          _1006_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_964_i);
          _1005_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1005_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_1006_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _964_i = (_964_i) + (BigInteger.One);
        }
        _1003_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_1004_structName, _1005_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_992_enumBody, _993_identEraseImpls), _1002_printImpl), _1003_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1007_i;
        _1007_i = BigInteger.Zero;
        while ((_1007_i) < (new BigInteger((p).Count))) {
          if ((_1007_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1007_i))));
          _1007_i = (_1007_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1008_i;
        _1008_i = BigInteger.Zero;
        while ((_1008_i) < (new BigInteger((args).Count))) {
          if ((_1008_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1009_genTp;
          Dafny.ISequence<Dafny.Rune> _out67;
          _out67 = DCOMP.COMP.GenType((args).Select(_1008_i), inBinding, inFn);
          _1009_genTp = _out67;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1009_genTp);
          _1008_i = (_1008_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source33 = c;
      if (_source33.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1010___mcc_h0 = _source33.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1011___mcc_h1 = _source33.dtor_typeArgs;
        DAST._IResolvedType _1012___mcc_h2 = _source33.dtor_resolved;
        DAST._IResolvedType _1013_resolved = _1012___mcc_h2;
        Dafny.ISequence<DAST._IType> _1014_args = _1011___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1015_p = _1010___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out68;
          _out68 = DCOMP.COMP.GenPath(_1015_p);
          s = _out68;
          Dafny.ISequence<Dafny.Rune> _1016_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out69;
          _out69 = DCOMP.COMP.GenTypeArgs(_1014_args, inBinding, inFn);
          _1016_typeArgs = _out69;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1016_typeArgs);
          DAST._IResolvedType _source34 = _1013_resolved;
          if (_source34.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1017___mcc_h18 = _source34.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source34.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1018___mcc_h20 = _source34.dtor_path;
            {
              if ((_1015_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _1019___mcc_h22 = _source34.dtor_Newtype_a0;
            DAST._IResolvedType _1020_Primitive = _1013_resolved;
          }
        }
      } else if (_source33.is_Nullable) {
        DAST._IType _1021___mcc_h3 = _source33.dtor_Nullable_a0;
        DAST._IType _1022_inner = _1021___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _1023_innerStr;
          Dafny.ISequence<Dafny.Rune> _out70;
          _out70 = DCOMP.COMP.GenType(_1022_inner, inBinding, inFn);
          _1023_innerStr = _out70;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1023_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source33.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1024___mcc_h4 = _source33.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1025_types = _1024___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _1026_i;
          _1026_i = BigInteger.Zero;
          while ((_1026_i) < (new BigInteger((_1025_types).Count))) {
            if ((_1026_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1027_generated;
            Dafny.ISequence<Dafny.Rune> _out71;
            _out71 = DCOMP.COMP.GenType((_1025_types).Select(_1026_i), inBinding, inFn);
            _1027_generated = _out71;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1027_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _1026_i = (_1026_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source33.is_Array) {
        DAST._IType _1028___mcc_h5 = _source33.dtor_element;
        BigInteger _1029___mcc_h6 = _source33.dtor_dims;
        BigInteger _1030_dims = _1029___mcc_h6;
        DAST._IType _1031_element = _1028___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _1032_elemStr;
          Dafny.ISequence<Dafny.Rune> _out72;
          _out72 = DCOMP.COMP.GenType(_1031_element, inBinding, inFn);
          _1032_elemStr = _out72;
          s = _1032_elemStr;
          BigInteger _1033_i;
          _1033_i = BigInteger.Zero;
          while ((_1033_i) < (_1030_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _1033_i = (_1033_i) + (BigInteger.One);
          }
        }
      } else if (_source33.is_Seq) {
        DAST._IType _1034___mcc_h7 = _source33.dtor_element;
        DAST._IType _1035_element = _1034___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _1036_elemStr;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType(_1035_element, inBinding, inFn);
          _1036_elemStr = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1036_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source33.is_Set) {
        DAST._IType _1037___mcc_h8 = _source33.dtor_element;
        DAST._IType _1038_element = _1037___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _1039_elemStr;
          Dafny.ISequence<Dafny.Rune> _out74;
          _out74 = DCOMP.COMP.GenType(_1038_element, inBinding, inFn);
          _1039_elemStr = _out74;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1039_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source33.is_Multiset) {
        DAST._IType _1040___mcc_h9 = _source33.dtor_element;
        DAST._IType _1041_element = _1040___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1042_elemStr;
          Dafny.ISequence<Dafny.Rune> _out75;
          _out75 = DCOMP.COMP.GenType(_1041_element, inBinding, inFn);
          _1042_elemStr = _out75;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1042_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source33.is_Map) {
        DAST._IType _1043___mcc_h10 = _source33.dtor_key;
        DAST._IType _1044___mcc_h11 = _source33.dtor_value;
        DAST._IType _1045_value = _1044___mcc_h11;
        DAST._IType _1046_key = _1043___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _1047_keyStr;
          Dafny.ISequence<Dafny.Rune> _out76;
          _out76 = DCOMP.COMP.GenType(_1046_key, inBinding, inFn);
          _1047_keyStr = _out76;
          Dafny.ISequence<Dafny.Rune> _1048_valueStr;
          Dafny.ISequence<Dafny.Rune> _out77;
          _out77 = DCOMP.COMP.GenType(_1045_value, inBinding, inFn);
          _1048_valueStr = _out77;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1047_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1048_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source33.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1049___mcc_h12 = _source33.dtor_args;
        DAST._IType _1050___mcc_h13 = _source33.dtor_result;
        DAST._IType _1051_result = _1050___mcc_h13;
        Dafny.ISequence<DAST._IType> _1052_args = _1049___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1053_i;
          _1053_i = BigInteger.Zero;
          while ((_1053_i) < (new BigInteger((_1052_args).Count))) {
            if ((_1053_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1054_generated;
            Dafny.ISequence<Dafny.Rune> _out78;
            _out78 = DCOMP.COMP.GenType((_1052_args).Select(_1053_i), inBinding, true);
            _1054_generated = _out78;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1054_generated);
            _1053_i = (_1053_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1055_resultType;
          Dafny.ISequence<Dafny.Rune> _out79;
          _out79 = DCOMP.COMP.GenType(_1051_result, inBinding, (inFn) || (inBinding));
          _1055_resultType = _out79;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1055_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source33.is_Primitive) {
        DAST._IPrimitive _1056___mcc_h14 = _source33.dtor_Primitive_a0;
        DAST._IPrimitive _1057_p = _1056___mcc_h14;
        {
          DAST._IPrimitive _source35 = _1057_p;
          if (_source35.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source35.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source35.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source35.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source33.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1058___mcc_h15 = _source33.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1059_v = _1058___mcc_h15;
        s = _1059_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1060___mcc_h16 = _source33.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source36 = _1060___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1061___mcc_h17 = _source36;
        Dafny.ISequence<Dafny.Rune> _1062_name = _1061___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1062_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> traitBodies) {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _1063_i;
      _1063_i = BigInteger.Zero;
      while ((_1063_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source37 = (body).Select(_1063_i);
        DAST._IMethod _1064___mcc_h0 = _source37;
        DAST._IMethod _1065_m = _1064___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source38 = (_1065_m).dtor_overridingPath;
          if (_source38.is_None) {
            {
              RAST._IImplMember _1066_generated;
              RAST._IImplMember _out80;
              _out80 = DCOMP.COMP.GenMethod(_1065_m, forTrait, enclosingType, enclosingTypeParams);
              _1066_generated = _out80;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_1066_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1067___mcc_h1 = _source38.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1068_p = _1067___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _1069_existing;
              _1069_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_1068_p)) {
                _1069_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies, _1068_p);
              }
              RAST._IImplMember _1070_genMethod;
              RAST._IImplMember _out81;
              _out81 = DCOMP.COMP.GenMethod(_1065_m, true, enclosingType, enclosingTypeParams);
              _1070_genMethod = _out81;
              _1069_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_1069_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_1070_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_1068_p, _1069_existing)));
            }
          }
        }
        _1063_i = (_1063_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _1071_i;
      _1071_i = BigInteger.Zero;
      while ((_1071_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1072_param;
        _1072_param = (@params).Select(_1071_i);
        Dafny.ISequence<Dafny.Rune> _1073_paramType;
        Dafny.ISequence<Dafny.Rune> _out82;
        _out82 = DCOMP.COMP.GenType((_1072_param).dtor_typ, false, false);
        _1073_paramType = _out82;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1072_param).dtor_name), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" &"), _1073_paramType)))));
        _1071_i = (_1071_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _1074_params;
      Dafny.ISequence<RAST._IFormal> _out83;
      _out83 = DCOMP.COMP.GenParams((m).dtor_params);
      _1074_params = _out83;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1075_paramNames;
      _1075_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1076_paramI;
      _1076_paramI = BigInteger.Zero;
      while ((_1076_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1075_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1075_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1076_paramI)).dtor_name));
        _1076_paramI = (_1076_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1074_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _1074_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1077_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out84;
          _out84 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1077_enclosingTypeString = _out84;
          _1074_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1077_enclosingTypeString)))), _1074_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1078_retType;
      _1078_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1079_typeI;
      _1079_typeI = BigInteger.Zero;
      while ((_1079_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1079_typeI).Sign == 1) {
          _1078_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1078_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1080_typeString;
        Dafny.ISequence<Dafny.Rune> _out85;
        _out85 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1079_typeI), false, false);
        _1080_typeString = _out85;
        _1078_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1078_retType, _1080_typeString);
        _1079_typeI = (_1079_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1078_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1078_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      byte _1081_visibility;
      _1081_visibility = RAST.__default.PUB;
      Dafny.ISequence<Dafny.Rune> _1082_fnName;
      _1082_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _1083_typeParamsFiltered;
      _1083_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1084_typeParamI;
      _1084_typeParamI = BigInteger.Zero;
      while ((_1084_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1085_typeParam;
        _1085_typeParam = ((m).dtor_typeParams).Select(_1084_typeParamI);
        if (!((enclosingTypeParams).Contains(_1085_typeParam))) {
          _1083_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1083_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1085_typeParam));
        }
        _1084_typeParamI = (_1084_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1086_whereClauses;
      _1086_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1087_typeParams;
      _1087_typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      if ((new BigInteger((_1083_typeParamsFiltered).Count)).Sign == 1) {
        _1086_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1086_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1088_i;
        _1088_i = BigInteger.Zero;
        while ((_1088_i) < (new BigInteger((_1083_typeParamsFiltered).Count))) {
          if ((_1088_i).Sign == 1) {
            _1086_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1086_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1089_typeString;
          Dafny.ISequence<Dafny.Rune> _out86;
          _out86 = DCOMP.COMP.GenType((_1083_typeParamsFiltered).Select(_1088_i), false, false);
          _1089_typeString = _out86;
          _1087_typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1087_typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1089_typeString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1089_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"))));
          _1086_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1086_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1089_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1088_i = (_1088_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _1090_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1091_earlyReturn;
        _1091_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source39 = (m).dtor_outVars;
        if (_source39.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1092___mcc_h0 = _source39.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1093_outVars = _1092___mcc_h0;
          {
            _1091_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1094_outI;
            _1094_outI = BigInteger.Zero;
            while ((_1094_outI) < (new BigInteger((_1093_outVars).Count))) {
              if ((_1094_outI).Sign == 1) {
                _1091_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1091_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1095_outVar;
              _1095_outVar = (_1093_outVars).Select(_1094_outI);
              _1091_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1091_earlyReturn, DCOMP.__default.escapeIdent((_1095_outVar)));
              _1094_outI = (_1094_outI) + (BigInteger.One);
            }
            _1091_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1091_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        }
        Dafny.ISequence<Dafny.Rune> _1096_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1097___v15;
        Dafny.ISequence<Dafny.Rune> _out87;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1075_paramNames, true, _1091_earlyReturn, out _out87, out _out88);
        _1096_body = _out87;
        _1097___v15 = _out88;
        _1090_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1096_body));
      } else {
        _1090_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_1081_visibility, RAST.Fn.create(_1082_fnName, _1087_typeParams, _1074_params, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(_1078_retType)), _1086_whereClauses, _1090_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1098_declarations;
      _1098_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1099_i;
      _1099_i = BigInteger.Zero;
      while ((_1099_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1100_stmt;
        _1100_stmt = (stmts).Select(_1099_i);
        Dafny.ISequence<Dafny.Rune> _1101_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1102_recIdents;
        Dafny.ISequence<Dafny.Rune> _out89;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out90;
        DCOMP.COMP.GenStmt(_1100_stmt, selfIdent, @params, (isLast) && ((_1099_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out89, out _out90);
        _1101_stmtString = _out89;
        _1102_recIdents = _out90;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1102_recIdents, _1098_declarations));
        DAST._IStatement _source40 = _1100_stmt;
        if (_source40.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1103___mcc_h0 = _source40.dtor_name;
          DAST._IType _1104___mcc_h1 = _source40.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _1105___mcc_h2 = _source40.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1106_name = _1103___mcc_h0;
          {
            _1098_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1098_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1106_name));
          }
        } else if (_source40.is_Assign) {
          DAST._IAssignLhs _1107___mcc_h6 = _source40.dtor_lhs;
          DAST._IExpression _1108___mcc_h7 = _source40.dtor_value;
        } else if (_source40.is_If) {
          DAST._IExpression _1109___mcc_h10 = _source40.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1110___mcc_h11 = _source40.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1111___mcc_h12 = _source40.dtor_els;
        } else if (_source40.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1112___mcc_h16 = _source40.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1113___mcc_h17 = _source40.dtor_body;
        } else if (_source40.is_While) {
          DAST._IExpression _1114___mcc_h20 = _source40.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1115___mcc_h21 = _source40.dtor_body;
        } else if (_source40.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1116___mcc_h24 = _source40.dtor_boundName;
          DAST._IType _1117___mcc_h25 = _source40.dtor_boundType;
          DAST._IExpression _1118___mcc_h26 = _source40.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1119___mcc_h27 = _source40.dtor_body;
        } else if (_source40.is_Call) {
          DAST._IExpression _1120___mcc_h32 = _source40.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1121___mcc_h33 = _source40.dtor_name;
          Dafny.ISequence<DAST._IType> _1122___mcc_h34 = _source40.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1123___mcc_h35 = _source40.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1124___mcc_h36 = _source40.dtor_outs;
        } else if (_source40.is_Return) {
          DAST._IExpression _1125___mcc_h42 = _source40.dtor_expr;
        } else if (_source40.is_EarlyReturn) {
        } else if (_source40.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1126___mcc_h44 = _source40.dtor_toLabel;
        } else if (_source40.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1127___mcc_h46 = _source40.dtor_body;
        } else if (_source40.is_JumpTailCallStart) {
        } else if (_source40.is_Halt) {
        } else {
          DAST._IExpression _1128___mcc_h48 = _source40.dtor_Print_a0;
        }
        if ((_1099_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1101_stmtString);
        _1099_i = (_1099_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source41 = lhs;
      if (_source41.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1129___mcc_h0 = _source41.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source42 = _1129___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1130___mcc_h1 = _source42;
        Dafny.ISequence<Dafny.Rune> _1131_id = _1130___mcc_h1;
        {
          if ((@params).Contains(_1131_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1131_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1131_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1131_id);
          needsIIFE = false;
        }
      } else if (_source41.is_Select) {
        DAST._IExpression _1132___mcc_h2 = _source41.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1133___mcc_h3 = _source41.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1134_field = _1133___mcc_h3;
        DAST._IExpression _1135_on = _1132___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1136_onExpr;
          bool _1137_onOwned;
          bool _1138_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1139_recIdents;
          Dafny.ISequence<Dafny.Rune> _out91;
          bool _out92;
          bool _out93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
          DCOMP.COMP.GenExpr(_1135_on, selfIdent, @params, false, out _out91, out _out92, out _out93, out _out94);
          _1136_onExpr = _out91;
          _1137_onOwned = _out92;
          _1138_onErased = _out93;
          _1139_recIdents = _out94;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1136_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1134_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1139_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1140___mcc_h4 = _source41.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1141___mcc_h5 = _source41.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1142_indices = _1141___mcc_h5;
        DAST._IExpression _1143_on = _1140___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1144_onExpr;
          bool _1145_onOwned;
          bool _1146_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1147_recIdents;
          Dafny.ISequence<Dafny.Rune> _out95;
          bool _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenExpr(_1143_on, selfIdent, @params, false, out _out95, out _out96, out _out97, out _out98);
          _1144_onExpr = _out95;
          _1145_onOwned = _out96;
          _1146_onErased = _out97;
          _1147_recIdents = _out98;
          readIdents = _1147_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1148_i;
          _1148_i = BigInteger.Zero;
          while ((_1148_i) < (new BigInteger((_1142_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1149_idx;
            bool _1150___v19;
            bool _1151_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1152_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out99;
            bool _out100;
            bool _out101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
            DCOMP.COMP.GenExpr((_1142_indices).Select(_1148_i), selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
            _1149_idx = _out99;
            _1150___v19 = _out100;
            _1151_idxErased = _out101;
            _1152_recIdentsIdx = _out102;
            if (!(_1151_idxErased)) {
              _1149_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1149_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_1148_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1149_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1152_recIdentsIdx);
            _1148_i = (_1148_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1144_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1148_i = BigInteger.Zero;
          while ((_1148_i) < (new BigInteger((_1142_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_1148_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1148_i = (_1148_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source43 = stmt;
      if (_source43.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1153___mcc_h0 = _source43.dtor_name;
        DAST._IType _1154___mcc_h1 = _source43.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _1155___mcc_h2 = _source43.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source44 = _1155___mcc_h2;
        if (_source44.is_None) {
          DAST._IType _1156_typ = _1154___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1157_name = _1153___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1158_typeString;
            Dafny.ISequence<Dafny.Rune> _out103;
            _out103 = DCOMP.COMP.GenType(_1156_typ, true, false);
            _1158_typeString = _out103;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1157_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1158_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _1159___mcc_h3 = _source44.dtor_value;
          DAST._IExpression _1160_expression = _1159___mcc_h3;
          DAST._IType _1161_typ = _1154___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1162_name = _1153___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1163_typeString;
            Dafny.ISequence<Dafny.Rune> _out104;
            _out104 = DCOMP.COMP.GenType(_1161_typ, true, false);
            _1163_typeString = _out104;
            Dafny.ISequence<Dafny.Rune> _1164_expr;
            bool _1165___v20;
            bool _1166_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1167_recIdents;
            Dafny.ISequence<Dafny.Rune> _out105;
            bool _out106;
            bool _out107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
            DCOMP.COMP.GenExpr(_1160_expression, selfIdent, @params, true, out _out105, out _out106, out _out107, out _out108);
            _1164_expr = _out105;
            _1165___v20 = _out106;
            _1166_recErased = _out107;
            _1167_recIdents = _out108;
            if (!(_1166_recErased)) {
              _1164_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1164_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1164_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1163_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1164_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1162_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1163_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1164_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1167_recIdents;
          }
        }
      } else if (_source43.is_Assign) {
        DAST._IAssignLhs _1168___mcc_h4 = _source43.dtor_lhs;
        DAST._IExpression _1169___mcc_h5 = _source43.dtor_value;
        DAST._IExpression _1170_expression = _1169___mcc_h5;
        DAST._IAssignLhs _1171_lhs = _1168___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1172_lhsGen;
          bool _1173_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1174_recIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenAssignLhs(_1171_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out109, out _out110, out _out111);
          _1172_lhsGen = _out109;
          _1173_needsIIFE = _out110;
          _1174_recIdents = _out111;
          Dafny.ISequence<Dafny.Rune> _1175_exprGen;
          bool _1176___v21;
          bool _1177_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1178_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out112;
          bool _out113;
          bool _out114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out115;
          DCOMP.COMP.GenExpr(_1170_expression, selfIdent, @params, true, out _out112, out _out113, out _out114, out _out115);
          _1175_exprGen = _out112;
          _1176___v21 = _out113;
          _1177_exprErased = _out114;
          _1178_exprIdents = _out115;
          if (!(_1177_exprErased)) {
            _1175_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1175_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1175_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1175_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1173_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1175_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1172_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1172_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1175_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1174_recIdents, _1178_exprIdents);
        }
      } else if (_source43.is_If) {
        DAST._IExpression _1179___mcc_h6 = _source43.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1180___mcc_h7 = _source43.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1181___mcc_h8 = _source43.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1182_els = _1181___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1183_thn = _1180___mcc_h7;
        DAST._IExpression _1184_cond = _1179___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1185_condString;
          bool _1186___v22;
          bool _1187_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1188_recIdents;
          Dafny.ISequence<Dafny.Rune> _out116;
          bool _out117;
          bool _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_1184_cond, selfIdent, @params, true, out _out116, out _out117, out _out118, out _out119);
          _1185_condString = _out116;
          _1186___v22 = _out117;
          _1187_condErased = _out118;
          _1188_recIdents = _out119;
          if (!(_1187_condErased)) {
            _1185_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1185_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1188_recIdents;
          Dafny.ISequence<Dafny.Rune> _1189_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1190_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out121;
          DCOMP.COMP.GenStmts(_1183_thn, selfIdent, @params, isLast, earlyReturn, out _out120, out _out121);
          _1189_thnString = _out120;
          _1190_thnIdents = _out121;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1190_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1191_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1192_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
          DCOMP.COMP.GenStmts(_1182_els, selfIdent, @params, isLast, earlyReturn, out _out122, out _out123);
          _1191_elsString = _out122;
          _1192_elsIdents = _out123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1192_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1185_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1189_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1191_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1193___mcc_h9 = _source43.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1194___mcc_h10 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1195_body = _1194___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1196_lbl = _1193___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1197_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1198_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_1195_body, selfIdent, @params, isLast, earlyReturn, out _out124, out _out125);
          _1197_bodyString = _out124;
          _1198_bodyIdents = _out125;
          readIdents = _1198_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1196_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1197_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_While) {
        DAST._IExpression _1199___mcc_h11 = _source43.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1200___mcc_h12 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1201_body = _1200___mcc_h12;
        DAST._IExpression _1202_cond = _1199___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1203_condString;
          bool _1204___v23;
          bool _1205_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1206_recIdents;
          Dafny.ISequence<Dafny.Rune> _out126;
          bool _out127;
          bool _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_1202_cond, selfIdent, @params, true, out _out126, out _out127, out _out128, out _out129);
          _1203_condString = _out126;
          _1204___v23 = _out127;
          _1205_condErased = _out128;
          _1206_recIdents = _out129;
          if (!(_1205_condErased)) {
            _1203_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1203_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1206_recIdents;
          Dafny.ISequence<Dafny.Rune> _1207_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1208_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenStmts(_1201_body, selfIdent, @params, false, earlyReturn, out _out130, out _out131);
          _1207_bodyString = _out130;
          _1208_bodyIdents = _out131;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1208_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1203_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1207_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1209___mcc_h13 = _source43.dtor_boundName;
        DAST._IType _1210___mcc_h14 = _source43.dtor_boundType;
        DAST._IExpression _1211___mcc_h15 = _source43.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1212___mcc_h16 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1213_body = _1212___mcc_h16;
        DAST._IExpression _1214_over = _1211___mcc_h15;
        DAST._IType _1215_boundType = _1210___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1216_boundName = _1209___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1217_overString;
          bool _1218___v24;
          bool _1219_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1220_recIdents;
          Dafny.ISequence<Dafny.Rune> _out132;
          bool _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP.COMP.GenExpr(_1214_over, selfIdent, @params, true, out _out132, out _out133, out _out134, out _out135);
          _1217_overString = _out132;
          _1218___v24 = _out133;
          _1219_overErased = _out134;
          _1220_recIdents = _out135;
          Dafny.ISequence<Dafny.Rune> _1221_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out136;
          _out136 = DCOMP.COMP.GenType(_1215_boundType, false, false);
          _1221_boundTypeStr = _out136;
          readIdents = _1220_recIdents;
          Dafny.ISequence<Dafny.Rune> _1222_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1223_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenStmts(_1213_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1216_boundName)), false, earlyReturn, out _out137, out _out138);
          _1222_bodyString = _out137;
          _1223_bodyIdents = _out138;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1223_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1216_boundName));
          Dafny.ISequence<Dafny.Rune> _1224_unerasedIter;
          _1224_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1219_overErased) {
            _1224_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1221_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1224_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1217_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1216_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1224_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1222_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_Call) {
        DAST._IExpression _1225___mcc_h17 = _source43.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1226___mcc_h18 = _source43.dtor_name;
        Dafny.ISequence<DAST._IType> _1227___mcc_h19 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1228___mcc_h20 = _source43.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1229___mcc_h21 = _source43.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1230_maybeOutVars = _1229___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1231_args = _1228___mcc_h20;
        Dafny.ISequence<DAST._IType> _1232_typeArgs = _1227___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1233_name = _1226___mcc_h18;
        DAST._IExpression _1234_on = _1225___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1235_typeArgString;
          _1235_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1232_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1236_typeI;
            _1236_typeI = BigInteger.Zero;
            _1235_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1236_typeI) < (new BigInteger((_1232_typeArgs).Count))) {
              if ((_1236_typeI).Sign == 1) {
                _1235_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1235_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1237_typeString;
              Dafny.ISequence<Dafny.Rune> _out139;
              _out139 = DCOMP.COMP.GenType((_1232_typeArgs).Select(_1236_typeI), false, false);
              _1237_typeString = _out139;
              _1235_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1235_typeArgString, _1237_typeString);
              _1236_typeI = (_1236_typeI) + (BigInteger.One);
            }
            _1235_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1235_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1238_argString;
          _1238_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1239_i;
          _1239_i = BigInteger.Zero;
          while ((_1239_i) < (new BigInteger((_1231_args).Count))) {
            if ((_1239_i).Sign == 1) {
              _1238_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1238_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1240_argExpr;
            bool _1241_isOwned;
            bool _1242_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1243_argIdents;
            Dafny.ISequence<Dafny.Rune> _out140;
            bool _out141;
            bool _out142;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
            DCOMP.COMP.GenExpr((_1231_args).Select(_1239_i), selfIdent, @params, false, out _out140, out _out141, out _out142, out _out143);
            _1240_argExpr = _out140;
            _1241_isOwned = _out141;
            _1242_argErased = _out142;
            _1243_argIdents = _out143;
            if (_1241_isOwned) {
              _1240_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1240_argExpr);
            }
            _1238_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1238_argString, _1240_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1243_argIdents);
            _1239_i = (_1239_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1244_enclosingString;
          bool _1245___v25;
          bool _1246___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1247_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          bool _out145;
          bool _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenExpr(_1234_on, selfIdent, @params, false, out _out144, out _out145, out _out146, out _out147);
          _1244_enclosingString = _out144;
          _1245___v25 = _out145;
          _1246___v26 = _out146;
          _1247_enclosingIdents = _out147;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1247_enclosingIdents);
          DAST._IExpression _source45 = _1234_on;
          if (_source45.is_Literal) {
            DAST._ILiteral _1248___mcc_h26 = _source45.dtor_Literal_a0;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1249___mcc_h28 = _source45.dtor_Ident_a0;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1250___mcc_h30 = _source45.dtor_Companion_a0;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1244_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source45.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1251___mcc_h32 = _source45.dtor_Tuple_a0;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1252___mcc_h34 = _source45.dtor_path;
            Dafny.ISequence<DAST._IType> _1253___mcc_h35 = _source45.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1254___mcc_h36 = _source45.dtor_args;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1255___mcc_h40 = _source45.dtor_dims;
            DAST._IType _1256___mcc_h41 = _source45.dtor_typ;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1257___mcc_h44 = _source45.dtor_path;
            Dafny.ISequence<DAST._IType> _1258___mcc_h45 = _source45.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1259___mcc_h46 = _source45.dtor_variant;
            bool _1260___mcc_h47 = _source45.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1261___mcc_h48 = _source45.dtor_contents;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Convert) {
            DAST._IExpression _1262___mcc_h54 = _source45.dtor_value;
            DAST._IType _1263___mcc_h55 = _source45.dtor_from;
            DAST._IType _1264___mcc_h56 = _source45.dtor_typ;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SeqConstruct) {
            DAST._IExpression _1265___mcc_h60 = _source45.dtor_length;
            DAST._IExpression _1266___mcc_h61 = _source45.dtor_elem;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1267___mcc_h64 = _source45.dtor_elements;
            DAST._IType _1268___mcc_h65 = _source45.dtor_typ;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1269___mcc_h68 = _source45.dtor_elements;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1270___mcc_h70 = _source45.dtor_mapElems;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_This) {
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Ite) {
            DAST._IExpression _1271___mcc_h72 = _source45.dtor_cond;
            DAST._IExpression _1272___mcc_h73 = _source45.dtor_thn;
            DAST._IExpression _1273___mcc_h74 = _source45.dtor_els;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_UnOp) {
            DAST._IUnaryOp _1274___mcc_h78 = _source45.dtor_unOp;
            DAST._IExpression _1275___mcc_h79 = _source45.dtor_expr;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_BinOp) {
            DAST._IBinOp _1276___mcc_h82 = _source45.dtor_op;
            DAST._IExpression _1277___mcc_h83 = _source45.dtor_left;
            DAST._IExpression _1278___mcc_h84 = _source45.dtor_right;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_ArrayLen) {
            DAST._IExpression _1279___mcc_h88 = _source45.dtor_expr;
            BigInteger _1280___mcc_h89 = _source45.dtor_dim;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Select) {
            DAST._IExpression _1281___mcc_h92 = _source45.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1282___mcc_h93 = _source45.dtor_field;
            bool _1283___mcc_h94 = _source45.dtor_isConstant;
            bool _1284___mcc_h95 = _source45.dtor_onDatatype;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SelectFn) {
            DAST._IExpression _1285___mcc_h100 = _source45.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1286___mcc_h101 = _source45.dtor_field;
            bool _1287___mcc_h102 = _source45.dtor_onDatatype;
            bool _1288___mcc_h103 = _source45.dtor_isStatic;
            BigInteger _1289___mcc_h104 = _source45.dtor_arity;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Index) {
            DAST._IExpression _1290___mcc_h110 = _source45.dtor_expr;
            DAST._ICollKind _1291___mcc_h111 = _source45.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1292___mcc_h112 = _source45.dtor_indices;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_IndexRange) {
            DAST._IExpression _1293___mcc_h116 = _source45.dtor_expr;
            bool _1294___mcc_h117 = _source45.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _1295___mcc_h118 = _source45.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _1296___mcc_h119 = _source45.dtor_high;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_TupleSelect) {
            DAST._IExpression _1297___mcc_h124 = _source45.dtor_expr;
            BigInteger _1298___mcc_h125 = _source45.dtor_index;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Call) {
            DAST._IExpression _1299___mcc_h128 = _source45.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1300___mcc_h129 = _source45.dtor_name;
            Dafny.ISequence<DAST._IType> _1301___mcc_h130 = _source45.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1302___mcc_h131 = _source45.dtor_args;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1303___mcc_h136 = _source45.dtor_params;
            DAST._IType _1304___mcc_h137 = _source45.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1305___mcc_h138 = _source45.dtor_body;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1306___mcc_h142 = _source45.dtor_values;
            DAST._IType _1307___mcc_h143 = _source45.dtor_retType;
            DAST._IExpression _1308___mcc_h144 = _source45.dtor_expr;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1309___mcc_h148 = _source45.dtor_name;
            DAST._IType _1310___mcc_h149 = _source45.dtor_typ;
            DAST._IExpression _1311___mcc_h150 = _source45.dtor_value;
            DAST._IExpression _1312___mcc_h151 = _source45.dtor_iifeBody;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Apply) {
            DAST._IExpression _1313___mcc_h156 = _source45.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1314___mcc_h157 = _source45.dtor_args;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_TypeTest) {
            DAST._IExpression _1315___mcc_h160 = _source45.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1316___mcc_h161 = _source45.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1317___mcc_h162 = _source45.dtor_variant;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_InitializationValue) {
            DAST._IType _1318___mcc_h166 = _source45.dtor_typ;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_BoolBoundedPool) {
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SetBoundedPool) {
            DAST._IExpression _1319___mcc_h168 = _source45.dtor_of;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SeqBoundedPool) {
            DAST._IExpression _1320___mcc_h170 = _source45.dtor_of;
            bool _1321___mcc_h171 = _source45.dtor_includeDuplicates;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1322___mcc_h174 = _source45.dtor_lo;
            DAST._IExpression _1323___mcc_h175 = _source45.dtor_hi;
            {
              _1244_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1244_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1324_receiver;
          _1324_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source46 = _1230_maybeOutVars;
          if (_source46.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1325___mcc_h178 = _source46.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1326_outVars = _1325___mcc_h178;
            {
              if ((new BigInteger((_1326_outVars).Count)) > (BigInteger.One)) {
                _1324_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1327_outI;
              _1327_outI = BigInteger.Zero;
              while ((_1327_outI) < (new BigInteger((_1326_outVars).Count))) {
                if ((_1327_outI).Sign == 1) {
                  _1324_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1324_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1328_outVar;
                _1328_outVar = (_1326_outVars).Select(_1327_outI);
                _1324_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1324_receiver, (_1328_outVar));
                _1327_outI = (_1327_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1326_outVars).Count)) > (BigInteger.One)) {
                _1324_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1324_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1324_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1324_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1244_enclosingString), DCOMP.__default.escapeIdent(_1233_name)), _1235_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1238_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source43.is_Return) {
        DAST._IExpression _1329___mcc_h22 = _source43.dtor_expr;
        DAST._IExpression _1330_expr = _1329___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1331_exprString;
          bool _1332___v29;
          bool _1333_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1334_recIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          bool _out149;
          bool _out150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out151;
          DCOMP.COMP.GenExpr(_1330_expr, selfIdent, @params, true, out _out148, out _out149, out _out150, out _out151);
          _1331_exprString = _out148;
          _1332___v29 = _out149;
          _1333_recErased = _out150;
          _1334_recIdents = _out151;
          _1331_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1331_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1334_recIdents;
          if (isLast) {
            generated = _1331_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1331_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source43.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source43.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1335___mcc_h23 = _source43.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1336_toLabel = _1335___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source47 = _1336_toLabel;
          if (_source47.is_None) {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _1337___mcc_h179 = _source47.dtor_value;
            Dafny.ISequence<Dafny.Rune> _1338_lbl = _1337___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1338_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source43.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1339___mcc_h24 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1340_body = _1339___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1341_paramI;
          _1341_paramI = BigInteger.Zero;
          while ((_1341_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1342_param;
            _1342_param = (@params).Select(_1341_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1342_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1342_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1341_paramI = (_1341_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1343_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1344_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenStmts(_1340_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out152, out _out153);
          _1343_bodyString = _out152;
          _1344_bodyIdents = _out153;
          readIdents = _1344_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1343_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source43.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1345___mcc_h25 = _source43.dtor_Print_a0;
        DAST._IExpression _1346_e = _1345___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1347_printedExpr;
          bool _1348_isOwned;
          bool _1349___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1350_recIdents;
          Dafny.ISequence<Dafny.Rune> _out154;
          bool _out155;
          bool _out156;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out157;
          DCOMP.COMP.GenExpr(_1346_e, selfIdent, @params, false, out _out154, out _out155, out _out156, out _out157);
          _1347_printedExpr = _out154;
          _1348_isOwned = _out155;
          _1349___v30 = _out156;
          _1350_recIdents = _out157;
          if (_1348_isOwned) {
            _1347_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1347_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1347_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1350_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source48 = e;
      if (_source48.is_Literal) {
        DAST._ILiteral _1351___mcc_h0 = _source48.dtor_Literal_a0;
        DAST._ILiteral _source49 = _1351___mcc_h0;
        if (_source49.is_BoolLiteral) {
          bool _1352___mcc_h1 = _source49.dtor_BoolLiteral_a0;
          if ((_1352___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source49.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1353___mcc_h2 = _source49.dtor_IntLiteral_a0;
          DAST._IType _1354___mcc_h3 = _source49.dtor_IntLiteral_a1;
          DAST._IType _1355_t = _1354___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1356_i = _1353___mcc_h2;
          {
            DAST._IType _source50 = _1355_t;
            if (_source50.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1357___mcc_h237 = _source50.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1358___mcc_h238 = _source50.dtor_typeArgs;
              DAST._IResolvedType _1359___mcc_h239 = _source50.dtor_resolved;
              DAST._IType _1360_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1361_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_1360_o, false, false);
                _1361_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1361_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Nullable) {
              DAST._IType _1362___mcc_h243 = _source50.dtor_Nullable_a0;
              DAST._IType _1363_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1364_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_1363_o, false, false);
                _1364_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1364_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1365___mcc_h245 = _source50.dtor_Tuple_a0;
              DAST._IType _1366_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1367_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_1366_o, false, false);
                _1367_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1367_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Array) {
              DAST._IType _1368___mcc_h247 = _source50.dtor_element;
              BigInteger _1369___mcc_h248 = _source50.dtor_dims;
              DAST._IType _1370_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1371_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_1370_o, false, false);
                _1371_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1371_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Seq) {
              DAST._IType _1372___mcc_h251 = _source50.dtor_element;
              DAST._IType _1373_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1374_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_1373_o, false, false);
                _1374_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1374_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Set) {
              DAST._IType _1375___mcc_h253 = _source50.dtor_element;
              DAST._IType _1376_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1377_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_1376_o, false, false);
                _1377_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1377_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Multiset) {
              DAST._IType _1378___mcc_h255 = _source50.dtor_element;
              DAST._IType _1379_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1380_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_1379_o, false, false);
                _1380_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1380_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Map) {
              DAST._IType _1381___mcc_h257 = _source50.dtor_key;
              DAST._IType _1382___mcc_h258 = _source50.dtor_value;
              DAST._IType _1383_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1384_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_1383_o, false, false);
                _1384_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1384_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1385___mcc_h261 = _source50.dtor_args;
              DAST._IType _1386___mcc_h262 = _source50.dtor_result;
              DAST._IType _1387_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1388_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_1387_o, false, false);
                _1388_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1388_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Primitive) {
              DAST._IPrimitive _1389___mcc_h265 = _source50.dtor_Primitive_a0;
              DAST._IPrimitive _source51 = _1389___mcc_h265;
              if (_source51.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source51.is_Real) {
                DAST._IType _1390_o = _1355_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1391_genType;
                  Dafny.ISequence<Dafny.Rune> _out167;
                  _out167 = DCOMP.COMP.GenType(_1390_o, false, false);
                  _1391_genType = _out167;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1391_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source51.is_String) {
                DAST._IType _1392_o = _1355_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1393_genType;
                  Dafny.ISequence<Dafny.Rune> _out168;
                  _out168 = DCOMP.COMP.GenType(_1392_o, false, false);
                  _1393_genType = _out168;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1393_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source51.is_Bool) {
                DAST._IType _1394_o = _1355_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1395_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_1394_o, false, false);
                  _1395_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1395_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1396_o = _1355_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1397_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_1396_o, false, false);
                  _1397_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1397_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source50.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1398___mcc_h267 = _source50.dtor_Passthrough_a0;
              DAST._IType _1399_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1400_genType;
                Dafny.ISequence<Dafny.Rune> _out171;
                _out171 = DCOMP.COMP.GenType(_1399_o, false, false);
                _1400_genType = _out171;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1400_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1401___mcc_h269 = _source50.dtor_TypeArg_a0;
              DAST._IType _1402_o = _1355_t;
              {
                Dafny.ISequence<Dafny.Rune> _1403_genType;
                Dafny.ISequence<Dafny.Rune> _out172;
                _out172 = DCOMP.COMP.GenType(_1402_o, false, false);
                _1403_genType = _out172;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1403_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source49.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1404___mcc_h4 = _source49.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1405___mcc_h5 = _source49.dtor_DecLiteral_a1;
          DAST._IType _1406___mcc_h6 = _source49.dtor_DecLiteral_a2;
          DAST._IType _1407_t = _1406___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1408_d = _1405___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1409_n = _1404___mcc_h4;
          {
            DAST._IType _source52 = _1407_t;
            if (_source52.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1410___mcc_h271 = _source52.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1411___mcc_h272 = _source52.dtor_typeArgs;
              DAST._IResolvedType _1412___mcc_h273 = _source52.dtor_resolved;
              DAST._IType _1413_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1414_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_1413_o, false, false);
                _1414_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1414_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Nullable) {
              DAST._IType _1415___mcc_h277 = _source52.dtor_Nullable_a0;
              DAST._IType _1416_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1417_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_1416_o, false, false);
                _1417_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1417_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1418___mcc_h279 = _source52.dtor_Tuple_a0;
              DAST._IType _1419_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1420_genType;
                Dafny.ISequence<Dafny.Rune> _out175;
                _out175 = DCOMP.COMP.GenType(_1419_o, false, false);
                _1420_genType = _out175;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1420_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Array) {
              DAST._IType _1421___mcc_h281 = _source52.dtor_element;
              BigInteger _1422___mcc_h282 = _source52.dtor_dims;
              DAST._IType _1423_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1424_genType;
                Dafny.ISequence<Dafny.Rune> _out176;
                _out176 = DCOMP.COMP.GenType(_1423_o, false, false);
                _1424_genType = _out176;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1424_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Seq) {
              DAST._IType _1425___mcc_h285 = _source52.dtor_element;
              DAST._IType _1426_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1427_genType;
                Dafny.ISequence<Dafny.Rune> _out177;
                _out177 = DCOMP.COMP.GenType(_1426_o, false, false);
                _1427_genType = _out177;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1427_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Set) {
              DAST._IType _1428___mcc_h287 = _source52.dtor_element;
              DAST._IType _1429_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1430_genType;
                Dafny.ISequence<Dafny.Rune> _out178;
                _out178 = DCOMP.COMP.GenType(_1429_o, false, false);
                _1430_genType = _out178;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1430_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Multiset) {
              DAST._IType _1431___mcc_h289 = _source52.dtor_element;
              DAST._IType _1432_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1433_genType;
                Dafny.ISequence<Dafny.Rune> _out179;
                _out179 = DCOMP.COMP.GenType(_1432_o, false, false);
                _1433_genType = _out179;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1433_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Map) {
              DAST._IType _1434___mcc_h291 = _source52.dtor_key;
              DAST._IType _1435___mcc_h292 = _source52.dtor_value;
              DAST._IType _1436_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1437_genType;
                Dafny.ISequence<Dafny.Rune> _out180;
                _out180 = DCOMP.COMP.GenType(_1436_o, false, false);
                _1437_genType = _out180;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1437_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1438___mcc_h295 = _source52.dtor_args;
              DAST._IType _1439___mcc_h296 = _source52.dtor_result;
              DAST._IType _1440_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1441_genType;
                Dafny.ISequence<Dafny.Rune> _out181;
                _out181 = DCOMP.COMP.GenType(_1440_o, false, false);
                _1441_genType = _out181;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1441_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Primitive) {
              DAST._IPrimitive _1442___mcc_h299 = _source52.dtor_Primitive_a0;
              DAST._IPrimitive _source53 = _1442___mcc_h299;
              if (_source53.is_Int) {
                DAST._IType _1443_o = _1407_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1444_genType;
                  Dafny.ISequence<Dafny.Rune> _out182;
                  _out182 = DCOMP.COMP.GenType(_1443_o, false, false);
                  _1444_genType = _out182;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1444_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source53.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source53.is_String) {
                DAST._IType _1445_o = _1407_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1446_genType;
                  Dafny.ISequence<Dafny.Rune> _out183;
                  _out183 = DCOMP.COMP.GenType(_1445_o, false, false);
                  _1446_genType = _out183;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1446_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source53.is_Bool) {
                DAST._IType _1447_o = _1407_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1448_genType;
                  Dafny.ISequence<Dafny.Rune> _out184;
                  _out184 = DCOMP.COMP.GenType(_1447_o, false, false);
                  _1448_genType = _out184;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1448_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1449_o = _1407_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1450_genType;
                  Dafny.ISequence<Dafny.Rune> _out185;
                  _out185 = DCOMP.COMP.GenType(_1449_o, false, false);
                  _1450_genType = _out185;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1450_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source52.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1451___mcc_h301 = _source52.dtor_Passthrough_a0;
              DAST._IType _1452_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1453_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1452_o, false, false);
                _1453_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1453_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1454___mcc_h303 = _source52.dtor_TypeArg_a0;
              DAST._IType _1455_o = _1407_t;
              {
                Dafny.ISequence<Dafny.Rune> _1456_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1455_o, false, false);
                _1456_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1409_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1408_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1456_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source49.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1457___mcc_h7 = _source49.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1458_l = _1457___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1458_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source49.is_CharLiteral) {
          Dafny.Rune _1459___mcc_h8 = _source49.dtor_CharLiteral_a0;
          Dafny.Rune _1460_c = _1459___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), Std.Strings.__default.OfNat(new BigInteger((_1460_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1461___mcc_h9 = _source49.dtor_Null_a0;
          DAST._IType _1462_tpe = _1461___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1463_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out188;
            _out188 = DCOMP.COMP.GenType(_1462_tpe, false, false);
            _1463_tpeGen = _out188;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1463_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source48.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1464___mcc_h10 = _source48.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1465_name = _1464___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1465_name);
          if (!((@params).Contains(_1465_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1465_name);
        }
      } else if (_source48.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1466___mcc_h11 = _source48.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1467_path = _1466___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out189;
          _out189 = DCOMP.COMP.GenPath(_1467_path);
          s = _out189;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source48.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1468___mcc_h12 = _source48.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1469_values = _1468___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1470_i;
          _1470_i = BigInteger.Zero;
          while ((_1470_i) < (new BigInteger((_1469_values).Count))) {
            if ((_1470_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1471_recursiveGen;
            bool _1472___v31;
            bool _1473_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1474_recIdents;
            Dafny.ISequence<Dafny.Rune> _out190;
            bool _out191;
            bool _out192;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out193;
            DCOMP.COMP.GenExpr((_1469_values).Select(_1470_i), selfIdent, @params, true, out _out190, out _out191, out _out192, out _out193);
            _1471_recursiveGen = _out190;
            _1472___v31 = _out191;
            _1473_isErased = _out192;
            _1474_recIdents = _out193;
            if (_1473_isErased) {
              _1471_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1474_recIdents);
            _1470_i = (_1470_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1475___mcc_h13 = _source48.dtor_path;
        Dafny.ISequence<DAST._IType> _1476___mcc_h14 = _source48.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1477___mcc_h15 = _source48.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1478_args = _1477___mcc_h15;
        Dafny.ISequence<DAST._IType> _1479_typeArgs = _1476___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1480_path = _1475___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1481_path;
          Dafny.ISequence<Dafny.Rune> _out194;
          _out194 = DCOMP.COMP.GenPath(_1480_path);
          _1481_path = _out194;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1481_path);
          if ((new BigInteger((_1479_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1482_i;
            _1482_i = BigInteger.Zero;
            while ((_1482_i) < (new BigInteger((_1479_typeArgs).Count))) {
              if ((_1482_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1483_typeString;
              Dafny.ISequence<Dafny.Rune> _out195;
              _out195 = DCOMP.COMP.GenType((_1479_typeArgs).Select(_1482_i), false, false);
              _1483_typeString = _out195;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1483_typeString);
              _1482_i = (_1482_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1484_i;
          _1484_i = BigInteger.Zero;
          while ((_1484_i) < (new BigInteger((_1478_args).Count))) {
            if ((_1484_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1485_recursiveGen;
            bool _1486___v32;
            bool _1487_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1488_recIdents;
            Dafny.ISequence<Dafny.Rune> _out196;
            bool _out197;
            bool _out198;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
            DCOMP.COMP.GenExpr((_1478_args).Select(_1484_i), selfIdent, @params, true, out _out196, out _out197, out _out198, out _out199);
            _1485_recursiveGen = _out196;
            _1486___v32 = _out197;
            _1487_isErased = _out198;
            _1488_recIdents = _out199;
            if (_1487_isErased) {
              _1485_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1485_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1485_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1488_recIdents);
            _1484_i = (_1484_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source48.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1489___mcc_h16 = _source48.dtor_dims;
        DAST._IType _1490___mcc_h17 = _source48.dtor_typ;
        DAST._IType _1491_typ = _1490___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1492_dims = _1489___mcc_h16;
        {
          BigInteger _1493_i;
          _1493_i = (new BigInteger((_1492_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1494_genTyp;
          Dafny.ISequence<Dafny.Rune> _out200;
          _out200 = DCOMP.COMP.GenType(_1491_typ, false, false);
          _1494_genTyp = _out200;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1494_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1493_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1495_recursiveGen;
            bool _1496___v33;
            bool _1497_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1498_recIdents;
            Dafny.ISequence<Dafny.Rune> _out201;
            bool _out202;
            bool _out203;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
            DCOMP.COMP.GenExpr((_1492_dims).Select(_1493_i), selfIdent, @params, true, out _out201, out _out202, out _out203, out _out204);
            _1495_recursiveGen = _out201;
            _1496___v33 = _out202;
            _1497_isErased = _out203;
            _1498_recIdents = _out204;
            if (!(_1497_isErased)) {
              _1495_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1495_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1495_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1498_recIdents);
            _1493_i = (_1493_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1499___mcc_h18 = _source48.dtor_path;
        Dafny.ISequence<DAST._IType> _1500___mcc_h19 = _source48.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1501___mcc_h20 = _source48.dtor_variant;
        bool _1502___mcc_h21 = _source48.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1503___mcc_h22 = _source48.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1504_values = _1503___mcc_h22;
        bool _1505_isCo = _1502___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1506_variant = _1501___mcc_h20;
        Dafny.ISequence<DAST._IType> _1507_typeArgs = _1500___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1508_path = _1499___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1509_path;
          Dafny.ISequence<Dafny.Rune> _out205;
          _out205 = DCOMP.COMP.GenPath(_1508_path);
          _1509_path = _out205;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1509_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1507_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1510_i;
            _1510_i = BigInteger.Zero;
            while ((_1510_i) < (new BigInteger((_1507_typeArgs).Count))) {
              if ((_1510_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1511_typeString;
              Dafny.ISequence<Dafny.Rune> _out206;
              _out206 = DCOMP.COMP.GenType((_1507_typeArgs).Select(_1510_i), false, false);
              _1511_typeString = _out206;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1511_typeString);
              _1510_i = (_1510_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1506_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1512_i;
          _1512_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1512_i) < (new BigInteger((_1504_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs41 = (_1504_values).Select(_1512_i);
            Dafny.ISequence<Dafny.Rune> _1513_name = _let_tmp_rhs41.dtor__0;
            DAST._IExpression _1514_value = _let_tmp_rhs41.dtor__1;
            if ((_1512_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1505_isCo) {
              Dafny.ISequence<Dafny.Rune> _1515_recursiveGen;
              bool _1516___v34;
              bool _1517_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1518_recIdents;
              Dafny.ISequence<Dafny.Rune> _out207;
              bool _out208;
              bool _out209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out210;
              DCOMP.COMP.GenExpr(_1514_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out207, out _out208, out _out209, out _out210);
              _1515_recursiveGen = _out207;
              _1516___v34 = _out208;
              _1517_isErased = _out209;
              _1518_recIdents = _out210;
              if (!(_1517_isErased)) {
                _1515_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1515_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1518_recIdents);
              Dafny.ISequence<Dafny.Rune> _1519_allReadCloned;
              _1519_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1518_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1520_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_1518_recIdents).Elements) {
                  _1520_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_1518_recIdents).Contains(_1520_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1845)");
              after__ASSIGN_SUCH_THAT_2:;
                _1519_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1519_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1520_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1520_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1518_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1518_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1520_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1513_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1519_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1521_recursiveGen;
              bool _1522___v35;
              bool _1523_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1524_recIdents;
              Dafny.ISequence<Dafny.Rune> _out211;
              bool _out212;
              bool _out213;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
              DCOMP.COMP.GenExpr(_1514_value, selfIdent, @params, true, out _out211, out _out212, out _out213, out _out214);
              _1521_recursiveGen = _out211;
              _1522___v35 = _out212;
              _1523_isErased = _out213;
              _1524_recIdents = _out214;
              if (!(_1523_isErased)) {
                _1521_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1521_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1513_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1524_recIdents);
            }
            _1512_i = (_1512_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_Convert) {
        DAST._IExpression _1525___mcc_h23 = _source48.dtor_value;
        DAST._IType _1526___mcc_h24 = _source48.dtor_from;
        DAST._IType _1527___mcc_h25 = _source48.dtor_typ;
        DAST._IType _1528_toTpe = _1527___mcc_h25;
        DAST._IType _1529_fromTpe = _1526___mcc_h24;
        DAST._IExpression _1530_expr = _1525___mcc_h23;
        {
          if (object.Equals(_1529_fromTpe, _1528_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1531_recursiveGen;
            bool _1532_recOwned;
            bool _1533_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1534_recIdents;
            Dafny.ISequence<Dafny.Rune> _out215;
            bool _out216;
            bool _out217;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
            DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217, out _out218);
            _1531_recursiveGen = _out215;
            _1532_recOwned = _out216;
            _1533_recErased = _out217;
            _1534_recIdents = _out218;
            s = _1531_recursiveGen;
            isOwned = _1532_recOwned;
            isErased = _1533_recErased;
            readIdents = _1534_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source54 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1529_fromTpe, _1528_toTpe);
            DAST._IType _1535___mcc_h305 = _source54.dtor__0;
            DAST._IType _1536___mcc_h306 = _source54.dtor__1;
            DAST._IType _source55 = _1535___mcc_h305;
            if (_source55.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1537___mcc_h309 = _source55.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1538___mcc_h310 = _source55.dtor_typeArgs;
              DAST._IResolvedType _1539___mcc_h311 = _source55.dtor_resolved;
              DAST._IResolvedType _source56 = _1539___mcc_h311;
              if (_source56.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1540___mcc_h321 = _source56.dtor_path;
                DAST._IType _source57 = _1536___mcc_h306;
                if (_source57.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1541___mcc_h325 = _source57.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1542___mcc_h326 = _source57.dtor_typeArgs;
                  DAST._IResolvedType _1543___mcc_h327 = _source57.dtor_resolved;
                  DAST._IResolvedType _source58 = _1543___mcc_h327;
                  if (_source58.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1544___mcc_h331 = _source58.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1545_recursiveGen;
                      bool _1546_recOwned;
                      bool _1547_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1548_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out219;
                      bool _out220;
                      bool _out221;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                      _1545_recursiveGen = _out219;
                      _1546_recOwned = _out220;
                      _1547_recErased = _out221;
                      _1548_recIdents = _out222;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1545_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1546_recOwned;
                      isErased = _1547_recErased;
                      readIdents = _1548_recIdents;
                    }
                  } else if (_source58.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1549___mcc_h333 = _source58.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1550_recursiveGen;
                      bool _1551_recOwned;
                      bool _1552_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1553_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out223;
                      bool _out224;
                      bool _out225;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                      _1550_recursiveGen = _out223;
                      _1551_recOwned = _out224;
                      _1552_recErased = _out225;
                      _1553_recIdents = _out226;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1551_recOwned;
                      isErased = _1552_recErased;
                      readIdents = _1553_recIdents;
                    }
                  } else {
                    DAST._IType _1554___mcc_h335 = _source58.dtor_Newtype_a0;
                    DAST._IType _1555_b = _1554___mcc_h335;
                    {
                      if (object.Equals(_1529_fromTpe, _1555_b)) {
                        Dafny.ISequence<Dafny.Rune> _1556_recursiveGen;
                        bool _1557_recOwned;
                        bool _1558_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1559_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out227;
                        bool _out228;
                        bool _out229;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                        _1556_recursiveGen = _out227;
                        _1557_recOwned = _out228;
                        _1558_recErased = _out229;
                        _1559_recIdents = _out230;
                        Dafny.ISequence<Dafny.Rune> _1560_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out231;
                        _out231 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _1560_rhsType = _out231;
                        Dafny.ISequence<Dafny.Rune> _1561_uneraseFn;
                        _1561_uneraseFn = ((_1557_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1560_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1561_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1557_recOwned;
                        isErased = false;
                        readIdents = _1559_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out232;
                        bool _out233;
                        bool _out234;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1555_b), _1555_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out232, out _out233, out _out234, out _out235);
                        s = _out232;
                        isOwned = _out233;
                        isErased = _out234;
                        readIdents = _out235;
                      }
                    }
                  }
                } else if (_source57.is_Nullable) {
                  DAST._IType _1562___mcc_h337 = _source57.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1563_recursiveGen;
                    bool _1564_recOwned;
                    bool _1565_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1566_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out236;
                    bool _out237;
                    bool _out238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238, out _out239);
                    _1563_recursiveGen = _out236;
                    _1564_recOwned = _out237;
                    _1565_recErased = _out238;
                    _1566_recIdents = _out239;
                    if (!(_1564_recOwned)) {
                      _1563_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1563_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1563_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1565_recErased;
                    readIdents = _1566_recIdents;
                  }
                } else if (_source57.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1567___mcc_h339 = _source57.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1568_recursiveGen;
                    bool _1569_recOwned;
                    bool _1570_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1571_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out240;
                    bool _out241;
                    bool _out242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out243;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out240, out _out241, out _out242, out _out243);
                    _1568_recursiveGen = _out240;
                    _1569_recOwned = _out241;
                    _1570_recErased = _out242;
                    _1571_recIdents = _out243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1569_recOwned;
                    isErased = _1570_recErased;
                    readIdents = _1571_recIdents;
                  }
                } else if (_source57.is_Array) {
                  DAST._IType _1572___mcc_h341 = _source57.dtor_element;
                  BigInteger _1573___mcc_h342 = _source57.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1574_recursiveGen;
                    bool _1575_recOwned;
                    bool _1576_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1577_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out244;
                    bool _out245;
                    bool _out246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out244, out _out245, out _out246, out _out247);
                    _1574_recursiveGen = _out244;
                    _1575_recOwned = _out245;
                    _1576_recErased = _out246;
                    _1577_recIdents = _out247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1574_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1575_recOwned;
                    isErased = _1576_recErased;
                    readIdents = _1577_recIdents;
                  }
                } else if (_source57.is_Seq) {
                  DAST._IType _1578___mcc_h345 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1579_recursiveGen;
                    bool _1580_recOwned;
                    bool _1581_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1582_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out248;
                    bool _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out248, out _out249, out _out250, out _out251);
                    _1579_recursiveGen = _out248;
                    _1580_recOwned = _out249;
                    _1581_recErased = _out250;
                    _1582_recIdents = _out251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1580_recOwned;
                    isErased = _1581_recErased;
                    readIdents = _1582_recIdents;
                  }
                } else if (_source57.is_Set) {
                  DAST._IType _1583___mcc_h347 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1584_recursiveGen;
                    bool _1585_recOwned;
                    bool _1586_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1587_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out252;
                    bool _out253;
                    bool _out254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254, out _out255);
                    _1584_recursiveGen = _out252;
                    _1585_recOwned = _out253;
                    _1586_recErased = _out254;
                    _1587_recIdents = _out255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1584_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1585_recOwned;
                    isErased = _1586_recErased;
                    readIdents = _1587_recIdents;
                  }
                } else if (_source57.is_Multiset) {
                  DAST._IType _1588___mcc_h349 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1589_recursiveGen;
                    bool _1590_recOwned;
                    bool _1591_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1592_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out256;
                    bool _out257;
                    bool _out258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                    _1589_recursiveGen = _out256;
                    _1590_recOwned = _out257;
                    _1591_recErased = _out258;
                    _1592_recIdents = _out259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1590_recOwned;
                    isErased = _1591_recErased;
                    readIdents = _1592_recIdents;
                  }
                } else if (_source57.is_Map) {
                  DAST._IType _1593___mcc_h351 = _source57.dtor_key;
                  DAST._IType _1594___mcc_h352 = _source57.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1595_recursiveGen;
                    bool _1596_recOwned;
                    bool _1597_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1598_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _1595_recursiveGen = _out260;
                    _1596_recOwned = _out261;
                    _1597_recErased = _out262;
                    _1598_recIdents = _out263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1595_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1596_recOwned;
                    isErased = _1597_recErased;
                    readIdents = _1598_recIdents;
                  }
                } else if (_source57.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1599___mcc_h355 = _source57.dtor_args;
                  DAST._IType _1600___mcc_h356 = _source57.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1601_recursiveGen;
                    bool _1602_recOwned;
                    bool _1603_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1604_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _1601_recursiveGen = _out264;
                    _1602_recOwned = _out265;
                    _1603_recErased = _out266;
                    _1604_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1601_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1602_recOwned;
                    isErased = _1603_recErased;
                    readIdents = _1604_recIdents;
                  }
                } else if (_source57.is_Primitive) {
                  DAST._IPrimitive _1605___mcc_h359 = _source57.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1606_recursiveGen;
                    bool _1607_recOwned;
                    bool _1608_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1609_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _1606_recursiveGen = _out268;
                    _1607_recOwned = _out269;
                    _1608_recErased = _out270;
                    _1609_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1606_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1607_recOwned;
                    isErased = _1608_recErased;
                    readIdents = _1609_recIdents;
                  }
                } else if (_source57.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1610___mcc_h361 = _source57.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1611_recursiveGen;
                    bool _1612_recOwned;
                    bool _1613_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1614_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _1611_recursiveGen = _out272;
                    _1612_recOwned = _out273;
                    _1613_recErased = _out274;
                    _1614_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1612_recOwned;
                    isErased = _1613_recErased;
                    readIdents = _1614_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1615___mcc_h363 = _source57.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1616_recursiveGen;
                    bool _1617_recOwned;
                    bool _1618_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1619_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out276;
                    bool _out277;
                    bool _out278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                    _1616_recursiveGen = _out276;
                    _1617_recOwned = _out277;
                    _1618_recErased = _out278;
                    _1619_recIdents = _out279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1616_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1617_recOwned;
                    isErased = _1618_recErased;
                    readIdents = _1619_recIdents;
                  }
                }
              } else if (_source56.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1620___mcc_h365 = _source56.dtor_path;
                DAST._IType _source59 = _1536___mcc_h306;
                if (_source59.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1621___mcc_h369 = _source59.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1622___mcc_h370 = _source59.dtor_typeArgs;
                  DAST._IResolvedType _1623___mcc_h371 = _source59.dtor_resolved;
                  DAST._IResolvedType _source60 = _1623___mcc_h371;
                  if (_source60.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1624___mcc_h375 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1625_recursiveGen;
                      bool _1626_recOwned;
                      bool _1627_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1628_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out280;
                      bool _out281;
                      bool _out282;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                      _1625_recursiveGen = _out280;
                      _1626_recOwned = _out281;
                      _1627_recErased = _out282;
                      _1628_recIdents = _out283;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1626_recOwned;
                      isErased = _1627_recErased;
                      readIdents = _1628_recIdents;
                    }
                  } else if (_source60.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1629___mcc_h377 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1630_recursiveGen;
                      bool _1631_recOwned;
                      bool _1632_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1633_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out284;
                      bool _out285;
                      bool _out286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                      _1630_recursiveGen = _out284;
                      _1631_recOwned = _out285;
                      _1632_recErased = _out286;
                      _1633_recIdents = _out287;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1631_recOwned;
                      isErased = _1632_recErased;
                      readIdents = _1633_recIdents;
                    }
                  } else {
                    DAST._IType _1634___mcc_h379 = _source60.dtor_Newtype_a0;
                    DAST._IType _1635_b = _1634___mcc_h379;
                    {
                      if (object.Equals(_1529_fromTpe, _1635_b)) {
                        Dafny.ISequence<Dafny.Rune> _1636_recursiveGen;
                        bool _1637_recOwned;
                        bool _1638_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1639_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out288;
                        bool _out289;
                        bool _out290;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                        _1636_recursiveGen = _out288;
                        _1637_recOwned = _out289;
                        _1638_recErased = _out290;
                        _1639_recIdents = _out291;
                        Dafny.ISequence<Dafny.Rune> _1640_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out292;
                        _out292 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _1640_rhsType = _out292;
                        Dafny.ISequence<Dafny.Rune> _1641_uneraseFn;
                        _1641_uneraseFn = ((_1637_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1640_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1641_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1636_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1637_recOwned;
                        isErased = false;
                        readIdents = _1639_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out293;
                        bool _out294;
                        bool _out295;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1635_b), _1635_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                        s = _out293;
                        isOwned = _out294;
                        isErased = _out295;
                        readIdents = _out296;
                      }
                    }
                  }
                } else if (_source59.is_Nullable) {
                  DAST._IType _1642___mcc_h381 = _source59.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1643_recursiveGen;
                    bool _1644_recOwned;
                    bool _1645_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1646_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _1643_recursiveGen = _out297;
                    _1644_recOwned = _out298;
                    _1645_recErased = _out299;
                    _1646_recIdents = _out300;
                    if (!(_1644_recOwned)) {
                      _1643_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1643_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1645_recErased;
                    readIdents = _1646_recIdents;
                  }
                } else if (_source59.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1647___mcc_h383 = _source59.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1648_recursiveGen;
                    bool _1649_recOwned;
                    bool _1650_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1651_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _1648_recursiveGen = _out301;
                    _1649_recOwned = _out302;
                    _1650_recErased = _out303;
                    _1651_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1648_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1649_recOwned;
                    isErased = _1650_recErased;
                    readIdents = _1651_recIdents;
                  }
                } else if (_source59.is_Array) {
                  DAST._IType _1652___mcc_h385 = _source59.dtor_element;
                  BigInteger _1653___mcc_h386 = _source59.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1654_recursiveGen;
                    bool _1655_recOwned;
                    bool _1656_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1657_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out305;
                    bool _out306;
                    bool _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                    _1654_recursiveGen = _out305;
                    _1655_recOwned = _out306;
                    _1656_recErased = _out307;
                    _1657_recIdents = _out308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1654_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1655_recOwned;
                    isErased = _1656_recErased;
                    readIdents = _1657_recIdents;
                  }
                } else if (_source59.is_Seq) {
                  DAST._IType _1658___mcc_h389 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1659_recursiveGen;
                    bool _1660_recOwned;
                    bool _1661_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1662_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out309;
                    bool _out310;
                    bool _out311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                    _1659_recursiveGen = _out309;
                    _1660_recOwned = _out310;
                    _1661_recErased = _out311;
                    _1662_recIdents = _out312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1659_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1660_recOwned;
                    isErased = _1661_recErased;
                    readIdents = _1662_recIdents;
                  }
                } else if (_source59.is_Set) {
                  DAST._IType _1663___mcc_h391 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1664_recursiveGen;
                    bool _1665_recOwned;
                    bool _1666_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1667_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out313;
                    bool _out314;
                    bool _out315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                    _1664_recursiveGen = _out313;
                    _1665_recOwned = _out314;
                    _1666_recErased = _out315;
                    _1667_recIdents = _out316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1664_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1665_recOwned;
                    isErased = _1666_recErased;
                    readIdents = _1667_recIdents;
                  }
                } else if (_source59.is_Multiset) {
                  DAST._IType _1668___mcc_h393 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1669_recursiveGen;
                    bool _1670_recOwned;
                    bool _1671_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1672_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out317;
                    bool _out318;
                    bool _out319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                    _1669_recursiveGen = _out317;
                    _1670_recOwned = _out318;
                    _1671_recErased = _out319;
                    _1672_recIdents = _out320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1669_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1670_recOwned;
                    isErased = _1671_recErased;
                    readIdents = _1672_recIdents;
                  }
                } else if (_source59.is_Map) {
                  DAST._IType _1673___mcc_h395 = _source59.dtor_key;
                  DAST._IType _1674___mcc_h396 = _source59.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1675_recursiveGen;
                    bool _1676_recOwned;
                    bool _1677_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1678_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _1675_recursiveGen = _out321;
                    _1676_recOwned = _out322;
                    _1677_recErased = _out323;
                    _1678_recIdents = _out324;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1675_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1676_recOwned;
                    isErased = _1677_recErased;
                    readIdents = _1678_recIdents;
                  }
                } else if (_source59.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1679___mcc_h399 = _source59.dtor_args;
                  DAST._IType _1680___mcc_h400 = _source59.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1681_recursiveGen;
                    bool _1682_recOwned;
                    bool _1683_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1684_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _1681_recursiveGen = _out325;
                    _1682_recOwned = _out326;
                    _1683_recErased = _out327;
                    _1684_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1681_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1682_recOwned;
                    isErased = _1683_recErased;
                    readIdents = _1684_recIdents;
                  }
                } else if (_source59.is_Primitive) {
                  DAST._IPrimitive _1685___mcc_h403 = _source59.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1686_recursiveGen;
                    bool _1687_recOwned;
                    bool _1688_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1689_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _1686_recursiveGen = _out329;
                    _1687_recOwned = _out330;
                    _1688_recErased = _out331;
                    _1689_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1687_recOwned;
                    isErased = _1688_recErased;
                    readIdents = _1689_recIdents;
                  }
                } else if (_source59.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1690___mcc_h405 = _source59.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1691_recursiveGen;
                    bool _1692_recOwned;
                    bool _1693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _1691_recursiveGen = _out333;
                    _1692_recOwned = _out334;
                    _1693_recErased = _out335;
                    _1694_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1692_recOwned;
                    isErased = _1693_recErased;
                    readIdents = _1694_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1695___mcc_h407 = _source59.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1696_recursiveGen;
                    bool _1697_recOwned;
                    bool _1698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out337;
                    bool _out338;
                    bool _out339;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                    _1696_recursiveGen = _out337;
                    _1697_recOwned = _out338;
                    _1698_recErased = _out339;
                    _1699_recIdents = _out340;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1697_recOwned;
                    isErased = _1698_recErased;
                    readIdents = _1699_recIdents;
                  }
                }
              } else {
                DAST._IType _1700___mcc_h409 = _source56.dtor_Newtype_a0;
                DAST._IType _source61 = _1536___mcc_h306;
                if (_source61.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1701___mcc_h413 = _source61.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1702___mcc_h414 = _source61.dtor_typeArgs;
                  DAST._IResolvedType _1703___mcc_h415 = _source61.dtor_resolved;
                  DAST._IResolvedType _source62 = _1703___mcc_h415;
                  if (_source62.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1704___mcc_h422 = _source62.dtor_path;
                    DAST._IType _1705_b = _1700___mcc_h409;
                    {
                      if (object.Equals(_1705_b, _1528_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1706_recursiveGen;
                        bool _1707_recOwned;
                        bool _1708_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1709_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out341;
                        bool _out342;
                        bool _out343;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                        _1706_recursiveGen = _out341;
                        _1707_recOwned = _out342;
                        _1708_recErased = _out343;
                        _1709_recIdents = _out344;
                        Dafny.ISequence<Dafny.Rune> _1710_uneraseFn;
                        _1710_uneraseFn = ((_1707_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1710_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1706_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1707_recOwned;
                        isErased = true;
                        readIdents = _1709_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out345;
                        bool _out346;
                        bool _out347;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1705_b), _1705_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                        s = _out345;
                        isOwned = _out346;
                        isErased = _out347;
                        readIdents = _out348;
                      }
                    }
                  } else if (_source62.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1711___mcc_h425 = _source62.dtor_path;
                    DAST._IType _1712_b = _1700___mcc_h409;
                    {
                      if (object.Equals(_1712_b, _1528_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1713_recursiveGen;
                        bool _1714_recOwned;
                        bool _1715_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1716_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        _1713_recursiveGen = _out349;
                        _1714_recOwned = _out350;
                        _1715_recErased = _out351;
                        _1716_recIdents = _out352;
                        Dafny.ISequence<Dafny.Rune> _1717_uneraseFn;
                        _1717_uneraseFn = ((_1714_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1717_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1713_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1714_recOwned;
                        isErased = true;
                        readIdents = _1716_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out353;
                        bool _out354;
                        bool _out355;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1712_b), _1712_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                        s = _out353;
                        isOwned = _out354;
                        isErased = _out355;
                        readIdents = _out356;
                      }
                    }
                  } else {
                    DAST._IType _1718___mcc_h428 = _source62.dtor_Newtype_a0;
                    DAST._IType _1719_b = _1718___mcc_h428;
                    {
                      if (object.Equals(_1529_fromTpe, _1719_b)) {
                        Dafny.ISequence<Dafny.Rune> _1720_recursiveGen;
                        bool _1721_recOwned;
                        bool _1722_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1723_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out357;
                        bool _out358;
                        bool _out359;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                        _1720_recursiveGen = _out357;
                        _1721_recOwned = _out358;
                        _1722_recErased = _out359;
                        _1723_recIdents = _out360;
                        Dafny.ISequence<Dafny.Rune> _1724_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out361;
                        _out361 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _1724_rhsType = _out361;
                        Dafny.ISequence<Dafny.Rune> _1725_uneraseFn;
                        _1725_uneraseFn = ((_1721_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1724_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1725_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1721_recOwned;
                        isErased = false;
                        readIdents = _1723_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out362;
                        bool _out363;
                        bool _out364;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1719_b), _1719_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                        s = _out362;
                        isOwned = _out363;
                        isErased = _out364;
                        readIdents = _out365;
                      }
                    }
                  }
                } else if (_source61.is_Nullable) {
                  DAST._IType _1726___mcc_h431 = _source61.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1727_recursiveGen;
                    bool _1728_recOwned;
                    bool _1729_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1730_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out366;
                    bool _out367;
                    bool _out368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                    _1727_recursiveGen = _out366;
                    _1728_recOwned = _out367;
                    _1729_recErased = _out368;
                    _1730_recIdents = _out369;
                    if (!(_1728_recOwned)) {
                      _1727_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1727_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1729_recErased;
                    readIdents = _1730_recIdents;
                  }
                } else if (_source61.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1731___mcc_h434 = _source61.dtor_Tuple_a0;
                  DAST._IType _1732_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1732_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1733_recursiveGen;
                      bool _1734_recOwned;
                      bool _1735_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1736_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out370;
                      bool _out371;
                      bool _out372;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                      _1733_recursiveGen = _out370;
                      _1734_recOwned = _out371;
                      _1735_recErased = _out372;
                      _1736_recIdents = _out373;
                      Dafny.ISequence<Dafny.Rune> _1737_uneraseFn;
                      _1737_uneraseFn = ((_1734_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1737_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1733_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1734_recOwned;
                      isErased = true;
                      readIdents = _1736_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out374;
                      bool _out375;
                      bool _out376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1732_b), _1732_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                      s = _out374;
                      isOwned = _out375;
                      isErased = _out376;
                      readIdents = _out377;
                    }
                  }
                } else if (_source61.is_Array) {
                  DAST._IType _1738___mcc_h437 = _source61.dtor_element;
                  BigInteger _1739___mcc_h438 = _source61.dtor_dims;
                  DAST._IType _1740_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1740_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1741_recursiveGen;
                      bool _1742_recOwned;
                      bool _1743_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1744_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out378;
                      bool _out379;
                      bool _out380;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                      _1741_recursiveGen = _out378;
                      _1742_recOwned = _out379;
                      _1743_recErased = _out380;
                      _1744_recIdents = _out381;
                      Dafny.ISequence<Dafny.Rune> _1745_uneraseFn;
                      _1745_uneraseFn = ((_1742_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1745_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1742_recOwned;
                      isErased = true;
                      readIdents = _1744_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out382;
                      bool _out383;
                      bool _out384;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1740_b), _1740_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                      s = _out382;
                      isOwned = _out383;
                      isErased = _out384;
                      readIdents = _out385;
                    }
                  }
                } else if (_source61.is_Seq) {
                  DAST._IType _1746___mcc_h443 = _source61.dtor_element;
                  DAST._IType _1747_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1747_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1748_recursiveGen;
                      bool _1749_recOwned;
                      bool _1750_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1751_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out386;
                      bool _out387;
                      bool _out388;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                      _1748_recursiveGen = _out386;
                      _1749_recOwned = _out387;
                      _1750_recErased = _out388;
                      _1751_recIdents = _out389;
                      Dafny.ISequence<Dafny.Rune> _1752_uneraseFn;
                      _1752_uneraseFn = ((_1749_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1752_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1749_recOwned;
                      isErased = true;
                      readIdents = _1751_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out390;
                      bool _out391;
                      bool _out392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1747_b), _1747_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                      s = _out390;
                      isOwned = _out391;
                      isErased = _out392;
                      readIdents = _out393;
                    }
                  }
                } else if (_source61.is_Set) {
                  DAST._IType _1753___mcc_h446 = _source61.dtor_element;
                  DAST._IType _1754_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1754_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1755_recursiveGen;
                      bool _1756_recOwned;
                      bool _1757_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1758_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      _1755_recursiveGen = _out394;
                      _1756_recOwned = _out395;
                      _1757_recErased = _out396;
                      _1758_recIdents = _out397;
                      Dafny.ISequence<Dafny.Rune> _1759_uneraseFn;
                      _1759_uneraseFn = ((_1756_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1759_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1756_recOwned;
                      isErased = true;
                      readIdents = _1758_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1754_b), _1754_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      s = _out398;
                      isOwned = _out399;
                      isErased = _out400;
                      readIdents = _out401;
                    }
                  }
                } else if (_source61.is_Multiset) {
                  DAST._IType _1760___mcc_h449 = _source61.dtor_element;
                  DAST._IType _1761_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1761_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1762_recursiveGen;
                      bool _1763_recOwned;
                      bool _1764_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1765_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      _1762_recursiveGen = _out402;
                      _1763_recOwned = _out403;
                      _1764_recErased = _out404;
                      _1765_recIdents = _out405;
                      Dafny.ISequence<Dafny.Rune> _1766_uneraseFn;
                      _1766_uneraseFn = ((_1763_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1766_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1762_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1763_recOwned;
                      isErased = true;
                      readIdents = _1765_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1761_b), _1761_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      s = _out406;
                      isOwned = _out407;
                      isErased = _out408;
                      readIdents = _out409;
                    }
                  }
                } else if (_source61.is_Map) {
                  DAST._IType _1767___mcc_h452 = _source61.dtor_key;
                  DAST._IType _1768___mcc_h453 = _source61.dtor_value;
                  DAST._IType _1769_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1769_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1770_recursiveGen;
                      bool _1771_recOwned;
                      bool _1772_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1773_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      _1770_recursiveGen = _out410;
                      _1771_recOwned = _out411;
                      _1772_recErased = _out412;
                      _1773_recIdents = _out413;
                      Dafny.ISequence<Dafny.Rune> _1774_uneraseFn;
                      _1774_uneraseFn = ((_1771_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1774_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1771_recOwned;
                      isErased = true;
                      readIdents = _1773_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1769_b), _1769_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      s = _out414;
                      isOwned = _out415;
                      isErased = _out416;
                      readIdents = _out417;
                    }
                  }
                } else if (_source61.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1775___mcc_h458 = _source61.dtor_args;
                  DAST._IType _1776___mcc_h459 = _source61.dtor_result;
                  DAST._IType _1777_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1777_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1778_recursiveGen;
                      bool _1779_recOwned;
                      bool _1780_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1781_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      _1778_recursiveGen = _out418;
                      _1779_recOwned = _out419;
                      _1780_recErased = _out420;
                      _1781_recIdents = _out421;
                      Dafny.ISequence<Dafny.Rune> _1782_uneraseFn;
                      _1782_uneraseFn = ((_1779_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1782_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1779_recOwned;
                      isErased = true;
                      readIdents = _1781_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1777_b), _1777_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      s = _out422;
                      isOwned = _out423;
                      isErased = _out424;
                      readIdents = _out425;
                    }
                  }
                } else if (_source61.is_Primitive) {
                  DAST._IPrimitive _1783___mcc_h464 = _source61.dtor_Primitive_a0;
                  DAST._IType _1784_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1784_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1785_recursiveGen;
                      bool _1786_recOwned;
                      bool _1787_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1788_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      _1785_recursiveGen = _out426;
                      _1786_recOwned = _out427;
                      _1787_recErased = _out428;
                      _1788_recIdents = _out429;
                      Dafny.ISequence<Dafny.Rune> _1789_uneraseFn;
                      _1789_uneraseFn = ((_1786_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1789_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1785_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1786_recOwned;
                      isErased = true;
                      readIdents = _1788_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1784_b), _1784_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      s = _out430;
                      isOwned = _out431;
                      isErased = _out432;
                      readIdents = _out433;
                    }
                  }
                } else if (_source61.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1790___mcc_h467 = _source61.dtor_Passthrough_a0;
                  DAST._IType _1791_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1791_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1792_recursiveGen;
                      bool _1793_recOwned;
                      bool _1794_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1795_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      _1792_recursiveGen = _out434;
                      _1793_recOwned = _out435;
                      _1794_recErased = _out436;
                      _1795_recIdents = _out437;
                      Dafny.ISequence<Dafny.Rune> _1796_uneraseFn;
                      _1796_uneraseFn = ((_1793_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1796_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1793_recOwned;
                      isErased = true;
                      readIdents = _1795_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1791_b), _1791_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      s = _out438;
                      isOwned = _out439;
                      isErased = _out440;
                      readIdents = _out441;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1797___mcc_h470 = _source61.dtor_TypeArg_a0;
                  DAST._IType _1798_b = _1700___mcc_h409;
                  {
                    if (object.Equals(_1798_b, _1528_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1799_recursiveGen;
                      bool _1800_recOwned;
                      bool _1801_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1802_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      _1799_recursiveGen = _out442;
                      _1800_recOwned = _out443;
                      _1801_recErased = _out444;
                      _1802_recIdents = _out445;
                      Dafny.ISequence<Dafny.Rune> _1803_uneraseFn;
                      _1803_uneraseFn = ((_1800_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1803_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1800_recOwned;
                      isErased = true;
                      readIdents = _1802_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out446;
                      bool _out447;
                      bool _out448;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1798_b), _1798_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                      s = _out446;
                      isOwned = _out447;
                      isErased = _out448;
                      readIdents = _out449;
                    }
                  }
                }
              }
            } else if (_source55.is_Nullable) {
              DAST._IType _1804___mcc_h473 = _source55.dtor_Nullable_a0;
              DAST._IType _source63 = _1536___mcc_h306;
              if (_source63.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1805___mcc_h477 = _source63.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1806___mcc_h478 = _source63.dtor_typeArgs;
                DAST._IResolvedType _1807___mcc_h479 = _source63.dtor_resolved;
                DAST._IResolvedType _source64 = _1807___mcc_h479;
                if (_source64.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1808___mcc_h486 = _source64.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1809_recursiveGen;
                    bool _1810_recOwned;
                    bool _1811_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1812_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out450;
                    bool _out451;
                    bool _out452;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                    _1809_recursiveGen = _out450;
                    _1810_recOwned = _out451;
                    _1811_recErased = _out452;
                    _1812_recIdents = _out453;
                    if (!(_1810_recOwned)) {
                      _1809_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1809_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1809_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1810_recOwned;
                    isErased = _1811_recErased;
                    readIdents = _1812_recIdents;
                  }
                } else if (_source64.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1813___mcc_h489 = _source64.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1814_recursiveGen;
                    bool _1815_recOwned;
                    bool _1816_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1817_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out454;
                    bool _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                    _1814_recursiveGen = _out454;
                    _1815_recOwned = _out455;
                    _1816_recErased = _out456;
                    _1817_recIdents = _out457;
                    if (!(_1815_recOwned)) {
                      _1814_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1814_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1814_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1815_recOwned;
                    isErased = _1816_recErased;
                    readIdents = _1817_recIdents;
                  }
                } else {
                  DAST._IType _1818___mcc_h492 = _source64.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1819_recursiveGen;
                    bool _1820_recOwned;
                    bool _1821_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1822_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out458;
                    bool _out459;
                    bool _out460;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                    _1819_recursiveGen = _out458;
                    _1820_recOwned = _out459;
                    _1821_recErased = _out460;
                    _1822_recIdents = _out461;
                    if (!(_1820_recOwned)) {
                      _1819_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1819_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1819_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1820_recOwned;
                    isErased = _1821_recErased;
                    readIdents = _1822_recIdents;
                  }
                }
              } else if (_source63.is_Nullable) {
                DAST._IType _1823___mcc_h495 = _source63.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1824_recursiveGen;
                  bool _1825_recOwned;
                  bool _1826_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1827_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out462;
                  bool _out463;
                  bool _out464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                  _1824_recursiveGen = _out462;
                  _1825_recOwned = _out463;
                  _1826_recErased = _out464;
                  _1827_recIdents = _out465;
                  if (!(_1825_recOwned)) {
                    _1824_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1824_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1824_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1825_recOwned;
                  isErased = _1826_recErased;
                  readIdents = _1827_recIdents;
                }
              } else if (_source63.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1828___mcc_h498 = _source63.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1829_recursiveGen;
                  bool _1830_recOwned;
                  bool _1831_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1832_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out466;
                  bool _out467;
                  bool _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                  _1829_recursiveGen = _out466;
                  _1830_recOwned = _out467;
                  _1831_recErased = _out468;
                  _1832_recIdents = _out469;
                  if (!(_1830_recOwned)) {
                    _1829_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1829_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1829_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1830_recOwned;
                  isErased = _1831_recErased;
                  readIdents = _1832_recIdents;
                }
              } else if (_source63.is_Array) {
                DAST._IType _1833___mcc_h501 = _source63.dtor_element;
                BigInteger _1834___mcc_h502 = _source63.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1835_recursiveGen;
                  bool _1836_recOwned;
                  bool _1837_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1838_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out470;
                  bool _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                  _1835_recursiveGen = _out470;
                  _1836_recOwned = _out471;
                  _1837_recErased = _out472;
                  _1838_recIdents = _out473;
                  if (!(_1836_recOwned)) {
                    _1835_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1835_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1835_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1836_recOwned;
                  isErased = _1837_recErased;
                  readIdents = _1838_recIdents;
                }
              } else if (_source63.is_Seq) {
                DAST._IType _1839___mcc_h507 = _source63.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1840_recursiveGen;
                  bool _1841_recOwned;
                  bool _1842_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1843_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out474;
                  bool _out475;
                  bool _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                  _1840_recursiveGen = _out474;
                  _1841_recOwned = _out475;
                  _1842_recErased = _out476;
                  _1843_recIdents = _out477;
                  if (!(_1841_recOwned)) {
                    _1840_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1840_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1840_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1841_recOwned;
                  isErased = _1842_recErased;
                  readIdents = _1843_recIdents;
                }
              } else if (_source63.is_Set) {
                DAST._IType _1844___mcc_h510 = _source63.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1845_recursiveGen;
                  bool _1846_recOwned;
                  bool _1847_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1848_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out478;
                  bool _out479;
                  bool _out480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                  _1845_recursiveGen = _out478;
                  _1846_recOwned = _out479;
                  _1847_recErased = _out480;
                  _1848_recIdents = _out481;
                  if (!(_1846_recOwned)) {
                    _1845_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1845_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1845_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1846_recOwned;
                  isErased = _1847_recErased;
                  readIdents = _1848_recIdents;
                }
              } else if (_source63.is_Multiset) {
                DAST._IType _1849___mcc_h513 = _source63.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1850_recursiveGen;
                  bool _1851_recOwned;
                  bool _1852_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1853_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out482;
                  bool _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                  _1850_recursiveGen = _out482;
                  _1851_recOwned = _out483;
                  _1852_recErased = _out484;
                  _1853_recIdents = _out485;
                  if (!(_1851_recOwned)) {
                    _1850_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1850_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1850_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1851_recOwned;
                  isErased = _1852_recErased;
                  readIdents = _1853_recIdents;
                }
              } else if (_source63.is_Map) {
                DAST._IType _1854___mcc_h516 = _source63.dtor_key;
                DAST._IType _1855___mcc_h517 = _source63.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1856_recursiveGen;
                  bool _1857_recOwned;
                  bool _1858_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1859_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1856_recursiveGen = _out486;
                  _1857_recOwned = _out487;
                  _1858_recErased = _out488;
                  _1859_recIdents = _out489;
                  if (!(_1857_recOwned)) {
                    _1856_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1856_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1856_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1857_recOwned;
                  isErased = _1858_recErased;
                  readIdents = _1859_recIdents;
                }
              } else if (_source63.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1860___mcc_h522 = _source63.dtor_args;
                DAST._IType _1861___mcc_h523 = _source63.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1862_recursiveGen;
                  bool _1863_recOwned;
                  bool _1864_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1865_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1862_recursiveGen = _out490;
                  _1863_recOwned = _out491;
                  _1864_recErased = _out492;
                  _1865_recIdents = _out493;
                  if (!(_1863_recOwned)) {
                    _1862_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1862_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1862_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1863_recOwned;
                  isErased = _1864_recErased;
                  readIdents = _1865_recIdents;
                }
              } else if (_source63.is_Primitive) {
                DAST._IPrimitive _1866___mcc_h528 = _source63.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1867_recursiveGen;
                  bool _1868_recOwned;
                  bool _1869_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1870_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1867_recursiveGen = _out494;
                  _1868_recOwned = _out495;
                  _1869_recErased = _out496;
                  _1870_recIdents = _out497;
                  if (!(_1868_recOwned)) {
                    _1867_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1867_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1867_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1868_recOwned;
                  isErased = _1869_recErased;
                  readIdents = _1870_recIdents;
                }
              } else if (_source63.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1871___mcc_h531 = _source63.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1872_recursiveGen;
                  bool _1873_recOwned;
                  bool _1874_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1875_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1872_recursiveGen = _out498;
                  _1873_recOwned = _out499;
                  _1874_recErased = _out500;
                  _1875_recIdents = _out501;
                  if (!(_1873_recOwned)) {
                    _1872_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1873_recOwned;
                  isErased = _1874_recErased;
                  readIdents = _1875_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1876___mcc_h534 = _source63.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1877_recursiveGen;
                  bool _1878_recOwned;
                  bool _1879_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1880_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out502;
                  bool _out503;
                  bool _out504;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                  _1877_recursiveGen = _out502;
                  _1878_recOwned = _out503;
                  _1879_recErased = _out504;
                  _1880_recIdents = _out505;
                  if (!(_1878_recOwned)) {
                    _1877_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1877_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1877_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1878_recOwned;
                  isErased = _1879_recErased;
                  readIdents = _1880_recIdents;
                }
              }
            } else if (_source55.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1881___mcc_h537 = _source55.dtor_Tuple_a0;
              DAST._IType _source65 = _1536___mcc_h306;
              if (_source65.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1882___mcc_h541 = _source65.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1883___mcc_h542 = _source65.dtor_typeArgs;
                DAST._IResolvedType _1884___mcc_h543 = _source65.dtor_resolved;
                DAST._IResolvedType _source66 = _1884___mcc_h543;
                if (_source66.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1885___mcc_h547 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1886_recursiveGen;
                    bool _1887_recOwned;
                    bool _1888_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1889_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out506;
                    bool _out507;
                    bool _out508;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                    _1886_recursiveGen = _out506;
                    _1887_recOwned = _out507;
                    _1888_recErased = _out508;
                    _1889_recIdents = _out509;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1887_recOwned;
                    isErased = _1888_recErased;
                    readIdents = _1889_recIdents;
                  }
                } else if (_source66.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1890___mcc_h549 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1891_recursiveGen;
                    bool _1892_recOwned;
                    bool _1893_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1894_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out510;
                    bool _out511;
                    bool _out512;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                    _1891_recursiveGen = _out510;
                    _1892_recOwned = _out511;
                    _1893_recErased = _out512;
                    _1894_recIdents = _out513;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1892_recOwned;
                    isErased = _1893_recErased;
                    readIdents = _1894_recIdents;
                  }
                } else {
                  DAST._IType _1895___mcc_h551 = _source66.dtor_Newtype_a0;
                  DAST._IType _1896_b = _1895___mcc_h551;
                  {
                    if (object.Equals(_1529_fromTpe, _1896_b)) {
                      Dafny.ISequence<Dafny.Rune> _1897_recursiveGen;
                      bool _1898_recOwned;
                      bool _1899_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1900_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out514;
                      bool _out515;
                      bool _out516;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                      _1897_recursiveGen = _out514;
                      _1898_recOwned = _out515;
                      _1899_recErased = _out516;
                      _1900_recIdents = _out517;
                      Dafny.ISequence<Dafny.Rune> _1901_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out518;
                      _out518 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _1901_rhsType = _out518;
                      Dafny.ISequence<Dafny.Rune> _1902_uneraseFn;
                      _1902_uneraseFn = ((_1898_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1901_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1902_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1897_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1898_recOwned;
                      isErased = false;
                      readIdents = _1900_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out519;
                      bool _out520;
                      bool _out521;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1896_b), _1896_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                      s = _out519;
                      isOwned = _out520;
                      isErased = _out521;
                      readIdents = _out522;
                    }
                  }
                }
              } else if (_source65.is_Nullable) {
                DAST._IType _1903___mcc_h553 = _source65.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1904_recursiveGen;
                  bool _1905_recOwned;
                  bool _1906_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1907_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _1904_recursiveGen = _out523;
                  _1905_recOwned = _out524;
                  _1906_recErased = _out525;
                  _1907_recIdents = _out526;
                  if (!(_1905_recOwned)) {
                    _1904_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1904_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1906_recErased;
                  readIdents = _1907_recIdents;
                }
              } else if (_source65.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1908___mcc_h555 = _source65.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1909_recursiveGen;
                  bool _1910_recOwned;
                  bool _1911_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1912_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _1909_recursiveGen = _out527;
                  _1910_recOwned = _out528;
                  _1911_recErased = _out529;
                  _1912_recIdents = _out530;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1910_recOwned;
                  isErased = _1911_recErased;
                  readIdents = _1912_recIdents;
                }
              } else if (_source65.is_Array) {
                DAST._IType _1913___mcc_h557 = _source65.dtor_element;
                BigInteger _1914___mcc_h558 = _source65.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1915_recursiveGen;
                  bool _1916_recOwned;
                  bool _1917_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1918_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out531;
                  bool _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                  _1915_recursiveGen = _out531;
                  _1916_recOwned = _out532;
                  _1917_recErased = _out533;
                  _1918_recIdents = _out534;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1915_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1916_recOwned;
                  isErased = _1917_recErased;
                  readIdents = _1918_recIdents;
                }
              } else if (_source65.is_Seq) {
                DAST._IType _1919___mcc_h561 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1920_recursiveGen;
                  bool _1921_recOwned;
                  bool _1922_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1923_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out535;
                  bool _out536;
                  bool _out537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                  _1920_recursiveGen = _out535;
                  _1921_recOwned = _out536;
                  _1922_recErased = _out537;
                  _1923_recIdents = _out538;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1921_recOwned;
                  isErased = _1922_recErased;
                  readIdents = _1923_recIdents;
                }
              } else if (_source65.is_Set) {
                DAST._IType _1924___mcc_h563 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1925_recursiveGen;
                  bool _1926_recOwned;
                  bool _1927_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out539;
                  bool _out540;
                  bool _out541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                  _1925_recursiveGen = _out539;
                  _1926_recOwned = _out540;
                  _1927_recErased = _out541;
                  _1928_recIdents = _out542;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1926_recOwned;
                  isErased = _1927_recErased;
                  readIdents = _1928_recIdents;
                }
              } else if (_source65.is_Multiset) {
                DAST._IType _1929___mcc_h565 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1930_recursiveGen;
                  bool _1931_recOwned;
                  bool _1932_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out543;
                  bool _out544;
                  bool _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                  _1930_recursiveGen = _out543;
                  _1931_recOwned = _out544;
                  _1932_recErased = _out545;
                  _1933_recIdents = _out546;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1931_recOwned;
                  isErased = _1932_recErased;
                  readIdents = _1933_recIdents;
                }
              } else if (_source65.is_Map) {
                DAST._IType _1934___mcc_h567 = _source65.dtor_key;
                DAST._IType _1935___mcc_h568 = _source65.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1936_recursiveGen;
                  bool _1937_recOwned;
                  bool _1938_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1939_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _1936_recursiveGen = _out547;
                  _1937_recOwned = _out548;
                  _1938_recErased = _out549;
                  _1939_recIdents = _out550;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1936_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1937_recOwned;
                  isErased = _1938_recErased;
                  readIdents = _1939_recIdents;
                }
              } else if (_source65.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1940___mcc_h571 = _source65.dtor_args;
                DAST._IType _1941___mcc_h572 = _source65.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1942_recursiveGen;
                  bool _1943_recOwned;
                  bool _1944_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1945_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _1942_recursiveGen = _out551;
                  _1943_recOwned = _out552;
                  _1944_recErased = _out553;
                  _1945_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1942_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1943_recOwned;
                  isErased = _1944_recErased;
                  readIdents = _1945_recIdents;
                }
              } else if (_source65.is_Primitive) {
                DAST._IPrimitive _1946___mcc_h575 = _source65.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1947_recursiveGen;
                  bool _1948_recOwned;
                  bool _1949_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1950_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _1947_recursiveGen = _out555;
                  _1948_recOwned = _out556;
                  _1949_recErased = _out557;
                  _1950_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1947_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1948_recOwned;
                  isErased = _1949_recErased;
                  readIdents = _1950_recIdents;
                }
              } else if (_source65.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1951___mcc_h577 = _source65.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1952_recursiveGen;
                  bool _1953_recOwned;
                  bool _1954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _1952_recursiveGen = _out559;
                  _1953_recOwned = _out560;
                  _1954_recErased = _out561;
                  _1955_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1953_recOwned;
                  isErased = _1954_recErased;
                  readIdents = _1955_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1956___mcc_h579 = _source65.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1957_recursiveGen;
                  bool _1958_recOwned;
                  bool _1959_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out563;
                  bool _out564;
                  bool _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                  _1957_recursiveGen = _out563;
                  _1958_recOwned = _out564;
                  _1959_recErased = _out565;
                  _1960_recIdents = _out566;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1958_recOwned;
                  isErased = _1959_recErased;
                  readIdents = _1960_recIdents;
                }
              }
            } else if (_source55.is_Array) {
              DAST._IType _1961___mcc_h581 = _source55.dtor_element;
              BigInteger _1962___mcc_h582 = _source55.dtor_dims;
              DAST._IType _source67 = _1536___mcc_h306;
              if (_source67.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1963___mcc_h589 = _source67.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1964___mcc_h590 = _source67.dtor_typeArgs;
                DAST._IResolvedType _1965___mcc_h591 = _source67.dtor_resolved;
                DAST._IResolvedType _source68 = _1965___mcc_h591;
                if (_source68.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1966___mcc_h595 = _source68.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1967_recursiveGen;
                    bool _1968_recOwned;
                    bool _1969_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1970_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out567;
                    bool _out568;
                    bool _out569;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                    _1967_recursiveGen = _out567;
                    _1968_recOwned = _out568;
                    _1969_recErased = _out569;
                    _1970_recIdents = _out570;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1967_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1968_recOwned;
                    isErased = _1969_recErased;
                    readIdents = _1970_recIdents;
                  }
                } else if (_source68.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1971___mcc_h597 = _source68.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1972_recursiveGen;
                    bool _1973_recOwned;
                    bool _1974_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1975_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out571;
                    bool _out572;
                    bool _out573;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                    _1972_recursiveGen = _out571;
                    _1973_recOwned = _out572;
                    _1974_recErased = _out573;
                    _1975_recIdents = _out574;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1972_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1973_recOwned;
                    isErased = _1974_recErased;
                    readIdents = _1975_recIdents;
                  }
                } else {
                  DAST._IType _1976___mcc_h599 = _source68.dtor_Newtype_a0;
                  DAST._IType _1977_b = _1976___mcc_h599;
                  {
                    if (object.Equals(_1529_fromTpe, _1977_b)) {
                      Dafny.ISequence<Dafny.Rune> _1978_recursiveGen;
                      bool _1979_recOwned;
                      bool _1980_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out575;
                      bool _out576;
                      bool _out577;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                      _1978_recursiveGen = _out575;
                      _1979_recOwned = _out576;
                      _1980_recErased = _out577;
                      _1981_recIdents = _out578;
                      Dafny.ISequence<Dafny.Rune> _1982_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out579;
                      _out579 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _1982_rhsType = _out579;
                      Dafny.ISequence<Dafny.Rune> _1983_uneraseFn;
                      _1983_uneraseFn = ((_1979_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1982_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1983_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1979_recOwned;
                      isErased = false;
                      readIdents = _1981_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out580;
                      bool _out581;
                      bool _out582;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _1977_b), _1977_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                      s = _out580;
                      isOwned = _out581;
                      isErased = _out582;
                      readIdents = _out583;
                    }
                  }
                }
              } else if (_source67.is_Nullable) {
                DAST._IType _1984___mcc_h601 = _source67.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1985_recursiveGen;
                  bool _1986_recOwned;
                  bool _1987_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1988_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _1985_recursiveGen = _out584;
                  _1986_recOwned = _out585;
                  _1987_recErased = _out586;
                  _1988_recIdents = _out587;
                  if (!(_1986_recOwned)) {
                    _1985_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1985_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1987_recErased;
                  readIdents = _1988_recIdents;
                }
              } else if (_source67.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1989___mcc_h603 = _source67.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1990_recursiveGen;
                  bool _1991_recOwned;
                  bool _1992_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1993_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _1990_recursiveGen = _out588;
                  _1991_recOwned = _out589;
                  _1992_recErased = _out590;
                  _1993_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1990_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1991_recOwned;
                  isErased = _1992_recErased;
                  readIdents = _1993_recIdents;
                }
              } else if (_source67.is_Array) {
                DAST._IType _1994___mcc_h605 = _source67.dtor_element;
                BigInteger _1995___mcc_h606 = _source67.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1996_recursiveGen;
                  bool _1997_recOwned;
                  bool _1998_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1999_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out592;
                  bool _out593;
                  bool _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                  _1996_recursiveGen = _out592;
                  _1997_recOwned = _out593;
                  _1998_recErased = _out594;
                  _1999_recIdents = _out595;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1996_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1997_recOwned;
                  isErased = _1998_recErased;
                  readIdents = _1999_recIdents;
                }
              } else if (_source67.is_Seq) {
                DAST._IType _2000___mcc_h609 = _source67.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2001_recursiveGen;
                  bool _2002_recOwned;
                  bool _2003_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2004_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out596;
                  bool _out597;
                  bool _out598;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                  _2001_recursiveGen = _out596;
                  _2002_recOwned = _out597;
                  _2003_recErased = _out598;
                  _2004_recIdents = _out599;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2002_recOwned;
                  isErased = _2003_recErased;
                  readIdents = _2004_recIdents;
                }
              } else if (_source67.is_Set) {
                DAST._IType _2005___mcc_h611 = _source67.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2006_recursiveGen;
                  bool _2007_recOwned;
                  bool _2008_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2009_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out600;
                  bool _out601;
                  bool _out602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                  _2006_recursiveGen = _out600;
                  _2007_recOwned = _out601;
                  _2008_recErased = _out602;
                  _2009_recIdents = _out603;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2006_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2007_recOwned;
                  isErased = _2008_recErased;
                  readIdents = _2009_recIdents;
                }
              } else if (_source67.is_Multiset) {
                DAST._IType _2010___mcc_h613 = _source67.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2011_recursiveGen;
                  bool _2012_recOwned;
                  bool _2013_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2014_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out604;
                  bool _out605;
                  bool _out606;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                  _2011_recursiveGen = _out604;
                  _2012_recOwned = _out605;
                  _2013_recErased = _out606;
                  _2014_recIdents = _out607;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2011_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2012_recOwned;
                  isErased = _2013_recErased;
                  readIdents = _2014_recIdents;
                }
              } else if (_source67.is_Map) {
                DAST._IType _2015___mcc_h615 = _source67.dtor_key;
                DAST._IType _2016___mcc_h616 = _source67.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2017_recursiveGen;
                  bool _2018_recOwned;
                  bool _2019_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2020_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _2017_recursiveGen = _out608;
                  _2018_recOwned = _out609;
                  _2019_recErased = _out610;
                  _2020_recIdents = _out611;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2018_recOwned;
                  isErased = _2019_recErased;
                  readIdents = _2020_recIdents;
                }
              } else if (_source67.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2021___mcc_h619 = _source67.dtor_args;
                DAST._IType _2022___mcc_h620 = _source67.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2023_recursiveGen;
                  bool _2024_recOwned;
                  bool _2025_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2026_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _2023_recursiveGen = _out612;
                  _2024_recOwned = _out613;
                  _2025_recErased = _out614;
                  _2026_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2023_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2024_recOwned;
                  isErased = _2025_recErased;
                  readIdents = _2026_recIdents;
                }
              } else if (_source67.is_Primitive) {
                DAST._IPrimitive _2027___mcc_h623 = _source67.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2028_recursiveGen;
                  bool _2029_recOwned;
                  bool _2030_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2031_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _2028_recursiveGen = _out616;
                  _2029_recOwned = _out617;
                  _2030_recErased = _out618;
                  _2031_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2028_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2029_recOwned;
                  isErased = _2030_recErased;
                  readIdents = _2031_recIdents;
                }
              } else if (_source67.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2032___mcc_h625 = _source67.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2033_recursiveGen;
                  bool _2034_recOwned;
                  bool _2035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _2033_recursiveGen = _out620;
                  _2034_recOwned = _out621;
                  _2035_recErased = _out622;
                  _2036_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2034_recOwned;
                  isErased = _2035_recErased;
                  readIdents = _2036_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2037___mcc_h627 = _source67.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2038_recursiveGen;
                  bool _2039_recOwned;
                  bool _2040_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2041_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out624;
                  bool _out625;
                  bool _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                  _2038_recursiveGen = _out624;
                  _2039_recOwned = _out625;
                  _2040_recErased = _out626;
                  _2041_recIdents = _out627;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2039_recOwned;
                  isErased = _2040_recErased;
                  readIdents = _2041_recIdents;
                }
              }
            } else if (_source55.is_Seq) {
              DAST._IType _2042___mcc_h629 = _source55.dtor_element;
              DAST._IType _source69 = _1536___mcc_h306;
              if (_source69.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2043___mcc_h633 = _source69.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2044___mcc_h634 = _source69.dtor_typeArgs;
                DAST._IResolvedType _2045___mcc_h635 = _source69.dtor_resolved;
                DAST._IResolvedType _source70 = _2045___mcc_h635;
                if (_source70.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2046___mcc_h639 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2047_recursiveGen;
                    bool _2048_recOwned;
                    bool _2049_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2050_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out628;
                    bool _out629;
                    bool _out630;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                    _2047_recursiveGen = _out628;
                    _2048_recOwned = _out629;
                    _2049_recErased = _out630;
                    _2050_recIdents = _out631;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2048_recOwned;
                    isErased = _2049_recErased;
                    readIdents = _2050_recIdents;
                  }
                } else if (_source70.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2051___mcc_h641 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2052_recursiveGen;
                    bool _2053_recOwned;
                    bool _2054_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2055_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out632;
                    bool _out633;
                    bool _out634;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                    _2052_recursiveGen = _out632;
                    _2053_recOwned = _out633;
                    _2054_recErased = _out634;
                    _2055_recIdents = _out635;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2053_recOwned;
                    isErased = _2054_recErased;
                    readIdents = _2055_recIdents;
                  }
                } else {
                  DAST._IType _2056___mcc_h643 = _source70.dtor_Newtype_a0;
                  DAST._IType _2057_b = _2056___mcc_h643;
                  {
                    if (object.Equals(_1529_fromTpe, _2057_b)) {
                      Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                      bool _2059_recOwned;
                      bool _2060_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out636;
                      bool _out637;
                      bool _out638;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                      _2058_recursiveGen = _out636;
                      _2059_recOwned = _out637;
                      _2060_recErased = _out638;
                      _2061_recIdents = _out639;
                      Dafny.ISequence<Dafny.Rune> _2062_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out640;
                      _out640 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2062_rhsType = _out640;
                      Dafny.ISequence<Dafny.Rune> _2063_uneraseFn;
                      _2063_uneraseFn = ((_2059_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2062_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2063_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2059_recOwned;
                      isErased = false;
                      readIdents = _2061_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out641;
                      bool _out642;
                      bool _out643;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2057_b), _2057_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                      s = _out641;
                      isOwned = _out642;
                      isErased = _out643;
                      readIdents = _out644;
                    }
                  }
                }
              } else if (_source69.is_Nullable) {
                DAST._IType _2064___mcc_h645 = _source69.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2065_recursiveGen;
                  bool _2066_recOwned;
                  bool _2067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _2065_recursiveGen = _out645;
                  _2066_recOwned = _out646;
                  _2067_recErased = _out647;
                  _2068_recIdents = _out648;
                  if (!(_2066_recOwned)) {
                    _2065_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2065_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2067_recErased;
                  readIdents = _2068_recIdents;
                }
              } else if (_source69.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2069___mcc_h647 = _source69.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2070_recursiveGen;
                  bool _2071_recOwned;
                  bool _2072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _2070_recursiveGen = _out649;
                  _2071_recOwned = _out650;
                  _2072_recErased = _out651;
                  _2073_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2071_recOwned;
                  isErased = _2072_recErased;
                  readIdents = _2073_recIdents;
                }
              } else if (_source69.is_Array) {
                DAST._IType _2074___mcc_h649 = _source69.dtor_element;
                BigInteger _2075___mcc_h650 = _source69.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2076_recursiveGen;
                  bool _2077_recOwned;
                  bool _2078_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2079_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out653;
                  bool _out654;
                  bool _out655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                  _2076_recursiveGen = _out653;
                  _2077_recOwned = _out654;
                  _2078_recErased = _out655;
                  _2079_recIdents = _out656;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2076_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2077_recOwned;
                  isErased = _2078_recErased;
                  readIdents = _2079_recIdents;
                }
              } else if (_source69.is_Seq) {
                DAST._IType _2080___mcc_h653 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2081_recursiveGen;
                  bool _2082_recOwned;
                  bool _2083_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2084_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out657;
                  bool _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                  _2081_recursiveGen = _out657;
                  _2082_recOwned = _out658;
                  _2083_recErased = _out659;
                  _2084_recIdents = _out660;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2082_recOwned;
                  isErased = _2083_recErased;
                  readIdents = _2084_recIdents;
                }
              } else if (_source69.is_Set) {
                DAST._IType _2085___mcc_h655 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2086_recursiveGen;
                  bool _2087_recOwned;
                  bool _2088_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out661;
                  bool _out662;
                  bool _out663;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                  _2086_recursiveGen = _out661;
                  _2087_recOwned = _out662;
                  _2088_recErased = _out663;
                  _2089_recIdents = _out664;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2087_recOwned;
                  isErased = _2088_recErased;
                  readIdents = _2089_recIdents;
                }
              } else if (_source69.is_Multiset) {
                DAST._IType _2090___mcc_h657 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2091_recursiveGen;
                  bool _2092_recOwned;
                  bool _2093_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2094_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out665;
                  bool _out666;
                  bool _out667;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                  _2091_recursiveGen = _out665;
                  _2092_recOwned = _out666;
                  _2093_recErased = _out667;
                  _2094_recIdents = _out668;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2091_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2092_recOwned;
                  isErased = _2093_recErased;
                  readIdents = _2094_recIdents;
                }
              } else if (_source69.is_Map) {
                DAST._IType _2095___mcc_h659 = _source69.dtor_key;
                DAST._IType _2096___mcc_h660 = _source69.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2097_recursiveGen;
                  bool _2098_recOwned;
                  bool _2099_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2100_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _2097_recursiveGen = _out669;
                  _2098_recOwned = _out670;
                  _2099_recErased = _out671;
                  _2100_recIdents = _out672;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2097_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2098_recOwned;
                  isErased = _2099_recErased;
                  readIdents = _2100_recIdents;
                }
              } else if (_source69.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2101___mcc_h663 = _source69.dtor_args;
                DAST._IType _2102___mcc_h664 = _source69.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2103_recursiveGen;
                  bool _2104_recOwned;
                  bool _2105_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2106_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _2103_recursiveGen = _out673;
                  _2104_recOwned = _out674;
                  _2105_recErased = _out675;
                  _2106_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2103_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2104_recOwned;
                  isErased = _2105_recErased;
                  readIdents = _2106_recIdents;
                }
              } else if (_source69.is_Primitive) {
                DAST._IPrimitive _2107___mcc_h667 = _source69.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2108_recursiveGen;
                  bool _2109_recOwned;
                  bool _2110_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2111_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _2108_recursiveGen = _out677;
                  _2109_recOwned = _out678;
                  _2110_recErased = _out679;
                  _2111_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2108_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2109_recOwned;
                  isErased = _2110_recErased;
                  readIdents = _2111_recIdents;
                }
              } else if (_source69.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2112___mcc_h669 = _source69.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2113_recursiveGen;
                  bool _2114_recOwned;
                  bool _2115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _2113_recursiveGen = _out681;
                  _2114_recOwned = _out682;
                  _2115_recErased = _out683;
                  _2116_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2114_recOwned;
                  isErased = _2115_recErased;
                  readIdents = _2116_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2117___mcc_h671 = _source69.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2118_recursiveGen;
                  bool _2119_recOwned;
                  bool _2120_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2121_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out685;
                  bool _out686;
                  bool _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                  _2118_recursiveGen = _out685;
                  _2119_recOwned = _out686;
                  _2120_recErased = _out687;
                  _2121_recIdents = _out688;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2119_recOwned;
                  isErased = _2120_recErased;
                  readIdents = _2121_recIdents;
                }
              }
            } else if (_source55.is_Set) {
              DAST._IType _2122___mcc_h673 = _source55.dtor_element;
              DAST._IType _source71 = _1536___mcc_h306;
              if (_source71.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2123___mcc_h677 = _source71.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2124___mcc_h678 = _source71.dtor_typeArgs;
                DAST._IResolvedType _2125___mcc_h679 = _source71.dtor_resolved;
                DAST._IResolvedType _source72 = _2125___mcc_h679;
                if (_source72.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2126___mcc_h683 = _source72.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2127_recursiveGen;
                    bool _2128_recOwned;
                    bool _2129_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2130_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out689;
                    bool _out690;
                    bool _out691;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                    _2127_recursiveGen = _out689;
                    _2128_recOwned = _out690;
                    _2129_recErased = _out691;
                    _2130_recIdents = _out692;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2127_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2128_recOwned;
                    isErased = _2129_recErased;
                    readIdents = _2130_recIdents;
                  }
                } else if (_source72.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2131___mcc_h685 = _source72.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2132_recursiveGen;
                    bool _2133_recOwned;
                    bool _2134_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2135_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out693;
                    bool _out694;
                    bool _out695;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                    _2132_recursiveGen = _out693;
                    _2133_recOwned = _out694;
                    _2134_recErased = _out695;
                    _2135_recIdents = _out696;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2132_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2133_recOwned;
                    isErased = _2134_recErased;
                    readIdents = _2135_recIdents;
                  }
                } else {
                  DAST._IType _2136___mcc_h687 = _source72.dtor_Newtype_a0;
                  DAST._IType _2137_b = _2136___mcc_h687;
                  {
                    if (object.Equals(_1529_fromTpe, _2137_b)) {
                      Dafny.ISequence<Dafny.Rune> _2138_recursiveGen;
                      bool _2139_recOwned;
                      bool _2140_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2141_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out697;
                      bool _out698;
                      bool _out699;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                      _2138_recursiveGen = _out697;
                      _2139_recOwned = _out698;
                      _2140_recErased = _out699;
                      _2141_recIdents = _out700;
                      Dafny.ISequence<Dafny.Rune> _2142_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out701;
                      _out701 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2142_rhsType = _out701;
                      Dafny.ISequence<Dafny.Rune> _2143_uneraseFn;
                      _2143_uneraseFn = ((_2139_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2142_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2143_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2139_recOwned;
                      isErased = false;
                      readIdents = _2141_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out702;
                      bool _out703;
                      bool _out704;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2137_b), _2137_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                      s = _out702;
                      isOwned = _out703;
                      isErased = _out704;
                      readIdents = _out705;
                    }
                  }
                }
              } else if (_source71.is_Nullable) {
                DAST._IType _2144___mcc_h689 = _source71.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2145_recursiveGen;
                  bool _2146_recOwned;
                  bool _2147_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2148_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _2145_recursiveGen = _out706;
                  _2146_recOwned = _out707;
                  _2147_recErased = _out708;
                  _2148_recIdents = _out709;
                  if (!(_2146_recOwned)) {
                    _2145_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2145_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2147_recErased;
                  readIdents = _2148_recIdents;
                }
              } else if (_source71.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2149___mcc_h691 = _source71.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2150_recursiveGen;
                  bool _2151_recOwned;
                  bool _2152_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2153_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _2150_recursiveGen = _out710;
                  _2151_recOwned = _out711;
                  _2152_recErased = _out712;
                  _2153_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2150_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2151_recOwned;
                  isErased = _2152_recErased;
                  readIdents = _2153_recIdents;
                }
              } else if (_source71.is_Array) {
                DAST._IType _2154___mcc_h693 = _source71.dtor_element;
                BigInteger _2155___mcc_h694 = _source71.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2156_recursiveGen;
                  bool _2157_recOwned;
                  bool _2158_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2159_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out714;
                  bool _out715;
                  bool _out716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                  _2156_recursiveGen = _out714;
                  _2157_recOwned = _out715;
                  _2158_recErased = _out716;
                  _2159_recIdents = _out717;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2156_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2157_recOwned;
                  isErased = _2158_recErased;
                  readIdents = _2159_recIdents;
                }
              } else if (_source71.is_Seq) {
                DAST._IType _2160___mcc_h697 = _source71.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2161_recursiveGen;
                  bool _2162_recOwned;
                  bool _2163_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2164_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out718;
                  bool _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                  _2161_recursiveGen = _out718;
                  _2162_recOwned = _out719;
                  _2163_recErased = _out720;
                  _2164_recIdents = _out721;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2161_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2162_recOwned;
                  isErased = _2163_recErased;
                  readIdents = _2164_recIdents;
                }
              } else if (_source71.is_Set) {
                DAST._IType _2165___mcc_h699 = _source71.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2166_recursiveGen;
                  bool _2167_recOwned;
                  bool _2168_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2169_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out722;
                  bool _out723;
                  bool _out724;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                  _2166_recursiveGen = _out722;
                  _2167_recOwned = _out723;
                  _2168_recErased = _out724;
                  _2169_recIdents = _out725;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2167_recOwned;
                  isErased = _2168_recErased;
                  readIdents = _2169_recIdents;
                }
              } else if (_source71.is_Multiset) {
                DAST._IType _2170___mcc_h701 = _source71.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2171_recursiveGen;
                  bool _2172_recOwned;
                  bool _2173_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2174_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out726;
                  bool _out727;
                  bool _out728;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                  _2171_recursiveGen = _out726;
                  _2172_recOwned = _out727;
                  _2173_recErased = _out728;
                  _2174_recIdents = _out729;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2171_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2172_recOwned;
                  isErased = _2173_recErased;
                  readIdents = _2174_recIdents;
                }
              } else if (_source71.is_Map) {
                DAST._IType _2175___mcc_h703 = _source71.dtor_key;
                DAST._IType _2176___mcc_h704 = _source71.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2177_recursiveGen;
                  bool _2178_recOwned;
                  bool _2179_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2180_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _2177_recursiveGen = _out730;
                  _2178_recOwned = _out731;
                  _2179_recErased = _out732;
                  _2180_recIdents = _out733;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2177_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2178_recOwned;
                  isErased = _2179_recErased;
                  readIdents = _2180_recIdents;
                }
              } else if (_source71.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2181___mcc_h707 = _source71.dtor_args;
                DAST._IType _2182___mcc_h708 = _source71.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2183_recursiveGen;
                  bool _2184_recOwned;
                  bool _2185_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2186_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _2183_recursiveGen = _out734;
                  _2184_recOwned = _out735;
                  _2185_recErased = _out736;
                  _2186_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2183_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2184_recOwned;
                  isErased = _2185_recErased;
                  readIdents = _2186_recIdents;
                }
              } else if (_source71.is_Primitive) {
                DAST._IPrimitive _2187___mcc_h711 = _source71.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2188_recursiveGen;
                  bool _2189_recOwned;
                  bool _2190_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2191_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _2188_recursiveGen = _out738;
                  _2189_recOwned = _out739;
                  _2190_recErased = _out740;
                  _2191_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2188_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2189_recOwned;
                  isErased = _2190_recErased;
                  readIdents = _2191_recIdents;
                }
              } else if (_source71.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2192___mcc_h713 = _source71.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2193_recursiveGen;
                  bool _2194_recOwned;
                  bool _2195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _2193_recursiveGen = _out742;
                  _2194_recOwned = _out743;
                  _2195_recErased = _out744;
                  _2196_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2194_recOwned;
                  isErased = _2195_recErased;
                  readIdents = _2196_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2197___mcc_h715 = _source71.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2198_recursiveGen;
                  bool _2199_recOwned;
                  bool _2200_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2201_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out746;
                  bool _out747;
                  bool _out748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                  _2198_recursiveGen = _out746;
                  _2199_recOwned = _out747;
                  _2200_recErased = _out748;
                  _2201_recIdents = _out749;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2199_recOwned;
                  isErased = _2200_recErased;
                  readIdents = _2201_recIdents;
                }
              }
            } else if (_source55.is_Multiset) {
              DAST._IType _2202___mcc_h717 = _source55.dtor_element;
              DAST._IType _source73 = _1536___mcc_h306;
              if (_source73.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2203___mcc_h721 = _source73.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2204___mcc_h722 = _source73.dtor_typeArgs;
                DAST._IResolvedType _2205___mcc_h723 = _source73.dtor_resolved;
                DAST._IResolvedType _source74 = _2205___mcc_h723;
                if (_source74.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2206___mcc_h727 = _source74.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2207_recursiveGen;
                    bool _2208_recOwned;
                    bool _2209_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2210_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out750;
                    bool _out751;
                    bool _out752;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                    _2207_recursiveGen = _out750;
                    _2208_recOwned = _out751;
                    _2209_recErased = _out752;
                    _2210_recIdents = _out753;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2208_recOwned;
                    isErased = _2209_recErased;
                    readIdents = _2210_recIdents;
                  }
                } else if (_source74.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2211___mcc_h729 = _source74.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2212_recursiveGen;
                    bool _2213_recOwned;
                    bool _2214_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2215_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out754;
                    bool _out755;
                    bool _out756;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                    _2212_recursiveGen = _out754;
                    _2213_recOwned = _out755;
                    _2214_recErased = _out756;
                    _2215_recIdents = _out757;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2212_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2213_recOwned;
                    isErased = _2214_recErased;
                    readIdents = _2215_recIdents;
                  }
                } else {
                  DAST._IType _2216___mcc_h731 = _source74.dtor_Newtype_a0;
                  DAST._IType _2217_b = _2216___mcc_h731;
                  {
                    if (object.Equals(_1529_fromTpe, _2217_b)) {
                      Dafny.ISequence<Dafny.Rune> _2218_recursiveGen;
                      bool _2219_recOwned;
                      bool _2220_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2221_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out758;
                      bool _out759;
                      bool _out760;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                      _2218_recursiveGen = _out758;
                      _2219_recOwned = _out759;
                      _2220_recErased = _out760;
                      _2221_recIdents = _out761;
                      Dafny.ISequence<Dafny.Rune> _2222_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out762;
                      _out762 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2222_rhsType = _out762;
                      Dafny.ISequence<Dafny.Rune> _2223_uneraseFn;
                      _2223_uneraseFn = ((_2219_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2222_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2223_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2218_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2219_recOwned;
                      isErased = false;
                      readIdents = _2221_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out763;
                      bool _out764;
                      bool _out765;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2217_b), _2217_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                      s = _out763;
                      isOwned = _out764;
                      isErased = _out765;
                      readIdents = _out766;
                    }
                  }
                }
              } else if (_source73.is_Nullable) {
                DAST._IType _2224___mcc_h733 = _source73.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2225_recursiveGen;
                  bool _2226_recOwned;
                  bool _2227_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2228_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _2225_recursiveGen = _out767;
                  _2226_recOwned = _out768;
                  _2227_recErased = _out769;
                  _2228_recIdents = _out770;
                  if (!(_2226_recOwned)) {
                    _2225_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2225_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2225_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2227_recErased;
                  readIdents = _2228_recIdents;
                }
              } else if (_source73.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2229___mcc_h735 = _source73.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2230_recursiveGen;
                  bool _2231_recOwned;
                  bool _2232_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2233_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _2230_recursiveGen = _out771;
                  _2231_recOwned = _out772;
                  _2232_recErased = _out773;
                  _2233_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2230_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2231_recOwned;
                  isErased = _2232_recErased;
                  readIdents = _2233_recIdents;
                }
              } else if (_source73.is_Array) {
                DAST._IType _2234___mcc_h737 = _source73.dtor_element;
                BigInteger _2235___mcc_h738 = _source73.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2236_recursiveGen;
                  bool _2237_recOwned;
                  bool _2238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out775;
                  bool _out776;
                  bool _out777;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                  _2236_recursiveGen = _out775;
                  _2237_recOwned = _out776;
                  _2238_recErased = _out777;
                  _2239_recIdents = _out778;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2237_recOwned;
                  isErased = _2238_recErased;
                  readIdents = _2239_recIdents;
                }
              } else if (_source73.is_Seq) {
                DAST._IType _2240___mcc_h741 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2241_recursiveGen;
                  bool _2242_recOwned;
                  bool _2243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out779;
                  bool _out780;
                  bool _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                  _2241_recursiveGen = _out779;
                  _2242_recOwned = _out780;
                  _2243_recErased = _out781;
                  _2244_recIdents = _out782;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2242_recOwned;
                  isErased = _2243_recErased;
                  readIdents = _2244_recIdents;
                }
              } else if (_source73.is_Set) {
                DAST._IType _2245___mcc_h743 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2246_recursiveGen;
                  bool _2247_recOwned;
                  bool _2248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out783;
                  bool _out784;
                  bool _out785;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                  _2246_recursiveGen = _out783;
                  _2247_recOwned = _out784;
                  _2248_recErased = _out785;
                  _2249_recIdents = _out786;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2246_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2247_recOwned;
                  isErased = _2248_recErased;
                  readIdents = _2249_recIdents;
                }
              } else if (_source73.is_Multiset) {
                DAST._IType _2250___mcc_h745 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2251_recursiveGen;
                  bool _2252_recOwned;
                  bool _2253_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2254_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out787;
                  bool _out788;
                  bool _out789;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                  _2251_recursiveGen = _out787;
                  _2252_recOwned = _out788;
                  _2253_recErased = _out789;
                  _2254_recIdents = _out790;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2252_recOwned;
                  isErased = _2253_recErased;
                  readIdents = _2254_recIdents;
                }
              } else if (_source73.is_Map) {
                DAST._IType _2255___mcc_h747 = _source73.dtor_key;
                DAST._IType _2256___mcc_h748 = _source73.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2257_recursiveGen;
                  bool _2258_recOwned;
                  bool _2259_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2260_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _2257_recursiveGen = _out791;
                  _2258_recOwned = _out792;
                  _2259_recErased = _out793;
                  _2260_recIdents = _out794;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2257_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2258_recOwned;
                  isErased = _2259_recErased;
                  readIdents = _2260_recIdents;
                }
              } else if (_source73.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2261___mcc_h751 = _source73.dtor_args;
                DAST._IType _2262___mcc_h752 = _source73.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2263_recursiveGen;
                  bool _2264_recOwned;
                  bool _2265_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2266_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _2263_recursiveGen = _out795;
                  _2264_recOwned = _out796;
                  _2265_recErased = _out797;
                  _2266_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2264_recOwned;
                  isErased = _2265_recErased;
                  readIdents = _2266_recIdents;
                }
              } else if (_source73.is_Primitive) {
                DAST._IPrimitive _2267___mcc_h755 = _source73.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2268_recursiveGen;
                  bool _2269_recOwned;
                  bool _2270_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2271_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _2268_recursiveGen = _out799;
                  _2269_recOwned = _out800;
                  _2270_recErased = _out801;
                  _2271_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2268_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2269_recOwned;
                  isErased = _2270_recErased;
                  readIdents = _2271_recIdents;
                }
              } else if (_source73.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2272___mcc_h757 = _source73.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2273_recursiveGen;
                  bool _2274_recOwned;
                  bool _2275_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2276_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _2273_recursiveGen = _out803;
                  _2274_recOwned = _out804;
                  _2275_recErased = _out805;
                  _2276_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2274_recOwned;
                  isErased = _2275_recErased;
                  readIdents = _2276_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2277___mcc_h759 = _source73.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2278_recursiveGen;
                  bool _2279_recOwned;
                  bool _2280_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2281_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out807;
                  bool _out808;
                  bool _out809;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                  _2278_recursiveGen = _out807;
                  _2279_recOwned = _out808;
                  _2280_recErased = _out809;
                  _2281_recIdents = _out810;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2279_recOwned;
                  isErased = _2280_recErased;
                  readIdents = _2281_recIdents;
                }
              }
            } else if (_source55.is_Map) {
              DAST._IType _2282___mcc_h761 = _source55.dtor_key;
              DAST._IType _2283___mcc_h762 = _source55.dtor_value;
              DAST._IType _source75 = _1536___mcc_h306;
              if (_source75.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2284___mcc_h769 = _source75.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2285___mcc_h770 = _source75.dtor_typeArgs;
                DAST._IResolvedType _2286___mcc_h771 = _source75.dtor_resolved;
                DAST._IResolvedType _source76 = _2286___mcc_h771;
                if (_source76.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2287___mcc_h775 = _source76.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2288_recursiveGen;
                    bool _2289_recOwned;
                    bool _2290_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2291_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out811;
                    bool _out812;
                    bool _out813;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                    _2288_recursiveGen = _out811;
                    _2289_recOwned = _out812;
                    _2290_recErased = _out813;
                    _2291_recIdents = _out814;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2289_recOwned;
                    isErased = _2290_recErased;
                    readIdents = _2291_recIdents;
                  }
                } else if (_source76.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2292___mcc_h777 = _source76.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2293_recursiveGen;
                    bool _2294_recOwned;
                    bool _2295_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2296_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out815;
                    bool _out816;
                    bool _out817;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                    _2293_recursiveGen = _out815;
                    _2294_recOwned = _out816;
                    _2295_recErased = _out817;
                    _2296_recIdents = _out818;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2294_recOwned;
                    isErased = _2295_recErased;
                    readIdents = _2296_recIdents;
                  }
                } else {
                  DAST._IType _2297___mcc_h779 = _source76.dtor_Newtype_a0;
                  DAST._IType _2298_b = _2297___mcc_h779;
                  {
                    if (object.Equals(_1529_fromTpe, _2298_b)) {
                      Dafny.ISequence<Dafny.Rune> _2299_recursiveGen;
                      bool _2300_recOwned;
                      bool _2301_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out819;
                      bool _out820;
                      bool _out821;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                      _2299_recursiveGen = _out819;
                      _2300_recOwned = _out820;
                      _2301_recErased = _out821;
                      _2302_recIdents = _out822;
                      Dafny.ISequence<Dafny.Rune> _2303_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out823;
                      _out823 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2303_rhsType = _out823;
                      Dafny.ISequence<Dafny.Rune> _2304_uneraseFn;
                      _2304_uneraseFn = ((_2300_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2303_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2304_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2300_recOwned;
                      isErased = false;
                      readIdents = _2302_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out824;
                      bool _out825;
                      bool _out826;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2298_b), _2298_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                      s = _out824;
                      isOwned = _out825;
                      isErased = _out826;
                      readIdents = _out827;
                    }
                  }
                }
              } else if (_source75.is_Nullable) {
                DAST._IType _2305___mcc_h781 = _source75.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2306_recursiveGen;
                  bool _2307_recOwned;
                  bool _2308_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2309_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _2306_recursiveGen = _out828;
                  _2307_recOwned = _out829;
                  _2308_recErased = _out830;
                  _2309_recIdents = _out831;
                  if (!(_2307_recOwned)) {
                    _2306_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2306_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2306_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2308_recErased;
                  readIdents = _2309_recIdents;
                }
              } else if (_source75.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2310___mcc_h783 = _source75.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2311_recursiveGen;
                  bool _2312_recOwned;
                  bool _2313_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2314_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _2311_recursiveGen = _out832;
                  _2312_recOwned = _out833;
                  _2313_recErased = _out834;
                  _2314_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2311_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2312_recOwned;
                  isErased = _2313_recErased;
                  readIdents = _2314_recIdents;
                }
              } else if (_source75.is_Array) {
                DAST._IType _2315___mcc_h785 = _source75.dtor_element;
                BigInteger _2316___mcc_h786 = _source75.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2317_recursiveGen;
                  bool _2318_recOwned;
                  bool _2319_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2320_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out836;
                  bool _out837;
                  bool _out838;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                  _2317_recursiveGen = _out836;
                  _2318_recOwned = _out837;
                  _2319_recErased = _out838;
                  _2320_recIdents = _out839;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2317_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2318_recOwned;
                  isErased = _2319_recErased;
                  readIdents = _2320_recIdents;
                }
              } else if (_source75.is_Seq) {
                DAST._IType _2321___mcc_h789 = _source75.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2322_recursiveGen;
                  bool _2323_recOwned;
                  bool _2324_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2325_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out840;
                  bool _out841;
                  bool _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                  _2322_recursiveGen = _out840;
                  _2323_recOwned = _out841;
                  _2324_recErased = _out842;
                  _2325_recIdents = _out843;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2323_recOwned;
                  isErased = _2324_recErased;
                  readIdents = _2325_recIdents;
                }
              } else if (_source75.is_Set) {
                DAST._IType _2326___mcc_h791 = _source75.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2327_recursiveGen;
                  bool _2328_recOwned;
                  bool _2329_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2330_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out844;
                  bool _out845;
                  bool _out846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                  _2327_recursiveGen = _out844;
                  _2328_recOwned = _out845;
                  _2329_recErased = _out846;
                  _2330_recIdents = _out847;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2328_recOwned;
                  isErased = _2329_recErased;
                  readIdents = _2330_recIdents;
                }
              } else if (_source75.is_Multiset) {
                DAST._IType _2331___mcc_h793 = _source75.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2332_recursiveGen;
                  bool _2333_recOwned;
                  bool _2334_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2335_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out848;
                  bool _out849;
                  bool _out850;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                  _2332_recursiveGen = _out848;
                  _2333_recOwned = _out849;
                  _2334_recErased = _out850;
                  _2335_recIdents = _out851;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2333_recOwned;
                  isErased = _2334_recErased;
                  readIdents = _2335_recIdents;
                }
              } else if (_source75.is_Map) {
                DAST._IType _2336___mcc_h795 = _source75.dtor_key;
                DAST._IType _2337___mcc_h796 = _source75.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2338_recursiveGen;
                  bool _2339_recOwned;
                  bool _2340_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2341_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _2338_recursiveGen = _out852;
                  _2339_recOwned = _out853;
                  _2340_recErased = _out854;
                  _2341_recIdents = _out855;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2338_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2339_recOwned;
                  isErased = _2340_recErased;
                  readIdents = _2341_recIdents;
                }
              } else if (_source75.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2342___mcc_h799 = _source75.dtor_args;
                DAST._IType _2343___mcc_h800 = _source75.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2344_recursiveGen;
                  bool _2345_recOwned;
                  bool _2346_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2347_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _2344_recursiveGen = _out856;
                  _2345_recOwned = _out857;
                  _2346_recErased = _out858;
                  _2347_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2344_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2345_recOwned;
                  isErased = _2346_recErased;
                  readIdents = _2347_recIdents;
                }
              } else if (_source75.is_Primitive) {
                DAST._IPrimitive _2348___mcc_h803 = _source75.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2349_recursiveGen;
                  bool _2350_recOwned;
                  bool _2351_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2352_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _2349_recursiveGen = _out860;
                  _2350_recOwned = _out861;
                  _2351_recErased = _out862;
                  _2352_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2349_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2350_recOwned;
                  isErased = _2351_recErased;
                  readIdents = _2352_recIdents;
                }
              } else if (_source75.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2353___mcc_h805 = _source75.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2354_recursiveGen;
                  bool _2355_recOwned;
                  bool _2356_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2357_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _2354_recursiveGen = _out864;
                  _2355_recOwned = _out865;
                  _2356_recErased = _out866;
                  _2357_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2355_recOwned;
                  isErased = _2356_recErased;
                  readIdents = _2357_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2358___mcc_h807 = _source75.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2359_recursiveGen;
                  bool _2360_recOwned;
                  bool _2361_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2362_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out868;
                  bool _out869;
                  bool _out870;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                  _2359_recursiveGen = _out868;
                  _2360_recOwned = _out869;
                  _2361_recErased = _out870;
                  _2362_recIdents = _out871;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2360_recOwned;
                  isErased = _2361_recErased;
                  readIdents = _2362_recIdents;
                }
              }
            } else if (_source55.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2363___mcc_h809 = _source55.dtor_args;
              DAST._IType _2364___mcc_h810 = _source55.dtor_result;
              DAST._IType _source77 = _1536___mcc_h306;
              if (_source77.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2365___mcc_h817 = _source77.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2366___mcc_h818 = _source77.dtor_typeArgs;
                DAST._IResolvedType _2367___mcc_h819 = _source77.dtor_resolved;
                DAST._IResolvedType _source78 = _2367___mcc_h819;
                if (_source78.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2368___mcc_h823 = _source78.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2369_recursiveGen;
                    bool _2370_recOwned;
                    bool _2371_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2372_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out872;
                    bool _out873;
                    bool _out874;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                    _2369_recursiveGen = _out872;
                    _2370_recOwned = _out873;
                    _2371_recErased = _out874;
                    _2372_recIdents = _out875;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2370_recOwned;
                    isErased = _2371_recErased;
                    readIdents = _2372_recIdents;
                  }
                } else if (_source78.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2373___mcc_h825 = _source78.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2374_recursiveGen;
                    bool _2375_recOwned;
                    bool _2376_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2377_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out876;
                    bool _out877;
                    bool _out878;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                    _2374_recursiveGen = _out876;
                    _2375_recOwned = _out877;
                    _2376_recErased = _out878;
                    _2377_recIdents = _out879;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2374_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2375_recOwned;
                    isErased = _2376_recErased;
                    readIdents = _2377_recIdents;
                  }
                } else {
                  DAST._IType _2378___mcc_h827 = _source78.dtor_Newtype_a0;
                  DAST._IType _2379_b = _2378___mcc_h827;
                  {
                    if (object.Equals(_1529_fromTpe, _2379_b)) {
                      Dafny.ISequence<Dafny.Rune> _2380_recursiveGen;
                      bool _2381_recOwned;
                      bool _2382_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2383_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out880;
                      bool _out881;
                      bool _out882;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                      _2380_recursiveGen = _out880;
                      _2381_recOwned = _out881;
                      _2382_recErased = _out882;
                      _2383_recIdents = _out883;
                      Dafny.ISequence<Dafny.Rune> _2384_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out884;
                      _out884 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2384_rhsType = _out884;
                      Dafny.ISequence<Dafny.Rune> _2385_uneraseFn;
                      _2385_uneraseFn = ((_2381_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2384_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2385_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2381_recOwned;
                      isErased = false;
                      readIdents = _2383_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out885;
                      bool _out886;
                      bool _out887;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2379_b), _2379_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                      s = _out885;
                      isOwned = _out886;
                      isErased = _out887;
                      readIdents = _out888;
                    }
                  }
                }
              } else if (_source77.is_Nullable) {
                DAST._IType _2386___mcc_h829 = _source77.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2387_recursiveGen;
                  bool _2388_recOwned;
                  bool _2389_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2390_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _2387_recursiveGen = _out889;
                  _2388_recOwned = _out890;
                  _2389_recErased = _out891;
                  _2390_recIdents = _out892;
                  if (!(_2388_recOwned)) {
                    _2387_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2387_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2387_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2389_recErased;
                  readIdents = _2390_recIdents;
                }
              } else if (_source77.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2391___mcc_h831 = _source77.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2392_recursiveGen;
                  bool _2393_recOwned;
                  bool _2394_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2395_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _2392_recursiveGen = _out893;
                  _2393_recOwned = _out894;
                  _2394_recErased = _out895;
                  _2395_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2392_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2393_recOwned;
                  isErased = _2394_recErased;
                  readIdents = _2395_recIdents;
                }
              } else if (_source77.is_Array) {
                DAST._IType _2396___mcc_h833 = _source77.dtor_element;
                BigInteger _2397___mcc_h834 = _source77.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2398_recursiveGen;
                  bool _2399_recOwned;
                  bool _2400_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2401_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out897;
                  bool _out898;
                  bool _out899;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                  _2398_recursiveGen = _out897;
                  _2399_recOwned = _out898;
                  _2400_recErased = _out899;
                  _2401_recIdents = _out900;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2398_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2399_recOwned;
                  isErased = _2400_recErased;
                  readIdents = _2401_recIdents;
                }
              } else if (_source77.is_Seq) {
                DAST._IType _2402___mcc_h837 = _source77.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2403_recursiveGen;
                  bool _2404_recOwned;
                  bool _2405_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2406_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out901;
                  bool _out902;
                  bool _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                  _2403_recursiveGen = _out901;
                  _2404_recOwned = _out902;
                  _2405_recErased = _out903;
                  _2406_recIdents = _out904;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2403_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2404_recOwned;
                  isErased = _2405_recErased;
                  readIdents = _2406_recIdents;
                }
              } else if (_source77.is_Set) {
                DAST._IType _2407___mcc_h839 = _source77.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2408_recursiveGen;
                  bool _2409_recOwned;
                  bool _2410_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2411_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out905;
                  bool _out906;
                  bool _out907;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                  _2408_recursiveGen = _out905;
                  _2409_recOwned = _out906;
                  _2410_recErased = _out907;
                  _2411_recIdents = _out908;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2409_recOwned;
                  isErased = _2410_recErased;
                  readIdents = _2411_recIdents;
                }
              } else if (_source77.is_Multiset) {
                DAST._IType _2412___mcc_h841 = _source77.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2413_recursiveGen;
                  bool _2414_recOwned;
                  bool _2415_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2416_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out909;
                  bool _out910;
                  bool _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                  _2413_recursiveGen = _out909;
                  _2414_recOwned = _out910;
                  _2415_recErased = _out911;
                  _2416_recIdents = _out912;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2413_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2414_recOwned;
                  isErased = _2415_recErased;
                  readIdents = _2416_recIdents;
                }
              } else if (_source77.is_Map) {
                DAST._IType _2417___mcc_h843 = _source77.dtor_key;
                DAST._IType _2418___mcc_h844 = _source77.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2419_recursiveGen;
                  bool _2420_recOwned;
                  bool _2421_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2422_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _2419_recursiveGen = _out913;
                  _2420_recOwned = _out914;
                  _2421_recErased = _out915;
                  _2422_recIdents = _out916;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2419_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2420_recOwned;
                  isErased = _2421_recErased;
                  readIdents = _2422_recIdents;
                }
              } else if (_source77.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2423___mcc_h847 = _source77.dtor_args;
                DAST._IType _2424___mcc_h848 = _source77.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2425_recursiveGen;
                  bool _2426_recOwned;
                  bool _2427_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2428_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _2425_recursiveGen = _out917;
                  _2426_recOwned = _out918;
                  _2427_recErased = _out919;
                  _2428_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2425_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2426_recOwned;
                  isErased = _2427_recErased;
                  readIdents = _2428_recIdents;
                }
              } else if (_source77.is_Primitive) {
                DAST._IPrimitive _2429___mcc_h851 = _source77.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2430_recursiveGen;
                  bool _2431_recOwned;
                  bool _2432_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2433_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _2430_recursiveGen = _out921;
                  _2431_recOwned = _out922;
                  _2432_recErased = _out923;
                  _2433_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2430_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2431_recOwned;
                  isErased = _2432_recErased;
                  readIdents = _2433_recIdents;
                }
              } else if (_source77.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2434___mcc_h853 = _source77.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2435_recursiveGen;
                  bool _2436_recOwned;
                  bool _2437_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2438_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _2435_recursiveGen = _out925;
                  _2436_recOwned = _out926;
                  _2437_recErased = _out927;
                  _2438_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2436_recOwned;
                  isErased = _2437_recErased;
                  readIdents = _2438_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2439___mcc_h855 = _source77.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2440_recursiveGen;
                  bool _2441_recOwned;
                  bool _2442_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2443_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out929;
                  bool _out930;
                  bool _out931;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                  _2440_recursiveGen = _out929;
                  _2441_recOwned = _out930;
                  _2442_recErased = _out931;
                  _2443_recIdents = _out932;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2440_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2441_recOwned;
                  isErased = _2442_recErased;
                  readIdents = _2443_recIdents;
                }
              }
            } else if (_source55.is_Primitive) {
              DAST._IPrimitive _2444___mcc_h857 = _source55.dtor_Primitive_a0;
              DAST._IPrimitive _source79 = _2444___mcc_h857;
              if (_source79.is_Int) {
                DAST._IType _source80 = _1536___mcc_h306;
                if (_source80.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2445___mcc_h861 = _source80.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2446___mcc_h862 = _source80.dtor_typeArgs;
                  DAST._IResolvedType _2447___mcc_h863 = _source80.dtor_resolved;
                  DAST._IResolvedType _source81 = _2447___mcc_h863;
                  if (_source81.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2448___mcc_h867 = _source81.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2449_recursiveGen;
                      bool _2450_recOwned;
                      bool _2451_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2452_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out933;
                      bool _out934;
                      bool _out935;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                      _2449_recursiveGen = _out933;
                      _2450_recOwned = _out934;
                      _2451_recErased = _out935;
                      _2452_recIdents = _out936;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2449_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2450_recOwned;
                      isErased = _2451_recErased;
                      readIdents = _2452_recIdents;
                    }
                  } else if (_source81.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2453___mcc_h869 = _source81.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2454_recursiveGen;
                      bool _2455_recOwned;
                      bool _2456_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2457_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out937;
                      bool _out938;
                      bool _out939;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                      _2454_recursiveGen = _out937;
                      _2455_recOwned = _out938;
                      _2456_recErased = _out939;
                      _2457_recIdents = _out940;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2454_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2455_recOwned;
                      isErased = _2456_recErased;
                      readIdents = _2457_recIdents;
                    }
                  } else {
                    DAST._IType _2458___mcc_h871 = _source81.dtor_Newtype_a0;
                    DAST._IType _2459_b = _2458___mcc_h871;
                    {
                      if (object.Equals(_1529_fromTpe, _2459_b)) {
                        Dafny.ISequence<Dafny.Rune> _2460_recursiveGen;
                        bool _2461_recOwned;
                        bool _2462_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2463_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out941;
                        bool _out942;
                        bool _out943;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                        _2460_recursiveGen = _out941;
                        _2461_recOwned = _out942;
                        _2462_recErased = _out943;
                        _2463_recIdents = _out944;
                        Dafny.ISequence<Dafny.Rune> _2464_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out945;
                        _out945 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _2464_rhsType = _out945;
                        Dafny.ISequence<Dafny.Rune> _2465_uneraseFn;
                        _2465_uneraseFn = ((_2461_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2464_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2465_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2461_recOwned;
                        isErased = false;
                        readIdents = _2463_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out946;
                        bool _out947;
                        bool _out948;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2459_b), _2459_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                        s = _out946;
                        isOwned = _out947;
                        isErased = _out948;
                        readIdents = _out949;
                      }
                    }
                  }
                } else if (_source80.is_Nullable) {
                  DAST._IType _2466___mcc_h873 = _source80.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2467_recursiveGen;
                    bool _2468_recOwned;
                    bool _2469_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2470_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out950;
                    bool _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                    _2467_recursiveGen = _out950;
                    _2468_recOwned = _out951;
                    _2469_recErased = _out952;
                    _2470_recIdents = _out953;
                    if (!(_2468_recOwned)) {
                      _2467_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2467_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2469_recErased;
                    readIdents = _2470_recIdents;
                  }
                } else if (_source80.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2471___mcc_h875 = _source80.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2472_recursiveGen;
                    bool _2473_recOwned;
                    bool _2474_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2475_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out954;
                    bool _out955;
                    bool _out956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                    _2472_recursiveGen = _out954;
                    _2473_recOwned = _out955;
                    _2474_recErased = _out956;
                    _2475_recIdents = _out957;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2472_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2473_recOwned;
                    isErased = _2474_recErased;
                    readIdents = _2475_recIdents;
                  }
                } else if (_source80.is_Array) {
                  DAST._IType _2476___mcc_h877 = _source80.dtor_element;
                  BigInteger _2477___mcc_h878 = _source80.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2478_recursiveGen;
                    bool _2479_recOwned;
                    bool _2480_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2481_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out958;
                    bool _out959;
                    bool _out960;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                    _2478_recursiveGen = _out958;
                    _2479_recOwned = _out959;
                    _2480_recErased = _out960;
                    _2481_recIdents = _out961;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2479_recOwned;
                    isErased = _2480_recErased;
                    readIdents = _2481_recIdents;
                  }
                } else if (_source80.is_Seq) {
                  DAST._IType _2482___mcc_h881 = _source80.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2483_recursiveGen;
                    bool _2484_recOwned;
                    bool _2485_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2486_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out962;
                    bool _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                    _2483_recursiveGen = _out962;
                    _2484_recOwned = _out963;
                    _2485_recErased = _out964;
                    _2486_recIdents = _out965;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2483_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2484_recOwned;
                    isErased = _2485_recErased;
                    readIdents = _2486_recIdents;
                  }
                } else if (_source80.is_Set) {
                  DAST._IType _2487___mcc_h883 = _source80.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2488_recursiveGen;
                    bool _2489_recOwned;
                    bool _2490_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2491_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out966;
                    bool _out967;
                    bool _out968;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                    _2488_recursiveGen = _out966;
                    _2489_recOwned = _out967;
                    _2490_recErased = _out968;
                    _2491_recIdents = _out969;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2489_recOwned;
                    isErased = _2490_recErased;
                    readIdents = _2491_recIdents;
                  }
                } else if (_source80.is_Multiset) {
                  DAST._IType _2492___mcc_h885 = _source80.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2493_recursiveGen;
                    bool _2494_recOwned;
                    bool _2495_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2496_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out970;
                    bool _out971;
                    bool _out972;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                    _2493_recursiveGen = _out970;
                    _2494_recOwned = _out971;
                    _2495_recErased = _out972;
                    _2496_recIdents = _out973;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2493_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2494_recOwned;
                    isErased = _2495_recErased;
                    readIdents = _2496_recIdents;
                  }
                } else if (_source80.is_Map) {
                  DAST._IType _2497___mcc_h887 = _source80.dtor_key;
                  DAST._IType _2498___mcc_h888 = _source80.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2499_recursiveGen;
                    bool _2500_recOwned;
                    bool _2501_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2502_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _2499_recursiveGen = _out974;
                    _2500_recOwned = _out975;
                    _2501_recErased = _out976;
                    _2502_recIdents = _out977;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2499_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2500_recOwned;
                    isErased = _2501_recErased;
                    readIdents = _2502_recIdents;
                  }
                } else if (_source80.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2503___mcc_h891 = _source80.dtor_args;
                  DAST._IType _2504___mcc_h892 = _source80.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2505_recursiveGen;
                    bool _2506_recOwned;
                    bool _2507_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2508_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out978;
                    bool _out979;
                    bool _out980;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                    _2505_recursiveGen = _out978;
                    _2506_recOwned = _out979;
                    _2507_recErased = _out980;
                    _2508_recIdents = _out981;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2505_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2506_recOwned;
                    isErased = _2507_recErased;
                    readIdents = _2508_recIdents;
                  }
                } else if (_source80.is_Primitive) {
                  DAST._IPrimitive _2509___mcc_h895 = _source80.dtor_Primitive_a0;
                  DAST._IPrimitive _source82 = _2509___mcc_h895;
                  if (_source82.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2510_recursiveGen;
                      bool _2511_recOwned;
                      bool _2512_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2513_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out982;
                      bool _out983;
                      bool _out984;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984, out _out985);
                      _2510_recursiveGen = _out982;
                      _2511_recOwned = _out983;
                      _2512_recErased = _out984;
                      _2513_recIdents = _out985;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2510_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2511_recOwned;
                      isErased = _2512_recErased;
                      readIdents = _2513_recIdents;
                    }
                  } else if (_source82.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2514_recursiveGen;
                      bool _2515___v46;
                      bool _2516___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2517_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _2514_recursiveGen = _out986;
                      _2515___v46 = _out987;
                      _2516___v47 = _out988;
                      _2517_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2517_recIdents;
                    }
                  } else if (_source82.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2518_recursiveGen;
                      bool _2519_recOwned;
                      bool _2520_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out990;
                      bool _out991;
                      bool _out992;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                      _2518_recursiveGen = _out990;
                      _2519_recOwned = _out991;
                      _2520_recErased = _out992;
                      _2521_recIdents = _out993;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2518_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2519_recOwned;
                      isErased = _2520_recErased;
                      readIdents = _2521_recIdents;
                    }
                  } else if (_source82.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2522_recursiveGen;
                      bool _2523_recOwned;
                      bool _2524_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2525_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out994;
                      bool _out995;
                      bool _out996;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out997;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996, out _out997);
                      _2522_recursiveGen = _out994;
                      _2523_recOwned = _out995;
                      _2524_recErased = _out996;
                      _2525_recIdents = _out997;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2522_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2523_recOwned;
                      isErased = _2524_recErased;
                      readIdents = _2525_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2526_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out998;
                      _out998 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2526_rhsType = _out998;
                      Dafny.ISequence<Dafny.Rune> _2527_recursiveGen;
                      bool _2528___v56;
                      bool _2529___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2530_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, true, out _out999, out _out1000, out _out1001, out _out1002);
                      _2527_recursiveGen = _out999;
                      _2528___v56 = _out1000;
                      _2529___v57 = _out1001;
                      _2530_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2527_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2530_recIdents;
                    }
                  }
                } else if (_source80.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2531___mcc_h897 = _source80.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2532_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1003;
                    _out1003 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                    _2532_rhsType = _out1003;
                    Dafny.ISequence<Dafny.Rune> _2533_recursiveGen;
                    bool _2534___v51;
                    bool _2535___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1004;
                    bool _out1005;
                    bool _out1006;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, true, out _out1004, out _out1005, out _out1006, out _out1007);
                    _2533_recursiveGen = _out1004;
                    _2534___v51 = _out1005;
                    _2535___v52 = _out1006;
                    _2536_recIdents = _out1007;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2532_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2533_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2536_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2537___mcc_h899 = _source80.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2538_recursiveGen;
                    bool _2539_recOwned;
                    bool _2540_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2541_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1008;
                    bool _out1009;
                    bool _out1010;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1011;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1008, out _out1009, out _out1010, out _out1011);
                    _2538_recursiveGen = _out1008;
                    _2539_recOwned = _out1009;
                    _2540_recErased = _out1010;
                    _2541_recIdents = _out1011;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2539_recOwned;
                    isErased = _2540_recErased;
                    readIdents = _2541_recIdents;
                  }
                }
              } else if (_source79.is_Real) {
                DAST._IType _source83 = _1536___mcc_h306;
                if (_source83.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2542___mcc_h901 = _source83.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2543___mcc_h902 = _source83.dtor_typeArgs;
                  DAST._IResolvedType _2544___mcc_h903 = _source83.dtor_resolved;
                  DAST._IResolvedType _source84 = _2544___mcc_h903;
                  if (_source84.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2545___mcc_h907 = _source84.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2546_recursiveGen;
                      bool _2547_recOwned;
                      bool _2548_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1012;
                      bool _out1013;
                      bool _out1014;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                      _2546_recursiveGen = _out1012;
                      _2547_recOwned = _out1013;
                      _2548_recErased = _out1014;
                      _2549_recIdents = _out1015;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2546_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2547_recOwned;
                      isErased = _2548_recErased;
                      readIdents = _2549_recIdents;
                    }
                  } else if (_source84.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2550___mcc_h909 = _source84.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2551_recursiveGen;
                      bool _2552_recOwned;
                      bool _2553_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2554_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1016;
                      bool _out1017;
                      bool _out1018;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                      _2551_recursiveGen = _out1016;
                      _2552_recOwned = _out1017;
                      _2553_recErased = _out1018;
                      _2554_recIdents = _out1019;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2551_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2552_recOwned;
                      isErased = _2553_recErased;
                      readIdents = _2554_recIdents;
                    }
                  } else {
                    DAST._IType _2555___mcc_h911 = _source84.dtor_Newtype_a0;
                    DAST._IType _2556_b = _2555___mcc_h911;
                    {
                      if (object.Equals(_1529_fromTpe, _2556_b)) {
                        Dafny.ISequence<Dafny.Rune> _2557_recursiveGen;
                        bool _2558_recOwned;
                        bool _2559_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2560_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1020;
                        bool _out1021;
                        bool _out1022;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                        _2557_recursiveGen = _out1020;
                        _2558_recOwned = _out1021;
                        _2559_recErased = _out1022;
                        _2560_recIdents = _out1023;
                        Dafny.ISequence<Dafny.Rune> _2561_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1024;
                        _out1024 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _2561_rhsType = _out1024;
                        Dafny.ISequence<Dafny.Rune> _2562_uneraseFn;
                        _2562_uneraseFn = ((_2558_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2561_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2562_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2557_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2558_recOwned;
                        isErased = false;
                        readIdents = _2560_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1025;
                        bool _out1026;
                        bool _out1027;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2556_b), _2556_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                        s = _out1025;
                        isOwned = _out1026;
                        isErased = _out1027;
                        readIdents = _out1028;
                      }
                    }
                  }
                } else if (_source83.is_Nullable) {
                  DAST._IType _2563___mcc_h913 = _source83.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2564_recursiveGen;
                    bool _2565_recOwned;
                    bool _2566_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2567_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1029;
                    bool _out1030;
                    bool _out1031;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1029, out _out1030, out _out1031, out _out1032);
                    _2564_recursiveGen = _out1029;
                    _2565_recOwned = _out1030;
                    _2566_recErased = _out1031;
                    _2567_recIdents = _out1032;
                    if (!(_2565_recOwned)) {
                      _2564_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2564_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2564_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2566_recErased;
                    readIdents = _2567_recIdents;
                  }
                } else if (_source83.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2568___mcc_h915 = _source83.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2569_recursiveGen;
                    bool _2570_recOwned;
                    bool _2571_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2572_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1033;
                    bool _out1034;
                    bool _out1035;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                    _2569_recursiveGen = _out1033;
                    _2570_recOwned = _out1034;
                    _2571_recErased = _out1035;
                    _2572_recIdents = _out1036;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2569_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2570_recOwned;
                    isErased = _2571_recErased;
                    readIdents = _2572_recIdents;
                  }
                } else if (_source83.is_Array) {
                  DAST._IType _2573___mcc_h917 = _source83.dtor_element;
                  BigInteger _2574___mcc_h918 = _source83.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2575_recursiveGen;
                    bool _2576_recOwned;
                    bool _2577_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2578_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1037;
                    bool _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                    _2575_recursiveGen = _out1037;
                    _2576_recOwned = _out1038;
                    _2577_recErased = _out1039;
                    _2578_recIdents = _out1040;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2575_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2576_recOwned;
                    isErased = _2577_recErased;
                    readIdents = _2578_recIdents;
                  }
                } else if (_source83.is_Seq) {
                  DAST._IType _2579___mcc_h921 = _source83.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2580_recursiveGen;
                    bool _2581_recOwned;
                    bool _2582_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2583_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1041;
                    bool _out1042;
                    bool _out1043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1044;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043, out _out1044);
                    _2580_recursiveGen = _out1041;
                    _2581_recOwned = _out1042;
                    _2582_recErased = _out1043;
                    _2583_recIdents = _out1044;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2580_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2581_recOwned;
                    isErased = _2582_recErased;
                    readIdents = _2583_recIdents;
                  }
                } else if (_source83.is_Set) {
                  DAST._IType _2584___mcc_h923 = _source83.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2585_recursiveGen;
                    bool _2586_recOwned;
                    bool _2587_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2588_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1045;
                    bool _out1046;
                    bool _out1047;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1045, out _out1046, out _out1047, out _out1048);
                    _2585_recursiveGen = _out1045;
                    _2586_recOwned = _out1046;
                    _2587_recErased = _out1047;
                    _2588_recIdents = _out1048;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2585_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2586_recOwned;
                    isErased = _2587_recErased;
                    readIdents = _2588_recIdents;
                  }
                } else if (_source83.is_Multiset) {
                  DAST._IType _2589___mcc_h925 = _source83.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2590_recursiveGen;
                    bool _2591_recOwned;
                    bool _2592_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2593_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1049;
                    bool _out1050;
                    bool _out1051;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                    _2590_recursiveGen = _out1049;
                    _2591_recOwned = _out1050;
                    _2592_recErased = _out1051;
                    _2593_recIdents = _out1052;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2590_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2591_recOwned;
                    isErased = _2592_recErased;
                    readIdents = _2593_recIdents;
                  }
                } else if (_source83.is_Map) {
                  DAST._IType _2594___mcc_h927 = _source83.dtor_key;
                  DAST._IType _2595___mcc_h928 = _source83.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2596_recursiveGen;
                    bool _2597_recOwned;
                    bool _2598_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _2596_recursiveGen = _out1053;
                    _2597_recOwned = _out1054;
                    _2598_recErased = _out1055;
                    _2599_recIdents = _out1056;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2597_recOwned;
                    isErased = _2598_recErased;
                    readIdents = _2599_recIdents;
                  }
                } else if (_source83.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2600___mcc_h931 = _source83.dtor_args;
                  DAST._IType _2601___mcc_h932 = _source83.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2602_recursiveGen;
                    bool _2603_recOwned;
                    bool _2604_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2605_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1057;
                    bool _out1058;
                    bool _out1059;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059, out _out1060);
                    _2602_recursiveGen = _out1057;
                    _2603_recOwned = _out1058;
                    _2604_recErased = _out1059;
                    _2605_recIdents = _out1060;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2602_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2603_recOwned;
                    isErased = _2604_recErased;
                    readIdents = _2605_recIdents;
                  }
                } else if (_source83.is_Primitive) {
                  DAST._IPrimitive _2606___mcc_h935 = _source83.dtor_Primitive_a0;
                  DAST._IPrimitive _source85 = _2606___mcc_h935;
                  if (_source85.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2607_recursiveGen;
                      bool _2608___v48;
                      bool _2609___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2610_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1061;
                      bool _out1062;
                      bool _out1063;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, false, out _out1061, out _out1062, out _out1063, out _out1064);
                      _2607_recursiveGen = _out1061;
                      _2608___v48 = _out1062;
                      _2609___v49 = _out1063;
                      _2610_recIdents = _out1064;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2607_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2610_recIdents;
                    }
                  } else if (_source85.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2611_recursiveGen;
                      bool _2612_recOwned;
                      bool _2613_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2614_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1065;
                      bool _out1066;
                      bool _out1067;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                      _2611_recursiveGen = _out1065;
                      _2612_recOwned = _out1066;
                      _2613_recErased = _out1067;
                      _2614_recIdents = _out1068;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2612_recOwned;
                      isErased = _2613_recErased;
                      readIdents = _2614_recIdents;
                    }
                  } else if (_source85.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2615_recursiveGen;
                      bool _2616_recOwned;
                      bool _2617_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2618_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1069;
                      bool _out1070;
                      bool _out1071;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                      _2615_recursiveGen = _out1069;
                      _2616_recOwned = _out1070;
                      _2617_recErased = _out1071;
                      _2618_recIdents = _out1072;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2616_recOwned;
                      isErased = _2617_recErased;
                      readIdents = _2618_recIdents;
                    }
                  } else if (_source85.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2619_recursiveGen;
                      bool _2620_recOwned;
                      bool _2621_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2622_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1073;
                      bool _out1074;
                      bool _out1075;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                      _2619_recursiveGen = _out1073;
                      _2620_recOwned = _out1074;
                      _2621_recErased = _out1075;
                      _2622_recIdents = _out1076;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2619_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2620_recOwned;
                      isErased = _2621_recErased;
                      readIdents = _2622_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2623_recursiveGen;
                      bool _2624_recOwned;
                      bool _2625_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2626_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1077;
                      bool _out1078;
                      bool _out1079;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                      _2623_recursiveGen = _out1077;
                      _2624_recOwned = _out1078;
                      _2625_recErased = _out1079;
                      _2626_recIdents = _out1080;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2624_recOwned;
                      isErased = _2625_recErased;
                      readIdents = _2626_recIdents;
                    }
                  }
                } else if (_source83.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2627___mcc_h937 = _source83.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2628_recursiveGen;
                    bool _2629_recOwned;
                    bool _2630_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2631_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _2628_recursiveGen = _out1081;
                    _2629_recOwned = _out1082;
                    _2630_recErased = _out1083;
                    _2631_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2628_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2629_recOwned;
                    isErased = _2630_recErased;
                    readIdents = _2631_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2632___mcc_h939 = _source83.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2633_recursiveGen;
                    bool _2634_recOwned;
                    bool _2635_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2636_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1085;
                    bool _out1086;
                    bool _out1087;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087, out _out1088);
                    _2633_recursiveGen = _out1085;
                    _2634_recOwned = _out1086;
                    _2635_recErased = _out1087;
                    _2636_recIdents = _out1088;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2634_recOwned;
                    isErased = _2635_recErased;
                    readIdents = _2636_recIdents;
                  }
                }
              } else if (_source79.is_String) {
                DAST._IType _source86 = _1536___mcc_h306;
                if (_source86.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2637___mcc_h941 = _source86.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2638___mcc_h942 = _source86.dtor_typeArgs;
                  DAST._IResolvedType _2639___mcc_h943 = _source86.dtor_resolved;
                  DAST._IResolvedType _source87 = _2639___mcc_h943;
                  if (_source87.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2640___mcc_h947 = _source87.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2641_recursiveGen;
                      bool _2642_recOwned;
                      bool _2643_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2644_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _2641_recursiveGen = _out1089;
                      _2642_recOwned = _out1090;
                      _2643_recErased = _out1091;
                      _2644_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2642_recOwned;
                      isErased = _2643_recErased;
                      readIdents = _2644_recIdents;
                    }
                  } else if (_source87.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2645___mcc_h949 = _source87.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2646_recursiveGen;
                      bool _2647_recOwned;
                      bool _2648_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2649_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1093;
                      bool _out1094;
                      bool _out1095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                      _2646_recursiveGen = _out1093;
                      _2647_recOwned = _out1094;
                      _2648_recErased = _out1095;
                      _2649_recIdents = _out1096;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2647_recOwned;
                      isErased = _2648_recErased;
                      readIdents = _2649_recIdents;
                    }
                  } else {
                    DAST._IType _2650___mcc_h951 = _source87.dtor_Newtype_a0;
                    DAST._IType _2651_b = _2650___mcc_h951;
                    {
                      if (object.Equals(_1529_fromTpe, _2651_b)) {
                        Dafny.ISequence<Dafny.Rune> _2652_recursiveGen;
                        bool _2653_recOwned;
                        bool _2654_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2655_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1097;
                        bool _out1098;
                        bool _out1099;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                        _2652_recursiveGen = _out1097;
                        _2653_recOwned = _out1098;
                        _2654_recErased = _out1099;
                        _2655_recIdents = _out1100;
                        Dafny.ISequence<Dafny.Rune> _2656_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1101;
                        _out1101 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _2656_rhsType = _out1101;
                        Dafny.ISequence<Dafny.Rune> _2657_uneraseFn;
                        _2657_uneraseFn = ((_2653_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2656_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2657_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2653_recOwned;
                        isErased = false;
                        readIdents = _2655_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1102;
                        bool _out1103;
                        bool _out1104;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2651_b), _2651_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out1102, out _out1103, out _out1104, out _out1105);
                        s = _out1102;
                        isOwned = _out1103;
                        isErased = _out1104;
                        readIdents = _out1105;
                      }
                    }
                  }
                } else if (_source86.is_Nullable) {
                  DAST._IType _2658___mcc_h953 = _source86.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2659_recursiveGen;
                    bool _2660_recOwned;
                    bool _2661_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2662_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1106;
                    bool _out1107;
                    bool _out1108;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                    _2659_recursiveGen = _out1106;
                    _2660_recOwned = _out1107;
                    _2661_recErased = _out1108;
                    _2662_recIdents = _out1109;
                    if (!(_2660_recOwned)) {
                      _2659_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2659_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2659_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2661_recErased;
                    readIdents = _2662_recIdents;
                  }
                } else if (_source86.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2663___mcc_h955 = _source86.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2664_recursiveGen;
                    bool _2665_recOwned;
                    bool _2666_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2667_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1110;
                    bool _out1111;
                    bool _out1112;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                    _2664_recursiveGen = _out1110;
                    _2665_recOwned = _out1111;
                    _2666_recErased = _out1112;
                    _2667_recIdents = _out1113;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2664_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2665_recOwned;
                    isErased = _2666_recErased;
                    readIdents = _2667_recIdents;
                  }
                } else if (_source86.is_Array) {
                  DAST._IType _2668___mcc_h957 = _source86.dtor_element;
                  BigInteger _2669___mcc_h958 = _source86.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2670_recursiveGen;
                    bool _2671_recOwned;
                    bool _2672_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2673_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1114;
                    bool _out1115;
                    bool _out1116;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                    _2670_recursiveGen = _out1114;
                    _2671_recOwned = _out1115;
                    _2672_recErased = _out1116;
                    _2673_recIdents = _out1117;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2671_recOwned;
                    isErased = _2672_recErased;
                    readIdents = _2673_recIdents;
                  }
                } else if (_source86.is_Seq) {
                  DAST._IType _2674___mcc_h961 = _source86.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2675_recursiveGen;
                    bool _2676_recOwned;
                    bool _2677_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2678_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1118;
                    bool _out1119;
                    bool _out1120;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                    _2675_recursiveGen = _out1118;
                    _2676_recOwned = _out1119;
                    _2677_recErased = _out1120;
                    _2678_recIdents = _out1121;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2675_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2676_recOwned;
                    isErased = _2677_recErased;
                    readIdents = _2678_recIdents;
                  }
                } else if (_source86.is_Set) {
                  DAST._IType _2679___mcc_h963 = _source86.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2680_recursiveGen;
                    bool _2681_recOwned;
                    bool _2682_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2683_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1122;
                    bool _out1123;
                    bool _out1124;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                    _2680_recursiveGen = _out1122;
                    _2681_recOwned = _out1123;
                    _2682_recErased = _out1124;
                    _2683_recIdents = _out1125;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2681_recOwned;
                    isErased = _2682_recErased;
                    readIdents = _2683_recIdents;
                  }
                } else if (_source86.is_Multiset) {
                  DAST._IType _2684___mcc_h965 = _source86.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2685_recursiveGen;
                    bool _2686_recOwned;
                    bool _2687_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2688_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1126;
                    bool _out1127;
                    bool _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                    _2685_recursiveGen = _out1126;
                    _2686_recOwned = _out1127;
                    _2687_recErased = _out1128;
                    _2688_recIdents = _out1129;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2686_recOwned;
                    isErased = _2687_recErased;
                    readIdents = _2688_recIdents;
                  }
                } else if (_source86.is_Map) {
                  DAST._IType _2689___mcc_h967 = _source86.dtor_key;
                  DAST._IType _2690___mcc_h968 = _source86.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2691_recursiveGen;
                    bool _2692_recOwned;
                    bool _2693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _2691_recursiveGen = _out1130;
                    _2692_recOwned = _out1131;
                    _2693_recErased = _out1132;
                    _2694_recIdents = _out1133;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2692_recOwned;
                    isErased = _2693_recErased;
                    readIdents = _2694_recIdents;
                  }
                } else if (_source86.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2695___mcc_h971 = _source86.dtor_args;
                  DAST._IType _2696___mcc_h972 = _source86.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2697_recursiveGen;
                    bool _2698_recOwned;
                    bool _2699_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2700_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _2697_recursiveGen = _out1134;
                    _2698_recOwned = _out1135;
                    _2699_recErased = _out1136;
                    _2700_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2698_recOwned;
                    isErased = _2699_recErased;
                    readIdents = _2700_recIdents;
                  }
                } else if (_source86.is_Primitive) {
                  DAST._IPrimitive _2701___mcc_h975 = _source86.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2702_recursiveGen;
                    bool _2703_recOwned;
                    bool _2704_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2705_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _2702_recursiveGen = _out1138;
                    _2703_recOwned = _out1139;
                    _2704_recErased = _out1140;
                    _2705_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2702_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2703_recOwned;
                    isErased = _2704_recErased;
                    readIdents = _2705_recIdents;
                  }
                } else if (_source86.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2706___mcc_h977 = _source86.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2707_recursiveGen;
                    bool _2708_recOwned;
                    bool _2709_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2710_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _2707_recursiveGen = _out1142;
                    _2708_recOwned = _out1143;
                    _2709_recErased = _out1144;
                    _2710_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2707_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2708_recOwned;
                    isErased = _2709_recErased;
                    readIdents = _2710_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2711___mcc_h979 = _source86.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2712_recursiveGen;
                    bool _2713_recOwned;
                    bool _2714_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2715_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1146;
                    bool _out1147;
                    bool _out1148;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                    _2712_recursiveGen = _out1146;
                    _2713_recOwned = _out1147;
                    _2714_recErased = _out1148;
                    _2715_recIdents = _out1149;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2712_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2713_recOwned;
                    isErased = _2714_recErased;
                    readIdents = _2715_recIdents;
                  }
                }
              } else if (_source79.is_Bool) {
                DAST._IType _source88 = _1536___mcc_h306;
                if (_source88.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2716___mcc_h981 = _source88.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2717___mcc_h982 = _source88.dtor_typeArgs;
                  DAST._IResolvedType _2718___mcc_h983 = _source88.dtor_resolved;
                  DAST._IResolvedType _source89 = _2718___mcc_h983;
                  if (_source89.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2719___mcc_h987 = _source89.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2720_recursiveGen;
                      bool _2721_recOwned;
                      bool _2722_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2723_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1150;
                      bool _out1151;
                      bool _out1152;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                      _2720_recursiveGen = _out1150;
                      _2721_recOwned = _out1151;
                      _2722_recErased = _out1152;
                      _2723_recIdents = _out1153;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2721_recOwned;
                      isErased = _2722_recErased;
                      readIdents = _2723_recIdents;
                    }
                  } else if (_source89.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2724___mcc_h989 = _source89.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2725_recursiveGen;
                      bool _2726_recOwned;
                      bool _2727_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2728_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1154;
                      bool _out1155;
                      bool _out1156;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                      _2725_recursiveGen = _out1154;
                      _2726_recOwned = _out1155;
                      _2727_recErased = _out1156;
                      _2728_recIdents = _out1157;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2726_recOwned;
                      isErased = _2727_recErased;
                      readIdents = _2728_recIdents;
                    }
                  } else {
                    DAST._IType _2729___mcc_h991 = _source89.dtor_Newtype_a0;
                    DAST._IType _2730_b = _2729___mcc_h991;
                    {
                      if (object.Equals(_1529_fromTpe, _2730_b)) {
                        Dafny.ISequence<Dafny.Rune> _2731_recursiveGen;
                        bool _2732_recOwned;
                        bool _2733_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1158;
                        bool _out1159;
                        bool _out1160;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                        _2731_recursiveGen = _out1158;
                        _2732_recOwned = _out1159;
                        _2733_recErased = _out1160;
                        _2734_recIdents = _out1161;
                        Dafny.ISequence<Dafny.Rune> _2735_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1162;
                        _out1162 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _2735_rhsType = _out1162;
                        Dafny.ISequence<Dafny.Rune> _2736_uneraseFn;
                        _2736_uneraseFn = ((_2732_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2735_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2736_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2732_recOwned;
                        isErased = false;
                        readIdents = _2734_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1163;
                        bool _out1164;
                        bool _out1165;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2730_b), _2730_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                        s = _out1163;
                        isOwned = _out1164;
                        isErased = _out1165;
                        readIdents = _out1166;
                      }
                    }
                  }
                } else if (_source88.is_Nullable) {
                  DAST._IType _2737___mcc_h993 = _source88.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2738_recursiveGen;
                    bool _2739_recOwned;
                    bool _2740_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2741_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2738_recursiveGen = _out1167;
                    _2739_recOwned = _out1168;
                    _2740_recErased = _out1169;
                    _2741_recIdents = _out1170;
                    if (!(_2739_recOwned)) {
                      _2738_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2738_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2738_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2740_recErased;
                    readIdents = _2741_recIdents;
                  }
                } else if (_source88.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2742___mcc_h995 = _source88.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2743_recursiveGen;
                    bool _2744_recOwned;
                    bool _2745_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2746_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2743_recursiveGen = _out1171;
                    _2744_recOwned = _out1172;
                    _2745_recErased = _out1173;
                    _2746_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2744_recOwned;
                    isErased = _2745_recErased;
                    readIdents = _2746_recIdents;
                  }
                } else if (_source88.is_Array) {
                  DAST._IType _2747___mcc_h997 = _source88.dtor_element;
                  BigInteger _2748___mcc_h998 = _source88.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2749_recursiveGen;
                    bool _2750_recOwned;
                    bool _2751_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2752_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1175;
                    bool _out1176;
                    bool _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                    _2749_recursiveGen = _out1175;
                    _2750_recOwned = _out1176;
                    _2751_recErased = _out1177;
                    _2752_recIdents = _out1178;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2750_recOwned;
                    isErased = _2751_recErased;
                    readIdents = _2752_recIdents;
                  }
                } else if (_source88.is_Seq) {
                  DAST._IType _2753___mcc_h1001 = _source88.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2754_recursiveGen;
                    bool _2755_recOwned;
                    bool _2756_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2757_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1179;
                    bool _out1180;
                    bool _out1181;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                    _2754_recursiveGen = _out1179;
                    _2755_recOwned = _out1180;
                    _2756_recErased = _out1181;
                    _2757_recIdents = _out1182;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2755_recOwned;
                    isErased = _2756_recErased;
                    readIdents = _2757_recIdents;
                  }
                } else if (_source88.is_Set) {
                  DAST._IType _2758___mcc_h1003 = _source88.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2759_recursiveGen;
                    bool _2760_recOwned;
                    bool _2761_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1183;
                    bool _out1184;
                    bool _out1185;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                    _2759_recursiveGen = _out1183;
                    _2760_recOwned = _out1184;
                    _2761_recErased = _out1185;
                    _2762_recIdents = _out1186;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2760_recOwned;
                    isErased = _2761_recErased;
                    readIdents = _2762_recIdents;
                  }
                } else if (_source88.is_Multiset) {
                  DAST._IType _2763___mcc_h1005 = _source88.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2764_recursiveGen;
                    bool _2765_recOwned;
                    bool _2766_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1187;
                    bool _out1188;
                    bool _out1189;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                    _2764_recursiveGen = _out1187;
                    _2765_recOwned = _out1188;
                    _2766_recErased = _out1189;
                    _2767_recIdents = _out1190;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2765_recOwned;
                    isErased = _2766_recErased;
                    readIdents = _2767_recIdents;
                  }
                } else if (_source88.is_Map) {
                  DAST._IType _2768___mcc_h1007 = _source88.dtor_key;
                  DAST._IType _2769___mcc_h1008 = _source88.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2770_recursiveGen;
                    bool _2771_recOwned;
                    bool _2772_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2773_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2770_recursiveGen = _out1191;
                    _2771_recOwned = _out1192;
                    _2772_recErased = _out1193;
                    _2773_recIdents = _out1194;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2771_recOwned;
                    isErased = _2772_recErased;
                    readIdents = _2773_recIdents;
                  }
                } else if (_source88.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2774___mcc_h1011 = _source88.dtor_args;
                  DAST._IType _2775___mcc_h1012 = _source88.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2776_recursiveGen;
                    bool _2777_recOwned;
                    bool _2778_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2779_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2776_recursiveGen = _out1195;
                    _2777_recOwned = _out1196;
                    _2778_recErased = _out1197;
                    _2779_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2776_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2777_recOwned;
                    isErased = _2778_recErased;
                    readIdents = _2779_recIdents;
                  }
                } else if (_source88.is_Primitive) {
                  DAST._IPrimitive _2780___mcc_h1015 = _source88.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2781_recursiveGen;
                    bool _2782_recOwned;
                    bool _2783_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2784_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2781_recursiveGen = _out1199;
                    _2782_recOwned = _out1200;
                    _2783_recErased = _out1201;
                    _2784_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2781_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2782_recOwned;
                    isErased = _2783_recErased;
                    readIdents = _2784_recIdents;
                  }
                } else if (_source88.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2785___mcc_h1017 = _source88.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2786_recursiveGen;
                    bool _2787_recOwned;
                    bool _2788_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2789_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2786_recursiveGen = _out1203;
                    _2787_recOwned = _out1204;
                    _2788_recErased = _out1205;
                    _2789_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2787_recOwned;
                    isErased = _2788_recErased;
                    readIdents = _2789_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2790___mcc_h1019 = _source88.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2791_recursiveGen;
                    bool _2792_recOwned;
                    bool _2793_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2794_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1207;
                    bool _out1208;
                    bool _out1209;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                    _2791_recursiveGen = _out1207;
                    _2792_recOwned = _out1208;
                    _2793_recErased = _out1209;
                    _2794_recIdents = _out1210;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2792_recOwned;
                    isErased = _2793_recErased;
                    readIdents = _2794_recIdents;
                  }
                }
              } else {
                DAST._IType _source90 = _1536___mcc_h306;
                if (_source90.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2795___mcc_h1021 = _source90.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2796___mcc_h1022 = _source90.dtor_typeArgs;
                  DAST._IResolvedType _2797___mcc_h1023 = _source90.dtor_resolved;
                  DAST._IResolvedType _source91 = _2797___mcc_h1023;
                  if (_source91.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2798___mcc_h1027 = _source91.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2799_recursiveGen;
                      bool _2800_recOwned;
                      bool _2801_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1211;
                      bool _out1212;
                      bool _out1213;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                      _2799_recursiveGen = _out1211;
                      _2800_recOwned = _out1212;
                      _2801_recErased = _out1213;
                      _2802_recIdents = _out1214;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2800_recOwned;
                      isErased = _2801_recErased;
                      readIdents = _2802_recIdents;
                    }
                  } else if (_source91.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2803___mcc_h1029 = _source91.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2804_recursiveGen;
                      bool _2805_recOwned;
                      bool _2806_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2807_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1215;
                      bool _out1216;
                      bool _out1217;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                      _2804_recursiveGen = _out1215;
                      _2805_recOwned = _out1216;
                      _2806_recErased = _out1217;
                      _2807_recIdents = _out1218;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2805_recOwned;
                      isErased = _2806_recErased;
                      readIdents = _2807_recIdents;
                    }
                  } else {
                    DAST._IType _2808___mcc_h1031 = _source91.dtor_Newtype_a0;
                    DAST._IType _2809_b = _2808___mcc_h1031;
                    {
                      if (object.Equals(_1529_fromTpe, _2809_b)) {
                        Dafny.ISequence<Dafny.Rune> _2810_recursiveGen;
                        bool _2811_recOwned;
                        bool _2812_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2813_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1219;
                        bool _out1220;
                        bool _out1221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                        DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                        _2810_recursiveGen = _out1219;
                        _2811_recOwned = _out1220;
                        _2812_recErased = _out1221;
                        _2813_recIdents = _out1222;
                        Dafny.ISequence<Dafny.Rune> _2814_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1223;
                        _out1223 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                        _2814_rhsType = _out1223;
                        Dafny.ISequence<Dafny.Rune> _2815_uneraseFn;
                        _2815_uneraseFn = ((_2811_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2814_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2815_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2810_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2811_recOwned;
                        isErased = false;
                        readIdents = _2813_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1224;
                        bool _out1225;
                        bool _out1226;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2809_b), _2809_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                        s = _out1224;
                        isOwned = _out1225;
                        isErased = _out1226;
                        readIdents = _out1227;
                      }
                    }
                  }
                } else if (_source90.is_Nullable) {
                  DAST._IType _2816___mcc_h1033 = _source90.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2817_recursiveGen;
                    bool _2818_recOwned;
                    bool _2819_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2820_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2817_recursiveGen = _out1228;
                    _2818_recOwned = _out1229;
                    _2819_recErased = _out1230;
                    _2820_recIdents = _out1231;
                    if (!(_2818_recOwned)) {
                      _2817_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2817_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2819_recErased;
                    readIdents = _2820_recIdents;
                  }
                } else if (_source90.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2821___mcc_h1035 = _source90.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2822_recursiveGen;
                    bool _2823_recOwned;
                    bool _2824_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2822_recursiveGen = _out1232;
                    _2823_recOwned = _out1233;
                    _2824_recErased = _out1234;
                    _2825_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2823_recOwned;
                    isErased = _2824_recErased;
                    readIdents = _2825_recIdents;
                  }
                } else if (_source90.is_Array) {
                  DAST._IType _2826___mcc_h1037 = _source90.dtor_element;
                  BigInteger _2827___mcc_h1038 = _source90.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2828_recursiveGen;
                    bool _2829_recOwned;
                    bool _2830_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2831_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1236;
                    bool _out1237;
                    bool _out1238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                    _2828_recursiveGen = _out1236;
                    _2829_recOwned = _out1237;
                    _2830_recErased = _out1238;
                    _2831_recIdents = _out1239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2828_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2829_recOwned;
                    isErased = _2830_recErased;
                    readIdents = _2831_recIdents;
                  }
                } else if (_source90.is_Seq) {
                  DAST._IType _2832___mcc_h1041 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2833_recursiveGen;
                    bool _2834_recOwned;
                    bool _2835_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2836_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1240;
                    bool _out1241;
                    bool _out1242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                    _2833_recursiveGen = _out1240;
                    _2834_recOwned = _out1241;
                    _2835_recErased = _out1242;
                    _2836_recIdents = _out1243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2834_recOwned;
                    isErased = _2835_recErased;
                    readIdents = _2836_recIdents;
                  }
                } else if (_source90.is_Set) {
                  DAST._IType _2837___mcc_h1043 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2838_recursiveGen;
                    bool _2839_recOwned;
                    bool _2840_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2841_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1244;
                    bool _out1245;
                    bool _out1246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                    _2838_recursiveGen = _out1244;
                    _2839_recOwned = _out1245;
                    _2840_recErased = _out1246;
                    _2841_recIdents = _out1247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2838_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2839_recOwned;
                    isErased = _2840_recErased;
                    readIdents = _2841_recIdents;
                  }
                } else if (_source90.is_Multiset) {
                  DAST._IType _2842___mcc_h1045 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2843_recursiveGen;
                    bool _2844_recOwned;
                    bool _2845_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2846_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1248;
                    bool _out1249;
                    bool _out1250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                    _2843_recursiveGen = _out1248;
                    _2844_recOwned = _out1249;
                    _2845_recErased = _out1250;
                    _2846_recIdents = _out1251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2843_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2844_recOwned;
                    isErased = _2845_recErased;
                    readIdents = _2846_recIdents;
                  }
                } else if (_source90.is_Map) {
                  DAST._IType _2847___mcc_h1047 = _source90.dtor_key;
                  DAST._IType _2848___mcc_h1048 = _source90.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2849_recursiveGen;
                    bool _2850_recOwned;
                    bool _2851_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2852_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2849_recursiveGen = _out1252;
                    _2850_recOwned = _out1253;
                    _2851_recErased = _out1254;
                    _2852_recIdents = _out1255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2850_recOwned;
                    isErased = _2851_recErased;
                    readIdents = _2852_recIdents;
                  }
                } else if (_source90.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2853___mcc_h1051 = _source90.dtor_args;
                  DAST._IType _2854___mcc_h1052 = _source90.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2855_recursiveGen;
                    bool _2856_recOwned;
                    bool _2857_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2858_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1256;
                    bool _out1257;
                    bool _out1258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                    _2855_recursiveGen = _out1256;
                    _2856_recOwned = _out1257;
                    _2857_recErased = _out1258;
                    _2858_recIdents = _out1259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2855_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2856_recOwned;
                    isErased = _2857_recErased;
                    readIdents = _2858_recIdents;
                  }
                } else if (_source90.is_Primitive) {
                  DAST._IPrimitive _2859___mcc_h1055 = _source90.dtor_Primitive_a0;
                  DAST._IPrimitive _source92 = _2859___mcc_h1055;
                  if (_source92.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2860_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      _out1260 = DCOMP.COMP.GenType(_1529_fromTpe, true, false);
                      _2860_rhsType = _out1260;
                      Dafny.ISequence<Dafny.Rune> _2861_recursiveGen;
                      bool _2862___v58;
                      bool _2863___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2864_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1261;
                      bool _out1262;
                      bool _out1263;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1264;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, true, out _out1261, out _out1262, out _out1263, out _out1264);
                      _2861_recursiveGen = _out1261;
                      _2862___v58 = _out1262;
                      _2863___v59 = _out1263;
                      _2864_recIdents = _out1264;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2861_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2864_recIdents;
                    }
                  } else if (_source92.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2865_recursiveGen;
                      bool _2866_recOwned;
                      bool _2867_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2868_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1265;
                      bool _out1266;
                      bool _out1267;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                      _2865_recursiveGen = _out1265;
                      _2866_recOwned = _out1266;
                      _2867_recErased = _out1267;
                      _2868_recIdents = _out1268;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2866_recOwned;
                      isErased = _2867_recErased;
                      readIdents = _2868_recIdents;
                    }
                  } else if (_source92.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2869_recursiveGen;
                      bool _2870_recOwned;
                      bool _2871_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1269;
                      bool _out1270;
                      bool _out1271;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                      _2869_recursiveGen = _out1269;
                      _2870_recOwned = _out1270;
                      _2871_recErased = _out1271;
                      _2872_recIdents = _out1272;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2870_recOwned;
                      isErased = _2871_recErased;
                      readIdents = _2872_recIdents;
                    }
                  } else if (_source92.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2873_recursiveGen;
                      bool _2874_recOwned;
                      bool _2875_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2876_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1273;
                      bool _out1274;
                      bool _out1275;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                      _2873_recursiveGen = _out1273;
                      _2874_recOwned = _out1274;
                      _2875_recErased = _out1275;
                      _2876_recIdents = _out1276;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2873_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2874_recOwned;
                      isErased = _2875_recErased;
                      readIdents = _2876_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2877_recursiveGen;
                      bool _2878_recOwned;
                      bool _2879_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2880_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1277;
                      bool _out1278;
                      bool _out1279;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                      _2877_recursiveGen = _out1277;
                      _2878_recOwned = _out1278;
                      _2879_recErased = _out1279;
                      _2880_recIdents = _out1280;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2878_recOwned;
                      isErased = _2879_recErased;
                      readIdents = _2880_recIdents;
                    }
                  }
                } else if (_source90.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2881___mcc_h1057 = _source90.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2882_recursiveGen;
                    bool _2883_recOwned;
                    bool _2884_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2885_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _2882_recursiveGen = _out1281;
                    _2883_recOwned = _out1282;
                    _2884_recErased = _out1283;
                    _2885_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2883_recOwned;
                    isErased = _2884_recErased;
                    readIdents = _2885_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2886___mcc_h1059 = _source90.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2887_recursiveGen;
                    bool _2888_recOwned;
                    bool _2889_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2890_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1285;
                    bool _out1286;
                    bool _out1287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1285, out _out1286, out _out1287, out _out1288);
                    _2887_recursiveGen = _out1285;
                    _2888_recOwned = _out1286;
                    _2889_recErased = _out1287;
                    _2890_recIdents = _out1288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2888_recOwned;
                    isErased = _2889_recErased;
                    readIdents = _2890_recIdents;
                  }
                }
              }
            } else if (_source55.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2891___mcc_h1061 = _source55.dtor_Passthrough_a0;
              DAST._IType _source93 = _1536___mcc_h306;
              if (_source93.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2892___mcc_h1065 = _source93.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2893___mcc_h1066 = _source93.dtor_typeArgs;
                DAST._IResolvedType _2894___mcc_h1067 = _source93.dtor_resolved;
                DAST._IResolvedType _source94 = _2894___mcc_h1067;
                if (_source94.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2895___mcc_h1071 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2896_recursiveGen;
                    bool _2897_recOwned;
                    bool _2898_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2899_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1289;
                    bool _out1290;
                    bool _out1291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                    _2896_recursiveGen = _out1289;
                    _2897_recOwned = _out1290;
                    _2898_recErased = _out1291;
                    _2899_recIdents = _out1292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2897_recOwned;
                    isErased = _2898_recErased;
                    readIdents = _2899_recIdents;
                  }
                } else if (_source94.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2900___mcc_h1073 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2901_recursiveGen;
                    bool _2902_recOwned;
                    bool _2903_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2904_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1293;
                    bool _out1294;
                    bool _out1295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                    _2901_recursiveGen = _out1293;
                    _2902_recOwned = _out1294;
                    _2903_recErased = _out1295;
                    _2904_recIdents = _out1296;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2902_recOwned;
                    isErased = _2903_recErased;
                    readIdents = _2904_recIdents;
                  }
                } else {
                  DAST._IType _2905___mcc_h1075 = _source94.dtor_Newtype_a0;
                  DAST._IType _2906_b = _2905___mcc_h1075;
                  {
                    if (object.Equals(_1529_fromTpe, _2906_b)) {
                      Dafny.ISequence<Dafny.Rune> _2907_recursiveGen;
                      bool _2908_recOwned;
                      bool _2909_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2910_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      bool _out1298;
                      bool _out1299;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                      _2907_recursiveGen = _out1297;
                      _2908_recOwned = _out1298;
                      _2909_recErased = _out1299;
                      _2910_recIdents = _out1300;
                      Dafny.ISequence<Dafny.Rune> _2911_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1301;
                      _out1301 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _2911_rhsType = _out1301;
                      Dafny.ISequence<Dafny.Rune> _2912_uneraseFn;
                      _2912_uneraseFn = ((_2908_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2911_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2912_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2908_recOwned;
                      isErased = false;
                      readIdents = _2910_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1302;
                      bool _out1303;
                      bool _out1304;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _2906_b), _2906_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out1302, out _out1303, out _out1304, out _out1305);
                      s = _out1302;
                      isOwned = _out1303;
                      isErased = _out1304;
                      readIdents = _out1305;
                    }
                  }
                }
              } else if (_source93.is_Nullable) {
                DAST._IType _2913___mcc_h1077 = _source93.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2914_recursiveGen;
                  bool _2915_recOwned;
                  bool _2916_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2917_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1306;
                  bool _out1307;
                  bool _out1308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                  _2914_recursiveGen = _out1306;
                  _2915_recOwned = _out1307;
                  _2916_recErased = _out1308;
                  _2917_recIdents = _out1309;
                  if (!(_2915_recOwned)) {
                    _2914_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2914_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2916_recErased;
                  readIdents = _2917_recIdents;
                }
              } else if (_source93.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2918___mcc_h1079 = _source93.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2919_recursiveGen;
                  bool _2920_recOwned;
                  bool _2921_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2922_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1310;
                  bool _out1311;
                  bool _out1312;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                  _2919_recursiveGen = _out1310;
                  _2920_recOwned = _out1311;
                  _2921_recErased = _out1312;
                  _2922_recIdents = _out1313;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2920_recOwned;
                  isErased = _2921_recErased;
                  readIdents = _2922_recIdents;
                }
              } else if (_source93.is_Array) {
                DAST._IType _2923___mcc_h1081 = _source93.dtor_element;
                BigInteger _2924___mcc_h1082 = _source93.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2925_recursiveGen;
                  bool _2926_recOwned;
                  bool _2927_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2928_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1314;
                  bool _out1315;
                  bool _out1316;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                  _2925_recursiveGen = _out1314;
                  _2926_recOwned = _out1315;
                  _2927_recErased = _out1316;
                  _2928_recIdents = _out1317;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2926_recOwned;
                  isErased = _2927_recErased;
                  readIdents = _2928_recIdents;
                }
              } else if (_source93.is_Seq) {
                DAST._IType _2929___mcc_h1085 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2930_recursiveGen;
                  bool _2931_recOwned;
                  bool _2932_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2933_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1318;
                  bool _out1319;
                  bool _out1320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                  _2930_recursiveGen = _out1318;
                  _2931_recOwned = _out1319;
                  _2932_recErased = _out1320;
                  _2933_recIdents = _out1321;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2931_recOwned;
                  isErased = _2932_recErased;
                  readIdents = _2933_recIdents;
                }
              } else if (_source93.is_Set) {
                DAST._IType _2934___mcc_h1087 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2935_recursiveGen;
                  bool _2936_recOwned;
                  bool _2937_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2938_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1322;
                  bool _out1323;
                  bool _out1324;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                  _2935_recursiveGen = _out1322;
                  _2936_recOwned = _out1323;
                  _2937_recErased = _out1324;
                  _2938_recIdents = _out1325;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2936_recOwned;
                  isErased = _2937_recErased;
                  readIdents = _2938_recIdents;
                }
              } else if (_source93.is_Multiset) {
                DAST._IType _2939___mcc_h1089 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2940_recursiveGen;
                  bool _2941_recOwned;
                  bool _2942_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2943_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1326;
                  bool _out1327;
                  bool _out1328;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                  _2940_recursiveGen = _out1326;
                  _2941_recOwned = _out1327;
                  _2942_recErased = _out1328;
                  _2943_recIdents = _out1329;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2940_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2941_recOwned;
                  isErased = _2942_recErased;
                  readIdents = _2943_recIdents;
                }
              } else if (_source93.is_Map) {
                DAST._IType _2944___mcc_h1091 = _source93.dtor_key;
                DAST._IType _2945___mcc_h1092 = _source93.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2946_recursiveGen;
                  bool _2947_recOwned;
                  bool _2948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _2946_recursiveGen = _out1330;
                  _2947_recOwned = _out1331;
                  _2948_recErased = _out1332;
                  _2949_recIdents = _out1333;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2947_recOwned;
                  isErased = _2948_recErased;
                  readIdents = _2949_recIdents;
                }
              } else if (_source93.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2950___mcc_h1095 = _source93.dtor_args;
                DAST._IType _2951___mcc_h1096 = _source93.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2952_recursiveGen;
                  bool _2953_recOwned;
                  bool _2954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1334;
                  bool _out1335;
                  bool _out1336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                  _2952_recursiveGen = _out1334;
                  _2953_recOwned = _out1335;
                  _2954_recErased = _out1336;
                  _2955_recIdents = _out1337;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2953_recOwned;
                  isErased = _2954_recErased;
                  readIdents = _2955_recIdents;
                }
              } else if (_source93.is_Primitive) {
                DAST._IPrimitive _2956___mcc_h1099 = _source93.dtor_Primitive_a0;
                DAST._IPrimitive _source95 = _2956___mcc_h1099;
                if (_source95.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2957_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    _out1338 = DCOMP.COMP.GenType(_1529_fromTpe, true, false);
                    _2957_rhsType = _out1338;
                    Dafny.ISequence<Dafny.Rune> _2958_recursiveGen;
                    bool _2959___v54;
                    bool _2960___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2961_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1339;
                    bool _out1340;
                    bool _out1341;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1342;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, true, out _out1339, out _out1340, out _out1341, out _out1342);
                    _2958_recursiveGen = _out1339;
                    _2959___v54 = _out1340;
                    _2960___v55 = _out1341;
                    _2961_recIdents = _out1342;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2958_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2961_recIdents;
                  }
                } else if (_source95.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2962_recursiveGen;
                    bool _2963_recOwned;
                    bool _2964_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1343;
                    bool _out1344;
                    bool _out1345;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                    _2962_recursiveGen = _out1343;
                    _2963_recOwned = _out1344;
                    _2964_recErased = _out1345;
                    _2965_recIdents = _out1346;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2963_recOwned;
                    isErased = _2964_recErased;
                    readIdents = _2965_recIdents;
                  }
                } else if (_source95.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2966_recursiveGen;
                    bool _2967_recOwned;
                    bool _2968_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2969_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1347;
                    bool _out1348;
                    bool _out1349;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                    _2966_recursiveGen = _out1347;
                    _2967_recOwned = _out1348;
                    _2968_recErased = _out1349;
                    _2969_recIdents = _out1350;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2966_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2967_recOwned;
                    isErased = _2968_recErased;
                    readIdents = _2969_recIdents;
                  }
                } else if (_source95.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2970_recursiveGen;
                    bool _2971_recOwned;
                    bool _2972_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2973_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1351;
                    bool _out1352;
                    bool _out1353;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                    _2970_recursiveGen = _out1351;
                    _2971_recOwned = _out1352;
                    _2972_recErased = _out1353;
                    _2973_recIdents = _out1354;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2970_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2971_recOwned;
                    isErased = _2972_recErased;
                    readIdents = _2973_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2974_recursiveGen;
                    bool _2975_recOwned;
                    bool _2976_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2977_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2974_recursiveGen = _out1355;
                    _2975_recOwned = _out1356;
                    _2976_recErased = _out1357;
                    _2977_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2974_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2975_recOwned;
                    isErased = _2976_recErased;
                    readIdents = _2977_recIdents;
                  }
                }
              } else if (_source93.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2978___mcc_h1101 = _source93.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2979_recursiveGen;
                  bool _2980___v62;
                  bool _2981___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2982_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  bool _out1360;
                  bool _out1361;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, true, out _out1359, out _out1360, out _out1361, out _out1362);
                  _2979_recursiveGen = _out1359;
                  _2980___v62 = _out1360;
                  _2981___v63 = _out1361;
                  _2982_recIdents = _out1362;
                  Dafny.ISequence<Dafny.Rune> _2983_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1363;
                  _out1363 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                  _2983_toTpeGen = _out1363;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2979_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2983_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2982_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2984___mcc_h1103 = _source93.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2985_recursiveGen;
                  bool _2986_recOwned;
                  bool _2987_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2988_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1364;
                  bool _out1365;
                  bool _out1366;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1364, out _out1365, out _out1366, out _out1367);
                  _2985_recursiveGen = _out1364;
                  _2986_recOwned = _out1365;
                  _2987_recErased = _out1366;
                  _2988_recIdents = _out1367;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2985_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2986_recOwned;
                  isErased = _2987_recErased;
                  readIdents = _2988_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2989___mcc_h1105 = _source55.dtor_TypeArg_a0;
              DAST._IType _source96 = _1536___mcc_h306;
              if (_source96.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2990___mcc_h1109 = _source96.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2991___mcc_h1110 = _source96.dtor_typeArgs;
                DAST._IResolvedType _2992___mcc_h1111 = _source96.dtor_resolved;
                DAST._IResolvedType _source97 = _2992___mcc_h1111;
                if (_source97.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2993___mcc_h1115 = _source97.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2994_recursiveGen;
                    bool _2995_recOwned;
                    bool _2996_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2997_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1368;
                    bool _out1369;
                    bool _out1370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                    _2994_recursiveGen = _out1368;
                    _2995_recOwned = _out1369;
                    _2996_recErased = _out1370;
                    _2997_recIdents = _out1371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2994_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2995_recOwned;
                    isErased = _2996_recErased;
                    readIdents = _2997_recIdents;
                  }
                } else if (_source97.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2998___mcc_h1117 = _source97.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2999_recursiveGen;
                    bool _3000_recOwned;
                    bool _3001_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1372;
                    bool _out1373;
                    bool _out1374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                    DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                    _2999_recursiveGen = _out1372;
                    _3000_recOwned = _out1373;
                    _3001_recErased = _out1374;
                    _3002_recIdents = _out1375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3000_recOwned;
                    isErased = _3001_recErased;
                    readIdents = _3002_recIdents;
                  }
                } else {
                  DAST._IType _3003___mcc_h1119 = _source97.dtor_Newtype_a0;
                  DAST._IType _3004_b = _3003___mcc_h1119;
                  {
                    if (object.Equals(_1529_fromTpe, _3004_b)) {
                      Dafny.ISequence<Dafny.Rune> _3005_recursiveGen;
                      bool _3006_recOwned;
                      bool _3007_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3008_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1376;
                      bool _out1377;
                      bool _out1378;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                      DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                      _3005_recursiveGen = _out1376;
                      _3006_recOwned = _out1377;
                      _3007_recErased = _out1378;
                      _3008_recIdents = _out1379;
                      Dafny.ISequence<Dafny.Rune> _3009_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1380;
                      _out1380 = DCOMP.COMP.GenType(_1528_toTpe, true, false);
                      _3009_rhsType = _out1380;
                      Dafny.ISequence<Dafny.Rune> _3010_uneraseFn;
                      _3010_uneraseFn = ((_3006_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3009_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3010_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3005_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3006_recOwned;
                      isErased = false;
                      readIdents = _3008_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1381;
                      bool _out1382;
                      bool _out1383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1530_expr, _1529_fromTpe, _3004_b), _3004_b, _1528_toTpe), selfIdent, @params, mustOwn, out _out1381, out _out1382, out _out1383, out _out1384);
                      s = _out1381;
                      isOwned = _out1382;
                      isErased = _out1383;
                      readIdents = _out1384;
                    }
                  }
                }
              } else if (_source96.is_Nullable) {
                DAST._IType _3011___mcc_h1121 = _source96.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3012_recursiveGen;
                  bool _3013_recOwned;
                  bool _3014_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3015_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1385;
                  bool _out1386;
                  bool _out1387;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1385, out _out1386, out _out1387, out _out1388);
                  _3012_recursiveGen = _out1385;
                  _3013_recOwned = _out1386;
                  _3014_recErased = _out1387;
                  _3015_recIdents = _out1388;
                  if (!(_3013_recOwned)) {
                    _3012_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3012_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3012_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3014_recErased;
                  readIdents = _3015_recIdents;
                }
              } else if (_source96.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3016___mcc_h1123 = _source96.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3017_recursiveGen;
                  bool _3018_recOwned;
                  bool _3019_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3020_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1389;
                  bool _out1390;
                  bool _out1391;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1389, out _out1390, out _out1391, out _out1392);
                  _3017_recursiveGen = _out1389;
                  _3018_recOwned = _out1390;
                  _3019_recErased = _out1391;
                  _3020_recIdents = _out1392;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3018_recOwned;
                  isErased = _3019_recErased;
                  readIdents = _3020_recIdents;
                }
              } else if (_source96.is_Array) {
                DAST._IType _3021___mcc_h1125 = _source96.dtor_element;
                BigInteger _3022___mcc_h1126 = _source96.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3023_recursiveGen;
                  bool _3024_recOwned;
                  bool _3025_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3026_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1393;
                  bool _out1394;
                  bool _out1395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1396;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1393, out _out1394, out _out1395, out _out1396);
                  _3023_recursiveGen = _out1393;
                  _3024_recOwned = _out1394;
                  _3025_recErased = _out1395;
                  _3026_recIdents = _out1396;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3023_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3024_recOwned;
                  isErased = _3025_recErased;
                  readIdents = _3026_recIdents;
                }
              } else if (_source96.is_Seq) {
                DAST._IType _3027___mcc_h1129 = _source96.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3028_recursiveGen;
                  bool _3029_recOwned;
                  bool _3030_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3031_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1397;
                  bool _out1398;
                  bool _out1399;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1397, out _out1398, out _out1399, out _out1400);
                  _3028_recursiveGen = _out1397;
                  _3029_recOwned = _out1398;
                  _3030_recErased = _out1399;
                  _3031_recIdents = _out1400;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3028_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3029_recOwned;
                  isErased = _3030_recErased;
                  readIdents = _3031_recIdents;
                }
              } else if (_source96.is_Set) {
                DAST._IType _3032___mcc_h1131 = _source96.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3033_recursiveGen;
                  bool _3034_recOwned;
                  bool _3035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1401;
                  bool _out1402;
                  bool _out1403;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1401, out _out1402, out _out1403, out _out1404);
                  _3033_recursiveGen = _out1401;
                  _3034_recOwned = _out1402;
                  _3035_recErased = _out1403;
                  _3036_recIdents = _out1404;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3034_recOwned;
                  isErased = _3035_recErased;
                  readIdents = _3036_recIdents;
                }
              } else if (_source96.is_Multiset) {
                DAST._IType _3037___mcc_h1133 = _source96.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3038_recursiveGen;
                  bool _3039_recOwned;
                  bool _3040_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3041_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1405;
                  bool _out1406;
                  bool _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                  _3038_recursiveGen = _out1405;
                  _3039_recOwned = _out1406;
                  _3040_recErased = _out1407;
                  _3041_recIdents = _out1408;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3039_recOwned;
                  isErased = _3040_recErased;
                  readIdents = _3041_recIdents;
                }
              } else if (_source96.is_Map) {
                DAST._IType _3042___mcc_h1135 = _source96.dtor_key;
                DAST._IType _3043___mcc_h1136 = _source96.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3044_recursiveGen;
                  bool _3045_recOwned;
                  bool _3046_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3047_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _3044_recursiveGen = _out1409;
                  _3045_recOwned = _out1410;
                  _3046_recErased = _out1411;
                  _3047_recIdents = _out1412;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3045_recOwned;
                  isErased = _3046_recErased;
                  readIdents = _3047_recIdents;
                }
              } else if (_source96.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3048___mcc_h1139 = _source96.dtor_args;
                DAST._IType _3049___mcc_h1140 = _source96.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3050_recursiveGen;
                  bool _3051_recOwned;
                  bool _3052_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3053_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _3050_recursiveGen = _out1413;
                  _3051_recOwned = _out1414;
                  _3052_recErased = _out1415;
                  _3053_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3050_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3051_recOwned;
                  isErased = _3052_recErased;
                  readIdents = _3053_recIdents;
                }
              } else if (_source96.is_Primitive) {
                DAST._IPrimitive _3054___mcc_h1143 = _source96.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3055_recursiveGen;
                  bool _3056_recOwned;
                  bool _3057_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3058_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _3055_recursiveGen = _out1417;
                  _3056_recOwned = _out1418;
                  _3057_recErased = _out1419;
                  _3058_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3056_recOwned;
                  isErased = _3057_recErased;
                  readIdents = _3058_recIdents;
                }
              } else if (_source96.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3059___mcc_h1145 = _source96.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3060_recursiveGen;
                  bool _3061_recOwned;
                  bool _3062_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3063_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _3060_recursiveGen = _out1421;
                  _3061_recOwned = _out1422;
                  _3062_recErased = _out1423;
                  _3063_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3061_recOwned;
                  isErased = _3062_recErased;
                  readIdents = _3063_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3064___mcc_h1147 = _source96.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3065_recursiveGen;
                  bool _3066_recOwned;
                  bool _3067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1425;
                  bool _out1426;
                  bool _out1427;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
                  DCOMP.COMP.GenExpr(_1530_expr, selfIdent, @params, mustOwn, out _out1425, out _out1426, out _out1427, out _out1428);
                  _3065_recursiveGen = _out1425;
                  _3066_recOwned = _out1426;
                  _3067_recErased = _out1427;
                  _3068_recIdents = _out1428;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3066_recOwned;
                  isErased = _3067_recErased;
                  readIdents = _3068_recIdents;
                }
              }
            }
          }
        }
      } else if (_source48.is_SeqConstruct) {
        DAST._IExpression _3069___mcc_h26 = _source48.dtor_length;
        DAST._IExpression _3070___mcc_h27 = _source48.dtor_elem;
        DAST._IExpression _3071_expr = _3070___mcc_h27;
        DAST._IExpression _3072_length = _3069___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3073_recursiveGen;
          bool _3074___v65;
          bool _3075_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3076_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1429;
          bool _out1430;
          bool _out1431;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
          DCOMP.COMP.GenExpr(_3071_expr, selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
          _3073_recursiveGen = _out1429;
          _3074___v65 = _out1430;
          _3075_eErased = _out1431;
          _3076_recIdents = _out1432;
          Dafny.ISequence<Dafny.Rune> _3077_lengthGen;
          bool _3078___v66;
          bool _3079_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3080_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1433;
          bool _out1434;
          bool _out1435;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
          DCOMP.COMP.GenExpr(_3072_length, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
          _3077_lengthGen = _out1433;
          _3078___v66 = _out1434;
          _3079_lengthErased = _out1435;
          _3080_lengthIdents = _out1436;
          if (!(_3079_lengthErased)) {
            _3077_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3077_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3073_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3077_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3076_recIdents, _3080_lengthIdents);
          isOwned = true;
          isErased = _3075_eErased;
        }
      } else if (_source48.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3081___mcc_h28 = _source48.dtor_elements;
        DAST._IType _3082___mcc_h29 = _source48.dtor_typ;
        DAST._IType _3083_typ = _3082___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3084_exprs = _3081___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3085_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1437;
          _out1437 = DCOMP.COMP.GenType(_3083_typ, false, false);
          _3085_genTpe = _out1437;
          BigInteger _3086_i;
          _3086_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3086_i = BigInteger.Zero;
          while ((_3086_i) < (new BigInteger((_3084_exprs).Count))) {
            if ((_3086_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3087_recursiveGen;
            bool _3088___v67;
            bool _3089_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3090_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1438;
            bool _out1439;
            bool _out1440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
            DCOMP.COMP.GenExpr((_3084_exprs).Select(_3086_i), selfIdent, @params, true, out _out1438, out _out1439, out _out1440, out _out1441);
            _3087_recursiveGen = _out1438;
            _3088___v67 = _out1439;
            _3089_isErased = _out1440;
            _3090_recIdents = _out1441;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3090_recIdents);
            if (_3089_isErased) {
              _3087_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3087_recursiveGen);
            _3086_i = (_3086_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3085_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3091___mcc_h30 = _source48.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3092_exprs = _3091___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3093_generatedValues;
          _3093_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3094_i;
          _3094_i = BigInteger.Zero;
          bool _3095_allErased;
          _3095_allErased = true;
          while ((_3094_i) < (new BigInteger((_3092_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3096_recursiveGen;
            bool _3097___v68;
            bool _3098_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3099_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1442;
            bool _out1443;
            bool _out1444;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
            DCOMP.COMP.GenExpr((_3092_exprs).Select(_3094_i), selfIdent, @params, true, out _out1442, out _out1443, out _out1444, out _out1445);
            _3096_recursiveGen = _out1442;
            _3097___v68 = _out1443;
            _3098_isErased = _out1444;
            _3099_recIdents = _out1445;
            _3095_allErased = (_3095_allErased) && (_3098_isErased);
            _3093_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3093_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3096_recursiveGen, _3098_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3099_recIdents);
            _3094_i = (_3094_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3094_i = BigInteger.Zero;
          while ((_3094_i) < (new BigInteger((_3093_generatedValues).Count))) {
            if ((_3094_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3100_gen;
            _3100_gen = ((_3093_generatedValues).Select(_3094_i)).dtor__0;
            if ((((_3093_generatedValues).Select(_3094_i)).dtor__1) && (!(_3095_allErased))) {
              _3100_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3100_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3100_gen);
            _3094_i = (_3094_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3095_allErased;
        }
      } else if (_source48.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3101___mcc_h31 = _source48.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3102_mapElems = _3101___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3103_generatedValues;
          _3103_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3104_i;
          _3104_i = BigInteger.Zero;
          bool _3105_allErased;
          _3105_allErased = true;
          while ((_3104_i) < (new BigInteger((_3102_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3106_recursiveGenKey;
            bool _3107___v69;
            bool _3108_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3109_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1446;
            bool _out1447;
            bool _out1448;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
            DCOMP.COMP.GenExpr(((_3102_mapElems).Select(_3104_i)).dtor__0, selfIdent, @params, true, out _out1446, out _out1447, out _out1448, out _out1449);
            _3106_recursiveGenKey = _out1446;
            _3107___v69 = _out1447;
            _3108_isErasedKey = _out1448;
            _3109_recIdentsKey = _out1449;
            Dafny.ISequence<Dafny.Rune> _3110_recursiveGenValue;
            bool _3111___v70;
            bool _3112_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3113_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1450;
            bool _out1451;
            bool _out1452;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
            DCOMP.COMP.GenExpr(((_3102_mapElems).Select(_3104_i)).dtor__1, selfIdent, @params, true, out _out1450, out _out1451, out _out1452, out _out1453);
            _3110_recursiveGenValue = _out1450;
            _3111___v70 = _out1451;
            _3112_isErasedValue = _out1452;
            _3113_recIdentsValue = _out1453;
            _3105_allErased = ((_3105_allErased) && (_3108_isErasedKey)) && (_3112_isErasedValue);
            _3103_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3103_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3106_recursiveGenKey, _3110_recursiveGenValue, _3108_isErasedKey, _3112_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3109_recIdentsKey), _3113_recIdentsValue);
            _3104_i = (_3104_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3104_i = BigInteger.Zero;
          while ((_3104_i) < (new BigInteger((_3103_generatedValues).Count))) {
            if ((_3104_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3114_genKey;
            _3114_genKey = ((_3103_generatedValues).Select(_3104_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3115_genValue;
            _3115_genValue = ((_3103_generatedValues).Select(_3104_i)).dtor__1;
            if ((((_3103_generatedValues).Select(_3104_i)).dtor__2) && (!(_3105_allErased))) {
              _3114_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3114_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3103_generatedValues).Select(_3104_i)).dtor__3) && (!(_3105_allErased))) {
              _3115_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3115_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3114_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3115_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3104_i = (_3104_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3105_allErased;
        }
      } else if (_source48.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source98 = selfIdent;
          if (_source98.is_None) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3116___mcc_h1149 = _source98.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3117_id = _3116___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3117_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3117_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3117_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3117_id);
              isErased = false;
            }
          }
        }
      } else if (_source48.is_Ite) {
        DAST._IExpression _3118___mcc_h32 = _source48.dtor_cond;
        DAST._IExpression _3119___mcc_h33 = _source48.dtor_thn;
        DAST._IExpression _3120___mcc_h34 = _source48.dtor_els;
        DAST._IExpression _3121_f = _3120___mcc_h34;
        DAST._IExpression _3122_t = _3119___mcc_h33;
        DAST._IExpression _3123_cond = _3118___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3124_condString;
          bool _3125___v71;
          bool _3126_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3127_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1454;
          bool _out1455;
          bool _out1456;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
          DCOMP.COMP.GenExpr(_3123_cond, selfIdent, @params, true, out _out1454, out _out1455, out _out1456, out _out1457);
          _3124_condString = _out1454;
          _3125___v71 = _out1455;
          _3126_condErased = _out1456;
          _3127_recIdentsCond = _out1457;
          if (!(_3126_condErased)) {
            _3124_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3124_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3128___v72;
          bool _3129_tHasToBeOwned;
          bool _3130___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3131___v74;
          Dafny.ISequence<Dafny.Rune> _out1458;
          bool _out1459;
          bool _out1460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
          DCOMP.COMP.GenExpr(_3122_t, selfIdent, @params, mustOwn, out _out1458, out _out1459, out _out1460, out _out1461);
          _3128___v72 = _out1458;
          _3129_tHasToBeOwned = _out1459;
          _3130___v73 = _out1460;
          _3131___v74 = _out1461;
          Dafny.ISequence<Dafny.Rune> _3132_fString;
          bool _3133_fOwned;
          bool _3134_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3135_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1462;
          bool _out1463;
          bool _out1464;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
          DCOMP.COMP.GenExpr(_3121_f, selfIdent, @params, _3129_tHasToBeOwned, out _out1462, out _out1463, out _out1464, out _out1465);
          _3132_fString = _out1462;
          _3133_fOwned = _out1463;
          _3134_fErased = _out1464;
          _3135_recIdentsF = _out1465;
          Dafny.ISequence<Dafny.Rune> _3136_tString;
          bool _3137___v75;
          bool _3138_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3139_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1466;
          bool _out1467;
          bool _out1468;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
          DCOMP.COMP.GenExpr(_3122_t, selfIdent, @params, _3133_fOwned, out _out1466, out _out1467, out _out1468, out _out1469);
          _3136_tString = _out1466;
          _3137___v75 = _out1467;
          _3138_tErased = _out1468;
          _3139_recIdentsT = _out1469;
          if ((!(_3134_fErased)) || (!(_3138_tErased))) {
            if (_3134_fErased) {
              _3132_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3132_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3138_tErased) {
              _3136_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3136_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3124_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3136_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3132_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3133_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3127_recIdentsCond, _3139_recIdentsT), _3135_recIdentsF);
          isErased = (_3134_fErased) || (_3138_tErased);
        }
      } else if (_source48.is_UnOp) {
        DAST._IUnaryOp _3140___mcc_h35 = _source48.dtor_unOp;
        DAST._IExpression _3141___mcc_h36 = _source48.dtor_expr;
        DAST._IUnaryOp _source99 = _3140___mcc_h35;
        if (_source99.is_Not) {
          DAST._IExpression _3142_e = _3141___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3143_recursiveGen;
            bool _3144___v76;
            bool _3145_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3146_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(_3142_e, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _3143_recursiveGen = _out1470;
            _3144___v76 = _out1471;
            _3145_recErased = _out1472;
            _3146_recIdents = _out1473;
            if (!(_3145_recErased)) {
              _3143_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3146_recIdents;
            isErased = true;
          }
        } else if (_source99.is_BitwiseNot) {
          DAST._IExpression _3147_e = _3141___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3148_recursiveGen;
            bool _3149___v77;
            bool _3150_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3151_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(_3147_e, selfIdent, @params, true, out _out1474, out _out1475, out _out1476, out _out1477);
            _3148_recursiveGen = _out1474;
            _3149___v77 = _out1475;
            _3150_recErased = _out1476;
            _3151_recIdents = _out1477;
            if (!(_3150_recErased)) {
              _3148_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3151_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3152_e = _3141___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3153_recursiveGen;
            bool _3154_recOwned;
            bool _3155_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3156_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1478;
            bool _out1479;
            bool _out1480;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
            DCOMP.COMP.GenExpr(_3152_e, selfIdent, @params, false, out _out1478, out _out1479, out _out1480, out _out1481);
            _3153_recursiveGen = _out1478;
            _3154_recOwned = _out1479;
            _3155_recErased = _out1480;
            _3156_recIdents = _out1481;
            if (!(_3155_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3157_eraseFn;
              _3157_eraseFn = ((_3154_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3153_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3157_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3156_recIdents;
            isErased = true;
          }
        }
      } else if (_source48.is_BinOp) {
        DAST._IBinOp _3158___mcc_h37 = _source48.dtor_op;
        DAST._IExpression _3159___mcc_h38 = _source48.dtor_left;
        DAST._IExpression _3160___mcc_h39 = _source48.dtor_right;
        DAST._IExpression _3161_r = _3160___mcc_h39;
        DAST._IExpression _3162_l = _3159___mcc_h38;
        DAST._IBinOp _3163_op = _3158___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3164_left;
          bool _3165___v78;
          bool _3166_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3167_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_3162_l, selfIdent, @params, true, out _out1482, out _out1483, out _out1484, out _out1485);
          _3164_left = _out1482;
          _3165___v78 = _out1483;
          _3166_leftErased = _out1484;
          _3167_recIdentsL = _out1485;
          Dafny.ISequence<Dafny.Rune> _3168_right;
          bool _3169___v79;
          bool _3170_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3171_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_3161_r, selfIdent, @params, true, out _out1486, out _out1487, out _out1488, out _out1489);
          _3168_right = _out1486;
          _3169___v79 = _out1487;
          _3170_rightErased = _out1488;
          _3171_recIdentsR = _out1489;
          DAST._IBinOp _source100 = _3163_op;
          if (_source100.is_Eq) {
            bool _3172___mcc_h1150 = _source100.dtor_referential;
            bool _3173___mcc_h1151 = _source100.dtor_nullable;
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source101 = _3163_op;
              if (_source101.is_Eq) {
                bool _3174___mcc_h1160 = _source101.dtor_referential;
                bool _3175___mcc_h1161 = _source101.dtor_nullable;
                bool _3176_nullable = _3175___mcc_h1161;
                bool _3177_referential = _3174___mcc_h1160;
                {
                  if (_3177_referential) {
                    if (_3176_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source101.is_Neq) {
                bool _3178___mcc_h1162 = _source101.dtor_referential;
                bool _3179___mcc_h1163 = _source101.dtor_nullable;
                bool _3180_nullable = _3179___mcc_h1163;
                bool _3181_referential = _3178___mcc_h1162;
                {
                  if (_3181_referential) {
                    if (_3180_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source101.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source101.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source101.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source101.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3182___mcc_h1164 = _source101.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3183_op = _3182___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3183_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Neq) {
            bool _3184___mcc_h1154 = _source100.dtor_referential;
            bool _3185___mcc_h1155 = _source100.dtor_nullable;
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source102 = _3163_op;
              if (_source102.is_Eq) {
                bool _3186___mcc_h1165 = _source102.dtor_referential;
                bool _3187___mcc_h1166 = _source102.dtor_nullable;
                bool _3188_nullable = _3187___mcc_h1166;
                bool _3189_referential = _3186___mcc_h1165;
                {
                  if (_3189_referential) {
                    if (_3188_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source102.is_Neq) {
                bool _3190___mcc_h1167 = _source102.dtor_referential;
                bool _3191___mcc_h1168 = _source102.dtor_nullable;
                bool _3192_nullable = _3191___mcc_h1168;
                bool _3193_referential = _3190___mcc_h1167;
                {
                  if (_3193_referential) {
                    if (_3192_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source102.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source102.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source102.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source102.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3194___mcc_h1169 = _source102.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3195_op = _3194___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3195_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Div) {
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source103 = _3163_op;
              if (_source103.is_Eq) {
                bool _3196___mcc_h1170 = _source103.dtor_referential;
                bool _3197___mcc_h1171 = _source103.dtor_nullable;
                bool _3198_nullable = _3197___mcc_h1171;
                bool _3199_referential = _3196___mcc_h1170;
                {
                  if (_3199_referential) {
                    if (_3198_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source103.is_Neq) {
                bool _3200___mcc_h1172 = _source103.dtor_referential;
                bool _3201___mcc_h1173 = _source103.dtor_nullable;
                bool _3202_nullable = _3201___mcc_h1173;
                bool _3203_referential = _3200___mcc_h1172;
                {
                  if (_3203_referential) {
                    if (_3202_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source103.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source103.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source103.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source103.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3204___mcc_h1174 = _source103.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3205_op = _3204___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3205_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_EuclidianDiv) {
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source104 = _3163_op;
              if (_source104.is_Eq) {
                bool _3206___mcc_h1175 = _source104.dtor_referential;
                bool _3207___mcc_h1176 = _source104.dtor_nullable;
                bool _3208_nullable = _3207___mcc_h1176;
                bool _3209_referential = _3206___mcc_h1175;
                {
                  if (_3209_referential) {
                    if (_3208_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source104.is_Neq) {
                bool _3210___mcc_h1177 = _source104.dtor_referential;
                bool _3211___mcc_h1178 = _source104.dtor_nullable;
                bool _3212_nullable = _3211___mcc_h1178;
                bool _3213_referential = _3210___mcc_h1177;
                {
                  if (_3213_referential) {
                    if (_3212_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source104.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3214___mcc_h1179 = _source104.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3215_op = _3214___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3215_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Mod) {
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source105 = _3163_op;
              if (_source105.is_Eq) {
                bool _3216___mcc_h1180 = _source105.dtor_referential;
                bool _3217___mcc_h1181 = _source105.dtor_nullable;
                bool _3218_nullable = _3217___mcc_h1181;
                bool _3219_referential = _3216___mcc_h1180;
                {
                  if (_3219_referential) {
                    if (_3218_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source105.is_Neq) {
                bool _3220___mcc_h1182 = _source105.dtor_referential;
                bool _3221___mcc_h1183 = _source105.dtor_nullable;
                bool _3222_nullable = _3221___mcc_h1183;
                bool _3223_referential = _3220___mcc_h1182;
                {
                  if (_3223_referential) {
                    if (_3222_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source105.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source105.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source105.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source105.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3224___mcc_h1184 = _source105.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3225_op = _3224___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3225_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_EuclidianMod) {
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source106 = _3163_op;
              if (_source106.is_Eq) {
                bool _3226___mcc_h1185 = _source106.dtor_referential;
                bool _3227___mcc_h1186 = _source106.dtor_nullable;
                bool _3228_nullable = _3227___mcc_h1186;
                bool _3229_referential = _3226___mcc_h1185;
                {
                  if (_3229_referential) {
                    if (_3228_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source106.is_Neq) {
                bool _3230___mcc_h1187 = _source106.dtor_referential;
                bool _3231___mcc_h1188 = _source106.dtor_nullable;
                bool _3232_nullable = _3231___mcc_h1188;
                bool _3233_referential = _3230___mcc_h1187;
                {
                  if (_3233_referential) {
                    if (_3232_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source106.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3234___mcc_h1189 = _source106.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3235_op = _3234___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3235_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3168_right);
            }
          } else if (_source100.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3168_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source100.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source100.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source100.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3236___mcc_h1158 = _source100.dtor_Passthrough_a0;
            {
              if (!(_3166_leftErased)) {
                _3164_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3170_rightErased)) {
                _3168_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source107 = _3163_op;
              if (_source107.is_Eq) {
                bool _3237___mcc_h1190 = _source107.dtor_referential;
                bool _3238___mcc_h1191 = _source107.dtor_nullable;
                bool _3239_nullable = _3238___mcc_h1191;
                bool _3240_referential = _3237___mcc_h1190;
                {
                  if (_3240_referential) {
                    if (_3239_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3168_right);
                  }
                }
              } else if (_source107.is_Neq) {
                bool _3241___mcc_h1192 = _source107.dtor_referential;
                bool _3242___mcc_h1193 = _source107.dtor_nullable;
                bool _3243_nullable = _3242___mcc_h1193;
                bool _3244_referential = _3241___mcc_h1192;
                {
                  if (_3244_referential) {
                    if (_3243_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3164_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3168_right);
                  }
                }
              } else if (_source107.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source107.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source107.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source107.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3245___mcc_h1194 = _source107.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3246_op = _3245___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3246_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3168_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3167_recIdentsL, _3171_recIdentsR);
          isErased = true;
        }
      } else if (_source48.is_ArrayLen) {
        DAST._IExpression _3247___mcc_h40 = _source48.dtor_expr;
        BigInteger _3248___mcc_h41 = _source48.dtor_dim;
        BigInteger _3249_dim = _3248___mcc_h41;
        DAST._IExpression _3250_expr = _3247___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3251_recursiveGen;
          bool _3252___v81;
          bool _3253_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3254_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1490;
          bool _out1491;
          bool _out1492;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
          DCOMP.COMP.GenExpr(_3250_expr, selfIdent, @params, true, out _out1490, out _out1491, out _out1492, out _out1493);
          _3251_recursiveGen = _out1490;
          _3252___v81 = _out1491;
          _3253_recErased = _out1492;
          _3254_recIdents = _out1493;
          if ((_3249_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3255_i;
            _3255_i = BigInteger.One;
            while ((_3255_i) < (_3249_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3255_i = (_3255_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3254_recIdents;
          isErased = true;
        }
      } else if (_source48.is_Select) {
        DAST._IExpression _3256___mcc_h42 = _source48.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3257___mcc_h43 = _source48.dtor_field;
        bool _3258___mcc_h44 = _source48.dtor_isConstant;
        bool _3259___mcc_h45 = _source48.dtor_onDatatype;
        DAST._IExpression _source108 = _3256___mcc_h42;
        if (_source108.is_Literal) {
          DAST._ILiteral _3260___mcc_h46 = _source108.dtor_Literal_a0;
          bool _3261_isDatatype = _3259___mcc_h45;
          bool _3262_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3263_field = _3257___mcc_h43;
          DAST._IExpression _3264_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3265_onString;
            bool _3266_onOwned;
            bool _3267_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3268_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_3264_on, selfIdent, @params, false, out _out1494, out _out1495, out _out1496, out _out1497);
            _3265_onString = _out1494;
            _3266_onOwned = _out1495;
            _3267_onErased = _out1496;
            _3268_recIdents = _out1497;
            if ((_3261_isDatatype) || (_3262_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3265_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3263_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3262_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3265_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3263_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3268_recIdents;
          }
        } else if (_source108.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3269___mcc_h48 = _source108.dtor_Ident_a0;
          bool _3270_isDatatype = _3259___mcc_h45;
          bool _3271_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3272_field = _3257___mcc_h43;
          DAST._IExpression _3273_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3274_onString;
            bool _3275_onOwned;
            bool _3276_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3277_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(_3273_on, selfIdent, @params, false, out _out1498, out _out1499, out _out1500, out _out1501);
            _3274_onString = _out1498;
            _3275_onOwned = _out1499;
            _3276_onErased = _out1500;
            _3277_recIdents = _out1501;
            if ((_3270_isDatatype) || (_3271_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3274_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3272_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3271_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3274_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3272_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3277_recIdents;
          }
        } else if (_source108.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3278___mcc_h50 = _source108.dtor_Companion_a0;
          bool _3279_isDatatype = _3259___mcc_h45;
          bool _3280_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3281_field = _3257___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3282_c = _3278___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3283_onString;
            bool _3284_onOwned;
            bool _3285_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3286_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3282_c), selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _3283_onString = _out1502;
            _3284_onOwned = _out1503;
            _3285_onErased = _out1504;
            _3286_recIdents = _out1505;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3283_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3281_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3286_recIdents;
          }
        } else if (_source108.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3287___mcc_h52 = _source108.dtor_Tuple_a0;
          bool _3288_isDatatype = _3259___mcc_h45;
          bool _3289_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3290_field = _3257___mcc_h43;
          DAST._IExpression _3291_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3292_onString;
            bool _3293_onOwned;
            bool _3294_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3295_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1506;
            bool _out1507;
            bool _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            DCOMP.COMP.GenExpr(_3291_on, selfIdent, @params, false, out _out1506, out _out1507, out _out1508, out _out1509);
            _3292_onString = _out1506;
            _3293_onOwned = _out1507;
            _3294_onErased = _out1508;
            _3295_recIdents = _out1509;
            if ((_3288_isDatatype) || (_3289_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3292_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3290_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3289_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3292_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3290_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3295_recIdents;
          }
        } else if (_source108.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3296___mcc_h54 = _source108.dtor_path;
          Dafny.ISequence<DAST._IType> _3297___mcc_h55 = _source108.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3298___mcc_h56 = _source108.dtor_args;
          bool _3299_isDatatype = _3259___mcc_h45;
          bool _3300_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3301_field = _3257___mcc_h43;
          DAST._IExpression _3302_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3303_onString;
            bool _3304_onOwned;
            bool _3305_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3306_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1510;
            bool _out1511;
            bool _out1512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
            DCOMP.COMP.GenExpr(_3302_on, selfIdent, @params, false, out _out1510, out _out1511, out _out1512, out _out1513);
            _3303_onString = _out1510;
            _3304_onOwned = _out1511;
            _3305_onErased = _out1512;
            _3306_recIdents = _out1513;
            if ((_3299_isDatatype) || (_3300_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3303_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3301_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3300_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3303_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3301_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3306_recIdents;
          }
        } else if (_source108.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3307___mcc_h60 = _source108.dtor_dims;
          DAST._IType _3308___mcc_h61 = _source108.dtor_typ;
          bool _3309_isDatatype = _3259___mcc_h45;
          bool _3310_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3311_field = _3257___mcc_h43;
          DAST._IExpression _3312_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3313_onString;
            bool _3314_onOwned;
            bool _3315_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3316_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1514;
            bool _out1515;
            bool _out1516;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
            DCOMP.COMP.GenExpr(_3312_on, selfIdent, @params, false, out _out1514, out _out1515, out _out1516, out _out1517);
            _3313_onString = _out1514;
            _3314_onOwned = _out1515;
            _3315_onErased = _out1516;
            _3316_recIdents = _out1517;
            if ((_3309_isDatatype) || (_3310_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3313_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3311_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3310_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3313_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3311_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3316_recIdents;
          }
        } else if (_source108.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3317___mcc_h64 = _source108.dtor_path;
          Dafny.ISequence<DAST._IType> _3318___mcc_h65 = _source108.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3319___mcc_h66 = _source108.dtor_variant;
          bool _3320___mcc_h67 = _source108.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3321___mcc_h68 = _source108.dtor_contents;
          bool _3322_isDatatype = _3259___mcc_h45;
          bool _3323_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3324_field = _3257___mcc_h43;
          DAST._IExpression _3325_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3326_onString;
            bool _3327_onOwned;
            bool _3328_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3329_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_3325_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _3326_onString = _out1518;
            _3327_onOwned = _out1519;
            _3328_onErased = _out1520;
            _3329_recIdents = _out1521;
            if ((_3322_isDatatype) || (_3323_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3326_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3324_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3323_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3326_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3324_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3329_recIdents;
          }
        } else if (_source108.is_Convert) {
          DAST._IExpression _3330___mcc_h74 = _source108.dtor_value;
          DAST._IType _3331___mcc_h75 = _source108.dtor_from;
          DAST._IType _3332___mcc_h76 = _source108.dtor_typ;
          bool _3333_isDatatype = _3259___mcc_h45;
          bool _3334_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3335_field = _3257___mcc_h43;
          DAST._IExpression _3336_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3337_onString;
            bool _3338_onOwned;
            bool _3339_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3340_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_3336_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _3337_onString = _out1522;
            _3338_onOwned = _out1523;
            _3339_onErased = _out1524;
            _3340_recIdents = _out1525;
            if ((_3333_isDatatype) || (_3334_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3337_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3334_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3337_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3340_recIdents;
          }
        } else if (_source108.is_SeqConstruct) {
          DAST._IExpression _3341___mcc_h80 = _source108.dtor_length;
          DAST._IExpression _3342___mcc_h81 = _source108.dtor_elem;
          bool _3343_isDatatype = _3259___mcc_h45;
          bool _3344_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3345_field = _3257___mcc_h43;
          DAST._IExpression _3346_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3347_onString;
            bool _3348_onOwned;
            bool _3349_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3350_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(_3346_on, selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _3347_onString = _out1526;
            _3348_onOwned = _out1527;
            _3349_onErased = _out1528;
            _3350_recIdents = _out1529;
            if ((_3343_isDatatype) || (_3344_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3347_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3345_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3344_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3347_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3345_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3350_recIdents;
          }
        } else if (_source108.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3351___mcc_h84 = _source108.dtor_elements;
          DAST._IType _3352___mcc_h85 = _source108.dtor_typ;
          bool _3353_isDatatype = _3259___mcc_h45;
          bool _3354_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3355_field = _3257___mcc_h43;
          DAST._IExpression _3356_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3357_onString;
            bool _3358_onOwned;
            bool _3359_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3360_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_3356_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _3357_onString = _out1530;
            _3358_onOwned = _out1531;
            _3359_onErased = _out1532;
            _3360_recIdents = _out1533;
            if ((_3353_isDatatype) || (_3354_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3357_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3355_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3354_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3357_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3355_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3360_recIdents;
          }
        } else if (_source108.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3361___mcc_h88 = _source108.dtor_elements;
          bool _3362_isDatatype = _3259___mcc_h45;
          bool _3363_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3364_field = _3257___mcc_h43;
          DAST._IExpression _3365_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3366_onString;
            bool _3367_onOwned;
            bool _3368_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3369_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_3365_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _3366_onString = _out1534;
            _3367_onOwned = _out1535;
            _3368_onErased = _out1536;
            _3369_recIdents = _out1537;
            if ((_3362_isDatatype) || (_3363_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3366_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3364_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3363_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3366_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3364_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3369_recIdents;
          }
        } else if (_source108.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3370___mcc_h90 = _source108.dtor_mapElems;
          bool _3371_isDatatype = _3259___mcc_h45;
          bool _3372_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3373_field = _3257___mcc_h43;
          DAST._IExpression _3374_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3375_onString;
            bool _3376_onOwned;
            bool _3377_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3378_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_3374_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _3375_onString = _out1538;
            _3376_onOwned = _out1539;
            _3377_onErased = _out1540;
            _3378_recIdents = _out1541;
            if ((_3371_isDatatype) || (_3372_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3375_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3373_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3372_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3375_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3373_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3378_recIdents;
          }
        } else if (_source108.is_This) {
          bool _3379_isDatatype = _3259___mcc_h45;
          bool _3380_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3381_field = _3257___mcc_h43;
          DAST._IExpression _3382_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3383_onString;
            bool _3384_onOwned;
            bool _3385_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3386_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_3382_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _3383_onString = _out1542;
            _3384_onOwned = _out1543;
            _3385_onErased = _out1544;
            _3386_recIdents = _out1545;
            if ((_3379_isDatatype) || (_3380_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3383_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3381_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3380_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3383_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3381_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3386_recIdents;
          }
        } else if (_source108.is_Ite) {
          DAST._IExpression _3387___mcc_h92 = _source108.dtor_cond;
          DAST._IExpression _3388___mcc_h93 = _source108.dtor_thn;
          DAST._IExpression _3389___mcc_h94 = _source108.dtor_els;
          bool _3390_isDatatype = _3259___mcc_h45;
          bool _3391_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3392_field = _3257___mcc_h43;
          DAST._IExpression _3393_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3394_onString;
            bool _3395_onOwned;
            bool _3396_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3397_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_3393_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _3394_onString = _out1546;
            _3395_onOwned = _out1547;
            _3396_onErased = _out1548;
            _3397_recIdents = _out1549;
            if ((_3390_isDatatype) || (_3391_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3394_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3392_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3391_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3394_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3392_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3397_recIdents;
          }
        } else if (_source108.is_UnOp) {
          DAST._IUnaryOp _3398___mcc_h98 = _source108.dtor_unOp;
          DAST._IExpression _3399___mcc_h99 = _source108.dtor_expr;
          bool _3400_isDatatype = _3259___mcc_h45;
          bool _3401_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3402_field = _3257___mcc_h43;
          DAST._IExpression _3403_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3404_onString;
            bool _3405_onOwned;
            bool _3406_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3407_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_3403_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _3404_onString = _out1550;
            _3405_onOwned = _out1551;
            _3406_onErased = _out1552;
            _3407_recIdents = _out1553;
            if ((_3400_isDatatype) || (_3401_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3404_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3401_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3404_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3407_recIdents;
          }
        } else if (_source108.is_BinOp) {
          DAST._IBinOp _3408___mcc_h102 = _source108.dtor_op;
          DAST._IExpression _3409___mcc_h103 = _source108.dtor_left;
          DAST._IExpression _3410___mcc_h104 = _source108.dtor_right;
          bool _3411_isDatatype = _3259___mcc_h45;
          bool _3412_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3413_field = _3257___mcc_h43;
          DAST._IExpression _3414_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3415_onString;
            bool _3416_onOwned;
            bool _3417_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3418_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_3414_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _3415_onString = _out1554;
            _3416_onOwned = _out1555;
            _3417_onErased = _out1556;
            _3418_recIdents = _out1557;
            if ((_3411_isDatatype) || (_3412_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3415_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3413_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3412_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3415_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3413_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3418_recIdents;
          }
        } else if (_source108.is_ArrayLen) {
          DAST._IExpression _3419___mcc_h108 = _source108.dtor_expr;
          BigInteger _3420___mcc_h109 = _source108.dtor_dim;
          bool _3421_isDatatype = _3259___mcc_h45;
          bool _3422_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3423_field = _3257___mcc_h43;
          DAST._IExpression _3424_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3425_onString;
            bool _3426_onOwned;
            bool _3427_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3428_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_3424_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _3425_onString = _out1558;
            _3426_onOwned = _out1559;
            _3427_onErased = _out1560;
            _3428_recIdents = _out1561;
            if ((_3421_isDatatype) || (_3422_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3425_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3423_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3422_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3425_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3423_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3428_recIdents;
          }
        } else if (_source108.is_Select) {
          DAST._IExpression _3429___mcc_h112 = _source108.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3430___mcc_h113 = _source108.dtor_field;
          bool _3431___mcc_h114 = _source108.dtor_isConstant;
          bool _3432___mcc_h115 = _source108.dtor_onDatatype;
          bool _3433_isDatatype = _3259___mcc_h45;
          bool _3434_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3435_field = _3257___mcc_h43;
          DAST._IExpression _3436_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3437_onString;
            bool _3438_onOwned;
            bool _3439_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3440_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_3436_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _3437_onString = _out1562;
            _3438_onOwned = _out1563;
            _3439_onErased = _out1564;
            _3440_recIdents = _out1565;
            if ((_3433_isDatatype) || (_3434_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3437_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3435_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3434_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3437_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3435_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3440_recIdents;
          }
        } else if (_source108.is_SelectFn) {
          DAST._IExpression _3441___mcc_h120 = _source108.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3442___mcc_h121 = _source108.dtor_field;
          bool _3443___mcc_h122 = _source108.dtor_onDatatype;
          bool _3444___mcc_h123 = _source108.dtor_isStatic;
          BigInteger _3445___mcc_h124 = _source108.dtor_arity;
          bool _3446_isDatatype = _3259___mcc_h45;
          bool _3447_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3448_field = _3257___mcc_h43;
          DAST._IExpression _3449_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3450_onString;
            bool _3451_onOwned;
            bool _3452_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3453_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_3449_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _3450_onString = _out1566;
            _3451_onOwned = _out1567;
            _3452_onErased = _out1568;
            _3453_recIdents = _out1569;
            if ((_3446_isDatatype) || (_3447_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3450_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3448_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3447_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3450_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3448_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3453_recIdents;
          }
        } else if (_source108.is_Index) {
          DAST._IExpression _3454___mcc_h130 = _source108.dtor_expr;
          DAST._ICollKind _3455___mcc_h131 = _source108.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3456___mcc_h132 = _source108.dtor_indices;
          bool _3457_isDatatype = _3259___mcc_h45;
          bool _3458_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3459_field = _3257___mcc_h43;
          DAST._IExpression _3460_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3461_onString;
            bool _3462_onOwned;
            bool _3463_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3464_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_3460_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _3461_onString = _out1570;
            _3462_onOwned = _out1571;
            _3463_onErased = _out1572;
            _3464_recIdents = _out1573;
            if ((_3457_isDatatype) || (_3458_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3461_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3459_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3458_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3461_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3459_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3464_recIdents;
          }
        } else if (_source108.is_IndexRange) {
          DAST._IExpression _3465___mcc_h136 = _source108.dtor_expr;
          bool _3466___mcc_h137 = _source108.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _3467___mcc_h138 = _source108.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _3468___mcc_h139 = _source108.dtor_high;
          bool _3469_isDatatype = _3259___mcc_h45;
          bool _3470_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3471_field = _3257___mcc_h43;
          DAST._IExpression _3472_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3473_onString;
            bool _3474_onOwned;
            bool _3475_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3476_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_3472_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _3473_onString = _out1574;
            _3474_onOwned = _out1575;
            _3475_onErased = _out1576;
            _3476_recIdents = _out1577;
            if ((_3469_isDatatype) || (_3470_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3473_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3471_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3470_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3473_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3471_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3476_recIdents;
          }
        } else if (_source108.is_TupleSelect) {
          DAST._IExpression _3477___mcc_h144 = _source108.dtor_expr;
          BigInteger _3478___mcc_h145 = _source108.dtor_index;
          bool _3479_isDatatype = _3259___mcc_h45;
          bool _3480_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3481_field = _3257___mcc_h43;
          DAST._IExpression _3482_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3483_onString;
            bool _3484_onOwned;
            bool _3485_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3486_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_3482_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _3483_onString = _out1578;
            _3484_onOwned = _out1579;
            _3485_onErased = _out1580;
            _3486_recIdents = _out1581;
            if ((_3479_isDatatype) || (_3480_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3483_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3480_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3483_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3486_recIdents;
          }
        } else if (_source108.is_Call) {
          DAST._IExpression _3487___mcc_h148 = _source108.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3488___mcc_h149 = _source108.dtor_name;
          Dafny.ISequence<DAST._IType> _3489___mcc_h150 = _source108.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3490___mcc_h151 = _source108.dtor_args;
          bool _3491_isDatatype = _3259___mcc_h45;
          bool _3492_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3493_field = _3257___mcc_h43;
          DAST._IExpression _3494_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3495_onString;
            bool _3496_onOwned;
            bool _3497_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3498_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_3494_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _3495_onString = _out1582;
            _3496_onOwned = _out1583;
            _3497_onErased = _out1584;
            _3498_recIdents = _out1585;
            if ((_3491_isDatatype) || (_3492_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3495_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3493_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3492_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3495_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3493_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3498_recIdents;
          }
        } else if (_source108.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3499___mcc_h156 = _source108.dtor_params;
          DAST._IType _3500___mcc_h157 = _source108.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3501___mcc_h158 = _source108.dtor_body;
          bool _3502_isDatatype = _3259___mcc_h45;
          bool _3503_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3504_field = _3257___mcc_h43;
          DAST._IExpression _3505_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3506_onString;
            bool _3507_onOwned;
            bool _3508_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3509_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_3505_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _3506_onString = _out1586;
            _3507_onOwned = _out1587;
            _3508_onErased = _out1588;
            _3509_recIdents = _out1589;
            if ((_3502_isDatatype) || (_3503_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3506_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3504_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3503_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3506_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3504_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3509_recIdents;
          }
        } else if (_source108.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3510___mcc_h162 = _source108.dtor_values;
          DAST._IType _3511___mcc_h163 = _source108.dtor_retType;
          DAST._IExpression _3512___mcc_h164 = _source108.dtor_expr;
          bool _3513_isDatatype = _3259___mcc_h45;
          bool _3514_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3515_field = _3257___mcc_h43;
          DAST._IExpression _3516_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3517_onString;
            bool _3518_onOwned;
            bool _3519_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3520_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_3516_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _3517_onString = _out1590;
            _3518_onOwned = _out1591;
            _3519_onErased = _out1592;
            _3520_recIdents = _out1593;
            if ((_3513_isDatatype) || (_3514_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3517_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3515_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3514_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3517_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3515_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3520_recIdents;
          }
        } else if (_source108.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3521___mcc_h168 = _source108.dtor_name;
          DAST._IType _3522___mcc_h169 = _source108.dtor_typ;
          DAST._IExpression _3523___mcc_h170 = _source108.dtor_value;
          DAST._IExpression _3524___mcc_h171 = _source108.dtor_iifeBody;
          bool _3525_isDatatype = _3259___mcc_h45;
          bool _3526_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3527_field = _3257___mcc_h43;
          DAST._IExpression _3528_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3529_onString;
            bool _3530_onOwned;
            bool _3531_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3532_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_3528_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _3529_onString = _out1594;
            _3530_onOwned = _out1595;
            _3531_onErased = _out1596;
            _3532_recIdents = _out1597;
            if ((_3525_isDatatype) || (_3526_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3529_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3527_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3526_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3529_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3527_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3532_recIdents;
          }
        } else if (_source108.is_Apply) {
          DAST._IExpression _3533___mcc_h176 = _source108.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3534___mcc_h177 = _source108.dtor_args;
          bool _3535_isDatatype = _3259___mcc_h45;
          bool _3536_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3537_field = _3257___mcc_h43;
          DAST._IExpression _3538_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3539_onString;
            bool _3540_onOwned;
            bool _3541_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_3538_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _3539_onString = _out1598;
            _3540_onOwned = _out1599;
            _3541_onErased = _out1600;
            _3542_recIdents = _out1601;
            if ((_3535_isDatatype) || (_3536_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3539_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3537_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3536_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3539_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3537_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3542_recIdents;
          }
        } else if (_source108.is_TypeTest) {
          DAST._IExpression _3543___mcc_h180 = _source108.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3544___mcc_h181 = _source108.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3545___mcc_h182 = _source108.dtor_variant;
          bool _3546_isDatatype = _3259___mcc_h45;
          bool _3547_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3548_field = _3257___mcc_h43;
          DAST._IExpression _3549_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3550_onString;
            bool _3551_onOwned;
            bool _3552_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3553_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_3549_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _3550_onString = _out1602;
            _3551_onOwned = _out1603;
            _3552_onErased = _out1604;
            _3553_recIdents = _out1605;
            if ((_3546_isDatatype) || (_3547_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3550_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3548_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3547_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3550_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3548_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3553_recIdents;
          }
        } else if (_source108.is_InitializationValue) {
          DAST._IType _3554___mcc_h186 = _source108.dtor_typ;
          bool _3555_isDatatype = _3259___mcc_h45;
          bool _3556_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3557_field = _3257___mcc_h43;
          DAST._IExpression _3558_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3559_onString;
            bool _3560_onOwned;
            bool _3561_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3562_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_3558_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _3559_onString = _out1606;
            _3560_onOwned = _out1607;
            _3561_onErased = _out1608;
            _3562_recIdents = _out1609;
            if ((_3555_isDatatype) || (_3556_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3559_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3557_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3556_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3559_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3557_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3562_recIdents;
          }
        } else if (_source108.is_BoolBoundedPool) {
          bool _3563_isDatatype = _3259___mcc_h45;
          bool _3564_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3565_field = _3257___mcc_h43;
          DAST._IExpression _3566_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3567_onString;
            bool _3568_onOwned;
            bool _3569_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3570_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_3566_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _3567_onString = _out1610;
            _3568_onOwned = _out1611;
            _3569_onErased = _out1612;
            _3570_recIdents = _out1613;
            if ((_3563_isDatatype) || (_3564_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3567_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3565_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3564_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3567_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3565_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3570_recIdents;
          }
        } else if (_source108.is_SetBoundedPool) {
          DAST._IExpression _3571___mcc_h188 = _source108.dtor_of;
          bool _3572_isDatatype = _3259___mcc_h45;
          bool _3573_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3574_field = _3257___mcc_h43;
          DAST._IExpression _3575_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3576_onString;
            bool _3577_onOwned;
            bool _3578_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3579_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_3575_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _3576_onString = _out1614;
            _3577_onOwned = _out1615;
            _3578_onErased = _out1616;
            _3579_recIdents = _out1617;
            if ((_3572_isDatatype) || (_3573_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3576_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3574_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3573_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3576_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3574_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3579_recIdents;
          }
        } else if (_source108.is_SeqBoundedPool) {
          DAST._IExpression _3580___mcc_h190 = _source108.dtor_of;
          bool _3581___mcc_h191 = _source108.dtor_includeDuplicates;
          bool _3582_isDatatype = _3259___mcc_h45;
          bool _3583_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3584_field = _3257___mcc_h43;
          DAST._IExpression _3585_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3586_onString;
            bool _3587_onOwned;
            bool _3588_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3589_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_3585_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _3586_onString = _out1618;
            _3587_onOwned = _out1619;
            _3588_onErased = _out1620;
            _3589_recIdents = _out1621;
            if ((_3582_isDatatype) || (_3583_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3586_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3583_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3586_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3589_recIdents;
          }
        } else {
          DAST._IExpression _3590___mcc_h194 = _source108.dtor_lo;
          DAST._IExpression _3591___mcc_h195 = _source108.dtor_hi;
          bool _3592_isDatatype = _3259___mcc_h45;
          bool _3593_isConstant = _3258___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3594_field = _3257___mcc_h43;
          DAST._IExpression _3595_on = _3256___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3596_onString;
            bool _3597_onOwned;
            bool _3598_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3599_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1622;
            bool _out1623;
            bool _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            DCOMP.COMP.GenExpr(_3595_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
            _3596_onString = _out1622;
            _3597_onOwned = _out1623;
            _3598_onErased = _out1624;
            _3599_recIdents = _out1625;
            if ((_3592_isDatatype) || (_3593_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3596_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3594_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3593_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3596_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3594_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3599_recIdents;
          }
        }
      } else if (_source48.is_SelectFn) {
        DAST._IExpression _3600___mcc_h198 = _source48.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3601___mcc_h199 = _source48.dtor_field;
        bool _3602___mcc_h200 = _source48.dtor_onDatatype;
        bool _3603___mcc_h201 = _source48.dtor_isStatic;
        BigInteger _3604___mcc_h202 = _source48.dtor_arity;
        BigInteger _3605_arity = _3604___mcc_h202;
        bool _3606_isStatic = _3603___mcc_h201;
        bool _3607_isDatatype = _3602___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3608_field = _3601___mcc_h199;
        DAST._IExpression _3609_on = _3600___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3610_onString;
          bool _3611_onOwned;
          bool _3612___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3613_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1626;
          bool _out1627;
          bool _out1628;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
          DCOMP.COMP.GenExpr(_3609_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
          _3610_onString = _out1626;
          _3611_onOwned = _out1627;
          _3612___v82 = _out1628;
          _3613_recIdents = _out1629;
          if (_3606_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3610_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3608_field));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3610_onString), ((_3611_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3614_args;
            _3614_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3615_i;
            _3615_i = BigInteger.Zero;
            while ((_3615_i) < (_3605_arity)) {
              if ((_3615_i).Sign == 1) {
                _3614_args = Dafny.Sequence<Dafny.Rune>.Concat(_3614_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3614_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3614_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_3615_i));
              _3615_i = (_3615_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3614_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3608_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3614_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3616_typeShape;
          _3616_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3617_i;
          _3617_i = BigInteger.Zero;
          while ((_3617_i) < (_3605_arity)) {
            if ((_3617_i).Sign == 1) {
              _3616_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3616_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3616_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3616_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3617_i = (_3617_i) + (BigInteger.One);
          }
          _3616_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3616_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3616_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3613_recIdents;
        }
      } else if (_source48.is_Index) {
        DAST._IExpression _3618___mcc_h203 = _source48.dtor_expr;
        DAST._ICollKind _3619___mcc_h204 = _source48.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3620___mcc_h205 = _source48.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3621_indices = _3620___mcc_h205;
        DAST._ICollKind _3622_collKind = _3619___mcc_h204;
        DAST._IExpression _3623_on = _3618___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3624_onString;
          bool _3625_onOwned;
          bool _3626_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3627_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1630;
          bool _out1631;
          bool _out1632;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
          DCOMP.COMP.GenExpr(_3623_on, selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
          _3624_onString = _out1630;
          _3625_onOwned = _out1631;
          _3626_onErased = _out1632;
          _3627_recIdents = _out1633;
          readIdents = _3627_recIdents;
          s = _3624_onString;
          BigInteger _3628_i;
          _3628_i = BigInteger.Zero;
          while ((_3628_i) < (new BigInteger((_3621_indices).Count))) {
            if (object.Equals(_3622_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3622_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3629_idx;
              bool _3630_idxOwned;
              bool _3631_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3632_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1634;
              bool _out1635;
              bool _out1636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
              DCOMP.COMP.GenExpr((_3621_indices).Select(_3628_i), selfIdent, @params, false, out _out1634, out _out1635, out _out1636, out _out1637);
              _3629_idx = _out1634;
              _3630_idxOwned = _out1635;
              _3631_idxErased = _out1636;
              _3632_recIdentsIdx = _out1637;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3630_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3629_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3632_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3633_idx;
              bool _3634___v83;
              bool _3635_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3636_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1638;
              bool _out1639;
              bool _out1640;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
              DCOMP.COMP.GenExpr((_3621_indices).Select(_3628_i), selfIdent, @params, true, out _out1638, out _out1639, out _out1640, out _out1641);
              _3633_idx = _out1638;
              _3634___v83 = _out1639;
              _3635_idxErased = _out1640;
              _3636_recIdentsIdx = _out1641;
              if (!(_3635_idxErased)) {
                _3633_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3633_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3633_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3636_recIdentsIdx);
            }
            _3628_i = (_3628_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3626_onErased;
        }
      } else if (_source48.is_IndexRange) {
        DAST._IExpression _3637___mcc_h206 = _source48.dtor_expr;
        bool _3638___mcc_h207 = _source48.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _3639___mcc_h208 = _source48.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _3640___mcc_h209 = _source48.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _3641_high = _3640___mcc_h209;
        Std.Wrappers._IOption<DAST._IExpression> _3642_low = _3639___mcc_h208;
        bool _3643_isArray = _3638___mcc_h207;
        DAST._IExpression _3644_on = _3637___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3645_onString;
          bool _3646_onOwned;
          bool _3647_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3648_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1642;
          bool _out1643;
          bool _out1644;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
          DCOMP.COMP.GenExpr(_3644_on, selfIdent, @params, false, out _out1642, out _out1643, out _out1644, out _out1645);
          _3645_onString = _out1642;
          _3646_onOwned = _out1643;
          _3647_onErased = _out1644;
          _3648_recIdents = _out1645;
          readIdents = _3648_recIdents;
          s = _3645_onString;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3649_lowString;
          _3649_lowString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source109 = _3642_low;
          if (_source109.is_None) {
          } else {
            DAST._IExpression _3650___mcc_h1195 = _source109.dtor_value;
            DAST._IExpression _3651_l = _3650___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3652_lString;
              bool _3653___v84;
              bool _3654_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3655_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1646;
              bool _out1647;
              bool _out1648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
              DCOMP.COMP.GenExpr(_3651_l, selfIdent, @params, true, out _out1646, out _out1647, out _out1648, out _out1649);
              _3652_lString = _out1646;
              _3653___v84 = _out1647;
              _3654_lErased = _out1648;
              _3655_recIdentsL = _out1649;
              if (!(_3654_lErased)) {
                _3652_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3652_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3649_lowString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3652_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3655_recIdentsL);
            }
          }
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3656_highString;
          _3656_highString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source110 = _3641_high;
          if (_source110.is_None) {
          } else {
            DAST._IExpression _3657___mcc_h1196 = _source110.dtor_value;
            DAST._IExpression _3658_h = _3657___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3659_hString;
              bool _3660___v85;
              bool _3661_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3662_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1650;
              bool _out1651;
              bool _out1652;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
              DCOMP.COMP.GenExpr(_3658_h, selfIdent, @params, true, out _out1650, out _out1651, out _out1652, out _out1653);
              _3659_hString = _out1650;
              _3660___v85 = _out1651;
              _3661_hErased = _out1652;
              _3662_recIdentsH = _out1653;
              if (!(_3661_hErased)) {
                _3659_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3659_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3656_highString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3659_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3662_recIdentsH);
            }
          }
          if (_3643_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source111) => {
            if (_source111.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              Dafny.ISequence<Dafny.Rune> _3663___mcc_h1197 = _source111.dtor_value;
              Dafny.ISequence<Dafny.Rune> _3664_l = _3663___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3664_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_3649_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source112) => {
            if (_source112.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              Dafny.ISequence<Dafny.Rune> _3665___mcc_h1198 = _source112.dtor_value;
              Dafny.ISequence<Dafny.Rune> _3666_h = _3665___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3666_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_3656_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3647_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source48.is_TupleSelect) {
        DAST._IExpression _3667___mcc_h210 = _source48.dtor_expr;
        BigInteger _3668___mcc_h211 = _source48.dtor_index;
        BigInteger _3669_idx = _3668___mcc_h211;
        DAST._IExpression _3670_on = _3667___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3671_onString;
          bool _3672___v86;
          bool _3673_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3674_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          bool _out1655;
          bool _out1656;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
          DCOMP.COMP.GenExpr(_3670_on, selfIdent, @params, false, out _out1654, out _out1655, out _out1656, out _out1657);
          _3671_onString = _out1654;
          _3672___v86 = _out1655;
          _3673_tupErased = _out1656;
          _3674_recIdents = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3671_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), Std.Strings.__default.OfNat(_3669_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3673_tupErased;
          readIdents = _3674_recIdents;
        }
      } else if (_source48.is_Call) {
        DAST._IExpression _3675___mcc_h212 = _source48.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3676___mcc_h213 = _source48.dtor_name;
        Dafny.ISequence<DAST._IType> _3677___mcc_h214 = _source48.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3678___mcc_h215 = _source48.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3679_args = _3678___mcc_h215;
        Dafny.ISequence<DAST._IType> _3680_typeArgs = _3677___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3681_name = _3676___mcc_h213;
        DAST._IExpression _3682_on = _3675___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3683_typeArgString;
          _3683_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3680_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3684_typeI;
            _3684_typeI = BigInteger.Zero;
            _3683_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3684_typeI) < (new BigInteger((_3680_typeArgs).Count))) {
              if ((_3684_typeI).Sign == 1) {
                _3683_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3683_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3685_typeString;
              Dafny.ISequence<Dafny.Rune> _out1658;
              _out1658 = DCOMP.COMP.GenType((_3680_typeArgs).Select(_3684_typeI), false, false);
              _3685_typeString = _out1658;
              _3683_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3683_typeArgString, _3685_typeString);
              _3684_typeI = (_3684_typeI) + (BigInteger.One);
            }
            _3683_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3683_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3686_argString;
          _3686_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3687_i;
          _3687_i = BigInteger.Zero;
          while ((_3687_i) < (new BigInteger((_3679_args).Count))) {
            if ((_3687_i).Sign == 1) {
              _3686_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3686_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3688_argExpr;
            bool _3689_isOwned;
            bool _3690_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3691_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr((_3679_args).Select(_3687_i), selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
            _3688_argExpr = _out1659;
            _3689_isOwned = _out1660;
            _3690_argErased = _out1661;
            _3691_argIdents = _out1662;
            if (_3689_isOwned) {
              _3688_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3688_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3690_argErased)) {
              _3688_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3688_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3688_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3688_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3686_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3686_argString, _3688_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3691_argIdents);
            _3687_i = (_3687_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3692_enclosingString;
          bool _3693___v87;
          bool _3694___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3695_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_3682_on, selfIdent, @params, false, out _out1663, out _out1664, out _out1665, out _out1666);
          _3692_enclosingString = _out1663;
          _3693___v87 = _out1664;
          _3694___v88 = _out1665;
          _3695_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3695_recIdents);
          DAST._IExpression _source113 = _3682_on;
          if (_source113.is_Literal) {
            DAST._ILiteral _3696___mcc_h1199 = _source113.dtor_Literal_a0;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3697___mcc_h1201 = _source113.dtor_Ident_a0;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3698___mcc_h1203 = _source113.dtor_Companion_a0;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3692_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3699___mcc_h1205 = _source113.dtor_Tuple_a0;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3700___mcc_h1207 = _source113.dtor_path;
            Dafny.ISequence<DAST._IType> _3701___mcc_h1208 = _source113.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3702___mcc_h1209 = _source113.dtor_args;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3703___mcc_h1213 = _source113.dtor_dims;
            DAST._IType _3704___mcc_h1214 = _source113.dtor_typ;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3705___mcc_h1217 = _source113.dtor_path;
            Dafny.ISequence<DAST._IType> _3706___mcc_h1218 = _source113.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3707___mcc_h1219 = _source113.dtor_variant;
            bool _3708___mcc_h1220 = _source113.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3709___mcc_h1221 = _source113.dtor_contents;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Convert) {
            DAST._IExpression _3710___mcc_h1227 = _source113.dtor_value;
            DAST._IType _3711___mcc_h1228 = _source113.dtor_from;
            DAST._IType _3712___mcc_h1229 = _source113.dtor_typ;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_SeqConstruct) {
            DAST._IExpression _3713___mcc_h1233 = _source113.dtor_length;
            DAST._IExpression _3714___mcc_h1234 = _source113.dtor_elem;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3715___mcc_h1237 = _source113.dtor_elements;
            DAST._IType _3716___mcc_h1238 = _source113.dtor_typ;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3717___mcc_h1241 = _source113.dtor_elements;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3718___mcc_h1243 = _source113.dtor_mapElems;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_This) {
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Ite) {
            DAST._IExpression _3719___mcc_h1245 = _source113.dtor_cond;
            DAST._IExpression _3720___mcc_h1246 = _source113.dtor_thn;
            DAST._IExpression _3721___mcc_h1247 = _source113.dtor_els;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_UnOp) {
            DAST._IUnaryOp _3722___mcc_h1251 = _source113.dtor_unOp;
            DAST._IExpression _3723___mcc_h1252 = _source113.dtor_expr;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_BinOp) {
            DAST._IBinOp _3724___mcc_h1255 = _source113.dtor_op;
            DAST._IExpression _3725___mcc_h1256 = _source113.dtor_left;
            DAST._IExpression _3726___mcc_h1257 = _source113.dtor_right;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_ArrayLen) {
            DAST._IExpression _3727___mcc_h1261 = _source113.dtor_expr;
            BigInteger _3728___mcc_h1262 = _source113.dtor_dim;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Select) {
            DAST._IExpression _3729___mcc_h1265 = _source113.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3730___mcc_h1266 = _source113.dtor_field;
            bool _3731___mcc_h1267 = _source113.dtor_isConstant;
            bool _3732___mcc_h1268 = _source113.dtor_onDatatype;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_SelectFn) {
            DAST._IExpression _3733___mcc_h1273 = _source113.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3734___mcc_h1274 = _source113.dtor_field;
            bool _3735___mcc_h1275 = _source113.dtor_onDatatype;
            bool _3736___mcc_h1276 = _source113.dtor_isStatic;
            BigInteger _3737___mcc_h1277 = _source113.dtor_arity;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Index) {
            DAST._IExpression _3738___mcc_h1283 = _source113.dtor_expr;
            DAST._ICollKind _3739___mcc_h1284 = _source113.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3740___mcc_h1285 = _source113.dtor_indices;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_IndexRange) {
            DAST._IExpression _3741___mcc_h1289 = _source113.dtor_expr;
            bool _3742___mcc_h1290 = _source113.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _3743___mcc_h1291 = _source113.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _3744___mcc_h1292 = _source113.dtor_high;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_TupleSelect) {
            DAST._IExpression _3745___mcc_h1297 = _source113.dtor_expr;
            BigInteger _3746___mcc_h1298 = _source113.dtor_index;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Call) {
            DAST._IExpression _3747___mcc_h1301 = _source113.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3748___mcc_h1302 = _source113.dtor_name;
            Dafny.ISequence<DAST._IType> _3749___mcc_h1303 = _source113.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3750___mcc_h1304 = _source113.dtor_args;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3751___mcc_h1309 = _source113.dtor_params;
            DAST._IType _3752___mcc_h1310 = _source113.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3753___mcc_h1311 = _source113.dtor_body;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3754___mcc_h1315 = _source113.dtor_values;
            DAST._IType _3755___mcc_h1316 = _source113.dtor_retType;
            DAST._IExpression _3756___mcc_h1317 = _source113.dtor_expr;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3757___mcc_h1321 = _source113.dtor_name;
            DAST._IType _3758___mcc_h1322 = _source113.dtor_typ;
            DAST._IExpression _3759___mcc_h1323 = _source113.dtor_value;
            DAST._IExpression _3760___mcc_h1324 = _source113.dtor_iifeBody;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_Apply) {
            DAST._IExpression _3761___mcc_h1329 = _source113.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3762___mcc_h1330 = _source113.dtor_args;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_TypeTest) {
            DAST._IExpression _3763___mcc_h1333 = _source113.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3764___mcc_h1334 = _source113.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3765___mcc_h1335 = _source113.dtor_variant;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_InitializationValue) {
            DAST._IType _3766___mcc_h1339 = _source113.dtor_typ;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_BoolBoundedPool) {
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_SetBoundedPool) {
            DAST._IExpression _3767___mcc_h1341 = _source113.dtor_of;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else if (_source113.is_SeqBoundedPool) {
            DAST._IExpression _3768___mcc_h1343 = _source113.dtor_of;
            bool _3769___mcc_h1344 = _source113.dtor_includeDuplicates;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          } else {
            DAST._IExpression _3770___mcc_h1347 = _source113.dtor_lo;
            DAST._IExpression _3771___mcc_h1348 = _source113.dtor_hi;
            {
              _3692_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3692_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3681_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3692_enclosingString, _3683_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3686_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3772___mcc_h216 = _source48.dtor_params;
        DAST._IType _3773___mcc_h217 = _source48.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3774___mcc_h218 = _source48.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3775_body = _3774___mcc_h218;
        DAST._IType _3776_retType = _3773___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3777_params = _3772___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3778_paramNames;
          _3778_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3779_i;
          _3779_i = BigInteger.Zero;
          while ((_3779_i) < (new BigInteger((_3777_params).Count))) {
            _3778_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3778_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3777_params).Select(_3779_i)).dtor_name));
            _3779_i = (_3779_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3780_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3781_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
          DCOMP.COMP.GenStmts(_3775_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _3778_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1667, out _out1668);
          _3780_recursiveGen = _out1667;
          _3781_recIdents = _out1668;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3782_allReadCloned;
          _3782_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3781_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3783_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_3781_recIdents).Elements) {
              _3783_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_3781_recIdents).Contains(_3783_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2536)");
          after__ASSIGN_SUCH_THAT_3:;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3783_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3782_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3782_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3778_paramNames).Contains(_3783_next))) {
              _3782_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3782_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3783_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3783_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3783_next));
            }
            _3781_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3781_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3783_next));
          }
          Dafny.ISequence<Dafny.Rune> _3784_paramsString;
          _3784_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3785_paramTypes;
          _3785_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3779_i = BigInteger.Zero;
          while ((_3779_i) < (new BigInteger((_3777_params).Count))) {
            if ((_3779_i).Sign == 1) {
              _3784_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3784_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3785_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3785_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3786_typStr;
            Dafny.ISequence<Dafny.Rune> _out1669;
            _out1669 = DCOMP.COMP.GenType(((_3777_params).Select(_3779_i)).dtor_typ, false, true);
            _3786_typStr = _out1669;
            _3784_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3784_paramsString, DCOMP.__default.escapeIdent(((_3777_params).Select(_3779_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3786_typStr);
            _3785_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3785_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3786_typStr);
            _3779_i = (_3779_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3787_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1670;
          _out1670 = DCOMP.COMP.GenType(_3776_retType, false, true);
          _3787_retTypeGen = _out1670;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3785_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3787_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3782_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3784_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3787_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3788___mcc_h219 = _source48.dtor_values;
        DAST._IType _3789___mcc_h220 = _source48.dtor_retType;
        DAST._IExpression _3790___mcc_h221 = _source48.dtor_expr;
        DAST._IExpression _3791_expr = _3790___mcc_h221;
        DAST._IType _3792_retType = _3789___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3793_values = _3788___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3794_paramNames;
          _3794_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3795_paramNamesSet;
          _3795_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3796_i;
          _3796_i = BigInteger.Zero;
          while ((_3796_i) < (new BigInteger((_3793_values).Count))) {
            _3794_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3794_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3793_values).Select(_3796_i)).dtor__0).dtor_name));
            _3795_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3795_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3793_values).Select(_3796_i)).dtor__0).dtor_name));
            _3796_i = (_3796_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3797_paramsString;
          _3797_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3796_i = BigInteger.Zero;
          while ((_3796_i) < (new BigInteger((_3793_values).Count))) {
            if ((_3796_i).Sign == 1) {
              _3797_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3797_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3798_typStr;
            Dafny.ISequence<Dafny.Rune> _out1671;
            _out1671 = DCOMP.COMP.GenType((((_3793_values).Select(_3796_i)).dtor__0).dtor_typ, false, true);
            _3798_typStr = _out1671;
            Dafny.ISequence<Dafny.Rune> _3799_valueGen;
            bool _3800___v91;
            bool _3801_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3802_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1672;
            bool _out1673;
            bool _out1674;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
            DCOMP.COMP.GenExpr(((_3793_values).Select(_3796_i)).dtor__1, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
            _3799_valueGen = _out1672;
            _3800___v91 = _out1673;
            _3801_valueErased = _out1674;
            _3802_recIdents = _out1675;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3793_values).Select(_3796_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3798_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3802_recIdents);
            if (_3801_valueErased) {
              _3799_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3799_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3799_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3796_i = (_3796_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3803_recGen;
          bool _3804_recOwned;
          bool _3805_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3806_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_3791_expr, selfIdent, _3794_paramNames, mustOwn, out _out1676, out _out1677, out _out1678, out _out1679);
          _3803_recGen = _out1676;
          _3804_recOwned = _out1677;
          _3805_recErased = _out1678;
          _3806_recIdents = _out1679;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3806_recIdents, _3795_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3803_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3804_recOwned;
          isErased = _3805_recErased;
        }
      } else if (_source48.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3807___mcc_h222 = _source48.dtor_name;
        DAST._IType _3808___mcc_h223 = _source48.dtor_typ;
        DAST._IExpression _3809___mcc_h224 = _source48.dtor_value;
        DAST._IExpression _3810___mcc_h225 = _source48.dtor_iifeBody;
        DAST._IExpression _3811_iifeBody = _3810___mcc_h225;
        DAST._IExpression _3812_value = _3809___mcc_h224;
        DAST._IType _3813_tpe = _3808___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3814_name = _3807___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3815_valueGen;
          bool _3816___v92;
          bool _3817_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3818_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1680;
          bool _out1681;
          bool _out1682;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
          DCOMP.COMP.GenExpr(_3812_value, selfIdent, @params, true, out _out1680, out _out1681, out _out1682, out _out1683);
          _3815_valueGen = _out1680;
          _3816___v92 = _out1681;
          _3817_valueErased = _out1682;
          _3818_recIdents = _out1683;
          if (_3817_valueErased) {
            _3815_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3815_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3818_recIdents;
          Dafny.ISequence<Dafny.Rune> _3819_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1684;
          _out1684 = DCOMP.COMP.GenType(_3813_tpe, false, true);
          _3819_valueTypeGen = _out1684;
          Dafny.ISequence<Dafny.Rune> _3820_bodyGen;
          bool _3821___v93;
          bool _3822_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3823_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3811_iifeBody, selfIdent, @params, true, out _out1685, out _out1686, out _out1687, out _out1688);
          _3820_bodyGen = _out1685;
          _3821___v93 = _out1686;
          _3822_bodyErased = _out1687;
          _3823_bodyIdents = _out1688;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3823_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3814_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3814_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3819_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3815_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3820_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3822_bodyErased;
        }
      } else if (_source48.is_Apply) {
        DAST._IExpression _3824___mcc_h226 = _source48.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3825___mcc_h227 = _source48.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3826_args = _3825___mcc_h227;
        DAST._IExpression _3827_func = _3824___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3828_funcString;
          bool _3829___v94;
          bool _3830_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3831_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1689;
          bool _out1690;
          bool _out1691;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
          DCOMP.COMP.GenExpr(_3827_func, selfIdent, @params, false, out _out1689, out _out1690, out _out1691, out _out1692);
          _3828_funcString = _out1689;
          _3829___v94 = _out1690;
          _3830_funcErased = _out1691;
          _3831_recIdents = _out1692;
          readIdents = _3831_recIdents;
          Dafny.ISequence<Dafny.Rune> _3832_argString;
          _3832_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3833_i;
          _3833_i = BigInteger.Zero;
          while ((_3833_i) < (new BigInteger((_3826_args).Count))) {
            if ((_3833_i).Sign == 1) {
              _3832_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3832_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3834_argExpr;
            bool _3835_isOwned;
            bool _3836_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3837_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1693;
            bool _out1694;
            bool _out1695;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
            DCOMP.COMP.GenExpr((_3826_args).Select(_3833_i), selfIdent, @params, false, out _out1693, out _out1694, out _out1695, out _out1696);
            _3834_argExpr = _out1693;
            _3835_isOwned = _out1694;
            _3836_argErased = _out1695;
            _3837_argIdents = _out1696;
            if (_3835_isOwned) {
              _3834_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3834_argExpr);
            }
            _3832_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3832_argString, _3834_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3837_argIdents);
            _3833_i = (_3833_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3828_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3832_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_TypeTest) {
        DAST._IExpression _3838___mcc_h228 = _source48.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3839___mcc_h229 = _source48.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3840___mcc_h230 = _source48.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3841_variant = _3840___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3842_dType = _3839___mcc_h229;
        DAST._IExpression _3843_on = _3838___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3844_exprGen;
          bool _3845___v95;
          bool _3846_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3847_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1697;
          bool _out1698;
          bool _out1699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
          DCOMP.COMP.GenExpr(_3843_on, selfIdent, @params, false, out _out1697, out _out1698, out _out1699, out _out1700);
          _3844_exprGen = _out1697;
          _3845___v95 = _out1698;
          _3846_exprErased = _out1699;
          _3847_recIdents = _out1700;
          Dafny.ISequence<Dafny.Rune> _3848_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1701;
          _out1701 = DCOMP.COMP.GenPath(_3842_dType);
          _3848_dTypePath = _out1701;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3844_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3848_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3841_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3847_recIdents;
        }
      } else if (_source48.is_InitializationValue) {
        DAST._IType _3849___mcc_h231 = _source48.dtor_typ;
        DAST._IType _3850_typ = _3849___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3851_typString;
          Dafny.ISequence<Dafny.Rune> _out1702;
          _out1702 = DCOMP.COMP.GenType(_3850_typ, false, false);
          _3851_typString = _out1702;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3851_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source48.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source48.is_SetBoundedPool) {
        DAST._IExpression _3852___mcc_h232 = _source48.dtor_of;
        DAST._IExpression _3853_of = _3852___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3854_exprGen;
          bool _3855___v96;
          bool _3856_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3857_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1703;
          bool _out1704;
          bool _out1705;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1706;
          DCOMP.COMP.GenExpr(_3853_of, selfIdent, @params, false, out _out1703, out _out1704, out _out1705, out _out1706);
          _3854_exprGen = _out1703;
          _3855___v96 = _out1704;
          _3856_exprErased = _out1705;
          _3857_recIdents = _out1706;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3854_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3856_exprErased;
          readIdents = _3857_recIdents;
        }
      } else if (_source48.is_SeqBoundedPool) {
        DAST._IExpression _3858___mcc_h233 = _source48.dtor_of;
        bool _3859___mcc_h234 = _source48.dtor_includeDuplicates;
        bool _3860_includeDuplicates = _3859___mcc_h234;
        DAST._IExpression _3861_of = _3858___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3862_exprGen;
          bool _3863___v97;
          bool _3864_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3865_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1707;
          bool _out1708;
          bool _out1709;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1710;
          DCOMP.COMP.GenExpr(_3861_of, selfIdent, @params, false, out _out1707, out _out1708, out _out1709, out _out1710);
          _3862_exprGen = _out1707;
          _3863___v97 = _out1708;
          _3864_exprErased = _out1709;
          _3865_recIdents = _out1710;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3862_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3860_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3864_exprErased;
          readIdents = _3865_recIdents;
        }
      } else {
        DAST._IExpression _3866___mcc_h235 = _source48.dtor_lo;
        DAST._IExpression _3867___mcc_h236 = _source48.dtor_hi;
        DAST._IExpression _3868_hi = _3867___mcc_h236;
        DAST._IExpression _3869_lo = _3866___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3870_loString;
          bool _3871___v98;
          bool _3872_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3873_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1711;
          bool _out1712;
          bool _out1713;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
          DCOMP.COMP.GenExpr(_3869_lo, selfIdent, @params, true, out _out1711, out _out1712, out _out1713, out _out1714);
          _3870_loString = _out1711;
          _3871___v98 = _out1712;
          _3872_loErased = _out1713;
          _3873_recIdentsLo = _out1714;
          Dafny.ISequence<Dafny.Rune> _3874_hiString;
          bool _3875___v99;
          bool _3876_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3877_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1715;
          bool _out1716;
          bool _out1717;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
          DCOMP.COMP.GenExpr(_3868_hi, selfIdent, @params, true, out _out1715, out _out1716, out _out1717, out _out1718);
          _3874_hiString = _out1715;
          _3875___v99 = _out1716;
          _3876_hiErased = _out1717;
          _3877_recIdentsHi = _out1718;
          if (!(_3872_loErased)) {
            _3870_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3870_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3876_hiErased)) {
            _3874_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3874_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3870_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3874_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3873_recIdentsLo, _3877_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3878_i;
      _3878_i = BigInteger.Zero;
      while ((_3878_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3879_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _3880_m;
        RAST._IMod _out1719;
        _out1719 = DCOMP.COMP.GenModule((p).Select(_3878_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3880_m = _out1719;
        _3879_generated = (_3880_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_3878_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3879_generated);
        _3878_i = (_3878_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3881_i;
      _3881_i = BigInteger.Zero;
      while ((_3881_i) < (new BigInteger((fullName).Count))) {
        if ((_3881_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_3881_i)));
        _3881_i = (_3881_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

