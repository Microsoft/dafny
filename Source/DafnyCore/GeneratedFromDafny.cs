// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_83_xs) => ((System.Func<BigInteger, __T>)((_84_i) => {
        return (_83_xs).Select(_84_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_85_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_85_xs).CloneAsArray()) {
          __T _86_x = (__T)_compr_0;
          if ((_85_xs).Contains(_86_x)) {
            _coll0.Add(_86_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _87___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_87___accumulator);
      } else {
        _87___accumulator = (_87___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_88_v) => ((System.Func<__T, bool>)((_89_x) => {
        return object.Equals(_89_x, _88_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _90_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_90_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_90_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_91_v) => ((System.Func<__T, bool>)((_92_x) => {
        return object.Equals(_92_x, _91_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _93_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_93_i), (xs).Drop((_93_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _94___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_94___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _94___accumulator = Dafny.Sequence<__T>.Concat(_94___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _95___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_95___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _95___accumulator = Dafny.Sequence<__T>.Concat(_95___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _96_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _97_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_96_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_97_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _98___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _98___accumulator);
      } else {
        _98___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _98___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _99___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_99___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__T>.Concat(_99___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _100___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _100___accumulator);
      } else {
        _100___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _100___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _101___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_101___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_101___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _101___accumulator = Dafny.Sequence<__T>.Concat(_101___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _102___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _103_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_103_i).is_Some) {
        _102___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_102___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_103_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_103_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_102___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _104_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_104_i).dtor_value), (s).Drop(((_104_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _105_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_105_valueOrError0).IsFailure()) {
        return (_105_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _106_i = (_105_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_106_i), (s).Drop((_106_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _107___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_107___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _107___accumulator = Dafny.Sequence<__R>.Concat(_107___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _108_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_108_valueOrError0).IsFailure()) {
          return (_108_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _109_head = (_108_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _110_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_110_valueOrError1).IsFailure()) {
            return (_110_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _111_tail = (_110_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_109_head), _111_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _113_left;
      _113_left = s;
      while (!(_113_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _114_x;
        foreach (__T _assign_such_that_0 in (_113_left).Elements) {
          _114_x = (__T)_assign_such_that_0;
          if ((_113_left).Contains(_114_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0: ;
        _113_left = Dafny.Set<__T>.Difference(_113_left, Dafny.Set<__T>.FromElements(_114_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_114_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _115_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _116_left = (a).Take(_115_splitIndex);
        Dafny.ISequence<__T> _117_right = (a).Drop(_115_splitIndex);
        Dafny.ISequence<__T> _118_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _116_left);
        Dafny.ISequence<__T> _119_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _117_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_118_leftSorted, _119_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _120___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_120___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_120___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _120___accumulator = Dafny.Sequence<__T>.Concat(_120___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _120___accumulator = Dafny.Sequence<__T>.Concat(_120___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = (_149___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _150___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _150___accumulator = (_150___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_150___accumulator);
      } else {
        _150___accumulator = (_150___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _151___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_151___accumulator);
      } else {
        _151___accumulator = (_151___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _152___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_152___accumulator);
      } else {
        _152___accumulator = (_152___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _153___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _153___accumulator);
      } else {
        _153___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _153___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_154_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_154_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _155_c = (Dafny.Rune)_forall_var_1;
        return !(((_154_str).Drop(BigInteger.One)).Contains(_155_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_155_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _156_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_156_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _157___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_157___accumulator);
      } else {
        _157___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_157___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _158___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_158___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _158___accumulator = Dafny.Sequence<BigInteger>.Concat(_158___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _159_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _159_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _160_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _160_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _161_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _162_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _163_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_162_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_163_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_163_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_163_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _164_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _165_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_161_zs_k, Dafny.Sequence<BigInteger>.FromElements(_164_sum__out)), _165_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _166_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _167_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_167_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_167_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_167_cin), BigInteger.One)));
        BigInteger _168_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _169_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_166_zs, Dafny.Sequence<BigInteger>.FromElements(_168_diff__out)), _169_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(Dafny.ISequence<Dafny.Rune> __source) {
      Dafny.ISequence<Dafny.Rune> _170_chars = __source;
      return (new BigInteger((_170_chars).Count)) > (BigInteger.One);
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _171_i = __source;
      if (_System.nat._Is(_171_i)) {
        return ((_171_i).Sign != -1) && ((_171_i) < (Std.Strings.HexConversion.__default.BASE()));
      }
      return false;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _172___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _172___accumulator);
      } else {
        _172___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _172___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_173_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_173_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _174_c = (Dafny.Rune)_forall_var_2;
        return !(((_173_str).Drop(BigInteger.One)).Contains(_174_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_174_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _175_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_175_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _176___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_176___accumulator);
      } else {
        _176___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_176___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _177___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_177___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _177___accumulator = Dafny.Sequence<BigInteger>.Concat(_177___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _178_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _178_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _179_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _179_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _180_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _181_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _182_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_181_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_182_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_182_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_182_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _183_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _184_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_180_zs_k, Dafny.Sequence<BigInteger>.FromElements(_183_sum__out)), _184_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _185_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _186_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_186_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_186_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_186_cin), BigInteger.One)));
        BigInteger _187_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _188_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_185_zs, Dafny.Sequence<BigInteger>.FromElements(_187_diff__out)), _188_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(Dafny.ISequence<Dafny.Rune> __source) {
      Dafny.ISequence<Dafny.Rune> _189_chars = __source;
      return (new BigInteger((_189_chars).Count)) > (BigInteger.One);
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _190_i = __source;
      if (_System.nat._Is(_190_i)) {
        return ((_190_i).Sign != -1) && ((_190_i) < (Std.Strings.DecimalConversion.__default.BASE()));
      }
      return false;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _191___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_191___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _191___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_191___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _191___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_191___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _192_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_192_valueOrError0).IsFailure()) {
            return (_192_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _193_tl = (_192_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _193_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _194_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_194_valueOrError1).IsFailure()) {
          return (_194_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _195_tl = (_194_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _195_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnaryOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineFormat { get; }
    _IUnaryOpFormat DowncastClone();
  }
  public abstract class UnaryOpFormat : _IUnaryOpFormat {
    public UnaryOpFormat() {
    }
    private static readonly DAST.Format._IUnaryOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnaryOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnaryOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnaryOpFormat>(DAST.Format.UnaryOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnaryOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOpFormat create_NoFormat() {
      return new UnaryOpFormat_NoFormat();
    }
    public static _IUnaryOpFormat create_CombineFormat() {
      return new UnaryOpFormat_CombineFormat();
    }
    public bool is_NoFormat { get { return this is UnaryOpFormat_NoFormat; } }
    public bool is_CombineFormat { get { return this is UnaryOpFormat_CombineFormat; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOpFormat> AllSingletonConstructors {
      get {
        yield return UnaryOpFormat.create_NoFormat();
        yield return UnaryOpFormat.create_CombineFormat();
      }
    }
    public abstract _IUnaryOpFormat DowncastClone();
  }
  public class UnaryOpFormat_NoFormat : UnaryOpFormat {
    public UnaryOpFormat_NoFormat() : base() {
    }
    public override _IUnaryOpFormat DowncastClone() {
      if (this is _IUnaryOpFormat dt) { return dt; }
      return new UnaryOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnaryOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnaryOpFormat.NoFormat";
      return s;
    }
  }
  public class UnaryOpFormat_CombineFormat : UnaryOpFormat {
    public UnaryOpFormat_CombineFormat() : base() {
    }
    public override _IUnaryOpFormat DowncastClone() {
      if (this is _IUnaryOpFormat dt) { return dt; }
      return new UnaryOpFormat_CombineFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnaryOpFormat_CombineFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnaryOpFormat.CombineFormat";
      return s;
    }
  }

  public interface _IBinaryOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_EquivalenceFormat { get; }
    bool is_ReverseFormat { get; }
    _IBinaryOpFormat DowncastClone();
  }
  public abstract class BinaryOpFormat : _IBinaryOpFormat {
    public BinaryOpFormat() {
    }
    private static readonly DAST.Format._IBinaryOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinaryOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinaryOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinaryOpFormat>(DAST.Format.BinaryOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinaryOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinaryOpFormat create_NoFormat() {
      return new BinaryOpFormat_NoFormat();
    }
    public static _IBinaryOpFormat create_ImpliesFormat() {
      return new BinaryOpFormat_ImpliesFormat();
    }
    public static _IBinaryOpFormat create_EquivalenceFormat() {
      return new BinaryOpFormat_EquivalenceFormat();
    }
    public static _IBinaryOpFormat create_ReverseFormat() {
      return new BinaryOpFormat_ReverseFormat();
    }
    public bool is_NoFormat { get { return this is BinaryOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinaryOpFormat_ImpliesFormat; } }
    public bool is_EquivalenceFormat { get { return this is BinaryOpFormat_EquivalenceFormat; } }
    public bool is_ReverseFormat { get { return this is BinaryOpFormat_ReverseFormat; } }
    public static System.Collections.Generic.IEnumerable<_IBinaryOpFormat> AllSingletonConstructors {
      get {
        yield return BinaryOpFormat.create_NoFormat();
        yield return BinaryOpFormat.create_ImpliesFormat();
        yield return BinaryOpFormat.create_EquivalenceFormat();
        yield return BinaryOpFormat.create_ReverseFormat();
      }
    }
    public abstract _IBinaryOpFormat DowncastClone();
  }
  public class BinaryOpFormat_NoFormat : BinaryOpFormat {
    public BinaryOpFormat_NoFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.NoFormat";
      return s;
    }
  }
  public class BinaryOpFormat_ImpliesFormat : BinaryOpFormat {
    public BinaryOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinaryOpFormat_EquivalenceFormat : BinaryOpFormat {
    public BinaryOpFormat_EquivalenceFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_EquivalenceFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_EquivalenceFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.EquivalenceFormat";
      return s;
    }
  }
  public class BinaryOpFormat_ReverseFormat : BinaryOpFormat {
    public BinaryOpFormat_ReverseFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_ReverseFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_ReverseFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.ReverseFormat";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) {
      return new ResolvedType_Newtype(baseType, range, erase);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SeqProperPrefix { get; }
    bool is_SeqPrefix { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_Subset { get; }
    bool is_ProperSubset { get; }
    bool is_SetDisjoint { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_MultisetMerge { get; }
    bool is_MultisetSubtraction { get; }
    bool is_MultisetIntersection { get; }
    bool is_Submultiset { get; }
    bool is_ProperSubmultiset { get; }
    bool is_MultisetDisjoint { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SeqProperPrefix() {
      return new BinOp_SeqProperPrefix();
    }
    public static _IBinOp create_SeqPrefix() {
      return new BinOp_SeqPrefix();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_Subset() {
      return new BinOp_Subset();
    }
    public static _IBinOp create_ProperSubset() {
      return new BinOp_ProperSubset();
    }
    public static _IBinOp create_SetDisjoint() {
      return new BinOp_SetDisjoint();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_MultisetMerge() {
      return new BinOp_MultisetMerge();
    }
    public static _IBinOp create_MultisetSubtraction() {
      return new BinOp_MultisetSubtraction();
    }
    public static _IBinOp create_MultisetIntersection() {
      return new BinOp_MultisetIntersection();
    }
    public static _IBinOp create_Submultiset() {
      return new BinOp_Submultiset();
    }
    public static _IBinOp create_ProperSubmultiset() {
      return new BinOp_ProperSubmultiset();
    }
    public static _IBinOp create_MultisetDisjoint() {
      return new BinOp_MultisetDisjoint();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SeqProperPrefix { get { return this is BinOp_SeqProperPrefix; } }
    public bool is_SeqPrefix { get { return this is BinOp_SeqPrefix; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_Subset { get { return this is BinOp_Subset; } }
    public bool is_ProperSubset { get { return this is BinOp_ProperSubset; } }
    public bool is_SetDisjoint { get { return this is BinOp_SetDisjoint; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_MultisetMerge { get { return this is BinOp_MultisetMerge; } }
    public bool is_MultisetSubtraction { get { return this is BinOp_MultisetSubtraction; } }
    public bool is_MultisetIntersection { get { return this is BinOp_MultisetIntersection; } }
    public bool is_Submultiset { get { return this is BinOp_Submultiset; } }
    public bool is_ProperSubmultiset { get { return this is BinOp_ProperSubmultiset; } }
    public bool is_MultisetDisjoint { get { return this is BinOp_MultisetDisjoint; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SeqProperPrefix : BinOp {
    public BinOp_SeqProperPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqProperPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqProperPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqProperPrefix";
      return s;
    }
  }
  public class BinOp_SeqPrefix : BinOp {
    public BinOp_SeqPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqPrefix";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_Subset : BinOp {
    public BinOp_Subset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Subset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Subset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Subset";
      return s;
    }
  }
  public class BinOp_ProperSubset : BinOp {
    public BinOp_ProperSubset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubset";
      return s;
    }
  }
  public class BinOp_SetDisjoint : BinOp {
    public BinOp_SetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDisjoint";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetMerge : BinOp {
    public BinOp_MultisetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetMerge";
      return s;
    }
  }
  public class BinOp_MultisetSubtraction : BinOp {
    public BinOp_MultisetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetIntersection : BinOp {
    public BinOp_MultisetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetIntersection";
      return s;
    }
  }
  public class BinOp_Submultiset : BinOp {
    public BinOp_Submultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Submultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Submultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Submultiset";
      return s;
    }
  }
  public class BinOp_ProperSubmultiset : BinOp {
    public BinOp_ProperSubmultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubmultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubmultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubmultiset";
      return s;
    }
  }
  public class BinOp_MultisetDisjoint : BinOp {
    public BinOp_MultisetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetDisjoint";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MultisetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SeqUpdate { get; }
    bool is_MapUpdate { get; }
    bool is_SetBuilder { get; }
    bool is_ToMultiset { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IExpression dtor_indexExpr { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_ToMultiset_a0 { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST.Format._IUnaryOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinaryOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_MultisetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_SeqUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_MapUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_ToMultiset(DAST._IExpression _a0) {
      return new Expression_ToMultiset(_a0);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnaryOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinaryOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MultisetValue { get { return this is Expression_MultisetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SeqUpdate { get { return this is Expression_SeqUpdate; } }
    public bool is_MapUpdate { get { return this is Expression_MapUpdate; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_ToMultiset { get { return this is Expression_ToMultiset; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._value; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        if (d is Expression_SetValue) { return ((Expression_SetValue)d)._elements; }
        return ((Expression_MultisetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._expr; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._expr; }
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IExpression dtor_indexExpr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._indexExpr; }
        return ((Expression_MapUpdate)d)._indexExpr;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_ToMultiset_a0 {
      get {
        var d = this;
        return ((Expression_ToMultiset)d)._a0;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST.Format._IUnaryOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinaryOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MultisetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MultisetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MultisetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MultisetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_MapUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_ToMultiset : Expression {
    public readonly DAST._IExpression _a0;
    public Expression_ToMultiset(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ToMultiset(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ToMultiset;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ToMultiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnaryOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnaryOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinaryOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinaryOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 37;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 38;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 39;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 40;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _828_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _829_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_828_i) < (_829_j)) {
          return _829_j;
        } else {
          return _828_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!")), Dafny.Sequence<RAST._IType>.FromElements(), elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnaryOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnaryOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TIdentifier(content);
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _830___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType Self { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType global__type { get {
      return RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IType std__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static RAST._IType cell__type { get {
      return (RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"));
    } }
    public static RAST._IType refcell__type { get {
      return (RAST.__default.cell__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"));
    } }
    public static RAST._IType dafny__runtime__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr @global { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IExpr dafny__runtime { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return (RAST.__default.dafny__runtime__Set).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Sequence { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"));
    } }
    public static RAST._IExpr Sequence__from__array__owned { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array_owned"));
    } }
    public static RAST._IExpr Sequence__from__array { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset__from__array { get {
      return (RAST.__default.dafny__runtime__Multiset).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return (RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return (RAST.__default.std__rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return (RAST.__default.std__rc__Rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _832___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _833_body = _832___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _834_name = _831___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _834_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_833_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_835_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_836_modDecl) => {
          return (_836_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_835_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _837___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _838_name = _837___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _838_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_839_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_840_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_840_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _839_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _841_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _842_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _843_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _842_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_844_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_845_field) => {
          return (_845_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_844_ind, RAST.__default.IND));
        })))(ind), _841_separator)), _843_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _846_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_847_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_848_t) => {
          return (_848_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_847_ind, RAST.__default.IND));
        })))(ind), _846_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_849_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_850_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _849_ind), RAST.__default.IND), (_850_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_849_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_851_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_852_t) => {
          return (_852_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_851_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _853___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_853___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _853___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_853___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _854_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _855_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_854_dt__update__tmp_h0).dtor_content, _855_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_856_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_857_t) => {
        return (_857_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_856_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TIdentifier { get; }
    bool is_TMemberSelect { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_base { get; }
    RAST._IType dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IType Apply1(RAST._IType arg);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TIdentifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TIdentifier(name);
    }
    public static _IType create_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TMemberSelect(@base, name);
    }
    public static _IType create_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TIdentifier { get { return this is Type_TIdentifier; } }
    public bool is_TMemberSelect { get { return this is Type_TMemberSelect; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Type_TIdentifier) { return ((Type_TIdentifier)d)._name; }
        return ((Type_TMemberSelect)d)._name;
      }
    }
    public RAST._IType dtor_base {
      get {
        var d = this;
        return ((Type_TMemberSelect)d)._base;
      }
    }
    public RAST._IType dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TIdentifier) {
        Dafny.ISequence<Dafny.Rune> _858___mcc_h0 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _859_underlying = _858___mcc_h0;
        return _859_underlying;
      } else if (_source26.is_TMemberSelect) {
        RAST._IType _860___mcc_h1 = _source26.dtor_base;
        Dafny.ISequence<Dafny.Rune> _861___mcc_h2 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _862_name = _861___mcc_h2;
        RAST._IType _863_underlying = _860___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_863_underlying)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _862_name);
      } else if (_source26.is_TypeApp) {
        RAST._IType _864___mcc_h3 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _865___mcc_h4 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _866_args = _865___mcc_h4;
        RAST._IType _867_base = _864___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat((_867_base)._ToString(ind), (((_866_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_866_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_868_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_869_arg) => {
          return (_869_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_868_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _870___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _871_underlying = _870___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_871_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _872___mcc_h6 = _source26.dtor_underlying;
        RAST._IType _873_underlying = _872___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_873_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _874___mcc_h7 = _source26.dtor_underlying;
        RAST._IType _875_underlying = _874___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_875_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _876___mcc_h8 = _source26.dtor_underlying;
        RAST._IType _877_underlying = _876___mcc_h8;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_877_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _878___mcc_h9 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _879_args = _878___mcc_h9;
        if ((_879_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_879_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_880_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_881_arg) => {
            return (_881_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_880_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _882___mcc_h10 = _source26.dtor_arguments;
        RAST._IType _883___mcc_h11 = _source26.dtor_returnType;
        RAST._IType _884_returnType = _883___mcc_h11;
        Dafny.ISequence<RAST._IType> _885_arguments = _882___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_885_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_886_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_887_arg) => {
          return (_887_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_886_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_884_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _888___mcc_h12 = _source26.dtor_left;
        RAST._IType _889___mcc_h13 = _source26.dtor_right;
        RAST._IType _890_right = _889___mcc_h13;
        RAST._IType _891_left = _888___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_891_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_890_right)._ToString(ind));
      }
    }
    public RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Type.create_TMemberSelect(this, name);
    }
    public RAST._IType Apply1(RAST._IType arg) {
      return RAST.Type.create_TypeApp(this, Dafny.Sequence<RAST._IType>.FromElements(arg));
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TIdentifier : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TIdentifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TIdentifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TIdentifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TIdentifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TMemberSelect : Type {
    public readonly RAST._IType _base;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._base = @base;
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TMemberSelect(_base, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TMemberSelect;
      return oth != null && object.Equals(this._base, oth._base) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TMemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly RAST._IType _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_892_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_893_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _892_ind), RAST.__default.IND), (_893_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_892_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_894_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_895_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _894_ind), RAST.__default.IND), (_895_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_894_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.Self);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _896_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _897_rhsString = ((this).dtor_rhs)._ToString(_896_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_897_rhsString).Contains(new Dafny.Rune('\n'))) && (((_897_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _897_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _897_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_TypeAscription { get; }
    bool is_LiteralInt { get; }
    bool is_LiteralString { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnaryOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinaryOpFormat dtor_format2 { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    bool dtor_binary { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
    RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr Apply(Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments);
    RAST._IExpr Apply1(RAST._IExpr argument);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnaryOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinaryOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_TypeAscription(RAST._IExpr left, RAST._IType tpe) {
      return new Expr_TypeAscription(left, tpe);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) {
      return new Expr_LiteralString(@value, binary);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, typeParameters, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_TypeAscription { get { return this is Expr_TypeAscription; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_LiteralString { get { return this is Expr_LiteralString; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnaryOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        if (d is Expr_BinaryOp) { return ((Expr_BinaryOp)d)._left; }
        return ((Expr_TypeAscription)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinaryOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Expr_TypeAscription) { return ((Expr_TypeAscription)d)._tpe; }
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        if (d is Expr_LiteralInt) { return ((Expr_LiteralInt)d)._value; }
        return ((Expr_LiteralString)d)._value;
      }
    }
    public bool dtor_binary {
      get {
        var d = this;
        return ((Expr_LiteralString)d)._binary;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_Call)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _898___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _899___mcc_h2 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _900___mcc_h4 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _901___mcc_h5 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _902_cases = _901___mcc_h5;
        RAST._IExpr _903_matchee = _900___mcc_h4;
        return (BigInteger.One) + (RAST.__default.max((_903_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_902_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_904_oneCase) => {
          return (_904_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _905___mcc_h8 = _source27.dtor_stmt;
        RAST._IExpr _906___mcc_h9 = _source27.dtor_rhs;
        RAST._IExpr _907_rhs = _906___mcc_h9;
        RAST._IExpr _908_stmt = _905___mcc_h8;
        BigInteger _909_default = (BigInteger.One) + (RAST.__default.max((_908_stmt).Height(), (_907_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _910___mcc_h100 = _source28.dtor_content;
          return _909_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _911___mcc_h102 = _source28.dtor_name;
          return _909_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _912___mcc_h104 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _913___mcc_h105 = _source28.dtor_cases;
          return _909_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _914___mcc_h108 = _source28.dtor_stmt;
          RAST._IExpr _915___mcc_h109 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _914___mcc_h108;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _916___mcc_h112 = _source29.dtor_content;
            return _909_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _917___mcc_h114 = _source29.dtor_name;
            return _909_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _918___mcc_h116 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _919___mcc_h117 = _source29.dtor_cases;
            return _909_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _920___mcc_h120 = _source29.dtor_stmt;
            RAST._IExpr _921___mcc_h121 = _source29.dtor_rhs;
            return _909_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _922___mcc_h124 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _923___mcc_h126 = _source29.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _924___mcc_h127 = _source29.dtor_assignments;
            return _909_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _925___mcc_h130 = _source29.dtor_arguments;
            return _909_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _926___mcc_h132 = _source29.dtor_op1;
            RAST._IExpr _927___mcc_h133 = _source29.dtor_underlying;
            DAST.Format._IUnaryOpFormat _928___mcc_h134 = _source29.dtor_format;
            return _909_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _929___mcc_h138 = _source29.dtor_op2;
            RAST._IExpr _930___mcc_h139 = _source29.dtor_left;
            RAST._IExpr _931___mcc_h140 = _source29.dtor_right;
            DAST.Format._IBinaryOpFormat _932___mcc_h141 = _source29.dtor_format2;
            return _909_default;
          } else if (_source29.is_TypeAscription) {
            RAST._IExpr _933___mcc_h146 = _source29.dtor_left;
            RAST._IType _934___mcc_h147 = _source29.dtor_tpe;
            return _909_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _935___mcc_h150 = _source29.dtor_value;
            return _909_default;
          } else if (_source29.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _936___mcc_h152 = _source29.dtor_value;
            bool _937___mcc_h153 = _source29.dtor_binary;
            return _909_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _938___mcc_h156 = _source29.dtor_tpe;
            RAST._IExpr _939___mcc_h157 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _940___mcc_h160 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _941___mcc_h161 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _942___mcc_h162 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _943___mcc_h163 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _942___mcc_h162;
            if (_source30.is_None) {
              return _909_default;
            } else {
              RAST._IType _944___mcc_h168 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _943___mcc_h163;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _915___mcc_h109;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _945___mcc_h170 = _source32.dtor_content;
                  return _909_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _946___mcc_h172 = _source32.dtor_name;
                  return _909_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _947___mcc_h174 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _948___mcc_h175 = _source32.dtor_cases;
                  return _909_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _949___mcc_h178 = _source32.dtor_stmt;
                  RAST._IExpr _950___mcc_h179 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _949___mcc_h178;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _951___mcc_h182 = _source33.dtor_content;
                    return _909_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _952___mcc_h184 = _source33.dtor_name;
                    return _909_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _953___mcc_h186 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _954___mcc_h187 = _source33.dtor_cases;
                    return _909_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _955___mcc_h190 = _source33.dtor_stmt;
                    RAST._IExpr _956___mcc_h191 = _source33.dtor_rhs;
                    return _909_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _957___mcc_h194 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _958___mcc_h196 = _source33.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _959___mcc_h197 = _source33.dtor_assignments;
                    return _909_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _960___mcc_h200 = _source33.dtor_arguments;
                    return _909_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _961___mcc_h202 = _source33.dtor_op1;
                    RAST._IExpr _962___mcc_h203 = _source33.dtor_underlying;
                    DAST.Format._IUnaryOpFormat _963___mcc_h204 = _source33.dtor_format;
                    return _909_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _964___mcc_h208 = _source33.dtor_op2;
                    RAST._IExpr _965___mcc_h209 = _source33.dtor_left;
                    RAST._IExpr _966___mcc_h210 = _source33.dtor_right;
                    DAST.Format._IBinaryOpFormat _967___mcc_h211 = _source33.dtor_format2;
                    return _909_default;
                  } else if (_source33.is_TypeAscription) {
                    RAST._IExpr _968___mcc_h216 = _source33.dtor_left;
                    RAST._IType _969___mcc_h217 = _source33.dtor_tpe;
                    return _909_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _970___mcc_h220 = _source33.dtor_value;
                    return _909_default;
                  } else if (_source33.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _971___mcc_h222 = _source33.dtor_value;
                    bool _972___mcc_h223 = _source33.dtor_binary;
                    return _909_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _973___mcc_h226 = _source33.dtor_tpe;
                    RAST._IExpr _974___mcc_h227 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _975___mcc_h230 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _976___mcc_h231 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _977___mcc_h232 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _978___mcc_h233 = _source33.dtor_optRhs;
                    return _909_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _979___mcc_h238 = _source33.dtor_name;
                    RAST._IExpr _980___mcc_h239 = _source33.dtor_rhs;
                    RAST._IExpr _981_last = _950___mcc_h179;
                    RAST._IExpr _982_rhs = _980___mcc_h239;
                    Dafny.ISequence<Dafny.Rune> _983_name2 = _979___mcc_h238;
                    RAST._IType _984_tpe = _944___mcc_h168;
                    Dafny.ISequence<Dafny.Rune> _985_name = _941___mcc_h161;
                    RAST._IDeclareType _986_mod = _940___mcc_h160;
                    if ((_985_name).Equals(_983_name2)) {
                      return (BigInteger.One) + (_909_default);
                    } else {
                      return _909_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _987___mcc_h242 = _source33.dtor_cond;
                    RAST._IExpr _988___mcc_h243 = _source33.dtor_thn;
                    RAST._IExpr _989___mcc_h244 = _source33.dtor_els;
                    return _909_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _990___mcc_h248 = _source33.dtor_optCond;
                    RAST._IExpr _991___mcc_h249 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _992___mcc_h252 = _source33.dtor_name;
                    RAST._IExpr _993___mcc_h253 = _source33.dtor_range;
                    RAST._IExpr _994___mcc_h254 = _source33.dtor_body;
                    return _909_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _995___mcc_h258 = _source33.dtor_lbl;
                    RAST._IExpr _996___mcc_h259 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _997___mcc_h262 = _source33.dtor_optLbl;
                    return _909_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _998___mcc_h264 = _source33.dtor_optLbl;
                    return _909_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _999___mcc_h266 = _source33.dtor_optExpr;
                    return _909_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _1000___mcc_h268 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1001___mcc_h269 = _source33.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _1002___mcc_h270 = _source33.dtor_arguments;
                    return _909_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _1003___mcc_h274 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1004___mcc_h275 = _source33.dtor_name;
                    return _909_default;
                  } else {
                    RAST._IExpr _1005___mcc_h278 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1006___mcc_h279 = _source33.dtor_name;
                    return _909_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _1007___mcc_h282 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1008___mcc_h284 = _source32.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1009___mcc_h285 = _source32.dtor_assignments;
                  return _909_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1010___mcc_h288 = _source32.dtor_arguments;
                  return _909_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1011___mcc_h290 = _source32.dtor_op1;
                  RAST._IExpr _1012___mcc_h291 = _source32.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _1013___mcc_h292 = _source32.dtor_format;
                  return _909_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1014___mcc_h296 = _source32.dtor_op2;
                  RAST._IExpr _1015___mcc_h297 = _source32.dtor_left;
                  RAST._IExpr _1016___mcc_h298 = _source32.dtor_right;
                  DAST.Format._IBinaryOpFormat _1017___mcc_h299 = _source32.dtor_format2;
                  return _909_default;
                } else if (_source32.is_TypeAscription) {
                  RAST._IExpr _1018___mcc_h304 = _source32.dtor_left;
                  RAST._IType _1019___mcc_h305 = _source32.dtor_tpe;
                  return _909_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1020___mcc_h308 = _source32.dtor_value;
                  return _909_default;
                } else if (_source32.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1021___mcc_h310 = _source32.dtor_value;
                  bool _1022___mcc_h311 = _source32.dtor_binary;
                  return _909_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _1023___mcc_h314 = _source32.dtor_tpe;
                  RAST._IExpr _1024___mcc_h315 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _1025___mcc_h318 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1026___mcc_h319 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1027___mcc_h320 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1028___mcc_h321 = _source32.dtor_optRhs;
                  return _909_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1029___mcc_h326 = _source32.dtor_name;
                  RAST._IExpr _1030___mcc_h327 = _source32.dtor_rhs;
                  return _909_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _1031___mcc_h330 = _source32.dtor_cond;
                  RAST._IExpr _1032___mcc_h331 = _source32.dtor_thn;
                  RAST._IExpr _1033___mcc_h332 = _source32.dtor_els;
                  return _909_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1034___mcc_h336 = _source32.dtor_optCond;
                  RAST._IExpr _1035___mcc_h337 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1036___mcc_h340 = _source32.dtor_name;
                  RAST._IExpr _1037___mcc_h341 = _source32.dtor_range;
                  RAST._IExpr _1038___mcc_h342 = _source32.dtor_body;
                  return _909_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1039___mcc_h346 = _source32.dtor_lbl;
                  RAST._IExpr _1040___mcc_h347 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1041___mcc_h350 = _source32.dtor_optLbl;
                  return _909_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1042___mcc_h352 = _source32.dtor_optLbl;
                  return _909_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1043___mcc_h354 = _source32.dtor_optExpr;
                  return _909_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _1044___mcc_h356 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1045___mcc_h357 = _source32.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1046___mcc_h358 = _source32.dtor_arguments;
                  return _909_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1047___mcc_h362 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1048___mcc_h363 = _source32.dtor_name;
                  return _909_default;
                } else {
                  RAST._IExpr _1049___mcc_h366 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1050___mcc_h367 = _source32.dtor_name;
                  return _909_default;
                }
              } else {
                RAST._IExpr _1051___mcc_h370 = _source31.dtor_value;
                return _909_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1052___mcc_h372 = _source29.dtor_name;
            RAST._IExpr _1053___mcc_h373 = _source29.dtor_rhs;
            return _909_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1054___mcc_h376 = _source29.dtor_cond;
            RAST._IExpr _1055___mcc_h377 = _source29.dtor_thn;
            RAST._IExpr _1056___mcc_h378 = _source29.dtor_els;
            return _909_default;
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1057___mcc_h382 = _source29.dtor_optCond;
            RAST._IExpr _1058___mcc_h383 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1059___mcc_h386 = _source29.dtor_name;
            RAST._IExpr _1060___mcc_h387 = _source29.dtor_range;
            RAST._IExpr _1061___mcc_h388 = _source29.dtor_body;
            return _909_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1062___mcc_h392 = _source29.dtor_lbl;
            RAST._IExpr _1063___mcc_h393 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1064___mcc_h396 = _source29.dtor_optLbl;
            return _909_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1065___mcc_h398 = _source29.dtor_optLbl;
            return _909_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1066___mcc_h400 = _source29.dtor_optExpr;
            return _909_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1067___mcc_h402 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1068___mcc_h403 = _source29.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1069___mcc_h404 = _source29.dtor_arguments;
            return _909_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1070___mcc_h408 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1071___mcc_h409 = _source29.dtor_name;
            return _909_default;
          } else {
            RAST._IExpr _1072___mcc_h412 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1073___mcc_h413 = _source29.dtor_name;
            return _909_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1074___mcc_h416 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1075___mcc_h418 = _source28.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1076___mcc_h419 = _source28.dtor_assignments;
          return _909_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1077___mcc_h422 = _source28.dtor_arguments;
          return _909_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1078___mcc_h424 = _source28.dtor_op1;
          RAST._IExpr _1079___mcc_h425 = _source28.dtor_underlying;
          DAST.Format._IUnaryOpFormat _1080___mcc_h426 = _source28.dtor_format;
          return _909_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1081___mcc_h430 = _source28.dtor_op2;
          RAST._IExpr _1082___mcc_h431 = _source28.dtor_left;
          RAST._IExpr _1083___mcc_h432 = _source28.dtor_right;
          DAST.Format._IBinaryOpFormat _1084___mcc_h433 = _source28.dtor_format2;
          return _909_default;
        } else if (_source28.is_TypeAscription) {
          RAST._IExpr _1085___mcc_h438 = _source28.dtor_left;
          RAST._IType _1086___mcc_h439 = _source28.dtor_tpe;
          return _909_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1087___mcc_h442 = _source28.dtor_value;
          return _909_default;
        } else if (_source28.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1088___mcc_h444 = _source28.dtor_value;
          bool _1089___mcc_h445 = _source28.dtor_binary;
          return _909_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1090___mcc_h448 = _source28.dtor_tpe;
          RAST._IExpr _1091___mcc_h449 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1092___mcc_h452 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1093___mcc_h453 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1094___mcc_h454 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1095___mcc_h455 = _source28.dtor_optRhs;
          return _909_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1096___mcc_h460 = _source28.dtor_name;
          RAST._IExpr _1097___mcc_h461 = _source28.dtor_rhs;
          return _909_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1098___mcc_h464 = _source28.dtor_cond;
          RAST._IExpr _1099___mcc_h465 = _source28.dtor_thn;
          RAST._IExpr _1100___mcc_h466 = _source28.dtor_els;
          return _909_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1101___mcc_h470 = _source28.dtor_optCond;
          RAST._IExpr _1102___mcc_h471 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1103___mcc_h474 = _source28.dtor_name;
          RAST._IExpr _1104___mcc_h475 = _source28.dtor_range;
          RAST._IExpr _1105___mcc_h476 = _source28.dtor_body;
          return _909_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1106___mcc_h480 = _source28.dtor_lbl;
          RAST._IExpr _1107___mcc_h481 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1108___mcc_h484 = _source28.dtor_optLbl;
          return _909_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1109___mcc_h486 = _source28.dtor_optLbl;
          return _909_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1110___mcc_h488 = _source28.dtor_optExpr;
          return _909_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1111___mcc_h490 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1112___mcc_h491 = _source28.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1113___mcc_h492 = _source28.dtor_arguments;
          return _909_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1114___mcc_h496 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1115___mcc_h497 = _source28.dtor_name;
          return _909_default;
        } else {
          RAST._IExpr _1116___mcc_h500 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1117___mcc_h501 = _source28.dtor_name;
          return _909_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1118___mcc_h12 = _source27.dtor_underlying;
        RAST._IExpr _1119_underlying = _1118___mcc_h12;
        return (BigInteger.One) + ((_1119_underlying).Height());
      } else if (_source27.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1120___mcc_h14 = _source27.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1121___mcc_h15 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1122_assignments = _1121___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _1123_name = _1120___mcc_h14;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1122_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1124_assignment) => {
          return (_1124_assignment).Height();
        }))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1125___mcc_h18 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1126_arguments = _1125___mcc_h18;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1126_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1127_argument) => {
          return (_1127_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1128___mcc_h20 = _source27.dtor_op1;
        RAST._IExpr _1129___mcc_h21 = _source27.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1130___mcc_h22 = _source27.dtor_format;
        RAST._IExpr _1131_underlying = _1129___mcc_h21;
        return (BigInteger.One) + ((_1131_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1132___mcc_h26 = _source27.dtor_op2;
        RAST._IExpr _1133___mcc_h27 = _source27.dtor_left;
        RAST._IExpr _1134___mcc_h28 = _source27.dtor_right;
        DAST.Format._IBinaryOpFormat _1135___mcc_h29 = _source27.dtor_format2;
        DAST.Format._IBinaryOpFormat _1136_format = _1135___mcc_h29;
        RAST._IExpr _1137_right = _1134___mcc_h28;
        RAST._IExpr _1138_left = _1133___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1139_op = _1132___mcc_h26;
        return (BigInteger.One) + (RAST.__default.max((_1138_left).Height(), (_1137_right).Height()));
      } else if (_source27.is_TypeAscription) {
        RAST._IExpr _1140___mcc_h34 = _source27.dtor_left;
        RAST._IType _1141___mcc_h35 = _source27.dtor_tpe;
        RAST._IType _1142_tpe = _1141___mcc_h35;
        RAST._IExpr _1143_left = _1140___mcc_h34;
        return (BigInteger.One) + ((_1143_left).Height());
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1144___mcc_h38 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1145___mcc_h40 = _source27.dtor_value;
        bool _1146___mcc_h41 = _source27.dtor_binary;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1147___mcc_h44 = _source27.dtor_tpe;
        RAST._IExpr _1148___mcc_h45 = _source27.dtor_underlying;
        RAST._IExpr _1149_underlying = _1148___mcc_h45;
        return (BigInteger.One) + ((_1149_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1150___mcc_h48 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1151___mcc_h49 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1152___mcc_h50 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1153___mcc_h51 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1154_expr = _1153___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _1155_tpe = _1152___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _1156_name = _1151___mcc_h49;
        RAST._IDeclareType _1157_declareType = _1150___mcc_h48;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source34) => {
          if (_source34.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1158___mcc_h504 = _source34.dtor_value;
            RAST._IExpr _1159_e = _1158___mcc_h504;
            return (_1159_e).Height();
          }
        }))(_1154_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1160___mcc_h56 = _source27.dtor_name;
        RAST._IExpr _1161___mcc_h57 = _source27.dtor_rhs;
        RAST._IExpr _1162_expr = _1161___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _1163_name = _1160___mcc_h56;
        return (BigInteger.One) + ((_1162_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1164___mcc_h60 = _source27.dtor_cond;
        RAST._IExpr _1165___mcc_h61 = _source27.dtor_thn;
        RAST._IExpr _1166___mcc_h62 = _source27.dtor_els;
        RAST._IExpr _1167_els = _1166___mcc_h62;
        RAST._IExpr _1168_thn = _1165___mcc_h61;
        RAST._IExpr _1169_cond = _1164___mcc_h60;
        return (BigInteger.One) + (RAST.__default.max((_1169_cond).Height(), RAST.__default.max((_1168_thn).Height(), (_1167_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1170___mcc_h66 = _source27.dtor_optCond;
        RAST._IExpr _1171___mcc_h67 = _source27.dtor_underlying;
        RAST._IExpr _1172_underlying = _1171___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _1173_optCond = _1170___mcc_h66;
        return (BigInteger.One) + ((((_1173_optCond).is_Some) ? (RAST.__default.max(((_1173_optCond).dtor_value).Height(), (_1172_underlying).Height())) : ((_1172_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1174___mcc_h70 = _source27.dtor_name;
        RAST._IExpr _1175___mcc_h71 = _source27.dtor_range;
        RAST._IExpr _1176___mcc_h72 = _source27.dtor_body;
        RAST._IExpr _1177_body = _1176___mcc_h72;
        RAST._IExpr _1178_range = _1175___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _1179_name = _1174___mcc_h70;
        return (BigInteger.One) + (RAST.__default.max((_1178_range).Height(), (_1177_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1180___mcc_h76 = _source27.dtor_lbl;
        RAST._IExpr _1181___mcc_h77 = _source27.dtor_underlying;
        RAST._IExpr _1182_underlying = _1181___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _1183_lbl = _1180___mcc_h76;
        return (BigInteger.One) + ((_1182_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1184___mcc_h80 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1185___mcc_h82 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1186___mcc_h84 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1187_optExpr = _1186___mcc_h84;
        if ((_1187_optExpr).is_Some) {
          return (BigInteger.One) + (((_1187_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_Call) {
        RAST._IExpr _1188___mcc_h86 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1189___mcc_h87 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1190___mcc_h88 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1191_args = _1190___mcc_h88;
        Dafny.ISequence<RAST._IType> _1192_tpes = _1189___mcc_h87;
        RAST._IExpr _1193_obj = _1188___mcc_h86;
        return (BigInteger.One) + (RAST.__default.max((_1193_obj).Height(), RAST.__default.max(RAST.__default.SeqToHeight<RAST._IType>(_1192_tpes, ((System.Func<RAST._IType, BigInteger>)((_1194_tpe) => {
          return BigInteger.One;
        }))), RAST.__default.SeqToHeight<RAST._IExpr>(_1191_args, ((System.Func<RAST._IExpr, BigInteger>)((_1195_arg) => {
          return (_1195_arg).Height();
        }))))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1196___mcc_h92 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1197___mcc_h93 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1198_name = _1197___mcc_h93;
        RAST._IExpr _1199_expression = _1196___mcc_h92;
        return (BigInteger.One) + ((_1199_expression).Height());
      } else {
        RAST._IExpr _1200___mcc_h96 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1201___mcc_h97 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1202_name = _1201___mcc_h97;
        RAST._IExpr _1203_expression = _1200___mcc_h96;
        return (BigInteger.One) + ((_1203_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source35 = this;
      if (_source35.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1204___mcc_h0 = _source35.dtor_content;
        return this;
      } else if (_source35.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1205___mcc_h2 = _source35.dtor_name;
        return this;
      } else if (_source35.is_Match) {
        RAST._IExpr _1206___mcc_h4 = _source35.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1207___mcc_h5 = _source35.dtor_cases;
        return this;
      } else if (_source35.is_StmtExpr) {
        RAST._IExpr _1208___mcc_h8 = _source35.dtor_stmt;
        RAST._IExpr _1209___mcc_h9 = _source35.dtor_rhs;
        RAST._IExpr _source36 = _1208___mcc_h8;
        if (_source36.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1210___mcc_h12 = _source36.dtor_content;
          return this;
        } else if (_source36.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1211___mcc_h14 = _source36.dtor_name;
          return this;
        } else if (_source36.is_Match) {
          RAST._IExpr _1212___mcc_h16 = _source36.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1213___mcc_h17 = _source36.dtor_cases;
          return this;
        } else if (_source36.is_StmtExpr) {
          RAST._IExpr _1214___mcc_h20 = _source36.dtor_stmt;
          RAST._IExpr _1215___mcc_h21 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_Block) {
          RAST._IExpr _1216___mcc_h24 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1217___mcc_h26 = _source36.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1218___mcc_h27 = _source36.dtor_assignments;
          return this;
        } else if (_source36.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1219___mcc_h30 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1220___mcc_h32 = _source36.dtor_op1;
          RAST._IExpr _1221___mcc_h33 = _source36.dtor_underlying;
          DAST.Format._IUnaryOpFormat _1222___mcc_h34 = _source36.dtor_format;
          return this;
        } else if (_source36.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1223___mcc_h38 = _source36.dtor_op2;
          RAST._IExpr _1224___mcc_h39 = _source36.dtor_left;
          RAST._IExpr _1225___mcc_h40 = _source36.dtor_right;
          DAST.Format._IBinaryOpFormat _1226___mcc_h41 = _source36.dtor_format2;
          return this;
        } else if (_source36.is_TypeAscription) {
          RAST._IExpr _1227___mcc_h46 = _source36.dtor_left;
          RAST._IType _1228___mcc_h47 = _source36.dtor_tpe;
          return this;
        } else if (_source36.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1229___mcc_h50 = _source36.dtor_value;
          return this;
        } else if (_source36.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1230___mcc_h52 = _source36.dtor_value;
          bool _1231___mcc_h53 = _source36.dtor_binary;
          return this;
        } else if (_source36.is_ConversionNum) {
          RAST._IType _1232___mcc_h56 = _source36.dtor_tpe;
          RAST._IExpr _1233___mcc_h57 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_DeclareVar) {
          RAST._IDeclareType _1234___mcc_h60 = _source36.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1235___mcc_h61 = _source36.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1236___mcc_h62 = _source36.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1237___mcc_h63 = _source36.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source37 = _1236___mcc_h62;
          if (_source37.is_None) {
            return this;
          } else {
            RAST._IType _1238___mcc_h68 = _source37.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source38 = _1237___mcc_h63;
            if (_source38.is_None) {
              RAST._IExpr _source39 = _1209___mcc_h9;
              if (_source39.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1239___mcc_h70 = _source39.dtor_content;
                return this;
              } else if (_source39.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1240___mcc_h72 = _source39.dtor_name;
                return this;
              } else if (_source39.is_Match) {
                RAST._IExpr _1241___mcc_h74 = _source39.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1242___mcc_h75 = _source39.dtor_cases;
                return this;
              } else if (_source39.is_StmtExpr) {
                RAST._IExpr _1243___mcc_h78 = _source39.dtor_stmt;
                RAST._IExpr _1244___mcc_h79 = _source39.dtor_rhs;
                RAST._IExpr _source40 = _1243___mcc_h78;
                if (_source40.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1245___mcc_h82 = _source40.dtor_content;
                  return this;
                } else if (_source40.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1246___mcc_h84 = _source40.dtor_name;
                  return this;
                } else if (_source40.is_Match) {
                  RAST._IExpr _1247___mcc_h86 = _source40.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1248___mcc_h87 = _source40.dtor_cases;
                  return this;
                } else if (_source40.is_StmtExpr) {
                  RAST._IExpr _1249___mcc_h90 = _source40.dtor_stmt;
                  RAST._IExpr _1250___mcc_h91 = _source40.dtor_rhs;
                  return this;
                } else if (_source40.is_Block) {
                  RAST._IExpr _1251___mcc_h94 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1252___mcc_h96 = _source40.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1253___mcc_h97 = _source40.dtor_assignments;
                  return this;
                } else if (_source40.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1254___mcc_h100 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1255___mcc_h102 = _source40.dtor_op1;
                  RAST._IExpr _1256___mcc_h103 = _source40.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _1257___mcc_h104 = _source40.dtor_format;
                  return this;
                } else if (_source40.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1258___mcc_h108 = _source40.dtor_op2;
                  RAST._IExpr _1259___mcc_h109 = _source40.dtor_left;
                  RAST._IExpr _1260___mcc_h110 = _source40.dtor_right;
                  DAST.Format._IBinaryOpFormat _1261___mcc_h111 = _source40.dtor_format2;
                  return this;
                } else if (_source40.is_TypeAscription) {
                  RAST._IExpr _1262___mcc_h116 = _source40.dtor_left;
                  RAST._IType _1263___mcc_h117 = _source40.dtor_tpe;
                  return this;
                } else if (_source40.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1264___mcc_h120 = _source40.dtor_value;
                  return this;
                } else if (_source40.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1265___mcc_h122 = _source40.dtor_value;
                  bool _1266___mcc_h123 = _source40.dtor_binary;
                  return this;
                } else if (_source40.is_ConversionNum) {
                  RAST._IType _1267___mcc_h126 = _source40.dtor_tpe;
                  RAST._IExpr _1268___mcc_h127 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_DeclareVar) {
                  RAST._IDeclareType _1269___mcc_h130 = _source40.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1270___mcc_h131 = _source40.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1271___mcc_h132 = _source40.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1272___mcc_h133 = _source40.dtor_optRhs;
                  return this;
                } else if (_source40.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1273___mcc_h138 = _source40.dtor_name;
                  RAST._IExpr _1274___mcc_h139 = _source40.dtor_rhs;
                  RAST._IExpr _1275_last = _1244___mcc_h79;
                  RAST._IExpr _1276_rhs = _1274___mcc_h139;
                  Dafny.ISequence<Dafny.Rune> _1277_name2 = _1273___mcc_h138;
                  RAST._IType _1278_tpe = _1238___mcc_h68;
                  Dafny.ISequence<Dafny.Rune> _1279_name = _1235___mcc_h61;
                  RAST._IDeclareType _1280_mod = _1234___mcc_h60;
                  if ((_1279_name).Equals(_1277_name2)) {
                    RAST._IExpr _1281_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1280_mod, _1279_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1278_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1276_rhs)), _1275_last);
                    return _1281_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source40.is_IfExpr) {
                  RAST._IExpr _1282___mcc_h142 = _source40.dtor_cond;
                  RAST._IExpr _1283___mcc_h143 = _source40.dtor_thn;
                  RAST._IExpr _1284___mcc_h144 = _source40.dtor_els;
                  return this;
                } else if (_source40.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1285___mcc_h148 = _source40.dtor_optCond;
                  RAST._IExpr _1286___mcc_h149 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1287___mcc_h152 = _source40.dtor_name;
                  RAST._IExpr _1288___mcc_h153 = _source40.dtor_range;
                  RAST._IExpr _1289___mcc_h154 = _source40.dtor_body;
                  return this;
                } else if (_source40.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1290___mcc_h158 = _source40.dtor_lbl;
                  RAST._IExpr _1291___mcc_h159 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1292___mcc_h162 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1293___mcc_h164 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1294___mcc_h166 = _source40.dtor_optExpr;
                  return this;
                } else if (_source40.is_Call) {
                  RAST._IExpr _1295___mcc_h168 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1296___mcc_h169 = _source40.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1297___mcc_h170 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_Select) {
                  RAST._IExpr _1298___mcc_h174 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1299___mcc_h175 = _source40.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1300___mcc_h178 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1301___mcc_h179 = _source40.dtor_name;
                  return this;
                }
              } else if (_source39.is_Block) {
                RAST._IExpr _1302___mcc_h182 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1303___mcc_h184 = _source39.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1304___mcc_h185 = _source39.dtor_assignments;
                return this;
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1305___mcc_h188 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1306___mcc_h190 = _source39.dtor_op1;
                RAST._IExpr _1307___mcc_h191 = _source39.dtor_underlying;
                DAST.Format._IUnaryOpFormat _1308___mcc_h192 = _source39.dtor_format;
                return this;
              } else if (_source39.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1309___mcc_h196 = _source39.dtor_op2;
                RAST._IExpr _1310___mcc_h197 = _source39.dtor_left;
                RAST._IExpr _1311___mcc_h198 = _source39.dtor_right;
                DAST.Format._IBinaryOpFormat _1312___mcc_h199 = _source39.dtor_format2;
                return this;
              } else if (_source39.is_TypeAscription) {
                RAST._IExpr _1313___mcc_h204 = _source39.dtor_left;
                RAST._IType _1314___mcc_h205 = _source39.dtor_tpe;
                return this;
              } else if (_source39.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1315___mcc_h208 = _source39.dtor_value;
                return this;
              } else if (_source39.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1316___mcc_h210 = _source39.dtor_value;
                bool _1317___mcc_h211 = _source39.dtor_binary;
                return this;
              } else if (_source39.is_ConversionNum) {
                RAST._IType _1318___mcc_h214 = _source39.dtor_tpe;
                RAST._IExpr _1319___mcc_h215 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_DeclareVar) {
                RAST._IDeclareType _1320___mcc_h218 = _source39.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1321___mcc_h219 = _source39.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1322___mcc_h220 = _source39.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1323___mcc_h221 = _source39.dtor_optRhs;
                return this;
              } else if (_source39.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1324___mcc_h226 = _source39.dtor_name;
                RAST._IExpr _1325___mcc_h227 = _source39.dtor_rhs;
                return this;
              } else if (_source39.is_IfExpr) {
                RAST._IExpr _1326___mcc_h230 = _source39.dtor_cond;
                RAST._IExpr _1327___mcc_h231 = _source39.dtor_thn;
                RAST._IExpr _1328___mcc_h232 = _source39.dtor_els;
                return this;
              } else if (_source39.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1329___mcc_h236 = _source39.dtor_optCond;
                RAST._IExpr _1330___mcc_h237 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_For) {
                Dafny.ISequence<Dafny.Rune> _1331___mcc_h240 = _source39.dtor_name;
                RAST._IExpr _1332___mcc_h241 = _source39.dtor_range;
                RAST._IExpr _1333___mcc_h242 = _source39.dtor_body;
                return this;
              } else if (_source39.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1334___mcc_h246 = _source39.dtor_lbl;
                RAST._IExpr _1335___mcc_h247 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1336___mcc_h250 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1337___mcc_h252 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1338___mcc_h254 = _source39.dtor_optExpr;
                return this;
              } else if (_source39.is_Call) {
                RAST._IExpr _1339___mcc_h256 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IType> _1340___mcc_h257 = _source39.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1341___mcc_h258 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_Select) {
                RAST._IExpr _1342___mcc_h262 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1343___mcc_h263 = _source39.dtor_name;
                return this;
              } else {
                RAST._IExpr _1344___mcc_h266 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1345___mcc_h267 = _source39.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1346___mcc_h270 = _source38.dtor_value;
              return this;
            }
          }
        } else if (_source36.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1347___mcc_h272 = _source36.dtor_name;
          RAST._IExpr _1348___mcc_h273 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_IfExpr) {
          RAST._IExpr _1349___mcc_h276 = _source36.dtor_cond;
          RAST._IExpr _1350___mcc_h277 = _source36.dtor_thn;
          RAST._IExpr _1351___mcc_h278 = _source36.dtor_els;
          return this;
        } else if (_source36.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1352___mcc_h282 = _source36.dtor_optCond;
          RAST._IExpr _1353___mcc_h283 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_For) {
          Dafny.ISequence<Dafny.Rune> _1354___mcc_h286 = _source36.dtor_name;
          RAST._IExpr _1355___mcc_h287 = _source36.dtor_range;
          RAST._IExpr _1356___mcc_h288 = _source36.dtor_body;
          return this;
        } else if (_source36.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1357___mcc_h292 = _source36.dtor_lbl;
          RAST._IExpr _1358___mcc_h293 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1359___mcc_h296 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1360___mcc_h298 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1361___mcc_h300 = _source36.dtor_optExpr;
          return this;
        } else if (_source36.is_Call) {
          RAST._IExpr _1362___mcc_h302 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IType> _1363___mcc_h303 = _source36.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1364___mcc_h304 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_Select) {
          RAST._IExpr _1365___mcc_h308 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1366___mcc_h309 = _source36.dtor_name;
          return this;
        } else {
          RAST._IExpr _1367___mcc_h312 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1368___mcc_h313 = _source36.dtor_name;
          return this;
        }
      } else if (_source35.is_Block) {
        RAST._IExpr _1369___mcc_h316 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1370___mcc_h318 = _source35.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1371___mcc_h319 = _source35.dtor_assignments;
        return this;
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1372___mcc_h322 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1373___mcc_h324 = _source35.dtor_op1;
        RAST._IExpr _1374___mcc_h325 = _source35.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1375___mcc_h326 = _source35.dtor_format;
        if (object.Equals(_1373___mcc_h324, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source41 = _1374___mcc_h325;
          if (_source41.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1376___mcc_h330 = _source41.dtor_content;
            return this;
          } else if (_source41.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1377___mcc_h332 = _source41.dtor_name;
            return this;
          } else if (_source41.is_Match) {
            RAST._IExpr _1378___mcc_h334 = _source41.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1379___mcc_h335 = _source41.dtor_cases;
            return this;
          } else if (_source41.is_StmtExpr) {
            RAST._IExpr _1380___mcc_h338 = _source41.dtor_stmt;
            RAST._IExpr _1381___mcc_h339 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_Block) {
            RAST._IExpr _1382___mcc_h342 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1383___mcc_h344 = _source41.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1384___mcc_h345 = _source41.dtor_assignments;
            return this;
          } else if (_source41.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1385___mcc_h348 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1386___mcc_h350 = _source41.dtor_op1;
            RAST._IExpr _1387___mcc_h351 = _source41.dtor_underlying;
            DAST.Format._IUnaryOpFormat _1388___mcc_h352 = _source41.dtor_format;
            return this;
          } else if (_source41.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1389___mcc_h356 = _source41.dtor_op2;
            RAST._IExpr _1390___mcc_h357 = _source41.dtor_left;
            RAST._IExpr _1391___mcc_h358 = _source41.dtor_right;
            DAST.Format._IBinaryOpFormat _1392___mcc_h359 = _source41.dtor_format2;
            return this;
          } else if (_source41.is_TypeAscription) {
            RAST._IExpr _1393___mcc_h364 = _source41.dtor_left;
            RAST._IType _1394___mcc_h365 = _source41.dtor_tpe;
            return this;
          } else if (_source41.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1395___mcc_h368 = _source41.dtor_value;
            return this;
          } else if (_source41.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1396___mcc_h370 = _source41.dtor_value;
            bool _1397___mcc_h371 = _source41.dtor_binary;
            return this;
          } else if (_source41.is_ConversionNum) {
            RAST._IType _1398___mcc_h374 = _source41.dtor_tpe;
            RAST._IExpr _1399___mcc_h375 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_DeclareVar) {
            RAST._IDeclareType _1400___mcc_h378 = _source41.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1401___mcc_h379 = _source41.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1402___mcc_h380 = _source41.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1403___mcc_h381 = _source41.dtor_optRhs;
            return this;
          } else if (_source41.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1404___mcc_h386 = _source41.dtor_name;
            RAST._IExpr _1405___mcc_h387 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_IfExpr) {
            RAST._IExpr _1406___mcc_h390 = _source41.dtor_cond;
            RAST._IExpr _1407___mcc_h391 = _source41.dtor_thn;
            RAST._IExpr _1408___mcc_h392 = _source41.dtor_els;
            return this;
          } else if (_source41.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1409___mcc_h396 = _source41.dtor_optCond;
            RAST._IExpr _1410___mcc_h397 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_For) {
            Dafny.ISequence<Dafny.Rune> _1411___mcc_h400 = _source41.dtor_name;
            RAST._IExpr _1412___mcc_h401 = _source41.dtor_range;
            RAST._IExpr _1413___mcc_h402 = _source41.dtor_body;
            return this;
          } else if (_source41.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1414___mcc_h406 = _source41.dtor_lbl;
            RAST._IExpr _1415___mcc_h407 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1416___mcc_h410 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1417___mcc_h412 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1418___mcc_h414 = _source41.dtor_optExpr;
            return this;
          } else if (_source41.is_Call) {
            RAST._IExpr _1419___mcc_h416 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IType> _1420___mcc_h417 = _source41.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1421___mcc_h418 = _source41.dtor_arguments;
            RAST._IExpr _source42 = _1419___mcc_h416;
            if (_source42.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1422___mcc_h422 = _source42.dtor_content;
              return this;
            } else if (_source42.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1423___mcc_h424 = _source42.dtor_name;
              return this;
            } else if (_source42.is_Match) {
              RAST._IExpr _1424___mcc_h426 = _source42.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1425___mcc_h427 = _source42.dtor_cases;
              return this;
            } else if (_source42.is_StmtExpr) {
              RAST._IExpr _1426___mcc_h430 = _source42.dtor_stmt;
              RAST._IExpr _1427___mcc_h431 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_Block) {
              RAST._IExpr _1428___mcc_h434 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_StructBuild) {
              Dafny.ISequence<Dafny.Rune> _1429___mcc_h436 = _source42.dtor_name;
              Dafny.ISequence<RAST._IAssignIdentifier> _1430___mcc_h437 = _source42.dtor_assignments;
              return this;
            } else if (_source42.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1431___mcc_h440 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1432___mcc_h442 = _source42.dtor_op1;
              RAST._IExpr _1433___mcc_h443 = _source42.dtor_underlying;
              DAST.Format._IUnaryOpFormat _1434___mcc_h444 = _source42.dtor_format;
              return this;
            } else if (_source42.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1435___mcc_h448 = _source42.dtor_op2;
              RAST._IExpr _1436___mcc_h449 = _source42.dtor_left;
              RAST._IExpr _1437___mcc_h450 = _source42.dtor_right;
              DAST.Format._IBinaryOpFormat _1438___mcc_h451 = _source42.dtor_format2;
              return this;
            } else if (_source42.is_TypeAscription) {
              RAST._IExpr _1439___mcc_h456 = _source42.dtor_left;
              RAST._IType _1440___mcc_h457 = _source42.dtor_tpe;
              return this;
            } else if (_source42.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1441___mcc_h460 = _source42.dtor_value;
              return this;
            } else if (_source42.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1442___mcc_h462 = _source42.dtor_value;
              bool _1443___mcc_h463 = _source42.dtor_binary;
              return this;
            } else if (_source42.is_ConversionNum) {
              RAST._IType _1444___mcc_h466 = _source42.dtor_tpe;
              RAST._IExpr _1445___mcc_h467 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_DeclareVar) {
              RAST._IDeclareType _1446___mcc_h470 = _source42.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1447___mcc_h471 = _source42.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1448___mcc_h472 = _source42.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1449___mcc_h473 = _source42.dtor_optRhs;
              return this;
            } else if (_source42.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1450___mcc_h478 = _source42.dtor_name;
              RAST._IExpr _1451___mcc_h479 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_IfExpr) {
              RAST._IExpr _1452___mcc_h482 = _source42.dtor_cond;
              RAST._IExpr _1453___mcc_h483 = _source42.dtor_thn;
              RAST._IExpr _1454___mcc_h484 = _source42.dtor_els;
              return this;
            } else if (_source42.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1455___mcc_h488 = _source42.dtor_optCond;
              RAST._IExpr _1456___mcc_h489 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_For) {
              Dafny.ISequence<Dafny.Rune> _1457___mcc_h492 = _source42.dtor_name;
              RAST._IExpr _1458___mcc_h493 = _source42.dtor_range;
              RAST._IExpr _1459___mcc_h494 = _source42.dtor_body;
              return this;
            } else if (_source42.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1460___mcc_h498 = _source42.dtor_lbl;
              RAST._IExpr _1461___mcc_h499 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1462___mcc_h502 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1463___mcc_h504 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1464___mcc_h506 = _source42.dtor_optExpr;
              return this;
            } else if (_source42.is_Call) {
              RAST._IExpr _1465___mcc_h508 = _source42.dtor_obj;
              Dafny.ISequence<RAST._IType> _1466___mcc_h509 = _source42.dtor_typeParameters;
              Dafny.ISequence<RAST._IExpr> _1467___mcc_h510 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_Select) {
              RAST._IExpr _1468___mcc_h514 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1469___mcc_h515 = _source42.dtor_name;
              if (object.Equals(_1469___mcc_h515, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnaryOpFormat _1470_format = _1375___mcc_h326;
                Dafny.ISequence<RAST._IExpr> _1471_args = _1421___mcc_h418;
                Dafny.ISequence<RAST._IType> _1472_typeArgs = _1420___mcc_h417;
                RAST._IExpr _1473_underlying = _1468___mcc_h514;
                if (((_1472_typeArgs).Equals(Dafny.Sequence<RAST._IType>.FromElements())) && ((_1471_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements()))) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1473_underlying, _1470_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1474___mcc_h518 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1475___mcc_h519 = _source42.dtor_name;
              return this;
            }
          } else if (_source41.is_Select) {
            RAST._IExpr _1476___mcc_h522 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1477___mcc_h523 = _source41.dtor_name;
            return this;
          } else {
            RAST._IExpr _1478___mcc_h526 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1479___mcc_h527 = _source41.dtor_name;
            return this;
          }
        } else if (object.Equals(_1373___mcc_h324, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source43 = _1374___mcc_h325;
          if (_source43.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1480___mcc_h530 = _source43.dtor_content;
            return this;
          } else if (_source43.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1481___mcc_h532 = _source43.dtor_name;
            return this;
          } else if (_source43.is_Match) {
            RAST._IExpr _1482___mcc_h534 = _source43.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1483___mcc_h535 = _source43.dtor_cases;
            return this;
          } else if (_source43.is_StmtExpr) {
            RAST._IExpr _1484___mcc_h538 = _source43.dtor_stmt;
            RAST._IExpr _1485___mcc_h539 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_Block) {
            RAST._IExpr _1486___mcc_h542 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1487___mcc_h544 = _source43.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1488___mcc_h545 = _source43.dtor_assignments;
            return this;
          } else if (_source43.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1489___mcc_h548 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1490___mcc_h550 = _source43.dtor_op1;
            RAST._IExpr _1491___mcc_h551 = _source43.dtor_underlying;
            DAST.Format._IUnaryOpFormat _1492___mcc_h552 = _source43.dtor_format;
            return this;
          } else if (_source43.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1493___mcc_h556 = _source43.dtor_op2;
            RAST._IExpr _1494___mcc_h557 = _source43.dtor_left;
            RAST._IExpr _1495___mcc_h558 = _source43.dtor_right;
            DAST.Format._IBinaryOpFormat _1496___mcc_h559 = _source43.dtor_format2;
            if (object.Equals(_1493___mcc_h556, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnaryOpFormat _source44 = _1375___mcc_h326;
              if (_source44.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinaryOpFormat _1497_format = _1496___mcc_h559;
                RAST._IExpr _1498_right = _1495___mcc_h558;
                RAST._IExpr _1499_left = _1494___mcc_h557;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1499_left, _1498_right, DAST.Format.BinaryOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1493___mcc_h556, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinaryOpFormat _source45 = _1496___mcc_h559;
              if (_source45.is_NoFormat) {
                DAST.Format._IUnaryOpFormat _source46 = _1375___mcc_h326;
                if (_source46.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1500_right = _1495___mcc_h558;
                  RAST._IExpr _1501_left = _1494___mcc_h557;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1501_left, _1500_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              } else if (_source45.is_ImpliesFormat) {
                return this;
              } else if (_source45.is_EquivalenceFormat) {
                return this;
              } else {
                DAST.Format._IUnaryOpFormat _source47 = _1375___mcc_h326;
                if (_source47.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1502_right = _1495___mcc_h558;
                  RAST._IExpr _1503_left = _1494___mcc_h557;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1502_right, _1503_left, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source43.is_TypeAscription) {
            RAST._IExpr _1504___mcc_h564 = _source43.dtor_left;
            RAST._IType _1505___mcc_h565 = _source43.dtor_tpe;
            return this;
          } else if (_source43.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1506___mcc_h568 = _source43.dtor_value;
            return this;
          } else if (_source43.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1507___mcc_h570 = _source43.dtor_value;
            bool _1508___mcc_h571 = _source43.dtor_binary;
            return this;
          } else if (_source43.is_ConversionNum) {
            RAST._IType _1509___mcc_h574 = _source43.dtor_tpe;
            RAST._IExpr _1510___mcc_h575 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_DeclareVar) {
            RAST._IDeclareType _1511___mcc_h578 = _source43.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1512___mcc_h579 = _source43.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1513___mcc_h580 = _source43.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1514___mcc_h581 = _source43.dtor_optRhs;
            return this;
          } else if (_source43.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1515___mcc_h586 = _source43.dtor_name;
            RAST._IExpr _1516___mcc_h587 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_IfExpr) {
            RAST._IExpr _1517___mcc_h590 = _source43.dtor_cond;
            RAST._IExpr _1518___mcc_h591 = _source43.dtor_thn;
            RAST._IExpr _1519___mcc_h592 = _source43.dtor_els;
            return this;
          } else if (_source43.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1520___mcc_h596 = _source43.dtor_optCond;
            RAST._IExpr _1521___mcc_h597 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_For) {
            Dafny.ISequence<Dafny.Rune> _1522___mcc_h600 = _source43.dtor_name;
            RAST._IExpr _1523___mcc_h601 = _source43.dtor_range;
            RAST._IExpr _1524___mcc_h602 = _source43.dtor_body;
            return this;
          } else if (_source43.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1525___mcc_h606 = _source43.dtor_lbl;
            RAST._IExpr _1526___mcc_h607 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1527___mcc_h610 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1528___mcc_h612 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1529___mcc_h614 = _source43.dtor_optExpr;
            return this;
          } else if (_source43.is_Call) {
            RAST._IExpr _1530___mcc_h616 = _source43.dtor_obj;
            Dafny.ISequence<RAST._IType> _1531___mcc_h617 = _source43.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1532___mcc_h618 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_Select) {
            RAST._IExpr _1533___mcc_h622 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1534___mcc_h623 = _source43.dtor_name;
            return this;
          } else {
            RAST._IExpr _1535___mcc_h626 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1536___mcc_h627 = _source43.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1537___mcc_h630 = _source35.dtor_op2;
        RAST._IExpr _1538___mcc_h631 = _source35.dtor_left;
        RAST._IExpr _1539___mcc_h632 = _source35.dtor_right;
        DAST.Format._IBinaryOpFormat _1540___mcc_h633 = _source35.dtor_format2;
        return this;
      } else if (_source35.is_TypeAscription) {
        RAST._IExpr _1541___mcc_h638 = _source35.dtor_left;
        RAST._IType _1542___mcc_h639 = _source35.dtor_tpe;
        return this;
      } else if (_source35.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1543___mcc_h642 = _source35.dtor_value;
        return this;
      } else if (_source35.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1544___mcc_h644 = _source35.dtor_value;
        bool _1545___mcc_h645 = _source35.dtor_binary;
        return this;
      } else if (_source35.is_ConversionNum) {
        RAST._IType _1546___mcc_h648 = _source35.dtor_tpe;
        RAST._IExpr _1547___mcc_h649 = _source35.dtor_underlying;
        RAST._IExpr _1548_expr = _1547___mcc_h649;
        RAST._IType _1549_tpe = _1546___mcc_h648;
        if (((((((((((_1549_tpe).is_U8) || ((_1549_tpe).is_U16)) || ((_1549_tpe).is_U32)) || ((_1549_tpe).is_U64)) || ((_1549_tpe).is_U128)) || ((_1549_tpe).is_I8)) || ((_1549_tpe).is_I16)) || ((_1549_tpe).is_I32)) || ((_1549_tpe).is_I64)) || ((_1549_tpe).is_I128)) {
          RAST._IExpr _source48 = _1548_expr;
          if (_source48.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1550___mcc_h704 = _source48.dtor_content;
            return this;
          } else if (_source48.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1551___mcc_h706 = _source48.dtor_name;
            return this;
          } else if (_source48.is_Match) {
            RAST._IExpr _1552___mcc_h708 = _source48.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1553___mcc_h709 = _source48.dtor_cases;
            return this;
          } else if (_source48.is_StmtExpr) {
            RAST._IExpr _1554___mcc_h712 = _source48.dtor_stmt;
            RAST._IExpr _1555___mcc_h713 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_Block) {
            RAST._IExpr _1556___mcc_h716 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1557___mcc_h718 = _source48.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1558___mcc_h719 = _source48.dtor_assignments;
            return this;
          } else if (_source48.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1559___mcc_h722 = _source48.dtor_arguments;
            return this;
          } else if (_source48.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1560___mcc_h724 = _source48.dtor_op1;
            RAST._IExpr _1561___mcc_h725 = _source48.dtor_underlying;
            DAST.Format._IUnaryOpFormat _1562___mcc_h726 = _source48.dtor_format;
            return this;
          } else if (_source48.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1563___mcc_h730 = _source48.dtor_op2;
            RAST._IExpr _1564___mcc_h731 = _source48.dtor_left;
            RAST._IExpr _1565___mcc_h732 = _source48.dtor_right;
            DAST.Format._IBinaryOpFormat _1566___mcc_h733 = _source48.dtor_format2;
            return this;
          } else if (_source48.is_TypeAscription) {
            RAST._IExpr _1567___mcc_h738 = _source48.dtor_left;
            RAST._IType _1568___mcc_h739 = _source48.dtor_tpe;
            return this;
          } else if (_source48.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1569___mcc_h742 = _source48.dtor_value;
            return this;
          } else if (_source48.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1570___mcc_h744 = _source48.dtor_value;
            bool _1571___mcc_h745 = _source48.dtor_binary;
            return this;
          } else if (_source48.is_ConversionNum) {
            RAST._IType _1572___mcc_h748 = _source48.dtor_tpe;
            RAST._IExpr _1573___mcc_h749 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_DeclareVar) {
            RAST._IDeclareType _1574___mcc_h752 = _source48.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1575___mcc_h753 = _source48.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1576___mcc_h754 = _source48.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1577___mcc_h755 = _source48.dtor_optRhs;
            return this;
          } else if (_source48.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1578___mcc_h760 = _source48.dtor_name;
            RAST._IExpr _1579___mcc_h761 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_IfExpr) {
            RAST._IExpr _1580___mcc_h764 = _source48.dtor_cond;
            RAST._IExpr _1581___mcc_h765 = _source48.dtor_thn;
            RAST._IExpr _1582___mcc_h766 = _source48.dtor_els;
            return this;
          } else if (_source48.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1583___mcc_h770 = _source48.dtor_optCond;
            RAST._IExpr _1584___mcc_h771 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_For) {
            Dafny.ISequence<Dafny.Rune> _1585___mcc_h774 = _source48.dtor_name;
            RAST._IExpr _1586___mcc_h775 = _source48.dtor_range;
            RAST._IExpr _1587___mcc_h776 = _source48.dtor_body;
            return this;
          } else if (_source48.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1588___mcc_h780 = _source48.dtor_lbl;
            RAST._IExpr _1589___mcc_h781 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1590___mcc_h784 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1591___mcc_h786 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1592___mcc_h788 = _source48.dtor_optExpr;
            return this;
          } else if (_source48.is_Call) {
            RAST._IExpr _1593___mcc_h790 = _source48.dtor_obj;
            Dafny.ISequence<RAST._IType> _1594___mcc_h791 = _source48.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1595___mcc_h792 = _source48.dtor_arguments;
            RAST._IExpr _source49 = _1593___mcc_h790;
            if (_source49.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1596___mcc_h796 = _source49.dtor_content;
              return this;
            } else if (_source49.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1597___mcc_h798 = _source49.dtor_name;
              return this;
            } else if (_source49.is_Match) {
              RAST._IExpr _1598___mcc_h800 = _source49.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1599___mcc_h801 = _source49.dtor_cases;
              return this;
            } else if (_source49.is_StmtExpr) {
              RAST._IExpr _1600___mcc_h804 = _source49.dtor_stmt;
              RAST._IExpr _1601___mcc_h805 = _source49.dtor_rhs;
              return this;
            } else if (_source49.is_Block) {
              RAST._IExpr _1602___mcc_h808 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_StructBuild) {
              Dafny.ISequence<Dafny.Rune> _1603___mcc_h810 = _source49.dtor_name;
              Dafny.ISequence<RAST._IAssignIdentifier> _1604___mcc_h811 = _source49.dtor_assignments;
              return this;
            } else if (_source49.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1605___mcc_h814 = _source49.dtor_arguments;
              return this;
            } else if (_source49.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1606___mcc_h816 = _source49.dtor_op1;
              RAST._IExpr _1607___mcc_h817 = _source49.dtor_underlying;
              DAST.Format._IUnaryOpFormat _1608___mcc_h818 = _source49.dtor_format;
              return this;
            } else if (_source49.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1609___mcc_h822 = _source49.dtor_op2;
              RAST._IExpr _1610___mcc_h823 = _source49.dtor_left;
              RAST._IExpr _1611___mcc_h824 = _source49.dtor_right;
              DAST.Format._IBinaryOpFormat _1612___mcc_h825 = _source49.dtor_format2;
              return this;
            } else if (_source49.is_TypeAscription) {
              RAST._IExpr _1613___mcc_h830 = _source49.dtor_left;
              RAST._IType _1614___mcc_h831 = _source49.dtor_tpe;
              return this;
            } else if (_source49.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1615___mcc_h834 = _source49.dtor_value;
              return this;
            } else if (_source49.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1616___mcc_h836 = _source49.dtor_value;
              bool _1617___mcc_h837 = _source49.dtor_binary;
              return this;
            } else if (_source49.is_ConversionNum) {
              RAST._IType _1618___mcc_h840 = _source49.dtor_tpe;
              RAST._IExpr _1619___mcc_h841 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_DeclareVar) {
              RAST._IDeclareType _1620___mcc_h844 = _source49.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1621___mcc_h845 = _source49.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1622___mcc_h846 = _source49.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1623___mcc_h847 = _source49.dtor_optRhs;
              return this;
            } else if (_source49.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1624___mcc_h852 = _source49.dtor_name;
              RAST._IExpr _1625___mcc_h853 = _source49.dtor_rhs;
              return this;
            } else if (_source49.is_IfExpr) {
              RAST._IExpr _1626___mcc_h856 = _source49.dtor_cond;
              RAST._IExpr _1627___mcc_h857 = _source49.dtor_thn;
              RAST._IExpr _1628___mcc_h858 = _source49.dtor_els;
              return this;
            } else if (_source49.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1629___mcc_h862 = _source49.dtor_optCond;
              RAST._IExpr _1630___mcc_h863 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_For) {
              Dafny.ISequence<Dafny.Rune> _1631___mcc_h866 = _source49.dtor_name;
              RAST._IExpr _1632___mcc_h867 = _source49.dtor_range;
              RAST._IExpr _1633___mcc_h868 = _source49.dtor_body;
              return this;
            } else if (_source49.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1634___mcc_h872 = _source49.dtor_lbl;
              RAST._IExpr _1635___mcc_h873 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1636___mcc_h876 = _source49.dtor_optLbl;
              return this;
            } else if (_source49.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1637___mcc_h878 = _source49.dtor_optLbl;
              return this;
            } else if (_source49.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1638___mcc_h880 = _source49.dtor_optExpr;
              return this;
            } else if (_source49.is_Call) {
              RAST._IExpr _1639___mcc_h882 = _source49.dtor_obj;
              Dafny.ISequence<RAST._IType> _1640___mcc_h883 = _source49.dtor_typeParameters;
              Dafny.ISequence<RAST._IExpr> _1641___mcc_h884 = _source49.dtor_arguments;
              return this;
            } else if (_source49.is_Select) {
              RAST._IExpr _1642___mcc_h888 = _source49.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1643___mcc_h889 = _source49.dtor_name;
              return this;
            } else {
              RAST._IExpr _1644___mcc_h892 = _source49.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1645___mcc_h893 = _source49.dtor_name;
              RAST._IExpr _source50 = _1644___mcc_h892;
              if (_source50.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1646___mcc_h896 = _source50.dtor_content;
                return this;
              } else if (_source50.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1647___mcc_h898 = _source50.dtor_name;
                return this;
              } else if (_source50.is_Match) {
                RAST._IExpr _1648___mcc_h900 = _source50.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1649___mcc_h901 = _source50.dtor_cases;
                return this;
              } else if (_source50.is_StmtExpr) {
                RAST._IExpr _1650___mcc_h904 = _source50.dtor_stmt;
                RAST._IExpr _1651___mcc_h905 = _source50.dtor_rhs;
                return this;
              } else if (_source50.is_Block) {
                RAST._IExpr _1652___mcc_h908 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1653___mcc_h910 = _source50.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1654___mcc_h911 = _source50.dtor_assignments;
                return this;
              } else if (_source50.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1655___mcc_h914 = _source50.dtor_arguments;
                return this;
              } else if (_source50.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1656___mcc_h916 = _source50.dtor_op1;
                RAST._IExpr _1657___mcc_h917 = _source50.dtor_underlying;
                DAST.Format._IUnaryOpFormat _1658___mcc_h918 = _source50.dtor_format;
                return this;
              } else if (_source50.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1659___mcc_h922 = _source50.dtor_op2;
                RAST._IExpr _1660___mcc_h923 = _source50.dtor_left;
                RAST._IExpr _1661___mcc_h924 = _source50.dtor_right;
                DAST.Format._IBinaryOpFormat _1662___mcc_h925 = _source50.dtor_format2;
                return this;
              } else if (_source50.is_TypeAscription) {
                RAST._IExpr _1663___mcc_h930 = _source50.dtor_left;
                RAST._IType _1664___mcc_h931 = _source50.dtor_tpe;
                return this;
              } else if (_source50.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1665___mcc_h934 = _source50.dtor_value;
                return this;
              } else if (_source50.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1666___mcc_h936 = _source50.dtor_value;
                bool _1667___mcc_h937 = _source50.dtor_binary;
                return this;
              } else if (_source50.is_ConversionNum) {
                RAST._IType _1668___mcc_h940 = _source50.dtor_tpe;
                RAST._IExpr _1669___mcc_h941 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_DeclareVar) {
                RAST._IDeclareType _1670___mcc_h944 = _source50.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1671___mcc_h945 = _source50.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1672___mcc_h946 = _source50.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1673___mcc_h947 = _source50.dtor_optRhs;
                return this;
              } else if (_source50.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1674___mcc_h952 = _source50.dtor_name;
                RAST._IExpr _1675___mcc_h953 = _source50.dtor_rhs;
                return this;
              } else if (_source50.is_IfExpr) {
                RAST._IExpr _1676___mcc_h956 = _source50.dtor_cond;
                RAST._IExpr _1677___mcc_h957 = _source50.dtor_thn;
                RAST._IExpr _1678___mcc_h958 = _source50.dtor_els;
                return this;
              } else if (_source50.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1679___mcc_h962 = _source50.dtor_optCond;
                RAST._IExpr _1680___mcc_h963 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_For) {
                Dafny.ISequence<Dafny.Rune> _1681___mcc_h966 = _source50.dtor_name;
                RAST._IExpr _1682___mcc_h967 = _source50.dtor_range;
                RAST._IExpr _1683___mcc_h968 = _source50.dtor_body;
                return this;
              } else if (_source50.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1684___mcc_h972 = _source50.dtor_lbl;
                RAST._IExpr _1685___mcc_h973 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1686___mcc_h976 = _source50.dtor_optLbl;
                return this;
              } else if (_source50.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1687___mcc_h978 = _source50.dtor_optLbl;
                return this;
              } else if (_source50.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1688___mcc_h980 = _source50.dtor_optExpr;
                return this;
              } else if (_source50.is_Call) {
                RAST._IExpr _1689___mcc_h982 = _source50.dtor_obj;
                Dafny.ISequence<RAST._IType> _1690___mcc_h983 = _source50.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1691___mcc_h984 = _source50.dtor_arguments;
                return this;
              } else if (_source50.is_Select) {
                RAST._IExpr _1692___mcc_h988 = _source50.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1693___mcc_h989 = _source50.dtor_name;
                return this;
              } else {
                RAST._IExpr _1694___mcc_h992 = _source50.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1695___mcc_h993 = _source50.dtor_name;
                RAST._IExpr _source51 = _1694___mcc_h992;
                if (_source51.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1696___mcc_h996 = _source51.dtor_content;
                  return this;
                } else if (_source51.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1697___mcc_h998 = _source51.dtor_name;
                  return this;
                } else if (_source51.is_Match) {
                  RAST._IExpr _1698___mcc_h1000 = _source51.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1699___mcc_h1001 = _source51.dtor_cases;
                  return this;
                } else if (_source51.is_StmtExpr) {
                  RAST._IExpr _1700___mcc_h1004 = _source51.dtor_stmt;
                  RAST._IExpr _1701___mcc_h1005 = _source51.dtor_rhs;
                  return this;
                } else if (_source51.is_Block) {
                  RAST._IExpr _1702___mcc_h1008 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1703___mcc_h1010 = _source51.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1704___mcc_h1011 = _source51.dtor_assignments;
                  return this;
                } else if (_source51.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1705___mcc_h1014 = _source51.dtor_arguments;
                  return this;
                } else if (_source51.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1706___mcc_h1016 = _source51.dtor_op1;
                  RAST._IExpr _1707___mcc_h1017 = _source51.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _1708___mcc_h1018 = _source51.dtor_format;
                  return this;
                } else if (_source51.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1709___mcc_h1022 = _source51.dtor_op2;
                  RAST._IExpr _1710___mcc_h1023 = _source51.dtor_left;
                  RAST._IExpr _1711___mcc_h1024 = _source51.dtor_right;
                  DAST.Format._IBinaryOpFormat _1712___mcc_h1025 = _source51.dtor_format2;
                  return this;
                } else if (_source51.is_TypeAscription) {
                  RAST._IExpr _1713___mcc_h1030 = _source51.dtor_left;
                  RAST._IType _1714___mcc_h1031 = _source51.dtor_tpe;
                  return this;
                } else if (_source51.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1715___mcc_h1034 = _source51.dtor_value;
                  return this;
                } else if (_source51.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1716___mcc_h1036 = _source51.dtor_value;
                  bool _1717___mcc_h1037 = _source51.dtor_binary;
                  return this;
                } else if (_source51.is_ConversionNum) {
                  RAST._IType _1718___mcc_h1040 = _source51.dtor_tpe;
                  RAST._IExpr _1719___mcc_h1041 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_DeclareVar) {
                  RAST._IDeclareType _1720___mcc_h1044 = _source51.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1721___mcc_h1045 = _source51.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1722___mcc_h1046 = _source51.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1723___mcc_h1047 = _source51.dtor_optRhs;
                  return this;
                } else if (_source51.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1724___mcc_h1052 = _source51.dtor_name;
                  RAST._IExpr _1725___mcc_h1053 = _source51.dtor_rhs;
                  return this;
                } else if (_source51.is_IfExpr) {
                  RAST._IExpr _1726___mcc_h1056 = _source51.dtor_cond;
                  RAST._IExpr _1727___mcc_h1057 = _source51.dtor_thn;
                  RAST._IExpr _1728___mcc_h1058 = _source51.dtor_els;
                  return this;
                } else if (_source51.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1729___mcc_h1062 = _source51.dtor_optCond;
                  RAST._IExpr _1730___mcc_h1063 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1731___mcc_h1066 = _source51.dtor_name;
                  RAST._IExpr _1732___mcc_h1067 = _source51.dtor_range;
                  RAST._IExpr _1733___mcc_h1068 = _source51.dtor_body;
                  return this;
                } else if (_source51.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1734___mcc_h1072 = _source51.dtor_lbl;
                  RAST._IExpr _1735___mcc_h1073 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1736___mcc_h1076 = _source51.dtor_optLbl;
                  return this;
                } else if (_source51.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1737___mcc_h1078 = _source51.dtor_optLbl;
                  return this;
                } else if (_source51.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1738___mcc_h1080 = _source51.dtor_optExpr;
                  return this;
                } else if (_source51.is_Call) {
                  RAST._IExpr _1739___mcc_h1082 = _source51.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1740___mcc_h1083 = _source51.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1741___mcc_h1084 = _source51.dtor_arguments;
                  return this;
                } else if (_source51.is_Select) {
                  RAST._IExpr _1742___mcc_h1088 = _source51.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1743___mcc_h1089 = _source51.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1744___mcc_h1092 = _source51.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1745___mcc_h1093 = _source51.dtor_name;
                  RAST._IExpr _source52 = _1744___mcc_h1092;
                  if (_source52.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _1746___mcc_h1096 = _source52.dtor_content;
                    return this;
                  } else if (_source52.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _1747___mcc_h1098 = _source52.dtor_name;
                    if (object.Equals(_1747___mcc_h1098, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                      if (object.Equals(_1745___mcc_h1093, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"))) {
                        if (object.Equals(_1695___mcc_h993, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))) {
                          if (object.Equals(_1645___mcc_h893, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))) {
                            Dafny.ISequence<RAST._IExpr> _1748_args = _1595___mcc_h792;
                            Dafny.ISequence<RAST._IType> _1749_tpe = _1594___mcc_h791;
                            if (((new BigInteger((_1749_tpe).Count)).Sign == 0) && ((new BigInteger((_1748_args).Count)) == (BigInteger.One))) {
                              RAST._IExpr _source53 = (_1748_args).Select(BigInteger.Zero);
                              if (_source53.is_RawExpr) {
                                Dafny.ISequence<Dafny.Rune> _1750___mcc_h1204 = _source53.dtor_content;
                                return this;
                              } else if (_source53.is_Identifier) {
                                Dafny.ISequence<Dafny.Rune> _1751___mcc_h1206 = _source53.dtor_name;
                                return this;
                              } else if (_source53.is_Match) {
                                RAST._IExpr _1752___mcc_h1208 = _source53.dtor_matchee;
                                Dafny.ISequence<RAST._IMatchCase> _1753___mcc_h1209 = _source53.dtor_cases;
                                return this;
                              } else if (_source53.is_StmtExpr) {
                                RAST._IExpr _1754___mcc_h1212 = _source53.dtor_stmt;
                                RAST._IExpr _1755___mcc_h1213 = _source53.dtor_rhs;
                                return this;
                              } else if (_source53.is_Block) {
                                RAST._IExpr _1756___mcc_h1216 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_StructBuild) {
                                Dafny.ISequence<Dafny.Rune> _1757___mcc_h1218 = _source53.dtor_name;
                                Dafny.ISequence<RAST._IAssignIdentifier> _1758___mcc_h1219 = _source53.dtor_assignments;
                                return this;
                              } else if (_source53.is_Tuple) {
                                Dafny.ISequence<RAST._IExpr> _1759___mcc_h1222 = _source53.dtor_arguments;
                                return this;
                              } else if (_source53.is_UnaryOp) {
                                Dafny.ISequence<Dafny.Rune> _1760___mcc_h1224 = _source53.dtor_op1;
                                RAST._IExpr _1761___mcc_h1225 = _source53.dtor_underlying;
                                DAST.Format._IUnaryOpFormat _1762___mcc_h1226 = _source53.dtor_format;
                                return this;
                              } else if (_source53.is_BinaryOp) {
                                Dafny.ISequence<Dafny.Rune> _1763___mcc_h1230 = _source53.dtor_op2;
                                RAST._IExpr _1764___mcc_h1231 = _source53.dtor_left;
                                RAST._IExpr _1765___mcc_h1232 = _source53.dtor_right;
                                DAST.Format._IBinaryOpFormat _1766___mcc_h1233 = _source53.dtor_format2;
                                return this;
                              } else if (_source53.is_TypeAscription) {
                                RAST._IExpr _1767___mcc_h1238 = _source53.dtor_left;
                                RAST._IType _1768___mcc_h1239 = _source53.dtor_tpe;
                                return this;
                              } else if (_source53.is_LiteralInt) {
                                Dafny.ISequence<Dafny.Rune> _1769___mcc_h1242 = _source53.dtor_value;
                                Dafny.ISequence<Dafny.Rune> _1770_number = _1769___mcc_h1242;
                                return RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*optimized*/"), _1770_number));
                              } else if (_source53.is_LiteralString) {
                                Dafny.ISequence<Dafny.Rune> _1771___mcc_h1244 = _source53.dtor_value;
                                bool _1772___mcc_h1245 = _source53.dtor_binary;
                                Dafny.ISequence<Dafny.Rune> _1773_number = _1771___mcc_h1244;
                                return RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*optimized*/"), _1773_number));
                              } else if (_source53.is_ConversionNum) {
                                RAST._IType _1774___mcc_h1248 = _source53.dtor_tpe;
                                RAST._IExpr _1775___mcc_h1249 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_DeclareVar) {
                                RAST._IDeclareType _1776___mcc_h1252 = _source53.dtor_declareType;
                                Dafny.ISequence<Dafny.Rune> _1777___mcc_h1253 = _source53.dtor_name;
                                Std.Wrappers._IOption<RAST._IType> _1778___mcc_h1254 = _source53.dtor_optType;
                                Std.Wrappers._IOption<RAST._IExpr> _1779___mcc_h1255 = _source53.dtor_optRhs;
                                return this;
                              } else if (_source53.is_AssignVar) {
                                Dafny.ISequence<Dafny.Rune> _1780___mcc_h1260 = _source53.dtor_name;
                                RAST._IExpr _1781___mcc_h1261 = _source53.dtor_rhs;
                                return this;
                              } else if (_source53.is_IfExpr) {
                                RAST._IExpr _1782___mcc_h1264 = _source53.dtor_cond;
                                RAST._IExpr _1783___mcc_h1265 = _source53.dtor_thn;
                                RAST._IExpr _1784___mcc_h1266 = _source53.dtor_els;
                                return this;
                              } else if (_source53.is_Loop) {
                                Std.Wrappers._IOption<RAST._IExpr> _1785___mcc_h1270 = _source53.dtor_optCond;
                                RAST._IExpr _1786___mcc_h1271 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_For) {
                                Dafny.ISequence<Dafny.Rune> _1787___mcc_h1274 = _source53.dtor_name;
                                RAST._IExpr _1788___mcc_h1275 = _source53.dtor_range;
                                RAST._IExpr _1789___mcc_h1276 = _source53.dtor_body;
                                return this;
                              } else if (_source53.is_Labelled) {
                                Dafny.ISequence<Dafny.Rune> _1790___mcc_h1280 = _source53.dtor_lbl;
                                RAST._IExpr _1791___mcc_h1281 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_Break) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1792___mcc_h1284 = _source53.dtor_optLbl;
                                return this;
                              } else if (_source53.is_Continue) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1793___mcc_h1286 = _source53.dtor_optLbl;
                                return this;
                              } else if (_source53.is_Return) {
                                Std.Wrappers._IOption<RAST._IExpr> _1794___mcc_h1288 = _source53.dtor_optExpr;
                                return this;
                              } else if (_source53.is_Call) {
                                RAST._IExpr _1795___mcc_h1290 = _source53.dtor_obj;
                                Dafny.ISequence<RAST._IType> _1796___mcc_h1291 = _source53.dtor_typeParameters;
                                Dafny.ISequence<RAST._IExpr> _1797___mcc_h1292 = _source53.dtor_arguments;
                                return this;
                              } else if (_source53.is_Select) {
                                RAST._IExpr _1798___mcc_h1296 = _source53.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _1799___mcc_h1297 = _source53.dtor_name;
                                return this;
                              } else {
                                RAST._IExpr _1800___mcc_h1300 = _source53.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _1801___mcc_h1301 = _source53.dtor_name;
                                return this;
                              }
                            } else {
                              return this;
                            }
                          } else {
                            return this;
                          }
                        } else {
                          return this;
                        }
                      } else {
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source52.is_Match) {
                    RAST._IExpr _1802___mcc_h1100 = _source52.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _1803___mcc_h1101 = _source52.dtor_cases;
                    return this;
                  } else if (_source52.is_StmtExpr) {
                    RAST._IExpr _1804___mcc_h1104 = _source52.dtor_stmt;
                    RAST._IExpr _1805___mcc_h1105 = _source52.dtor_rhs;
                    return this;
                  } else if (_source52.is_Block) {
                    RAST._IExpr _1806___mcc_h1108 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _1807___mcc_h1110 = _source52.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _1808___mcc_h1111 = _source52.dtor_assignments;
                    return this;
                  } else if (_source52.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _1809___mcc_h1114 = _source52.dtor_arguments;
                    return this;
                  } else if (_source52.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1810___mcc_h1116 = _source52.dtor_op1;
                    RAST._IExpr _1811___mcc_h1117 = _source52.dtor_underlying;
                    DAST.Format._IUnaryOpFormat _1812___mcc_h1118 = _source52.dtor_format;
                    return this;
                  } else if (_source52.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1813___mcc_h1122 = _source52.dtor_op2;
                    RAST._IExpr _1814___mcc_h1123 = _source52.dtor_left;
                    RAST._IExpr _1815___mcc_h1124 = _source52.dtor_right;
                    DAST.Format._IBinaryOpFormat _1816___mcc_h1125 = _source52.dtor_format2;
                    return this;
                  } else if (_source52.is_TypeAscription) {
                    RAST._IExpr _1817___mcc_h1130 = _source52.dtor_left;
                    RAST._IType _1818___mcc_h1131 = _source52.dtor_tpe;
                    return this;
                  } else if (_source52.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _1819___mcc_h1134 = _source52.dtor_value;
                    return this;
                  } else if (_source52.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _1820___mcc_h1136 = _source52.dtor_value;
                    bool _1821___mcc_h1137 = _source52.dtor_binary;
                    return this;
                  } else if (_source52.is_ConversionNum) {
                    RAST._IType _1822___mcc_h1140 = _source52.dtor_tpe;
                    RAST._IExpr _1823___mcc_h1141 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_DeclareVar) {
                    RAST._IDeclareType _1824___mcc_h1144 = _source52.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _1825___mcc_h1145 = _source52.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _1826___mcc_h1146 = _source52.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _1827___mcc_h1147 = _source52.dtor_optRhs;
                    return this;
                  } else if (_source52.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _1828___mcc_h1152 = _source52.dtor_name;
                    RAST._IExpr _1829___mcc_h1153 = _source52.dtor_rhs;
                    return this;
                  } else if (_source52.is_IfExpr) {
                    RAST._IExpr _1830___mcc_h1156 = _source52.dtor_cond;
                    RAST._IExpr _1831___mcc_h1157 = _source52.dtor_thn;
                    RAST._IExpr _1832___mcc_h1158 = _source52.dtor_els;
                    return this;
                  } else if (_source52.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _1833___mcc_h1162 = _source52.dtor_optCond;
                    RAST._IExpr _1834___mcc_h1163 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_For) {
                    Dafny.ISequence<Dafny.Rune> _1835___mcc_h1166 = _source52.dtor_name;
                    RAST._IExpr _1836___mcc_h1167 = _source52.dtor_range;
                    RAST._IExpr _1837___mcc_h1168 = _source52.dtor_body;
                    return this;
                  } else if (_source52.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _1838___mcc_h1172 = _source52.dtor_lbl;
                    RAST._IExpr _1839___mcc_h1173 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1840___mcc_h1176 = _source52.dtor_optLbl;
                    return this;
                  } else if (_source52.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1841___mcc_h1178 = _source52.dtor_optLbl;
                    return this;
                  } else if (_source52.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _1842___mcc_h1180 = _source52.dtor_optExpr;
                    return this;
                  } else if (_source52.is_Call) {
                    RAST._IExpr _1843___mcc_h1182 = _source52.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1844___mcc_h1183 = _source52.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _1845___mcc_h1184 = _source52.dtor_arguments;
                    return this;
                  } else if (_source52.is_Select) {
                    RAST._IExpr _1846___mcc_h1188 = _source52.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1847___mcc_h1189 = _source52.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _1848___mcc_h1192 = _source52.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1849___mcc_h1193 = _source52.dtor_name;
                    return this;
                  }
                }
              }
            }
          } else if (_source48.is_Select) {
            RAST._IExpr _1850___mcc_h1196 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1851___mcc_h1197 = _source48.dtor_name;
            return this;
          } else {
            RAST._IExpr _1852___mcc_h1200 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1853___mcc_h1201 = _source48.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_DeclareVar) {
        RAST._IDeclareType _1854___mcc_h652 = _source35.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1855___mcc_h653 = _source35.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1856___mcc_h654 = _source35.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1857___mcc_h655 = _source35.dtor_optRhs;
        return this;
      } else if (_source35.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1858___mcc_h660 = _source35.dtor_name;
        RAST._IExpr _1859___mcc_h661 = _source35.dtor_rhs;
        return this;
      } else if (_source35.is_IfExpr) {
        RAST._IExpr _1860___mcc_h664 = _source35.dtor_cond;
        RAST._IExpr _1861___mcc_h665 = _source35.dtor_thn;
        RAST._IExpr _1862___mcc_h666 = _source35.dtor_els;
        return this;
      } else if (_source35.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1863___mcc_h670 = _source35.dtor_optCond;
        RAST._IExpr _1864___mcc_h671 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_For) {
        Dafny.ISequence<Dafny.Rune> _1865___mcc_h674 = _source35.dtor_name;
        RAST._IExpr _1866___mcc_h675 = _source35.dtor_range;
        RAST._IExpr _1867___mcc_h676 = _source35.dtor_body;
        return this;
      } else if (_source35.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1868___mcc_h680 = _source35.dtor_lbl;
        RAST._IExpr _1869___mcc_h681 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1870___mcc_h684 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1871___mcc_h686 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1872___mcc_h688 = _source35.dtor_optExpr;
        return this;
      } else if (_source35.is_Call) {
        RAST._IExpr _1873___mcc_h690 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IType> _1874___mcc_h691 = _source35.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1875___mcc_h692 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_Select) {
        RAST._IExpr _1876___mcc_h696 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1877___mcc_h697 = _source35.dtor_name;
        return this;
      } else {
        RAST._IExpr _1878___mcc_h700 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1879___mcc_h701 = _source35.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier() {
      RAST._IExpr _source54 = this;
      if (_source54.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1880___mcc_h0 = _source54.dtor_content;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1881___mcc_h2 = _source54.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Match) {
        RAST._IExpr _1882___mcc_h4 = _source54.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1883___mcc_h5 = _source54.dtor_cases;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_StmtExpr) {
        RAST._IExpr _1884___mcc_h8 = _source54.dtor_stmt;
        RAST._IExpr _1885___mcc_h9 = _source54.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Block) {
        RAST._IExpr _1886___mcc_h12 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1887___mcc_h14 = _source54.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1888___mcc_h15 = _source54.dtor_assignments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1889___mcc_h18 = _source54.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1890___mcc_h20 = _source54.dtor_op1;
        RAST._IExpr _1891___mcc_h21 = _source54.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1892___mcc_h22 = _source54.dtor_format;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1893___mcc_h26 = _source54.dtor_op2;
        RAST._IExpr _1894___mcc_h27 = _source54.dtor_left;
        RAST._IExpr _1895___mcc_h28 = _source54.dtor_right;
        DAST.Format._IBinaryOpFormat _1896___mcc_h29 = _source54.dtor_format2;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_TypeAscription) {
        RAST._IExpr _1897___mcc_h34 = _source54.dtor_left;
        RAST._IType _1898___mcc_h35 = _source54.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1899___mcc_h38 = _source54.dtor_value;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1900___mcc_h40 = _source54.dtor_value;
        bool _1901___mcc_h41 = _source54.dtor_binary;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_ConversionNum) {
        RAST._IType _1902___mcc_h44 = _source54.dtor_tpe;
        RAST._IExpr _1903___mcc_h45 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_DeclareVar) {
        RAST._IDeclareType _1904___mcc_h48 = _source54.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1905___mcc_h49 = _source54.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1906___mcc_h50 = _source54.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1907___mcc_h51 = _source54.dtor_optRhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1908___mcc_h56 = _source54.dtor_name;
        RAST._IExpr _1909___mcc_h57 = _source54.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_IfExpr) {
        RAST._IExpr _1910___mcc_h60 = _source54.dtor_cond;
        RAST._IExpr _1911___mcc_h61 = _source54.dtor_thn;
        RAST._IExpr _1912___mcc_h62 = _source54.dtor_els;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1913___mcc_h66 = _source54.dtor_optCond;
        RAST._IExpr _1914___mcc_h67 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_For) {
        Dafny.ISequence<Dafny.Rune> _1915___mcc_h70 = _source54.dtor_name;
        RAST._IExpr _1916___mcc_h71 = _source54.dtor_range;
        RAST._IExpr _1917___mcc_h72 = _source54.dtor_body;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1918___mcc_h76 = _source54.dtor_lbl;
        RAST._IExpr _1919___mcc_h77 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1920___mcc_h80 = _source54.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1921___mcc_h82 = _source54.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1922___mcc_h84 = _source54.dtor_optExpr;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Call) {
        RAST._IExpr _1923___mcc_h86 = _source54.dtor_obj;
        Dafny.ISequence<RAST._IType> _1924___mcc_h87 = _source54.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1925___mcc_h88 = _source54.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Select) {
        RAST._IExpr _1926___mcc_h92 = _source54.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1927___mcc_h93 = _source54.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else {
        RAST._IExpr _1928___mcc_h96 = _source54.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1929___mcc_h97 = _source54.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1930_id = _1929___mcc_h97;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_1930_id);
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source55 = (this).Optimize();
      if (_source55.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1931___mcc_h0 = _source55.dtor_content;
        RAST._IExpr _1932_r = (this).Optimize();
        return RAST.__default.AddIndent((_1932_r).dtor_content, ind);
      } else if (_source55.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1933___mcc_h2 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1934_name = _1933___mcc_h2;
        return _1934_name;
      } else if (_source55.is_Match) {
        RAST._IExpr _1935___mcc_h4 = _source55.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1936___mcc_h5 = _source55.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _1937_cases = _1936___mcc_h5;
        RAST._IExpr _1938_matchee = _1935___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_1938_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_1937_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_1939_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_1940_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1939_ind), RAST.__default.IND), (_1940_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1939_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_StmtExpr) {
        RAST._IExpr _1941___mcc_h8 = _source55.dtor_stmt;
        RAST._IExpr _1942___mcc_h9 = _source55.dtor_rhs;
        RAST._IExpr _1943_rhs = _1942___mcc_h9;
        RAST._IExpr _1944_stmt = _1941___mcc_h8;
        if (((_1944_stmt).is_RawExpr) && (((_1944_stmt).dtor_content).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_1943_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1944_stmt)._ToString(ind), (((_1944_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_1943_rhs)._ToString(ind));
        }
      } else if (_source55.is_Block) {
        RAST._IExpr _1945___mcc_h12 = _source55.dtor_underlying;
        RAST._IExpr _1946_underlying = _1945___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_1946_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1947___mcc_h14 = _source55.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1948___mcc_h15 = _source55.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1949_assignments = _1948___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _1950_name = _1947___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1950_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_1949_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_1951_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_1952_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1951_ind), RAST.__default.IND), (_1952_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1951_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1949_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1953___mcc_h18 = _source55.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1954_arguments = _1953___mcc_h18;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_1954_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1955_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1956_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1955_ind), RAST.__default.IND), (_1956_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1955_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1954_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source55.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1957___mcc_h20 = _source55.dtor_op1;
        RAST._IExpr _1958___mcc_h21 = _source55.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1959___mcc_h22 = _source55.dtor_format;
        DAST.Format._IUnaryOpFormat _1960_format = _1959___mcc_h22;
        RAST._IExpr _1961_underlying = _1958___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1962_op = _1957___mcc_h20;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_1961_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1963_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1964_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1965_leftOp = ((((_1962_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_1963_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1962_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_1962_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_1962_op))));
        Dafny.ISequence<Dafny.Rune> _1966_rightOp = (((_1962_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_1962_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1965_leftOp, _1963_leftP), (_1961_underlying)._ToString(ind)), _1964_rightP), _1966_rightOp);
      } else if (_source55.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1967___mcc_h26 = _source55.dtor_op2;
        RAST._IExpr _1968___mcc_h27 = _source55.dtor_left;
        RAST._IExpr _1969___mcc_h28 = _source55.dtor_right;
        DAST.Format._IBinaryOpFormat _1970___mcc_h29 = _source55.dtor_format2;
        DAST.Format._IBinaryOpFormat _1971_format = _1970___mcc_h29;
        RAST._IExpr _1972_right = _1969___mcc_h28;
        RAST._IExpr _1973_left = _1968___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1974_op2 = _1967___mcc_h26;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_1973_left);
        Dafny.ISequence<Dafny.Rune> _1975_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1976_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_1972_right);
        Dafny.ISequence<Dafny.Rune> _1977_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1978_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1979_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _1974_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _1980_indLeft = (((_1975_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _1981_indRight = (((_1977_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1975_leftLeftP, (_1973_left)._ToString(_1980_indLeft)), _1976_leftRighP), _1979_opRendered), _1977_rightLeftP), (_1972_right)._ToString(_1981_indRight)), _1978_rightRightP);
      } else if (_source55.is_TypeAscription) {
        RAST._IExpr _1982___mcc_h34 = _source55.dtor_left;
        RAST._IType _1983___mcc_h35 = _source55.dtor_tpe;
        RAST._IType _1984_tpe = _1983___mcc_h35;
        RAST._IExpr _1985_left = _1982___mcc_h34;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_1985_left);
        Dafny.ISequence<Dafny.Rune> _1986_leftLeftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1987_leftRightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1986_leftLeftP, (_1985_left)._ToString(RAST.__default.IND)), _1987_leftRightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_1984_tpe)._ToString(RAST.__default.IND));
      } else if (_source55.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1988___mcc_h38 = _source55.dtor_value;
        Dafny.ISequence<Dafny.Rune> _1989_number = _1988___mcc_h38;
        return _1989_number;
      } else if (_source55.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1990___mcc_h40 = _source55.dtor_value;
        bool _1991___mcc_h41 = _source55.dtor_binary;
        bool _1992_binary = _1991___mcc_h41;
        Dafny.ISequence<Dafny.Rune> _1993_characters = _1990___mcc_h40;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((_1992_binary) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _1993_characters), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source55.is_ConversionNum) {
        RAST._IType _1994___mcc_h44 = _source55.dtor_tpe;
        RAST._IExpr _1995___mcc_h45 = _source55.dtor_underlying;
        RAST._IExpr _1996_expr = _1995___mcc_h45;
        RAST._IType _1997_tpe = _1994___mcc_h44;
        if (((((((((((_1997_tpe).is_U8) || ((_1997_tpe).is_U16)) || ((_1997_tpe).is_U32)) || ((_1997_tpe).is_U64)) || ((_1997_tpe).is_U128)) || ((_1997_tpe).is_I8)) || ((_1997_tpe).is_I16)) || ((_1997_tpe).is_I32)) || ((_1997_tpe).is_I64)) || ((_1997_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_1997_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1996_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_1997_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source55.is_DeclareVar) {
        RAST._IDeclareType _1998___mcc_h48 = _source55.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1999___mcc_h49 = _source55.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2000___mcc_h50 = _source55.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2001___mcc_h51 = _source55.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _2002_optExpr = _2001___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _2003_optType = _2000___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _2004_name = _1999___mcc_h49;
        RAST._IDeclareType _2005_declareType = _1998___mcc_h48;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_2005_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2004_name), (((_2003_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_2003_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_2002_optExpr).is_Some) ? (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(((_2002_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)), _pat_let6_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let6_0, _2006_optExprString => (((_2006_optExprString).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("= /*issue with empty RHS*/"), ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_source56) => {
          if (_source56.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2007___mcc_h100 = _source56.dtor_content;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty Raw expr");
          } else if (_source56.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2008___mcc_h102 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Match) {
            RAST._IExpr _2009___mcc_h104 = _source56.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2010___mcc_h105 = _source56.dtor_cases;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_StmtExpr) {
            RAST._IExpr _2011___mcc_h108 = _source56.dtor_stmt;
            RAST._IExpr _2012___mcc_h109 = _source56.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Block) {
            RAST._IExpr _2013___mcc_h112 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _2014___mcc_h114 = _source56.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _2015___mcc_h115 = _source56.dtor_assignments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2016___mcc_h118 = _source56.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2017___mcc_h120 = _source56.dtor_op1;
            RAST._IExpr _2018___mcc_h121 = _source56.dtor_underlying;
            DAST.Format._IUnaryOpFormat _2019___mcc_h122 = _source56.dtor_format;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2020___mcc_h126 = _source56.dtor_op2;
            RAST._IExpr _2021___mcc_h127 = _source56.dtor_left;
            RAST._IExpr _2022___mcc_h128 = _source56.dtor_right;
            DAST.Format._IBinaryOpFormat _2023___mcc_h129 = _source56.dtor_format2;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_TypeAscription) {
            RAST._IExpr _2024___mcc_h134 = _source56.dtor_left;
            RAST._IType _2025___mcc_h135 = _source56.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2026___mcc_h138 = _source56.dtor_value;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty int literal");
          } else if (_source56.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2027___mcc_h140 = _source56.dtor_value;
            bool _2028___mcc_h141 = _source56.dtor_binary;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty string literal");
          } else if (_source56.is_ConversionNum) {
            RAST._IType _2029___mcc_h144 = _source56.dtor_tpe;
            RAST._IExpr _2030___mcc_h145 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_DeclareVar) {
            RAST._IDeclareType _2031___mcc_h148 = _source56.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2032___mcc_h149 = _source56.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2033___mcc_h150 = _source56.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2034___mcc_h151 = _source56.dtor_optRhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2035___mcc_h156 = _source56.dtor_name;
            RAST._IExpr _2036___mcc_h157 = _source56.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_IfExpr) {
            RAST._IExpr _2037___mcc_h160 = _source56.dtor_cond;
            RAST._IExpr _2038___mcc_h161 = _source56.dtor_thn;
            RAST._IExpr _2039___mcc_h162 = _source56.dtor_els;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2040___mcc_h166 = _source56.dtor_optCond;
            RAST._IExpr _2041___mcc_h167 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_For) {
            Dafny.ISequence<Dafny.Rune> _2042___mcc_h170 = _source56.dtor_name;
            RAST._IExpr _2043___mcc_h171 = _source56.dtor_range;
            RAST._IExpr _2044___mcc_h172 = _source56.dtor_body;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2045___mcc_h176 = _source56.dtor_lbl;
            RAST._IExpr _2046___mcc_h177 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2047___mcc_h180 = _source56.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2048___mcc_h182 = _source56.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2049___mcc_h184 = _source56.dtor_optExpr;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Call) {
            RAST._IExpr _2050___mcc_h186 = _source56.dtor_obj;
            Dafny.ISequence<RAST._IType> _2051___mcc_h187 = _source56.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _2052___mcc_h188 = _source56.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Select) {
            RAST._IExpr _2053___mcc_h192 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2054___mcc_h193 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else {
            RAST._IExpr _2055___mcc_h196 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2056___mcc_h197 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          }
        }))((_2002_optExpr).dtor_value))) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), _2006_optExprString)))))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2057___mcc_h56 = _source55.dtor_name;
        RAST._IExpr _2058___mcc_h57 = _source55.dtor_rhs;
        RAST._IExpr _2059_expr = _2058___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _2060_name = _2057___mcc_h56;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2060_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_2059_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_IfExpr) {
        RAST._IExpr _2061___mcc_h60 = _source55.dtor_cond;
        RAST._IExpr _2062___mcc_h61 = _source55.dtor_thn;
        RAST._IExpr _2063___mcc_h62 = _source55.dtor_els;
        RAST._IExpr _2064_els = _2063___mcc_h62;
        RAST._IExpr _2065_thn = _2062___mcc_h61;
        RAST._IExpr _2066_cond = _2061___mcc_h60;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_2066_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2065_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} else {\n")), ind), RAST.__default.IND), (_2064_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2067___mcc_h66 = _source55.dtor_optCond;
        RAST._IExpr _2068___mcc_h67 = _source55.dtor_underlying;
        RAST._IExpr _2069_underlying = _2068___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _2070_optCond = _2067___mcc_h66;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source57) => {
          if (_source57.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _2071___mcc_h200 = _source57.dtor_value;
            RAST._IExpr _2072_c = _2071___mcc_h200;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_2072_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_2070_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2069_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_For) {
        Dafny.ISequence<Dafny.Rune> _2073___mcc_h70 = _source55.dtor_name;
        RAST._IExpr _2074___mcc_h71 = _source55.dtor_range;
        RAST._IExpr _2075___mcc_h72 = _source55.dtor_body;
        RAST._IExpr _2076_body = _2075___mcc_h72;
        RAST._IExpr _2077_range = _2074___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _2078_name = _2073___mcc_h70;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _2078_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_2077_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2076_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2079___mcc_h76 = _source55.dtor_lbl;
        RAST._IExpr _2080___mcc_h77 = _source55.dtor_underlying;
        RAST._IExpr _2081_underlying = _2080___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _2082_name = _2079___mcc_h76;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _2082_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_2081_underlying)._ToString(ind));
      } else if (_source55.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2083___mcc_h80 = _source55.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2084_optLbl = _2083___mcc_h80;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source58 = _2084_optLbl;
        if (_source58.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2085___mcc_h201 = _source58.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2086_lbl = _2085___mcc_h201;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _2086_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source55.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2087___mcc_h82 = _source55.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2088_optLbl = _2087___mcc_h82;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source59 = _2088_optLbl;
        if (_source59.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2089___mcc_h202 = _source59.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2090_lbl = _2089___mcc_h202;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _2090_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source55.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2091___mcc_h84 = _source55.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _2092_optExpr = _2091___mcc_h84;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_2092_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_2092_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_Call) {
        RAST._IExpr _2093___mcc_h86 = _source55.dtor_obj;
        Dafny.ISequence<RAST._IType> _2094___mcc_h87 = _source55.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _2095___mcc_h88 = _source55.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2096_args = _2095___mcc_h88;
        Dafny.ISequence<RAST._IType> _2097_tpes = _2094___mcc_h87;
        RAST._IExpr _2098_expr = _2093___mcc_h86;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_2098_expr);
        Dafny.ISequence<Dafny.Rune> _2099_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2100_rightP = _let_tmp_rhs45.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>)((_source60) => {
          if (_source60.is_None) {
            return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _2101___mcc_h203 = _source60.dtor_value;
            if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        }))((_2098_expr).RightMostIdentifier());
        Dafny.ISequence<Dafny.Rune> _2102_leftCallP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2103_rightCallP = _let_tmp_rhs46.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2099_leftP, (_2098_expr)._ToString(ind)), _2100_rightP), (((new BigInteger((_2097_tpes).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"), RAST.__default.SeqToString<RAST._IType>(_2097_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_2104_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_2105_tpe) => {
          return (_2105_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2104_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))), _2102_leftCallP), RAST.__default.SeqToString<RAST._IExpr>(_2096_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2106_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2107_arg) => {
          return (_2107_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2106_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), _2103_rightCallP);
      } else if (_source55.is_Select) {
        RAST._IExpr _2108___mcc_h92 = _source55.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2109___mcc_h93 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2110_name = _2109___mcc_h93;
        RAST._IExpr _2111_expression = _2108___mcc_h92;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs47 = (this).LeftParentheses(_2111_expression);
        Dafny.ISequence<Dafny.Rune> _2112_leftP = _let_tmp_rhs47.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2113_rightP = _let_tmp_rhs47.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2112_leftP, (_2111_expression)._ToString(ind)), _2113_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2110_name);
      } else {
        RAST._IExpr _2114___mcc_h96 = _source55.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2115___mcc_h97 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2116_name = _2115___mcc_h97;
        RAST._IExpr _2117_expression = _2114___mcc_h96;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs48 = (this).LeftParentheses(_2117_expression);
        Dafny.ISequence<Dafny.Rune> _2118_leftP = _let_tmp_rhs48.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2119_rightP = _let_tmp_rhs48.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2118_leftP, (_2117_expression)._ToString(ind)), _2119_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2116_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_Select(this, name);
    }
    public RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_MemberSelect(this, name);
    }
    public RAST._IExpr Apply(Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments)
    {
      return RAST.Expr.create_Call(this, typeParameters, arguments);
    }
    public RAST._IExpr Apply1(RAST._IExpr argument) {
      return RAST.Expr.create_Call(this, Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(argument));
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source61 = this;
      if (_source61.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2120___mcc_h0 = _source61.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2121___mcc_h2 = _source61.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_Match) {
        RAST._IExpr _2122___mcc_h4 = _source61.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2123___mcc_h5 = _source61.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_StmtExpr) {
        RAST._IExpr _2124___mcc_h8 = _source61.dtor_stmt;
        RAST._IExpr _2125___mcc_h9 = _source61.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Block) {
        RAST._IExpr _2126___mcc_h12 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _2127___mcc_h14 = _source61.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _2128___mcc_h15 = _source61.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2129___mcc_h18 = _source61.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2130___mcc_h20 = _source61.dtor_op1;
        RAST._IExpr _2131___mcc_h21 = _source61.dtor_underlying;
        DAST.Format._IUnaryOpFormat _2132___mcc_h22 = _source61.dtor_format;
        DAST.Format._IUnaryOpFormat _2133_format = _2132___mcc_h22;
        RAST._IExpr _2134_underlying = _2131___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2135_op = _2130___mcc_h20;
        if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source61.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2136___mcc_h26 = _source61.dtor_op2;
        RAST._IExpr _2137___mcc_h27 = _source61.dtor_left;
        RAST._IExpr _2138___mcc_h28 = _source61.dtor_right;
        DAST.Format._IBinaryOpFormat _2139___mcc_h29 = _source61.dtor_format2;
        DAST.Format._IBinaryOpFormat _2140_format = _2139___mcc_h29;
        RAST._IExpr _2141_right = _2138___mcc_h28;
        RAST._IExpr _2142_left = _2137___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2143_op2 = _2136___mcc_h26;
        if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source61.is_TypeAscription) {
        RAST._IExpr _2144___mcc_h34 = _source61.dtor_left;
        RAST._IType _2145___mcc_h35 = _source61.dtor_tpe;
        RAST._IType _2146_tpe = _2145___mcc_h35;
        RAST._IExpr _2147_left = _2144___mcc_h34;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2148___mcc_h38 = _source61.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2149___mcc_h40 = _source61.dtor_value;
        bool _2150___mcc_h41 = _source61.dtor_binary;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_ConversionNum) {
        RAST._IType _2151___mcc_h44 = _source61.dtor_tpe;
        RAST._IExpr _2152___mcc_h45 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_DeclareVar) {
        RAST._IDeclareType _2153___mcc_h48 = _source61.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2154___mcc_h49 = _source61.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2155___mcc_h50 = _source61.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2156___mcc_h51 = _source61.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2157___mcc_h56 = _source61.dtor_name;
        RAST._IExpr _2158___mcc_h57 = _source61.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_IfExpr) {
        RAST._IExpr _2159___mcc_h60 = _source61.dtor_cond;
        RAST._IExpr _2160___mcc_h61 = _source61.dtor_thn;
        RAST._IExpr _2161___mcc_h62 = _source61.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2162___mcc_h66 = _source61.dtor_optCond;
        RAST._IExpr _2163___mcc_h67 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_For) {
        Dafny.ISequence<Dafny.Rune> _2164___mcc_h70 = _source61.dtor_name;
        RAST._IExpr _2165___mcc_h71 = _source61.dtor_range;
        RAST._IExpr _2166___mcc_h72 = _source61.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2167___mcc_h76 = _source61.dtor_lbl;
        RAST._IExpr _2168___mcc_h77 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2169___mcc_h80 = _source61.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2170___mcc_h82 = _source61.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2171___mcc_h84 = _source61.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Call) {
        RAST._IExpr _2172___mcc_h86 = _source61.dtor_obj;
        Dafny.ISequence<RAST._IType> _2173___mcc_h87 = _source61.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _2174___mcc_h88 = _source61.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_Select) {
        RAST._IExpr _2175___mcc_h92 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2176___mcc_h93 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2177_name = _2176___mcc_h93;
        RAST._IExpr _2178_underlying = _2175___mcc_h92;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _2179___mcc_h96 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2180___mcc_h97 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2181_name = _2180___mcc_h97;
        RAST._IExpr _2182_underlying = _2179___mcc_h96;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnaryOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnaryOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinaryOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinaryOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_TypeAscription : Expr {
    public readonly RAST._IExpr _left;
    public readonly RAST._IType _tpe;
    public Expr_TypeAscription(RAST._IExpr left, RAST._IType tpe) : base() {
      this._left = left;
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_TypeAscription(_left, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_TypeAscription;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.TypeAscription";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralString : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public readonly bool _binary;
    public Expr_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) : base() {
      this._value = @value;
      this._binary = binary;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralString(_value, _binary);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralString;
      return oth != null && object.Equals(this._value, oth._value) && this._binary == oth._binary;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._binary));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralString";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._binary);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _typeParameters, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_2183_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_2184_formal) => {
        return (_2184_formal)._ToString(_2183_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source62) => {
        if (_source62.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _2185___mcc_h0 = _source62.dtor_value;
          RAST._IType _2186_t = _2185___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_2186_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source63) => {
        if (_source63.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _2187___mcc_h2 = _source63.dtor_value;
          RAST._IExpr _2188_body = _2187___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_2188_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2189___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2189___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2189___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2189___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2189___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2189___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2190___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2190___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2190___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2190___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2190___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2190___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2191_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2191_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
    public static bool UnicodeChars { get {
      return false;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public partial class COMP {
    public COMP() {
      this._UnicodeChars = false;
    }
    public void __ctor(bool UnicodeChars)
    {
      (this)._UnicodeChars = UnicodeChars;
    }
    public RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _2192_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = (this).GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _2192_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _2192_body)));
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _2193_i;
      _2193_i = BigInteger.Zero;
      while ((_2193_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _2194_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source64 = (body).Select(_2193_i);
        if (_source64.is_Module) {
          DAST._IModule _2195___mcc_h0 = _source64.dtor_Module_a0;
          DAST._IModule _2196_m = _2195___mcc_h0;
          RAST._IMod _2197_mm;
          RAST._IMod _out16;
          _out16 = (this).GenModule(_2196_m, containingPath);
          _2197_mm = _out16;
          _2194_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2197_mm));
        } else if (_source64.is_Class) {
          DAST._IClass _2198___mcc_h1 = _source64.dtor_Class_a0;
          DAST._IClass _2199_c = _2198___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = (this).GenClass(_2199_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2199_c).dtor_name)));
          _2194_generated = _out17;
        } else if (_source64.is_Trait) {
          DAST._ITrait _2200___mcc_h2 = _source64.dtor_Trait_a0;
          DAST._ITrait _2201_t = _2200___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2202_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = (this).GenTrait(_2201_t, containingPath);
          _2202_tt = _out18;
          _2194_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2202_tt));
        } else if (_source64.is_Newtype) {
          DAST._INewtype _2203___mcc_h3 = _source64.dtor_Newtype_a0;
          DAST._INewtype _2204_n = _2203___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = (this).GenNewtype(_2204_n);
          _2194_generated = _out19;
        } else {
          DAST._IDatatype _2205___mcc_h4 = _source64.dtor_Datatype_a0;
          DAST._IDatatype _2206_d = _2205___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = (this).GenDatatype(_2206_d);
          _2194_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2194_generated);
        _2193_i = (_2193_i) + (BigInteger.One);
      }
      return s;
    }
    public void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _2207_tpI;
      _2207_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_2207_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _2208_tp;
          _2208_tp = (@params).Select(_2207_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2208_tp));
          RAST._IType _2209_genTp;
          RAST._IType _out21;
          _out21 = (this).GenType(_2208_tp, false, false);
          _2209_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2209_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _2207_tpI = (_2207_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _2210_baseConstraints;
      _2210_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _2210_baseConstraints);
    }
    public Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2211_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2212_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2213_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2214_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      (this).GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _2211_typeParamsSet = _out22;
      _2212_sTypeParams = _out23;
      _2213_sConstrainedTypeParams = _out24;
      _2214_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _2215_constrainedTypeParams;
      _2215_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2213_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _2216_fields;
      _2216_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2217_fieldInits;
      _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _2218_fieldI;
      _2218_fieldI = BigInteger.Zero;
      while ((_2218_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _2219_field;
        _2219_field = ((c).dtor_fields).Select(_2218_fieldI);
        RAST._IType _2220_fieldType;
        RAST._IType _out26;
        _out26 = (this).GenType(((_2219_field).dtor_formal).dtor_typ, false, false);
        _2220_fieldType = _out26;
        _2216_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2216_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_2219_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_2220_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source65 = (_2219_field).dtor_defaultValue;
        if (_source65.is_None) {
          {
            _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2217_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2219_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _2221___mcc_h0 = _source65.dtor_value;
          DAST._IExpression _2222_e = _2221___mcc_h0;
          {
            RAST._IExpr _2223_eStr;
            DCOMP._IOwnership _2224___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2225___v36;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            (this).GenExpr(_2222_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _2223_eStr = _out27;
            _2224___v35 = _out28;
            _2225___v36 = _out29;
            _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2217_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2219_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_2223_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _2218_fieldI = (_2218_fieldI) + (BigInteger.One);
      }
      BigInteger _2226_typeParamI;
      _2226_typeParamI = BigInteger.Zero;
      while ((_2226_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _2227_tpeGen;
        RAST._IType _out30;
        _out30 = (this).GenType(((c).dtor_typeParams).Select(_2226_typeParamI), false, false);
        _2227_tpeGen = _out30;
        _2216_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2216_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2226_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2227_tpeGen)))));
        _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2217_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2226_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _2226_typeParamI = (_2226_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _2228_struct;
      _2228_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _2212_sTypeParams, RAST.Formals.create_NamedFormals(_2216_fields));
      Dafny.ISequence<RAST._IType> _2229_typeParamsAsTypes;
      _2229_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2230_typeParam) => {
        return RAST.__default.RawType((_2230_typeParam).dtor_content);
      })), _2212_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2228_struct));
      Dafny.ISequence<RAST._IImplMember> _2231_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2232_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      (this).GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _2211_typeParamsSet, out _out31, out _out32);
      _2231_implBodyRaw = _out31;
      _2232_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _2233_implBody;
      _2233_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _2217_fieldInits))))), _2231_implBodyRaw);
      RAST._IImpl _2234_i;
      _2234_i = RAST.Impl.create_Impl(_2213_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), _2214_whereConstraints, _2233_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2234_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2235_i;
        _2235_i = BigInteger.Zero;
        while ((_2235_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2236_superClass;
          _2236_superClass = ((c).dtor_superClasses).Select(_2235_i);
          DAST._IType _source66 = _2236_superClass;
          if (_source66.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2237___mcc_h1 = _source66.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2238___mcc_h2 = _source66.dtor_typeArgs;
            DAST._IResolvedType _2239___mcc_h3 = _source66.dtor_resolved;
            DAST._IResolvedType _source67 = _2239___mcc_h3;
            if (_source67.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2240___mcc_h7 = _source67.dtor_path;
            } else if (_source67.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2241___mcc_h9 = _source67.dtor_path;
              Dafny.ISequence<DAST._IType> _2242_typeArgs = _2238___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2243_traitPath = _2237___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _2244_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_2243_traitPath);
                _2244_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _2245_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = (this).GenTypeArgs(_2242_typeArgs, false, false);
                _2245_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _2246_body;
                _2246_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2232_traitBodies).Contains(_2243_traitPath)) {
                  _2246_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2232_traitBodies,_2243_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _2247_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _2247_genSelfPath = _out35;
                RAST._IModDecl _2248_x;
                _2248_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2213_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2244_pathStr), _2245_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2247_genSelfPath), _2229_typeParamsAsTypes)), _2214_whereConstraints, _2246_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2248_x));
              }
            } else {
              DAST._IType _2249___mcc_h11 = _source67.dtor_baseType;
              DAST._INewtypeRange _2250___mcc_h12 = _source67.dtor_range;
              bool _2251___mcc_h13 = _source67.dtor_erase;
            }
          } else if (_source66.is_Nullable) {
            DAST._IType _2252___mcc_h17 = _source66.dtor_Nullable_a0;
          } else if (_source66.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2253___mcc_h19 = _source66.dtor_Tuple_a0;
          } else if (_source66.is_Array) {
            DAST._IType _2254___mcc_h21 = _source66.dtor_element;
            BigInteger _2255___mcc_h22 = _source66.dtor_dims;
          } else if (_source66.is_Seq) {
            DAST._IType _2256___mcc_h25 = _source66.dtor_element;
          } else if (_source66.is_Set) {
            DAST._IType _2257___mcc_h27 = _source66.dtor_element;
          } else if (_source66.is_Multiset) {
            DAST._IType _2258___mcc_h29 = _source66.dtor_element;
          } else if (_source66.is_Map) {
            DAST._IType _2259___mcc_h31 = _source66.dtor_key;
            DAST._IType _2260___mcc_h32 = _source66.dtor_value;
          } else if (_source66.is_SetBuilder) {
            DAST._IType _2261___mcc_h35 = _source66.dtor_element;
          } else if (_source66.is_MapBuilder) {
            DAST._IType _2262___mcc_h37 = _source66.dtor_key;
            DAST._IType _2263___mcc_h38 = _source66.dtor_value;
          } else if (_source66.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2264___mcc_h41 = _source66.dtor_args;
            DAST._IType _2265___mcc_h42 = _source66.dtor_result;
          } else if (_source66.is_Primitive) {
            DAST._IPrimitive _2266___mcc_h45 = _source66.dtor_Primitive_a0;
          } else if (_source66.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2267___mcc_h47 = _source66.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2268___mcc_h49 = _source66.dtor_TypeArg_a0;
          }
          _2235_i = (_2235_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _2269_d;
      _2269_d = RAST.Impl.create_ImplFor(_2213_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), _2214_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _2270_defaultImpl;
      _2270_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2269_d));
      RAST._IImpl _2271_p;
      _2271_p = RAST.Impl.create_ImplFor(_2213_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _2272_printImpl;
      _2272_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2271_p));
      RAST._IImpl _2273_pp;
      _2273_pp = RAST.Impl.create_ImplFor(_2212_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _2274_ptrPartialEqImpl;
      _2274_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2273_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _2270_defaultImpl), _2272_printImpl), _2274_ptrPartialEqImpl);
      return s;
    }
    public Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2275_typeParamsSet;
      _2275_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _2276_typeParams;
      _2276_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2277_tpI;
      _2277_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2277_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _2278_tp;
          _2278_tp = ((t).dtor_typeParams).Select(_2277_tpI);
          _2275_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2275_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2278_tp));
          RAST._IType _2279_genTp;
          RAST._IType _out36;
          _out36 = (this).GenType(_2278_tp, false, false);
          _2279_genTp = _out36;
          _2276_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2276_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2279_genTp));
          _2277_tpI = (_2277_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2280_fullPath;
      _2280_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2281_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2282___v39;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      (this).GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2280_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2280_fullPath)), _2275_typeParamsSet, out _out37, out _out38);
      _2281_implBody = _out37;
      _2282___v39 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((t).dtor_name)), _2276_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2281_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2283_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2284_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2285_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2286_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      (this).GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _2283_typeParamsSet = _out39;
      _2284_sTypeParams = _out40;
      _2285_sConstrainedTypeParams = _out41;
      _2286_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _2287_typeParamsAsTypes;
      _2287_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2288_t) => {
        return RAST.__default.RawType((_2288_t).dtor_content);
      })), _2284_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2289_constrainedTypeParams;
      _2289_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2285_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2290_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source68 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source68.is_None) {
        RAST._IType _out43;
        _out43 = (this).GenType((c).dtor_base, false, false);
        _2290_underlyingType = _out43;
      } else {
        RAST._IType _2291___mcc_h0 = _source68.dtor_value;
        RAST._IType _2292_v = _2291___mcc_h0;
        _2290_underlyingType = _2292_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _2284_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _2290_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _2293_fnBody;
      _2293_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source69 = (c).dtor_witnessExpr;
      if (_source69.is_None) {
        {
          _2293_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _2294___mcc_h1 = _source69.dtor_value;
        DAST._IExpression _2295_e = _2294___mcc_h1;
        {
          RAST._IExpr _2296_eStr;
          DCOMP._IOwnership _2297___v40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2298___v41;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          (this).GenExpr(_2295_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _2296_eStr = _out44;
          _2297___v40 = _out45;
          _2298___v41 = _out46;
          _2293_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2296_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _2299_body;
      _2299_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_2293_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2285_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2287_typeParamsAsTypes), _2286_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2299_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2285_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2287_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2285_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2287_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2290_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2300_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2301_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2302_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2303_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      (this).GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2300_typeParamsSet = _out47;
      _2301_sTypeParams = _out48;
      _2302_sConstrainedTypeParams = _out49;
      _2303_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _2304_typeParamsAsTypes;
      _2304_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2305_t) => {
        return RAST.__default.RawType((_2305_t).dtor_content);
      })), _2301_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2306_constrainedTypeParams;
      _2306_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2302_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _2307_ctors;
      _2307_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _2308_i;
      _2308_i = BigInteger.Zero;
      while ((_2308_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2309_ctor;
        _2309_ctor = ((c).dtor_ctors).Select(_2308_i);
        Dafny.ISequence<RAST._IFormal> _2310_ctorArgs;
        _2310_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _2311_j;
        _2311_j = BigInteger.Zero;
        while ((_2311_j) < (new BigInteger(((_2309_ctor).dtor_args).Count))) {
          DAST._IFormal _2312_formal;
          _2312_formal = ((_2309_ctor).dtor_args).Select(_2311_j);
          RAST._IType _2313_formalType;
          RAST._IType _out51;
          _out51 = (this).GenType((_2312_formal).dtor_typ, false, false);
          _2313_formalType = _out51;
          if ((c).dtor_isCo) {
            _2310_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2310_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2312_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2313_formalType)))));
          } else {
            _2310_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2310_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2312_formal).dtor_name), _2313_formalType)));
          }
          _2311_j = (_2311_j) + (BigInteger.One);
        }
        _2307_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2307_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_2309_ctor).dtor_name), RAST.Formals.create_NamedFormals(_2310_ctorArgs))));
        _2308_i = (_2308_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2314_selfPath;
      _2314_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2315_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2316_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      (this).GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_2314_selfPath)), _2300_typeParamsSet, out _out52, out _out53);
      _2315_implBodyRaw = _out52;
      _2316_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _2317_implBody;
      _2317_implBody = _2315_implBodyRaw;
      _2308_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2318_emittedFields;
      _2318_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_2308_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2319_ctor;
        _2319_ctor = ((c).dtor_ctors).Select(_2308_i);
        BigInteger _2320_j;
        _2320_j = BigInteger.Zero;
        while ((_2320_j) < (new BigInteger(((_2319_ctor).dtor_args).Count))) {
          DAST._IFormal _2321_formal;
          _2321_formal = ((_2319_ctor).dtor_args).Select(_2320_j);
          if (!((_2318_emittedFields).Contains((_2321_formal).dtor_name))) {
            _2318_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2318_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2321_formal).dtor_name));
            RAST._IType _2322_formalType;
            RAST._IType _out54;
            _out54 = (this).GenType((_2321_formal).dtor_typ, false, false);
            _2322_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _2323_cases;
            _2323_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _2324_k;
            _2324_k = BigInteger.Zero;
            while ((_2324_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _2325_ctor2;
              _2325_ctor2 = ((c).dtor_ctors).Select(_2324_k);
              Dafny.ISequence<Dafny.Rune> _2326_pattern;
              _2326_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2325_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2327_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _2328_l;
              _2328_l = BigInteger.Zero;
              bool _2329_hasMatchingField;
              _2329_hasMatchingField = false;
              while ((_2328_l) < (new BigInteger(((_2325_ctor2).dtor_args).Count))) {
                DAST._IFormal _2330_formal2;
                _2330_formal2 = ((_2325_ctor2).dtor_args).Select(_2328_l);
                if (((_2321_formal).dtor_name).Equals((_2330_formal2).dtor_name)) {
                  _2329_hasMatchingField = true;
                }
                _2326_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2326_pattern, DCOMP.__default.escapeIdent((_2330_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _2328_l = (_2328_l) + (BigInteger.One);
              }
              _2326_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2326_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2329_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2327_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_2321_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2327_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2321_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2327_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2331_ctorMatch;
              _2331_ctorMatch = RAST.MatchCase.create(_2326_pattern, RAST.Expr.create_RawExpr(_2327_rhs));
              _2323_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2323_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2331_ctorMatch));
              _2324_k = (_2324_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2323_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2323_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2332_methodBody;
            _2332_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _2323_cases);
            _2317_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2317_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_2321_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2322_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2332_methodBody)))));
          }
          _2320_j = (_2320_j) + (BigInteger.One);
        }
        _2308_i = (_2308_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _2333_typeI;
        _2333_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _2334_types;
        _2334_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_2333_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _2335_genTp;
          RAST._IType _out55;
          _out55 = (this).GenType(((c).dtor_typeParams).Select(_2333_typeI), false, false);
          _2335_genTp = _out55;
          _2334_types = Dafny.Sequence<RAST._IType>.Concat(_2334_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_2335_genTp))));
          _2333_typeI = (_2333_typeI) + (BigInteger.One);
        }
        _2307_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2307_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_2336_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _2336_tpe);
})), _2334_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2337_enumBody;
      _2337_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _2301_sTypeParams, _2307_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2302_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2304_typeParamsAsTypes), _2303_whereConstraints, _2317_implBody)));
      _2308_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _2338_printImplBodyCases;
      _2338_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_2308_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2339_ctor;
        _2339_ctor = ((c).dtor_ctors).Select(_2308_i);
        Dafny.ISequence<Dafny.Rune> _2340_ctorMatch;
        _2340_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2339_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2341_modulePrefix;
        _2341_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2342_printRhs;
        _2342_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2341_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_2339_ctor).dtor_name)), (((_2339_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _2343_j;
        _2343_j = BigInteger.Zero;
        while ((_2343_j) < (new BigInteger(((_2339_ctor).dtor_args).Count))) {
          DAST._IFormal _2344_formal;
          _2344_formal = ((_2339_ctor).dtor_args).Select(_2343_j);
          _2340_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2340_ctorMatch, DCOMP.__default.escapeIdent((_2344_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_2343_j).Sign == 1) {
            _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_2344_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _2343_j = (_2343_j) + (BigInteger.One);
        }
        _2340_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2340_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2339_ctor).dtor_hasAnyArgs) {
          _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2338_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2338_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2340_ctorMatch), RAST.Expr.create_Block(_2342_printRhs))));
        _2308_i = (_2308_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2338_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2338_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _2345_printImplBody;
      _2345_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _2338_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2346_printImpl;
      _2346_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2302_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2304_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2345_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2347_defaultImpl;
      _2347_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _2308_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _2348_structName;
        _2348_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2349_structAssignments;
        _2349_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_2308_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _2350_formal;
          _2350_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2308_i);
          _2349_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2349_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_2350_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _2308_i = (_2308_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _2351_defaultConstrainedTypeParams;
        _2351_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_2301_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _2347_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2351_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2304_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2348_structName, _2349_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2337_enumBody, _2346_printImpl), _2347_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _2352_i;
        _2352_i = BigInteger.Zero;
        while ((_2352_i) < (new BigInteger((p).Count))) {
          if ((_2352_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_2352_i))));
          _2352_i = (_2352_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2353_i;
        _2353_i = BigInteger.Zero;
        while ((_2353_i) < (new BigInteger((args).Count))) {
          RAST._IType _2354_genTp;
          RAST._IType _out56;
          _out56 = (this).GenType((args).Select(_2353_i), inBinding, inFn);
          _2354_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2354_genTp));
          _2353_i = (_2353_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source70 = c;
      if (_source70.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2355___mcc_h0 = _source70.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _2356___mcc_h1 = _source70.dtor_typeArgs;
        DAST._IResolvedType _2357___mcc_h2 = _source70.dtor_resolved;
        DAST._IResolvedType _2358_resolved = _2357___mcc_h2;
        Dafny.ISequence<DAST._IType> _2359_args = _2356___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2360_p = _2355___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _2361_t;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenPath(_2360_p);
          _2361_t = _out57;
          s = RAST.Type.create_TIdentifier(_2361_t);
          Dafny.ISequence<RAST._IType> _2362_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = (this).GenTypeArgs(_2359_args, inBinding, inFn);
          _2362_typeArgs = _out58;
          s = RAST.Type.create_TypeApp(s, _2362_typeArgs);
          DAST._IResolvedType _source71 = _2358_resolved;
          if (_source71.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2363___mcc_h21 = _source71.dtor_path;
            {
              s = RAST.__default.Rc(s);
            }
          } else if (_source71.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2364___mcc_h22 = _source71.dtor_path;
            {
              if ((_2360_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>"));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _2365___mcc_h23 = _source71.dtor_baseType;
            DAST._INewtypeRange _2366___mcc_h24 = _source71.dtor_range;
            bool _2367___mcc_h25 = _source71.dtor_erase;
            bool _2368_erased = _2367___mcc_h25;
            DAST._INewtypeRange _2369_range = _2366___mcc_h24;
            DAST._IType _2370_t = _2365___mcc_h23;
            {
              if (_2368_erased) {
                Std.Wrappers._IOption<RAST._IType> _source72 = DCOMP.COMP.NewtypeToRustType(_2370_t, _2369_range);
                if (_source72.is_None) {
                } else {
                  RAST._IType _2371___mcc_h26 = _source72.dtor_value;
                  RAST._IType _2372_v = _2371___mcc_h26;
                  s = _2372_v;
                }
              }
            }
          }
        }
      } else if (_source70.is_Nullable) {
        DAST._IType _2373___mcc_h3 = _source70.dtor_Nullable_a0;
        DAST._IType _2374_inner = _2373___mcc_h3;
        {
          RAST._IType _2375_innerExpr;
          RAST._IType _out59;
          _out59 = (this).GenType(_2374_inner, inBinding, inFn);
          _2375_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2375_innerExpr));
        }
      } else if (_source70.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2376___mcc_h4 = _source70.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _2377_types = _2376___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2378_args;
          _2378_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2379_i;
          _2379_i = BigInteger.Zero;
          while ((_2379_i) < (new BigInteger((_2377_types).Count))) {
            RAST._IType _2380_generated;
            RAST._IType _out60;
            _out60 = (this).GenType((_2377_types).Select(_2379_i), inBinding, inFn);
            _2380_generated = _out60;
            _2378_args = Dafny.Sequence<RAST._IType>.Concat(_2378_args, Dafny.Sequence<RAST._IType>.FromElements(_2380_generated));
            _2379_i = (_2379_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2378_args);
        }
      } else if (_source70.is_Array) {
        DAST._IType _2381___mcc_h5 = _source70.dtor_element;
        BigInteger _2382___mcc_h6 = _source70.dtor_dims;
        BigInteger _2383_dims = _2382___mcc_h6;
        DAST._IType _2384_element = _2381___mcc_h5;
        {
          RAST._IType _2385_elem;
          RAST._IType _out61;
          _out61 = (this).GenType(_2384_element, inBinding, inFn);
          _2385_elem = _out61;
          s = _2385_elem;
          BigInteger _2386_i;
          _2386_i = BigInteger.Zero;
          while ((_2386_i) < (_2383_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _2386_i = (_2386_i) + (BigInteger.One);
          }
        }
      } else if (_source70.is_Seq) {
        DAST._IType _2387___mcc_h7 = _source70.dtor_element;
        DAST._IType _2388_element = _2387___mcc_h7;
        {
          RAST._IType _2389_elem;
          RAST._IType _out62;
          _out62 = (this).GenType(_2388_element, inBinding, inFn);
          _2389_elem = _out62;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2389_elem));
        }
      } else if (_source70.is_Set) {
        DAST._IType _2390___mcc_h8 = _source70.dtor_element;
        DAST._IType _2391_element = _2390___mcc_h8;
        {
          RAST._IType _2392_elem;
          RAST._IType _out63;
          _out63 = (this).GenType(_2391_element, inBinding, inFn);
          _2392_elem = _out63;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2392_elem));
        }
      } else if (_source70.is_Multiset) {
        DAST._IType _2393___mcc_h9 = _source70.dtor_element;
        DAST._IType _2394_element = _2393___mcc_h9;
        {
          RAST._IType _2395_elem;
          RAST._IType _out64;
          _out64 = (this).GenType(_2394_element, inBinding, inFn);
          _2395_elem = _out64;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2395_elem));
        }
      } else if (_source70.is_Map) {
        DAST._IType _2396___mcc_h10 = _source70.dtor_key;
        DAST._IType _2397___mcc_h11 = _source70.dtor_value;
        DAST._IType _2398_value = _2397___mcc_h11;
        DAST._IType _2399_key = _2396___mcc_h10;
        {
          RAST._IType _2400_keyType;
          RAST._IType _out65;
          _out65 = (this).GenType(_2399_key, inBinding, inFn);
          _2400_keyType = _out65;
          RAST._IType _2401_valueType;
          RAST._IType _out66;
          _out66 = (this).GenType(_2398_value, inBinding, inFn);
          _2401_valueType = _out66;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2400_keyType, _2401_valueType));
        }
      } else if (_source70.is_SetBuilder) {
        DAST._IType _2402___mcc_h12 = _source70.dtor_element;
        DAST._IType _2403_elem = _2402___mcc_h12;
        {
          RAST._IType _2404_elemType;
          RAST._IType _out67;
          _out67 = (this).GenType(_2403_elem, inBinding, inFn);
          _2404_elemType = _out67;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2404_elemType));
        }
      } else if (_source70.is_MapBuilder) {
        DAST._IType _2405___mcc_h13 = _source70.dtor_key;
        DAST._IType _2406___mcc_h14 = _source70.dtor_value;
        DAST._IType _2407_value = _2406___mcc_h14;
        DAST._IType _2408_key = _2405___mcc_h13;
        {
          RAST._IType _2409_keyType;
          RAST._IType _out68;
          _out68 = (this).GenType(_2408_key, inBinding, inFn);
          _2409_keyType = _out68;
          RAST._IType _2410_valueType;
          RAST._IType _out69;
          _out69 = (this).GenType(_2407_value, inBinding, inFn);
          _2410_valueType = _out69;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2409_keyType, _2410_valueType));
        }
      } else if (_source70.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2411___mcc_h15 = _source70.dtor_args;
        DAST._IType _2412___mcc_h16 = _source70.dtor_result;
        DAST._IType _2413_result = _2412___mcc_h16;
        Dafny.ISequence<DAST._IType> _2414_args = _2411___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2415_argTypes;
          _2415_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2416_i;
          _2416_i = BigInteger.Zero;
          while ((_2416_i) < (new BigInteger((_2414_args).Count))) {
            RAST._IType _2417_generated;
            RAST._IType _out70;
            _out70 = (this).GenType((_2414_args).Select(_2416_i), inBinding, true);
            _2417_generated = _out70;
            _2415_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2415_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2417_generated)));
            _2416_i = (_2416_i) + (BigInteger.One);
          }
          RAST._IType _2418_resultType;
          RAST._IType _out71;
          _out71 = (this).GenType(_2413_result, inBinding, (inFn) || (inBinding));
          _2418_resultType = _out71;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_2415_argTypes, RAST.Type.create_IntersectionType(_2418_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source70.is_Primitive) {
        DAST._IPrimitive _2419___mcc_h17 = _source70.dtor_Primitive_a0;
        DAST._IPrimitive _2420_p = _2419___mcc_h17;
        {
          DAST._IPrimitive _source73 = _2420_p;
          if (_source73.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source73.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source73.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel((this).DafnyChar)));
          } else if (_source73.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel((this).DafnyChar);
          }
        }
      } else if (_source70.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2421___mcc_h18 = _source70.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _2422_v = _2421___mcc_h18;
        s = RAST.__default.RawType(_2422_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2423___mcc_h19 = _source70.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source74 = _2423___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2424___mcc_h20 = _source74;
        Dafny.ISequence<Dafny.Rune> _2425_name = _2424___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_2425_name));
      }
      return s;
    }
    public void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _2426_i;
      _2426_i = BigInteger.Zero;
      while ((_2426_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source75 = (body).Select(_2426_i);
        DAST._IMethod _2427___mcc_h0 = _source75;
        DAST._IMethod _2428_m = _2427___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source76 = (_2428_m).dtor_overridingPath;
          if (_source76.is_None) {
            {
              RAST._IImplMember _2429_generated;
              RAST._IImplMember _out72;
              _out72 = (this).GenMethod(_2428_m, forTrait, enclosingType, enclosingTypeParams);
              _2429_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2429_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2430___mcc_h1 = _source76.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2431_p = _2430___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2432_existing;
              _2432_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2431_p)) {
                _2432_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2431_p);
              }
              RAST._IImplMember _2433_genMethod;
              RAST._IImplMember _out73;
              _out73 = (this).GenMethod(_2428_m, true, enclosingType, enclosingTypeParams);
              _2433_genMethod = _out73;
              _2432_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2432_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2433_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2431_p, _2432_existing)));
            }
          }
        }
        _2426_i = (_2426_i) + (BigInteger.One);
      }
    }
    public Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _2434_i;
      _2434_i = BigInteger.Zero;
      while ((_2434_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _2435_param;
        _2435_param = (@params).Select(_2434_i);
        RAST._IType _2436_paramType;
        RAST._IType _out74;
        _out74 = (this).GenType((_2435_param).dtor_typ, false, false);
        _2436_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2435_param).dtor_name), RAST.Type.create_Borrowed(_2436_paramType))));
        _2434_i = (_2434_i) + (BigInteger.One);
      }
      return s;
    }
    public RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2437_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = (this).GenParams((m).dtor_params);
      _2437_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2438_paramNames;
      _2438_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2439_paramI;
      _2439_paramI = BigInteger.Zero;
      while ((_2439_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _2438_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2438_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_2439_paramI)).dtor_name));
        _2439_paramI = (_2439_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _2437_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _2437_params);
        } else {
          RAST._IType _2440_tpe;
          RAST._IType _out76;
          _out76 = (this).GenType(enclosingType, false, false);
          _2440_tpe = _out76;
          _2437_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_2440_tpe))), _2437_params);
        }
      }
      Dafny.ISequence<RAST._IType> _2441_retTypeArgs;
      _2441_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2442_typeI;
      _2442_typeI = BigInteger.Zero;
      while ((_2442_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2443_typeExpr;
        RAST._IType _out77;
        _out77 = (this).GenType(((m).dtor_outTypes).Select(_2442_typeI), false, false);
        _2443_typeExpr = _out77;
        _2441_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2441_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2443_typeExpr));
        _2442_typeI = (_2442_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2444_visibility;
      _2444_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _2445_fnName;
      _2445_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _2446_typeParamsFiltered;
      _2446_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _2447_typeParamI;
      _2447_typeParamI = BigInteger.Zero;
      while ((_2447_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _2448_typeParam;
        _2448_typeParam = ((m).dtor_typeParams).Select(_2447_typeParamI);
        if (!((enclosingTypeParams).Contains(_2448_typeParam))) {
          _2446_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_2446_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_2448_typeParam));
        }
        _2447_typeParamI = (_2447_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2449_whereClauses;
      _2449_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _2450_typeParams;
      _2450_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_2446_typeParamsFiltered).Count)).Sign == 1) {
        _2449_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_2449_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _2451_i;
        _2451_i = BigInteger.Zero;
        while ((_2451_i) < (new BigInteger((_2446_typeParamsFiltered).Count))) {
          RAST._IType _2452_typeExpr;
          RAST._IType _out78;
          _out78 = (this).GenType((_2446_typeParamsFiltered).Select(_2451_i), false, false);
          _2452_typeExpr = _out78;
          _2450_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_2450_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2452_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _2451_i = (_2451_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2453_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2454_earlyReturn;
        _2454_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source77 = (m).dtor_outVars;
        if (_source77.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2455___mcc_h0 = _source77.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2456_outVars = _2455___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _2457_tupleArgs;
            _2457_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _2458_outI;
            _2458_outI = BigInteger.Zero;
            while ((_2458_outI) < (new BigInteger((_2456_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2459_outVar;
              _2459_outVar = (_2456_outVars).Select(_2458_outI);
              _2457_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2457_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2459_outVar)))));
              _2458_outI = (_2458_outI) + (BigInteger.One);
            }
            _2454_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2457_tupleArgs)));
          }
        }
        RAST._IExpr _2460_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2461___v44;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        (this).GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _2438_paramNames, true, _2454_earlyReturn, out _out79, out _out80);
        _2460_body = _out79;
        _2461___v44 = _out80;
        _2453_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2460_body);
      } else {
        _2453_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2444_visibility, RAST.Fn.create(_2445_fnName, _2450_typeParams, _2437_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2441_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2441_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2441_retTypeArgs)))), _2449_whereClauses, _2453_fBody));
      return s;
    }
    public void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2462_declarations;
      _2462_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2463_i;
      _2463_i = BigInteger.Zero;
      while ((_2463_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2464_stmt;
        _2464_stmt = (stmts).Select(_2463_i);
        RAST._IExpr _2465_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        (this).GenStmt(_2464_stmt, selfIdent, @params, (isLast) && ((_2463_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2465_stmtExpr = _out81;
        _2466_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2466_recIdents, _2462_declarations));
        DAST._IStatement _source78 = _2464_stmt;
        if (_source78.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2467___mcc_h0 = _source78.dtor_name;
          DAST._IType _2468___mcc_h1 = _source78.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2469___mcc_h2 = _source78.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2470_name = _2467___mcc_h0;
          {
            _2462_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2462_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2470_name));
          }
        } else if (_source78.is_Assign) {
          DAST._IAssignLhs _2471___mcc_h6 = _source78.dtor_lhs;
          DAST._IExpression _2472___mcc_h7 = _source78.dtor_value;
        } else if (_source78.is_If) {
          DAST._IExpression _2473___mcc_h10 = _source78.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2474___mcc_h11 = _source78.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2475___mcc_h12 = _source78.dtor_els;
        } else if (_source78.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2476___mcc_h16 = _source78.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2477___mcc_h17 = _source78.dtor_body;
        } else if (_source78.is_While) {
          DAST._IExpression _2478___mcc_h20 = _source78.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2479___mcc_h21 = _source78.dtor_body;
        } else if (_source78.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2480___mcc_h24 = _source78.dtor_boundName;
          DAST._IType _2481___mcc_h25 = _source78.dtor_boundType;
          DAST._IExpression _2482___mcc_h26 = _source78.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2483___mcc_h27 = _source78.dtor_body;
        } else if (_source78.is_Call) {
          DAST._IExpression _2484___mcc_h32 = _source78.dtor_on;
          DAST._ICallName _2485___mcc_h33 = _source78.dtor_callName;
          Dafny.ISequence<DAST._IType> _2486___mcc_h34 = _source78.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2487___mcc_h35 = _source78.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2488___mcc_h36 = _source78.dtor_outs;
        } else if (_source78.is_Return) {
          DAST._IExpression _2489___mcc_h42 = _source78.dtor_expr;
        } else if (_source78.is_EarlyReturn) {
        } else if (_source78.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2490___mcc_h44 = _source78.dtor_toLabel;
        } else if (_source78.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2491___mcc_h46 = _source78.dtor_body;
        } else if (_source78.is_JumpTailCallStart) {
        } else if (_source78.is_Halt) {
        } else {
          DAST._IExpression _2492___mcc_h48 = _source78.dtor_Print_a0;
        }
        generated = (generated).Then(_2465_stmtExpr);
        _2463_i = (_2463_i) + (BigInteger.One);
      }
    }
    public void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source79 = lhs;
      if (_source79.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2493___mcc_h0 = _source79.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source80 = _2493___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2494___mcc_h1 = _source80;
        Dafny.ISequence<Dafny.Rune> _2495_id = _2494___mcc_h1;
        {
          if ((@params).Contains(_2495_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2495_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2495_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2495_id);
          needsIIFE = false;
        }
      } else if (_source79.is_Select) {
        DAST._IExpression _2496___mcc_h2 = _source79.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2497___mcc_h3 = _source79.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2498_field = _2497___mcc_h3;
        DAST._IExpression _2499_on = _2496___mcc_h2;
        {
          RAST._IExpr _2500_onExpr;
          DCOMP._IOwnership _2501_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2502_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          (this).GenExpr(_2499_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2500_onExpr = _out83;
          _2501_onOwned = _out84;
          _2502_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2500_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2498_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2502_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2503___mcc_h4 = _source79.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2504___mcc_h5 = _source79.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2505_indices = _2504___mcc_h5;
        DAST._IExpression _2506_on = _2503___mcc_h4;
        {
          RAST._IExpr _2507_onExpr;
          DCOMP._IOwnership _2508_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2509_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          (this).GenExpr(_2506_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2507_onExpr = _out86;
          _2508_onOwned = _out87;
          _2509_recIdents = _out88;
          readIdents = _2509_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2510_i;
          _2510_i = BigInteger.Zero;
          while ((_2510_i) < (new BigInteger((_2505_indices).Count))) {
            RAST._IExpr _2511_idx;
            DCOMP._IOwnership _2512___v48;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2513_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            (this).GenExpr((_2505_indices).Select(_2510_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2511_idx = _out89;
            _2512___v48 = _out90;
            _2513_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2510_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2511_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2513_recIdentsIdx);
            _2510_i = (_2510_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2507_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2510_i = BigInteger.Zero;
          while ((_2510_i) < (new BigInteger((_2505_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2510_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2510_i = (_2510_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source81 = stmt;
      if (_source81.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2514___mcc_h0 = _source81.dtor_name;
        DAST._IType _2515___mcc_h1 = _source81.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2516___mcc_h2 = _source81.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source82 = _2516___mcc_h2;
        if (_source82.is_None) {
          DAST._IType _2517_typ = _2515___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2518_name = _2514___mcc_h0;
          {
            RAST._IType _2519_typeString;
            RAST._IType _out92;
            _out92 = (this).GenType(_2517_typ, true, false);
            _2519_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2518_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2519_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2520___mcc_h3 = _source82.dtor_value;
          DAST._IExpression _2521_expression = _2520___mcc_h3;
          DAST._IType _2522_typ = _2515___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2523_name = _2514___mcc_h0;
          {
            RAST._IType _2524_typeString;
            RAST._IType _out93;
            _out93 = (this).GenType(_2522_typ, true, false);
            _2524_typeString = _out93;
            RAST._IExpr _2525_expr;
            DCOMP._IOwnership _2526___v49;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2527_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            (this).GenExpr(_2521_expression, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2525_expr = _out94;
            _2526___v49 = _out95;
            _2527_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2523_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2524_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2525_expr));
            readIdents = _2527_recIdents;
          }
        }
      } else if (_source81.is_Assign) {
        DAST._IAssignLhs _2528___mcc_h4 = _source81.dtor_lhs;
        DAST._IExpression _2529___mcc_h5 = _source81.dtor_value;
        DAST._IExpression _2530_expression = _2529___mcc_h5;
        DAST._IAssignLhs _2531_lhs = _2528___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _2532_lhsGen;
          bool _2533_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2534_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          (this).GenAssignLhs(_2531_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out97, out _out98, out _out99);
          _2532_lhsGen = _out97;
          _2533_needsIIFE = _out98;
          _2534_recIdents = _out99;
          RAST._IExpr _2535_exprGen;
          DCOMP._IOwnership _2536___v50;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2537_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          (this).GenExpr(_2530_expression, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _2535_exprGen = _out100;
          _2536___v50 = _out101;
          _2537_exprIdents = _out102;
          if (_2533_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2535_exprGen)), RAST.Expr.create_RawExpr(_2532_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_2532_lhsGen, _2535_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2534_recIdents, _2537_exprIdents);
        }
      } else if (_source81.is_If) {
        DAST._IExpression _2538___mcc_h6 = _source81.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2539___mcc_h7 = _source81.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _2540___mcc_h8 = _source81.dtor_els;
        Dafny.ISequence<DAST._IStatement> _2541_els = _2540___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _2542_thn = _2539___mcc_h7;
        DAST._IExpression _2543_cond = _2538___mcc_h6;
        {
          RAST._IExpr _2544_cond;
          DCOMP._IOwnership _2545___v51;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          (this).GenExpr(_2543_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _2544_cond = _out103;
          _2545___v51 = _out104;
          _2546_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _2547_condString;
          _2547_condString = (_2544_cond)._ToString(DCOMP.__default.IND);
          readIdents = _2546_recIdents;
          RAST._IExpr _2548_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          (this).GenStmts(_2542_thn, selfIdent, @params, isLast, earlyReturn, out _out106, out _out107);
          _2548_thn = _out106;
          _2549_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2549_thnIdents);
          RAST._IExpr _2550_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2551_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          (this).GenStmts(_2541_els, selfIdent, @params, isLast, earlyReturn, out _out108, out _out109);
          _2550_els = _out108;
          _2551_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2551_elsIdents);
          generated = RAST.Expr.create_IfExpr(_2544_cond, _2548_thn, _2550_els);
        }
      } else if (_source81.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _2552___mcc_h9 = _source81.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _2553___mcc_h10 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2554_body = _2553___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _2555_lbl = _2552___mcc_h9;
        {
          RAST._IExpr _2556_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          (this).GenStmts(_2554_body, selfIdent, @params, isLast, earlyReturn, out _out110, out _out111);
          _2556_body = _out110;
          _2557_bodyIdents = _out111;
          readIdents = _2557_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2555_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_2556_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source81.is_While) {
        DAST._IExpression _2558___mcc_h11 = _source81.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2559___mcc_h12 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2560_body = _2559___mcc_h12;
        DAST._IExpression _2561_cond = _2558___mcc_h11;
        {
          RAST._IExpr _2562_cond;
          DCOMP._IOwnership _2563___v52;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2564_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          (this).GenExpr(_2561_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _2562_cond = _out112;
          _2563___v52 = _out113;
          _2564_recIdents = _out114;
          readIdents = _2564_recIdents;
          RAST._IExpr _2565_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          (this).GenStmts(_2560_body, selfIdent, @params, false, earlyReturn, out _out115, out _out116);
          _2565_body = _out115;
          _2566_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2566_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2562_cond), _2565_body);
        }
      } else if (_source81.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _2567___mcc_h13 = _source81.dtor_boundName;
        DAST._IType _2568___mcc_h14 = _source81.dtor_boundType;
        DAST._IExpression _2569___mcc_h15 = _source81.dtor_over;
        Dafny.ISequence<DAST._IStatement> _2570___mcc_h16 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2571_body = _2570___mcc_h16;
        DAST._IExpression _2572_over = _2569___mcc_h15;
        DAST._IType _2573_boundType = _2568___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _2574_boundName = _2567___mcc_h13;
        {
          RAST._IExpr _2575_over;
          DCOMP._IOwnership _2576___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          (this).GenExpr(_2572_over, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _2575_over = _out117;
          _2576___v53 = _out118;
          _2577_recIdents = _out119;
          RAST._IType _2578_boundTypeStr;
          RAST._IType _out120;
          _out120 = (this).GenType(_2573_boundType, false, false);
          _2578_boundTypeStr = _out120;
          readIdents = _2577_recIdents;
          RAST._IExpr _2579_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2580_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          (this).GenStmts(_2571_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2574_boundName)), false, earlyReturn, out _out121, out _out122);
          _2579_body = _out121;
          _2580_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2580_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2574_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_2574_boundName), _2575_over, _2579_body);
        }
      } else if (_source81.is_Call) {
        DAST._IExpression _2581___mcc_h17 = _source81.dtor_on;
        DAST._ICallName _2582___mcc_h18 = _source81.dtor_callName;
        Dafny.ISequence<DAST._IType> _2583___mcc_h19 = _source81.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2584___mcc_h20 = _source81.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2585___mcc_h21 = _source81.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2586_maybeOutVars = _2585___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _2587_args = _2584___mcc_h20;
        Dafny.ISequence<DAST._IType> _2588_typeArgs = _2583___mcc_h19;
        DAST._ICallName _2589_name = _2582___mcc_h18;
        DAST._IExpression _2590_on = _2581___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2591_typeArgString;
          _2591_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2588_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2592_typeI;
            _2592_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2593_typeArgsR;
            _2593_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2592_typeI) < (new BigInteger((_2588_typeArgs).Count))) {
              RAST._IType _2594_tpe;
              RAST._IType _out123;
              _out123 = (this).GenType((_2588_typeArgs).Select(_2592_typeI), false, false);
              _2594_tpe = _out123;
              _2593_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_2593_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_2594_tpe));
              _2592_typeI = (_2592_typeI) + (BigInteger.One);
            }
            _2591_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2593_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _2595_argString;
          _2595_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2596_i;
          _2596_i = BigInteger.Zero;
          while ((_2596_i) < (new BigInteger((_2587_args).Count))) {
            if ((_2596_i).Sign == 1) {
              _2595_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2595_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2597_argExpr;
            DCOMP._IOwnership _2598_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            (this).GenExpr((_2587_args).Select(_2596_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _2597_argExpr = _out124;
            _2598_ownership = _out125;
            _2599_argIdents = _out126;
            Dafny.ISequence<Dafny.Rune> _2600_argExprString;
            _2600_argExprString = (_2597_argExpr)._ToString(DCOMP.__default.IND);
            _2595_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2595_argString, _2600_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2599_argIdents);
            _2596_i = (_2596_i) + (BigInteger.One);
          }
          RAST._IExpr _2601_onExpr;
          DCOMP._IOwnership _2602___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2603_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          (this).GenExpr(_2590_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out127, out _out128, out _out129);
          _2601_onExpr = _out127;
          _2602___v54 = _out128;
          _2603_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2603_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _2604_enclosingString;
          _2604_enclosingString = (_2601_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source83 = _2590_on;
          if (_source83.is_Literal) {
            DAST._ILiteral _2605___mcc_h26 = _source83.dtor_Literal_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2606___mcc_h28 = _source83.dtor_Ident_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2607___mcc_h30 = _source83.dtor_Companion_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_2604_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source83.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2608___mcc_h32 = _source83.dtor_Tuple_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2609___mcc_h34 = _source83.dtor_path;
            Dafny.ISequence<DAST._IType> _2610___mcc_h35 = _source83.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2611___mcc_h36 = _source83.dtor_args;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2612___mcc_h40 = _source83.dtor_dims;
            DAST._IType _2613___mcc_h41 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2614___mcc_h44 = _source83.dtor_path;
            Dafny.ISequence<DAST._IType> _2615___mcc_h45 = _source83.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2616___mcc_h46 = _source83.dtor_variant;
            bool _2617___mcc_h47 = _source83.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2618___mcc_h48 = _source83.dtor_contents;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Convert) {
            DAST._IExpression _2619___mcc_h54 = _source83.dtor_value;
            DAST._IType _2620___mcc_h55 = _source83.dtor_from;
            DAST._IType _2621___mcc_h56 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqConstruct) {
            DAST._IExpression _2622___mcc_h60 = _source83.dtor_length;
            DAST._IExpression _2623___mcc_h61 = _source83.dtor_elem;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2624___mcc_h64 = _source83.dtor_elements;
            DAST._IType _2625___mcc_h65 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2626___mcc_h68 = _source83.dtor_elements;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _2627___mcc_h70 = _source83.dtor_elements;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2628___mcc_h72 = _source83.dtor_mapElems;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapBuilder) {
            DAST._IType _2629___mcc_h74 = _source83.dtor_keyType;
            DAST._IType _2630___mcc_h75 = _source83.dtor_valueType;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqUpdate) {
            DAST._IExpression _2631___mcc_h78 = _source83.dtor_expr;
            DAST._IExpression _2632___mcc_h79 = _source83.dtor_indexExpr;
            DAST._IExpression _2633___mcc_h80 = _source83.dtor_value;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapUpdate) {
            DAST._IExpression _2634___mcc_h84 = _source83.dtor_expr;
            DAST._IExpression _2635___mcc_h85 = _source83.dtor_indexExpr;
            DAST._IExpression _2636___mcc_h86 = _source83.dtor_value;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SetBuilder) {
            DAST._IType _2637___mcc_h90 = _source83.dtor_elemType;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_ToMultiset) {
            DAST._IExpression _2638___mcc_h92 = _source83.dtor_ToMultiset_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_This) {
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Ite) {
            DAST._IExpression _2639___mcc_h94 = _source83.dtor_cond;
            DAST._IExpression _2640___mcc_h95 = _source83.dtor_thn;
            DAST._IExpression _2641___mcc_h96 = _source83.dtor_els;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_UnOp) {
            DAST._IUnaryOp _2642___mcc_h100 = _source83.dtor_unOp;
            DAST._IExpression _2643___mcc_h101 = _source83.dtor_expr;
            DAST.Format._IUnaryOpFormat _2644___mcc_h102 = _source83.dtor_format1;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_BinOp) {
            DAST._IBinOp _2645___mcc_h106 = _source83.dtor_op;
            DAST._IExpression _2646___mcc_h107 = _source83.dtor_left;
            DAST._IExpression _2647___mcc_h108 = _source83.dtor_right;
            DAST.Format._IBinaryOpFormat _2648___mcc_h109 = _source83.dtor_format2;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_ArrayLen) {
            DAST._IExpression _2649___mcc_h114 = _source83.dtor_expr;
            BigInteger _2650___mcc_h115 = _source83.dtor_dim;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapKeys) {
            DAST._IExpression _2651___mcc_h118 = _source83.dtor_expr;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapValues) {
            DAST._IExpression _2652___mcc_h120 = _source83.dtor_expr;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Select) {
            DAST._IExpression _2653___mcc_h122 = _source83.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2654___mcc_h123 = _source83.dtor_field;
            bool _2655___mcc_h124 = _source83.dtor_isConstant;
            bool _2656___mcc_h125 = _source83.dtor_onDatatype;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SelectFn) {
            DAST._IExpression _2657___mcc_h130 = _source83.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2658___mcc_h131 = _source83.dtor_field;
            bool _2659___mcc_h132 = _source83.dtor_onDatatype;
            bool _2660___mcc_h133 = _source83.dtor_isStatic;
            BigInteger _2661___mcc_h134 = _source83.dtor_arity;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Index) {
            DAST._IExpression _2662___mcc_h140 = _source83.dtor_expr;
            DAST._ICollKind _2663___mcc_h141 = _source83.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2664___mcc_h142 = _source83.dtor_indices;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_IndexRange) {
            DAST._IExpression _2665___mcc_h146 = _source83.dtor_expr;
            bool _2666___mcc_h147 = _source83.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2667___mcc_h148 = _source83.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2668___mcc_h149 = _source83.dtor_high;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_TupleSelect) {
            DAST._IExpression _2669___mcc_h154 = _source83.dtor_expr;
            BigInteger _2670___mcc_h155 = _source83.dtor_index;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Call) {
            DAST._IExpression _2671___mcc_h158 = _source83.dtor_on;
            DAST._ICallName _2672___mcc_h159 = _source83.dtor_callName;
            Dafny.ISequence<DAST._IType> _2673___mcc_h160 = _source83.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2674___mcc_h161 = _source83.dtor_args;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2675___mcc_h166 = _source83.dtor_params;
            DAST._IType _2676___mcc_h167 = _source83.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2677___mcc_h168 = _source83.dtor_body;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2678___mcc_h172 = _source83.dtor_values;
            DAST._IType _2679___mcc_h173 = _source83.dtor_retType;
            DAST._IExpression _2680___mcc_h174 = _source83.dtor_expr;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2681___mcc_h178 = _source83.dtor_name;
            DAST._IType _2682___mcc_h179 = _source83.dtor_typ;
            DAST._IExpression _2683___mcc_h180 = _source83.dtor_value;
            DAST._IExpression _2684___mcc_h181 = _source83.dtor_iifeBody;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Apply) {
            DAST._IExpression _2685___mcc_h186 = _source83.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2686___mcc_h187 = _source83.dtor_args;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_TypeTest) {
            DAST._IExpression _2687___mcc_h190 = _source83.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2688___mcc_h191 = _source83.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2689___mcc_h192 = _source83.dtor_variant;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_InitializationValue) {
            DAST._IType _2690___mcc_h196 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_BoolBoundedPool) {
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SetBoundedPool) {
            DAST._IExpression _2691___mcc_h198 = _source83.dtor_of;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqBoundedPool) {
            DAST._IExpression _2692___mcc_h200 = _source83.dtor_of;
            bool _2693___mcc_h201 = _source83.dtor_includeDuplicates;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2694___mcc_h204 = _source83.dtor_lo;
            DAST._IExpression _2695___mcc_h205 = _source83.dtor_hi;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2696_receiver;
          _2696_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source84 = _2586_maybeOutVars;
          if (_source84.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2697___mcc_h208 = _source84.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2698_outVars = _2697___mcc_h208;
            {
              if ((new BigInteger((_2698_outVars).Count)) > (BigInteger.One)) {
                _2696_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2699_outI;
              _2699_outI = BigInteger.Zero;
              while ((_2699_outI) < (new BigInteger((_2698_outVars).Count))) {
                if ((_2699_outI).Sign == 1) {
                  _2696_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2700_outVar;
                _2700_outVar = (_2698_outVars).Select(_2699_outI);
                _2696_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, (_2700_outVar));
                _2699_outI = (_2699_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2698_outVars).Count)) > (BigInteger.One)) {
                _2696_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _2701_renderedName;
          _2701_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source85) => {
            if (_source85.is_Name) {
              Dafny.ISequence<Dafny.Rune> _2702___mcc_h209 = _source85.dtor_name;
              Dafny.ISequence<Dafny.Rune> _2703_name = _2702___mcc_h209;
              return DCOMP.__default.escapeIdent(_2703_name);
            } else if (_source85.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source85.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source85.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_2589_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2696_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _2604_enclosingString), _2701_renderedName), _2591_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2595_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source81.is_Return) {
        DAST._IExpression _2704___mcc_h22 = _source81.dtor_expr;
        DAST._IExpression _2705_expr = _2704___mcc_h22;
        {
          RAST._IExpr _2706_expr;
          DCOMP._IOwnership _2707___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          (this).GenExpr(_2705_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _2706_expr = _out130;
          _2707___v57 = _out131;
          _2708_recIdents = _out132;
          readIdents = _2708_recIdents;
          if (isLast) {
            generated = _2706_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2706_expr));
          }
        }
      } else if (_source81.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source81.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2709___mcc_h23 = _source81.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2710_toLabel = _2709___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source86 = _2710_toLabel;
          if (_source86.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2711___mcc_h210 = _source86.dtor_value;
            Dafny.ISequence<Dafny.Rune> _2712_lbl = _2711___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2712_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source81.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2713___mcc_h24 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2714_body = _2713___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _2715_paramI;
          _2715_paramI = BigInteger.Zero;
          while ((_2715_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _2716_param;
            _2716_param = (@params).Select(_2715_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2716_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_2716_param))))));
            _2715_paramI = (_2715_paramI) + (BigInteger.One);
          }
          RAST._IExpr _2717_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          (this).GenStmts(_2714_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out133, out _out134);
          _2717_body = _out133;
          _2718_bodyIdents = _out134;
          readIdents = _2718_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _2717_body)));
        }
      } else if (_source81.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source81.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2719___mcc_h25 = _source81.dtor_Print_a0;
        DAST._IExpression _2720_e = _2719___mcc_h25;
        {
          RAST._IExpr _2721_printedExpr;
          DCOMP._IOwnership _2722_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2723_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          (this).GenExpr(_2720_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _2721_printedExpr = _out135;
          _2722_recOwnership = _out136;
          _2723_recIdents = _out137;
          Dafny.ISequence<Dafny.Rune> _2724_printedExprString;
          _2724_printedExprString = (_2721_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2724_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _2723_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source87 = range;
      if (_source87.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source87.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source87.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source87.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source87.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source87.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source87.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source87.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source87.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source87.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source87.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out138;
        DCOMP._IOwnership _out139;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out138, out _out139);
        @out = _out138;
        resultingOwnership = _out139;
        return ;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static bool OwnershipGuarantee(DCOMP._IOwnership expectedOwnership, DCOMP._IOwnership resultingOwnership)
    {
      return (!(!object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) || (object.Equals(resultingOwnership, expectedOwnership))) && (!object.Equals(resultingOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()));
    }
    public void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source88 = e;
      DAST._ILiteral _2725___mcc_h0 = _source88.dtor_Literal_a0;
      DAST._ILiteral _source89 = _2725___mcc_h0;
      if (_source89.is_BoolLiteral) {
        bool _2726___mcc_h1 = _source89.dtor_BoolLiteral_a0;
        if ((_2726___mcc_h1) == (false)) {
          {
            RAST._IExpr _out140;
            DCOMP._IOwnership _out141;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out140, out _out141);
            r = _out140;
            resultingOwnership = _out141;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out142;
            DCOMP._IOwnership _out143;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out142, out _out143);
            r = _out142;
            resultingOwnership = _out143;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source89.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _2727___mcc_h2 = _source89.dtor_IntLiteral_a0;
        DAST._IType _2728___mcc_h3 = _source89.dtor_IntLiteral_a1;
        DAST._IType _2729_t = _2728___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _2730_i = _2727___mcc_h2;
        {
          DAST._IType _source90 = _2729_t;
          if (_source90.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2731___mcc_h100 = _source90.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2732___mcc_h101 = _source90.dtor_typeArgs;
            DAST._IResolvedType _2733___mcc_h102 = _source90.dtor_resolved;
            DAST._IType _2734_o = _2729_t;
            {
              RAST._IType _2735_genType;
              RAST._IType _out144;
              _out144 = (this).GenType(_2734_o, false, false);
              _2735_genType = _out144;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2735_genType);
            }
          } else if (_source90.is_Nullable) {
            DAST._IType _2736___mcc_h106 = _source90.dtor_Nullable_a0;
            DAST._IType _2737_o = _2729_t;
            {
              RAST._IType _2738_genType;
              RAST._IType _out145;
              _out145 = (this).GenType(_2737_o, false, false);
              _2738_genType = _out145;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2738_genType);
            }
          } else if (_source90.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2739___mcc_h108 = _source90.dtor_Tuple_a0;
            DAST._IType _2740_o = _2729_t;
            {
              RAST._IType _2741_genType;
              RAST._IType _out146;
              _out146 = (this).GenType(_2740_o, false, false);
              _2741_genType = _out146;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2741_genType);
            }
          } else if (_source90.is_Array) {
            DAST._IType _2742___mcc_h110 = _source90.dtor_element;
            BigInteger _2743___mcc_h111 = _source90.dtor_dims;
            DAST._IType _2744_o = _2729_t;
            {
              RAST._IType _2745_genType;
              RAST._IType _out147;
              _out147 = (this).GenType(_2744_o, false, false);
              _2745_genType = _out147;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2745_genType);
            }
          } else if (_source90.is_Seq) {
            DAST._IType _2746___mcc_h114 = _source90.dtor_element;
            DAST._IType _2747_o = _2729_t;
            {
              RAST._IType _2748_genType;
              RAST._IType _out148;
              _out148 = (this).GenType(_2747_o, false, false);
              _2748_genType = _out148;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2748_genType);
            }
          } else if (_source90.is_Set) {
            DAST._IType _2749___mcc_h116 = _source90.dtor_element;
            DAST._IType _2750_o = _2729_t;
            {
              RAST._IType _2751_genType;
              RAST._IType _out149;
              _out149 = (this).GenType(_2750_o, false, false);
              _2751_genType = _out149;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2751_genType);
            }
          } else if (_source90.is_Multiset) {
            DAST._IType _2752___mcc_h118 = _source90.dtor_element;
            DAST._IType _2753_o = _2729_t;
            {
              RAST._IType _2754_genType;
              RAST._IType _out150;
              _out150 = (this).GenType(_2753_o, false, false);
              _2754_genType = _out150;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2754_genType);
            }
          } else if (_source90.is_Map) {
            DAST._IType _2755___mcc_h120 = _source90.dtor_key;
            DAST._IType _2756___mcc_h121 = _source90.dtor_value;
            DAST._IType _2757_o = _2729_t;
            {
              RAST._IType _2758_genType;
              RAST._IType _out151;
              _out151 = (this).GenType(_2757_o, false, false);
              _2758_genType = _out151;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2758_genType);
            }
          } else if (_source90.is_SetBuilder) {
            DAST._IType _2759___mcc_h124 = _source90.dtor_element;
            DAST._IType _2760_o = _2729_t;
            {
              RAST._IType _2761_genType;
              RAST._IType _out152;
              _out152 = (this).GenType(_2760_o, false, false);
              _2761_genType = _out152;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2761_genType);
            }
          } else if (_source90.is_MapBuilder) {
            DAST._IType _2762___mcc_h126 = _source90.dtor_key;
            DAST._IType _2763___mcc_h127 = _source90.dtor_value;
            DAST._IType _2764_o = _2729_t;
            {
              RAST._IType _2765_genType;
              RAST._IType _out153;
              _out153 = (this).GenType(_2764_o, false, false);
              _2765_genType = _out153;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2765_genType);
            }
          } else if (_source90.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2766___mcc_h130 = _source90.dtor_args;
            DAST._IType _2767___mcc_h131 = _source90.dtor_result;
            DAST._IType _2768_o = _2729_t;
            {
              RAST._IType _2769_genType;
              RAST._IType _out154;
              _out154 = (this).GenType(_2768_o, false, false);
              _2769_genType = _out154;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2769_genType);
            }
          } else if (_source90.is_Primitive) {
            DAST._IPrimitive _2770___mcc_h134 = _source90.dtor_Primitive_a0;
            DAST._IPrimitive _source91 = _2770___mcc_h134;
            if (_source91.is_Int) {
              {
                if ((new BigInteger((_2730_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_2730_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_2730_i, true));
                }
              }
            } else if (_source91.is_Real) {
              DAST._IType _2771_o = _2729_t;
              {
                RAST._IType _2772_genType;
                RAST._IType _out155;
                _out155 = (this).GenType(_2771_o, false, false);
                _2772_genType = _out155;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2772_genType);
              }
            } else if (_source91.is_String) {
              DAST._IType _2773_o = _2729_t;
              {
                RAST._IType _2774_genType;
                RAST._IType _out156;
                _out156 = (this).GenType(_2773_o, false, false);
                _2774_genType = _out156;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2774_genType);
              }
            } else if (_source91.is_Bool) {
              DAST._IType _2775_o = _2729_t;
              {
                RAST._IType _2776_genType;
                RAST._IType _out157;
                _out157 = (this).GenType(_2775_o, false, false);
                _2776_genType = _out157;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2776_genType);
              }
            } else {
              DAST._IType _2777_o = _2729_t;
              {
                RAST._IType _2778_genType;
                RAST._IType _out158;
                _out158 = (this).GenType(_2777_o, false, false);
                _2778_genType = _out158;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2778_genType);
              }
            }
          } else if (_source90.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2779___mcc_h136 = _source90.dtor_Passthrough_a0;
            DAST._IType _2780_o = _2729_t;
            {
              RAST._IType _2781_genType;
              RAST._IType _out159;
              _out159 = (this).GenType(_2780_o, false, false);
              _2781_genType = _out159;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2781_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2782___mcc_h138 = _source90.dtor_TypeArg_a0;
            DAST._IType _2783_o = _2729_t;
            {
              RAST._IType _2784_genType;
              RAST._IType _out160;
              _out160 = (this).GenType(_2783_o, false, false);
              _2784_genType = _out160;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2784_genType);
            }
          }
          RAST._IExpr _out161;
          DCOMP._IOwnership _out162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out161, out _out162);
          r = _out161;
          resultingOwnership = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source89.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _2785___mcc_h4 = _source89.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _2786___mcc_h5 = _source89.dtor_DecLiteral_a1;
        DAST._IType _2787___mcc_h6 = _source89.dtor_DecLiteral_a2;
        DAST._IType _2788_t = _2787___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _2789_d = _2786___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _2790_n = _2785___mcc_h4;
        {
          DAST._IType _source92 = _2788_t;
          if (_source92.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2791___mcc_h140 = _source92.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2792___mcc_h141 = _source92.dtor_typeArgs;
            DAST._IResolvedType _2793___mcc_h142 = _source92.dtor_resolved;
            DAST._IType _2794_o = _2788_t;
            {
              RAST._IType _2795_genType;
              RAST._IType _out163;
              _out163 = (this).GenType(_2794_o, false, false);
              _2795_genType = _out163;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2795_genType);
            }
          } else if (_source92.is_Nullable) {
            DAST._IType _2796___mcc_h146 = _source92.dtor_Nullable_a0;
            DAST._IType _2797_o = _2788_t;
            {
              RAST._IType _2798_genType;
              RAST._IType _out164;
              _out164 = (this).GenType(_2797_o, false, false);
              _2798_genType = _out164;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2798_genType);
            }
          } else if (_source92.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2799___mcc_h148 = _source92.dtor_Tuple_a0;
            DAST._IType _2800_o = _2788_t;
            {
              RAST._IType _2801_genType;
              RAST._IType _out165;
              _out165 = (this).GenType(_2800_o, false, false);
              _2801_genType = _out165;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2801_genType);
            }
          } else if (_source92.is_Array) {
            DAST._IType _2802___mcc_h150 = _source92.dtor_element;
            BigInteger _2803___mcc_h151 = _source92.dtor_dims;
            DAST._IType _2804_o = _2788_t;
            {
              RAST._IType _2805_genType;
              RAST._IType _out166;
              _out166 = (this).GenType(_2804_o, false, false);
              _2805_genType = _out166;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2805_genType);
            }
          } else if (_source92.is_Seq) {
            DAST._IType _2806___mcc_h154 = _source92.dtor_element;
            DAST._IType _2807_o = _2788_t;
            {
              RAST._IType _2808_genType;
              RAST._IType _out167;
              _out167 = (this).GenType(_2807_o, false, false);
              _2808_genType = _out167;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2808_genType);
            }
          } else if (_source92.is_Set) {
            DAST._IType _2809___mcc_h156 = _source92.dtor_element;
            DAST._IType _2810_o = _2788_t;
            {
              RAST._IType _2811_genType;
              RAST._IType _out168;
              _out168 = (this).GenType(_2810_o, false, false);
              _2811_genType = _out168;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2811_genType);
            }
          } else if (_source92.is_Multiset) {
            DAST._IType _2812___mcc_h158 = _source92.dtor_element;
            DAST._IType _2813_o = _2788_t;
            {
              RAST._IType _2814_genType;
              RAST._IType _out169;
              _out169 = (this).GenType(_2813_o, false, false);
              _2814_genType = _out169;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2814_genType);
            }
          } else if (_source92.is_Map) {
            DAST._IType _2815___mcc_h160 = _source92.dtor_key;
            DAST._IType _2816___mcc_h161 = _source92.dtor_value;
            DAST._IType _2817_o = _2788_t;
            {
              RAST._IType _2818_genType;
              RAST._IType _out170;
              _out170 = (this).GenType(_2817_o, false, false);
              _2818_genType = _out170;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2818_genType);
            }
          } else if (_source92.is_SetBuilder) {
            DAST._IType _2819___mcc_h164 = _source92.dtor_element;
            DAST._IType _2820_o = _2788_t;
            {
              RAST._IType _2821_genType;
              RAST._IType _out171;
              _out171 = (this).GenType(_2820_o, false, false);
              _2821_genType = _out171;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2821_genType);
            }
          } else if (_source92.is_MapBuilder) {
            DAST._IType _2822___mcc_h166 = _source92.dtor_key;
            DAST._IType _2823___mcc_h167 = _source92.dtor_value;
            DAST._IType _2824_o = _2788_t;
            {
              RAST._IType _2825_genType;
              RAST._IType _out172;
              _out172 = (this).GenType(_2824_o, false, false);
              _2825_genType = _out172;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2825_genType);
            }
          } else if (_source92.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2826___mcc_h170 = _source92.dtor_args;
            DAST._IType _2827___mcc_h171 = _source92.dtor_result;
            DAST._IType _2828_o = _2788_t;
            {
              RAST._IType _2829_genType;
              RAST._IType _out173;
              _out173 = (this).GenType(_2828_o, false, false);
              _2829_genType = _out173;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2829_genType);
            }
          } else if (_source92.is_Primitive) {
            DAST._IPrimitive _2830___mcc_h174 = _source92.dtor_Primitive_a0;
            DAST._IPrimitive _source93 = _2830___mcc_h174;
            if (_source93.is_Int) {
              DAST._IType _2831_o = _2788_t;
              {
                RAST._IType _2832_genType;
                RAST._IType _out174;
                _out174 = (this).GenType(_2831_o, false, false);
                _2832_genType = _out174;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2832_genType);
              }
            } else if (_source93.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source93.is_String) {
              DAST._IType _2833_o = _2788_t;
              {
                RAST._IType _2834_genType;
                RAST._IType _out175;
                _out175 = (this).GenType(_2833_o, false, false);
                _2834_genType = _out175;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2834_genType);
              }
            } else if (_source93.is_Bool) {
              DAST._IType _2835_o = _2788_t;
              {
                RAST._IType _2836_genType;
                RAST._IType _out176;
                _out176 = (this).GenType(_2835_o, false, false);
                _2836_genType = _out176;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2836_genType);
              }
            } else {
              DAST._IType _2837_o = _2788_t;
              {
                RAST._IType _2838_genType;
                RAST._IType _out177;
                _out177 = (this).GenType(_2837_o, false, false);
                _2838_genType = _out177;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2838_genType);
              }
            }
          } else if (_source92.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2839___mcc_h176 = _source92.dtor_Passthrough_a0;
            DAST._IType _2840_o = _2788_t;
            {
              RAST._IType _2841_genType;
              RAST._IType _out178;
              _out178 = (this).GenType(_2840_o, false, false);
              _2841_genType = _out178;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2841_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2842___mcc_h178 = _source92.dtor_TypeArg_a0;
            DAST._IType _2843_o = _2788_t;
            {
              RAST._IType _2844_genType;
              RAST._IType _out179;
              _out179 = (this).GenType(_2843_o, false, false);
              _2844_genType = _out179;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2844_genType);
            }
          }
          RAST._IExpr _out180;
          DCOMP._IOwnership _out181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out180, out _out181);
          r = _out180;
          resultingOwnership = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source89.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _2845___mcc_h7 = _source89.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _2846_l = _2845___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_2846_l, false));
          RAST._IExpr _out182;
          DCOMP._IOwnership _out183;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out182, out _out183);
          r = _out182;
          resultingOwnership = _out183;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source89.is_CharLiteral) {
        Dafny.Rune _2847___mcc_h8 = _source89.dtor_CharLiteral_a0;
        Dafny.Rune _2848_c = _2847___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_2848_c).Value)));
          if (!((this).UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel((this).DafnyChar)).Apply1(r);
          RAST._IExpr _out184;
          DCOMP._IOwnership _out185;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out184, out _out185);
          r = _out184;
          resultingOwnership = _out185;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _2849___mcc_h9 = _source89.dtor_Null_a0;
        DAST._IType _2850_tpe = _2849___mcc_h9;
        {
          RAST._IType _2851_tpeGen;
          RAST._IType _out186;
          _out186 = (this).GenType(_2850_tpe, false, false);
          _2851_tpeGen = _out186;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _2851_tpeGen);
          RAST._IExpr _out187;
          DCOMP._IOwnership _out188;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out187, out _out188);
          r = _out187;
          resultingOwnership = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs49 = e;
      DAST._IBinOp _2852_op = _let_tmp_rhs49.dtor_op;
      DAST._IExpression _2853_lExpr = _let_tmp_rhs49.dtor_left;
      DAST._IExpression _2854_rExpr = _let_tmp_rhs49.dtor_right;
      DAST.Format._IBinaryOpFormat _2855_format = _let_tmp_rhs49.dtor_format2;
      bool _2856_becomesLeftCallsRight;
      _2856_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source94) => {
        if (_source94.is_Eq) {
          bool _2857___mcc_h0 = _source94.dtor_referential;
          bool _2858___mcc_h1 = _source94.dtor_nullable;
          return false;
        } else if (_source94.is_Div) {
          return false;
        } else if (_source94.is_EuclidianDiv) {
          return false;
        } else if (_source94.is_Mod) {
          return false;
        } else if (_source94.is_EuclidianMod) {
          return false;
        } else if (_source94.is_Lt) {
          return false;
        } else if (_source94.is_LtChar) {
          return false;
        } else if (_source94.is_Plus) {
          return false;
        } else if (_source94.is_Minus) {
          return false;
        } else if (_source94.is_Times) {
          return false;
        } else if (_source94.is_BitwiseAnd) {
          return false;
        } else if (_source94.is_BitwiseOr) {
          return false;
        } else if (_source94.is_BitwiseXor) {
          return false;
        } else if (_source94.is_BitwiseShiftRight) {
          return false;
        } else if (_source94.is_BitwiseShiftLeft) {
          return false;
        } else if (_source94.is_And) {
          return false;
        } else if (_source94.is_Or) {
          return false;
        } else if (_source94.is_In) {
          return false;
        } else if (_source94.is_SeqProperPrefix) {
          return false;
        } else if (_source94.is_SeqPrefix) {
          return false;
        } else if (_source94.is_SetMerge) {
          return true;
        } else if (_source94.is_SetSubtraction) {
          return true;
        } else if (_source94.is_SetIntersection) {
          return true;
        } else if (_source94.is_Subset) {
          return false;
        } else if (_source94.is_ProperSubset) {
          return false;
        } else if (_source94.is_SetDisjoint) {
          return true;
        } else if (_source94.is_MapMerge) {
          return true;
        } else if (_source94.is_MapSubtraction) {
          return true;
        } else if (_source94.is_MultisetMerge) {
          return true;
        } else if (_source94.is_MultisetSubtraction) {
          return true;
        } else if (_source94.is_MultisetIntersection) {
          return true;
        } else if (_source94.is_Submultiset) {
          return false;
        } else if (_source94.is_ProperSubmultiset) {
          return false;
        } else if (_source94.is_MultisetDisjoint) {
          return true;
        } else if (_source94.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _2859___mcc_h4 = _source94.dtor_Passthrough_a0;
          return false;
        }
      }))(_2852_op);
      bool _2860_becomesRightCallsLeft;
      _2860_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source95) => {
        if (_source95.is_Eq) {
          bool _2861___mcc_h6 = _source95.dtor_referential;
          bool _2862___mcc_h7 = _source95.dtor_nullable;
          return false;
        } else if (_source95.is_Div) {
          return false;
        } else if (_source95.is_EuclidianDiv) {
          return false;
        } else if (_source95.is_Mod) {
          return false;
        } else if (_source95.is_EuclidianMod) {
          return false;
        } else if (_source95.is_Lt) {
          return false;
        } else if (_source95.is_LtChar) {
          return false;
        } else if (_source95.is_Plus) {
          return false;
        } else if (_source95.is_Minus) {
          return false;
        } else if (_source95.is_Times) {
          return false;
        } else if (_source95.is_BitwiseAnd) {
          return false;
        } else if (_source95.is_BitwiseOr) {
          return false;
        } else if (_source95.is_BitwiseXor) {
          return false;
        } else if (_source95.is_BitwiseShiftRight) {
          return false;
        } else if (_source95.is_BitwiseShiftLeft) {
          return false;
        } else if (_source95.is_And) {
          return false;
        } else if (_source95.is_Or) {
          return false;
        } else if (_source95.is_In) {
          return true;
        } else if (_source95.is_SeqProperPrefix) {
          return false;
        } else if (_source95.is_SeqPrefix) {
          return false;
        } else if (_source95.is_SetMerge) {
          return false;
        } else if (_source95.is_SetSubtraction) {
          return false;
        } else if (_source95.is_SetIntersection) {
          return false;
        } else if (_source95.is_Subset) {
          return false;
        } else if (_source95.is_ProperSubset) {
          return false;
        } else if (_source95.is_SetDisjoint) {
          return false;
        } else if (_source95.is_MapMerge) {
          return false;
        } else if (_source95.is_MapSubtraction) {
          return false;
        } else if (_source95.is_MultisetMerge) {
          return false;
        } else if (_source95.is_MultisetSubtraction) {
          return false;
        } else if (_source95.is_MultisetIntersection) {
          return false;
        } else if (_source95.is_Submultiset) {
          return false;
        } else if (_source95.is_ProperSubmultiset) {
          return false;
        } else if (_source95.is_MultisetDisjoint) {
          return false;
        } else if (_source95.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _2863___mcc_h10 = _source95.dtor_Passthrough_a0;
          return false;
        }
      }))(_2852_op);
      bool _2864_becomesCallLeftRight;
      _2864_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source96) => {
        if (_source96.is_Eq) {
          bool _2865___mcc_h12 = _source96.dtor_referential;
          bool _2866___mcc_h13 = _source96.dtor_nullable;
          if ((_2865___mcc_h12) == (true)) {
            if ((_2866___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source96.is_Div) {
          return false;
        } else if (_source96.is_EuclidianDiv) {
          return false;
        } else if (_source96.is_Mod) {
          return false;
        } else if (_source96.is_EuclidianMod) {
          return false;
        } else if (_source96.is_Lt) {
          return false;
        } else if (_source96.is_LtChar) {
          return false;
        } else if (_source96.is_Plus) {
          return false;
        } else if (_source96.is_Minus) {
          return false;
        } else if (_source96.is_Times) {
          return false;
        } else if (_source96.is_BitwiseAnd) {
          return false;
        } else if (_source96.is_BitwiseOr) {
          return false;
        } else if (_source96.is_BitwiseXor) {
          return false;
        } else if (_source96.is_BitwiseShiftRight) {
          return false;
        } else if (_source96.is_BitwiseShiftLeft) {
          return false;
        } else if (_source96.is_And) {
          return false;
        } else if (_source96.is_Or) {
          return false;
        } else if (_source96.is_In) {
          return false;
        } else if (_source96.is_SeqProperPrefix) {
          return false;
        } else if (_source96.is_SeqPrefix) {
          return false;
        } else if (_source96.is_SetMerge) {
          return false;
        } else if (_source96.is_SetSubtraction) {
          return false;
        } else if (_source96.is_SetIntersection) {
          return false;
        } else if (_source96.is_Subset) {
          return false;
        } else if (_source96.is_ProperSubset) {
          return false;
        } else if (_source96.is_SetDisjoint) {
          return false;
        } else if (_source96.is_MapMerge) {
          return false;
        } else if (_source96.is_MapSubtraction) {
          return false;
        } else if (_source96.is_MultisetMerge) {
          return false;
        } else if (_source96.is_MultisetSubtraction) {
          return false;
        } else if (_source96.is_MultisetIntersection) {
          return false;
        } else if (_source96.is_Submultiset) {
          return false;
        } else if (_source96.is_ProperSubmultiset) {
          return false;
        } else if (_source96.is_MultisetDisjoint) {
          return false;
        } else if (_source96.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _2867___mcc_h16 = _source96.dtor_Passthrough_a0;
          return false;
        }
      }))(_2852_op);
      DCOMP._IOwnership _2868_expectedLeftOwnership;
      _2868_expectedLeftOwnership = ((_2856_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_2860_becomesRightCallsLeft) || (_2864_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _2869_expectedRightOwnership;
      _2869_expectedRightOwnership = (((_2856_becomesLeftCallsRight) || (_2864_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_2860_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _2870_left;
      DCOMP._IOwnership _2871___v62;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdentsL;
      RAST._IExpr _out189;
      DCOMP._IOwnership _out190;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
      (this).GenExpr(_2853_lExpr, selfIdent, @params, _2868_expectedLeftOwnership, out _out189, out _out190, out _out191);
      _2870_left = _out189;
      _2871___v62 = _out190;
      _2872_recIdentsL = _out191;
      RAST._IExpr _2873_right;
      DCOMP._IOwnership _2874___v63;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdentsR;
      RAST._IExpr _out192;
      DCOMP._IOwnership _out193;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
      (this).GenExpr(_2854_rExpr, selfIdent, @params, _2869_expectedRightOwnership, out _out192, out _out193, out _out194);
      _2873_right = _out192;
      _2874___v63 = _out193;
      _2875_recIdentsR = _out194;
      DAST._IBinOp _source97 = _2852_op;
      if (_source97.is_Eq) {
        bool _2876___mcc_h18 = _source97.dtor_referential;
        bool _2877___mcc_h19 = _source97.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source98 = _2852_op;
            if (_source98.is_Eq) {
              bool _2878___mcc_h24 = _source98.dtor_referential;
              bool _2879___mcc_h25 = _source98.dtor_nullable;
              bool _2880_nullable = _2879___mcc_h25;
              bool _2881_referential = _2878___mcc_h24;
              {
                if (_2881_referential) {
                  if (_2880_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source98.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source98.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2882___mcc_h26 = _source98.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2883_op = _2882___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_2883_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source99 = _2852_op;
            if (_source99.is_Eq) {
              bool _2884___mcc_h27 = _source99.dtor_referential;
              bool _2885___mcc_h28 = _source99.dtor_nullable;
              bool _2886_nullable = _2885___mcc_h28;
              bool _2887_referential = _2884___mcc_h27;
              {
                if (_2887_referential) {
                  if (_2886_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source99.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source99.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2888___mcc_h29 = _source99.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2889_op = _2888___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_2889_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source100 = _2852_op;
            if (_source100.is_Eq) {
              bool _2890___mcc_h30 = _source100.dtor_referential;
              bool _2891___mcc_h31 = _source100.dtor_nullable;
              bool _2892_nullable = _2891___mcc_h31;
              bool _2893_referential = _2890___mcc_h30;
              {
                if (_2893_referential) {
                  if (_2892_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source100.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source100.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2894___mcc_h32 = _source100.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2895_op = _2894___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_2895_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source101 = _2852_op;
            if (_source101.is_Eq) {
              bool _2896___mcc_h33 = _source101.dtor_referential;
              bool _2897___mcc_h34 = _source101.dtor_nullable;
              bool _2898_nullable = _2897___mcc_h34;
              bool _2899_referential = _2896___mcc_h33;
              {
                if (_2899_referential) {
                  if (_2898_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source101.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source101.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2900___mcc_h35 = _source101.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2901_op = _2900___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_2901_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source102 = _2852_op;
            if (_source102.is_Eq) {
              bool _2902___mcc_h36 = _source102.dtor_referential;
              bool _2903___mcc_h37 = _source102.dtor_nullable;
              bool _2904_nullable = _2903___mcc_h37;
              bool _2905_referential = _2902___mcc_h36;
              {
                if (_2905_referential) {
                  if (_2904_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source102.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source102.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2906___mcc_h38 = _source102.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2907_op = _2906___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_2907_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source103 = _2852_op;
            if (_source103.is_Eq) {
              bool _2908___mcc_h39 = _source103.dtor_referential;
              bool _2909___mcc_h40 = _source103.dtor_nullable;
              bool _2910_nullable = _2909___mcc_h40;
              bool _2911_referential = _2908___mcc_h39;
              {
                if (_2911_referential) {
                  if (_2910_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source103.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source103.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2912___mcc_h41 = _source103.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2913_op = _2912___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_2913_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source104 = _2852_op;
            if (_source104.is_Eq) {
              bool _2914___mcc_h42 = _source104.dtor_referential;
              bool _2915___mcc_h43 = _source104.dtor_nullable;
              bool _2916_nullable = _2915___mcc_h43;
              bool _2917_referential = _2914___mcc_h42;
              {
                if (_2917_referential) {
                  if (_2916_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source104.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source104.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2918___mcc_h44 = _source104.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2919_op = _2918___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_2919_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source105 = _2852_op;
            if (_source105.is_Eq) {
              bool _2920___mcc_h45 = _source105.dtor_referential;
              bool _2921___mcc_h46 = _source105.dtor_nullable;
              bool _2922_nullable = _2921___mcc_h46;
              bool _2923_referential = _2920___mcc_h45;
              {
                if (_2923_referential) {
                  if (_2922_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source105.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source105.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2924___mcc_h47 = _source105.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2925_op = _2924___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_2925_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source106 = _2852_op;
            if (_source106.is_Eq) {
              bool _2926___mcc_h48 = _source106.dtor_referential;
              bool _2927___mcc_h49 = _source106.dtor_nullable;
              bool _2928_nullable = _2927___mcc_h49;
              bool _2929_referential = _2926___mcc_h48;
              {
                if (_2929_referential) {
                  if (_2928_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source106.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source106.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2930___mcc_h50 = _source106.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2931_op = _2930___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_2931_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source107 = _2852_op;
            if (_source107.is_Eq) {
              bool _2932___mcc_h51 = _source107.dtor_referential;
              bool _2933___mcc_h52 = _source107.dtor_nullable;
              bool _2934_nullable = _2933___mcc_h52;
              bool _2935_referential = _2932___mcc_h51;
              {
                if (_2935_referential) {
                  if (_2934_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source107.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source107.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2936___mcc_h53 = _source107.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2937_op = _2936___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_2937_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source108 = _2852_op;
            if (_source108.is_Eq) {
              bool _2938___mcc_h54 = _source108.dtor_referential;
              bool _2939___mcc_h55 = _source108.dtor_nullable;
              bool _2940_nullable = _2939___mcc_h55;
              bool _2941_referential = _2938___mcc_h54;
              {
                if (_2941_referential) {
                  if (_2940_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source108.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source108.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2942___mcc_h56 = _source108.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2943_op = _2942___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_2943_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source109 = _2852_op;
            if (_source109.is_Eq) {
              bool _2944___mcc_h57 = _source109.dtor_referential;
              bool _2945___mcc_h58 = _source109.dtor_nullable;
              bool _2946_nullable = _2945___mcc_h58;
              bool _2947_referential = _2944___mcc_h57;
              {
                if (_2947_referential) {
                  if (_2946_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source109.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source109.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2948___mcc_h59 = _source109.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2949_op = _2948___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_2949_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source110 = _2852_op;
            if (_source110.is_Eq) {
              bool _2950___mcc_h60 = _source110.dtor_referential;
              bool _2951___mcc_h61 = _source110.dtor_nullable;
              bool _2952_nullable = _2951___mcc_h61;
              bool _2953_referential = _2950___mcc_h60;
              {
                if (_2953_referential) {
                  if (_2952_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source110.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source110.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2954___mcc_h62 = _source110.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2955_op = _2954___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_2955_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source111 = _2852_op;
            if (_source111.is_Eq) {
              bool _2956___mcc_h63 = _source111.dtor_referential;
              bool _2957___mcc_h64 = _source111.dtor_nullable;
              bool _2958_nullable = _2957___mcc_h64;
              bool _2959_referential = _2956___mcc_h63;
              {
                if (_2959_referential) {
                  if (_2958_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source111.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source111.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2960___mcc_h65 = _source111.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2961_op = _2960___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_2961_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source112 = _2852_op;
            if (_source112.is_Eq) {
              bool _2962___mcc_h66 = _source112.dtor_referential;
              bool _2963___mcc_h67 = _source112.dtor_nullable;
              bool _2964_nullable = _2963___mcc_h67;
              bool _2965_referential = _2962___mcc_h66;
              {
                if (_2965_referential) {
                  if (_2964_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source112.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source112.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2966___mcc_h68 = _source112.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2967_op = _2966___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_2967_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source113 = _2852_op;
            if (_source113.is_Eq) {
              bool _2968___mcc_h69 = _source113.dtor_referential;
              bool _2969___mcc_h70 = _source113.dtor_nullable;
              bool _2970_nullable = _2969___mcc_h70;
              bool _2971_referential = _2968___mcc_h69;
              {
                if (_2971_referential) {
                  if (_2970_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source113.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source113.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2972___mcc_h71 = _source113.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2973_op = _2972___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_2973_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source114 = _2852_op;
            if (_source114.is_Eq) {
              bool _2974___mcc_h72 = _source114.dtor_referential;
              bool _2975___mcc_h73 = _source114.dtor_nullable;
              bool _2976_nullable = _2975___mcc_h73;
              bool _2977_referential = _2974___mcc_h72;
              {
                if (_2977_referential) {
                  if (_2976_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source114.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source114.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2978___mcc_h74 = _source114.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2979_op = _2978___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_2979_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_In) {
        {
          r = ((_2873_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_2870_left);
        }
      } else if (_source97.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2870_left, _2873_right, _2855_format);
      } else if (_source97.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2870_left, _2873_right, _2855_format);
      } else if (_source97.is_SetMerge) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2873_right);
        }
      } else if (_source97.is_SetSubtraction) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2873_right);
        }
      } else if (_source97.is_SetIntersection) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_2873_right);
        }
      } else if (_source97.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_SetDisjoint) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MapMerge) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MapSubtraction) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MultisetMerge) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MultisetSubtraction) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MultisetIntersection) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_2873_right);
        }
      } else if (_source97.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_MultisetDisjoint) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_2873_right);
        }
      } else if (_source97.is_Concat) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_2873_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _2980___mcc_h22 = _source97.dtor_Passthrough_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source115 = _2852_op;
            if (_source115.is_Eq) {
              bool _2981___mcc_h75 = _source115.dtor_referential;
              bool _2982___mcc_h76 = _source115.dtor_nullable;
              bool _2983_nullable = _2982___mcc_h76;
              bool _2984_referential = _2981___mcc_h75;
              {
                if (_2984_referential) {
                  if (_2983_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source115.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source115.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2985___mcc_h77 = _source115.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2986_op = _2985___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_2986_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out195;
      DCOMP._IOwnership _out196;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out195, out _out196);
      r = _out195;
      resultingOwnership = _out196;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2872_recIdentsL, _2875_recIdentsR);
      return ;
    }
    public void GenExprConvertFromNullable(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs50 = e;
      DAST._IExpression _2987_expr = _let_tmp_rhs50.dtor_value;
      DAST._IType _2988_fromTpe = _let_tmp_rhs50.dtor_from;
      DAST._IType _2989_toTpe = _let_tmp_rhs50.dtor_typ;
      RAST._IExpr _2990_recursiveGen;
      DCOMP._IOwnership _2991_recOwned;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2992_recIdents;
      RAST._IExpr _out197;
      DCOMP._IOwnership _out198;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
      (this).GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out197, out _out198, out _out199);
      _2990_recursiveGen = _out197;
      _2991_recOwned = _out198;
      _2992_recIdents = _out199;
      r = _2990_recursiveGen;
      if (object.Equals(_2991_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
        r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
      }
      r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
      RAST._IExpr _out200;
      DCOMP._IOwnership _out201;
      DCOMP.COMP.FromOwnership(r, _2991_recOwned, expectedOwnership, out _out200, out _out201);
      r = _out200;
      resultingOwnership = _out201;
      readIdents = _2992_recIdents;
    }
    public void GenExprConvertToNullable(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs51 = e;
      DAST._IExpression _2993_expr = _let_tmp_rhs51.dtor_value;
      DAST._IType _2994_fromTpe = _let_tmp_rhs51.dtor_from;
      DAST._IType _2995_toTpe = _let_tmp_rhs51.dtor_typ;
      RAST._IExpr _2996_recursiveGen;
      DCOMP._IOwnership _2997_recOwned;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2998_recIdents;
      RAST._IExpr _out202;
      DCOMP._IOwnership _out203;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
      (this).GenExpr(_2993_expr, selfIdent, @params, expectedOwnership, out _out202, out _out203, out _out204);
      _2996_recursiveGen = _out202;
      _2997_recOwned = _out203;
      _2998_recIdents = _out204;
      r = _2996_recursiveGen;
      if (object.Equals(_2997_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
        r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
      }
      r = ((((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("option"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Option"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(r));
      RAST._IExpr _out205;
      DCOMP._IOwnership _out206;
      DCOMP.COMP.FromOwnership(r, _2997_recOwned, expectedOwnership, out _out205, out _out206);
      r = _out205;
      resultingOwnership = _out206;
      readIdents = _2998_recIdents;
    }
    public void GenExprConvertToNewtype(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs52 = e;
      DAST._IExpression _2999_expr = _let_tmp_rhs52.dtor_value;
      DAST._IType _3000_fromTpe = _let_tmp_rhs52.dtor_from;
      DAST._IType _3001_toTpe = _let_tmp_rhs52.dtor_typ;
      DAST._IType _let_tmp_rhs53 = _3001_toTpe;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3002___v65 = _let_tmp_rhs53.dtor_Path_a0;
      Dafny.ISequence<DAST._IType> _3003___v66 = _let_tmp_rhs53.dtor_typeArgs;
      DAST._IResolvedType _let_tmp_rhs54 = _let_tmp_rhs53.dtor_resolved;
      DAST._IType _3004_b = _let_tmp_rhs54.dtor_baseType;
      DAST._INewtypeRange _3005_range = _let_tmp_rhs54.dtor_range;
      bool _3006_erase = _let_tmp_rhs54.dtor_erase;
      if (object.Equals(_3000_fromTpe, _3004_b)) {
        RAST._IExpr _3007_recursiveGen;
        DCOMP._IOwnership _3008_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3009_recIdents;
        RAST._IExpr _out207;
        DCOMP._IOwnership _out208;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
        (this).GenExpr(_2999_expr, selfIdent, @params, expectedOwnership, out _out207, out _out208, out _out209);
        _3007_recursiveGen = _out207;
        _3008_recOwned = _out208;
        _3009_recIdents = _out209;
        Std.Wrappers._IOption<RAST._IType> _3010_potentialRhsType;
        _3010_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3004_b, _3005_range);
        Std.Wrappers._IOption<RAST._IType> _source116 = _3010_potentialRhsType;
        if (_source116.is_None) {
          if (_3006_erase) {
            r = _3007_recursiveGen;
          } else {
            RAST._IType _3011_rhsType;
            RAST._IType _out210;
            _out210 = (this).GenType(_3001_toTpe, true, false);
            _3011_rhsType = _out210;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3011_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3007_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          }
          RAST._IExpr _out211;
          DCOMP._IOwnership _out212;
          DCOMP.COMP.FromOwnership(r, _3008_recOwned, expectedOwnership, out _out211, out _out212);
          r = _out211;
          resultingOwnership = _out212;
        } else {
          RAST._IType _3012___mcc_h0 = _source116.dtor_value;
          RAST._IType _3013_v = _3012___mcc_h0;
          r = RAST.Expr.create_ConversionNum(_3013_v, _3007_recursiveGen);
          RAST._IExpr _out213;
          DCOMP._IOwnership _out214;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out213, out _out214);
          r = _out213;
          resultingOwnership = _out214;
        }
        readIdents = _3009_recIdents;
      } else {
        RAST._IExpr _out215;
        DCOMP._IOwnership _out216;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
        (this).GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2999_expr, _3000_fromTpe, _3004_b), _3004_b, _3001_toTpe), selfIdent, @params, expectedOwnership, out _out215, out _out216, out _out217);
        r = _out215;
        resultingOwnership = _out216;
        readIdents = _out217;
      }
    }
    public void GenExprConvertFromNewtype(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs55 = e;
      DAST._IExpression _3014_expr = _let_tmp_rhs55.dtor_value;
      DAST._IType _3015_fromTpe = _let_tmp_rhs55.dtor_from;
      DAST._IType _3016_toTpe = _let_tmp_rhs55.dtor_typ;
      DAST._IType _let_tmp_rhs56 = _3015_fromTpe;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3017___v67 = _let_tmp_rhs56.dtor_Path_a0;
      Dafny.ISequence<DAST._IType> _3018___v68 = _let_tmp_rhs56.dtor_typeArgs;
      DAST._IResolvedType _let_tmp_rhs57 = _let_tmp_rhs56.dtor_resolved;
      DAST._IType _3019_b = _let_tmp_rhs57.dtor_baseType;
      DAST._INewtypeRange _3020_range = _let_tmp_rhs57.dtor_range;
      bool _3021_erase = _let_tmp_rhs57.dtor_erase;
      if (object.Equals(_3019_b, _3016_toTpe)) {
        RAST._IExpr _3022_recursiveGen;
        DCOMP._IOwnership _3023_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3024_recIdents;
        RAST._IExpr _out218;
        DCOMP._IOwnership _out219;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out220;
        (this).GenExpr(_3014_expr, selfIdent, @params, expectedOwnership, out _out218, out _out219, out _out220);
        _3022_recursiveGen = _out218;
        _3023_recOwned = _out219;
        _3024_recIdents = _out220;
        if (_3021_erase) {
          r = _3022_recursiveGen;
        } else {
          r = (_3022_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
        }
        RAST._IExpr _out221;
        DCOMP._IOwnership _out222;
        DCOMP.COMP.FromOwnership(r, _3023_recOwned, expectedOwnership, out _out221, out _out222);
        r = _out221;
        resultingOwnership = _out222;
        readIdents = _3024_recIdents;
      } else {
        RAST._IExpr _out223;
        DCOMP._IOwnership _out224;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out225;
        (this).GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3014_expr, _3015_fromTpe, _3019_b), _3019_b, _3016_toTpe), selfIdent, @params, expectedOwnership, out _out223, out _out224, out _out225);
        r = _out223;
        resultingOwnership = _out224;
        readIdents = _out225;
      }
    }
    public void GenExprConvertNotImplemented(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs58 = e;
      DAST._IExpression _3025_expr = _let_tmp_rhs58.dtor_value;
      DAST._IType _3026_fromTpe = _let_tmp_rhs58.dtor_from;
      DAST._IType _3027_toTpe = _let_tmp_rhs58.dtor_typ;
      RAST._IExpr _3028_recursiveGen;
      DCOMP._IOwnership _3029_recOwned;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
      RAST._IExpr _out226;
      DCOMP._IOwnership _out227;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out228;
      (this).GenExpr(_3025_expr, selfIdent, @params, expectedOwnership, out _out226, out _out227, out _out228);
      _3028_recursiveGen = _out226;
      _3029_recOwned = _out227;
      _3030_recIdents = _out228;
      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3028_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
      RAST._IExpr _out229;
      DCOMP._IOwnership _out230;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out229, out _out230);
      r = _out229;
      resultingOwnership = _out230;
      readIdents = _3030_recIdents;
    }
    public void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs59 = e;
      DAST._IExpression _3031_expr = _let_tmp_rhs59.dtor_value;
      DAST._IType _3032_fromTpe = _let_tmp_rhs59.dtor_from;
      DAST._IType _3033_toTpe = _let_tmp_rhs59.dtor_typ;
      if (object.Equals(_3032_fromTpe, _3033_toTpe)) {
        RAST._IExpr _3034_recursiveGen;
        DCOMP._IOwnership _3035_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdents;
        RAST._IExpr _out231;
        DCOMP._IOwnership _out232;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out233;
        (this).GenExpr(_3031_expr, selfIdent, @params, expectedOwnership, out _out231, out _out232, out _out233);
        _3034_recursiveGen = _out231;
        _3035_recOwned = _out232;
        _3036_recIdents = _out233;
        r = _3034_recursiveGen;
        RAST._IExpr _out234;
        DCOMP._IOwnership _out235;
        DCOMP.COMP.FromOwnership(r, _3035_recOwned, expectedOwnership, out _out234, out _out235);
        r = _out234;
        resultingOwnership = _out235;
        readIdents = _3036_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source117 = _System.Tuple2<DAST._IType, DAST._IType>.create(_3032_fromTpe, _3033_toTpe);
        DAST._IType _3037___mcc_h0 = _source117.dtor__0;
        DAST._IType _3038___mcc_h1 = _source117.dtor__1;
        DAST._IType _source118 = _3037___mcc_h0;
        if (_source118.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3039___mcc_h4 = _source118.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _3040___mcc_h5 = _source118.dtor_typeArgs;
          DAST._IResolvedType _3041___mcc_h6 = _source118.dtor_resolved;
          DAST._IResolvedType _source119 = _3041___mcc_h6;
          if (_source119.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3042___mcc_h16 = _source119.dtor_path;
            DAST._IType _source120 = _3038___mcc_h1;
            if (_source120.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3043___mcc_h20 = _source120.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3044___mcc_h21 = _source120.dtor_typeArgs;
              DAST._IResolvedType _3045___mcc_h22 = _source120.dtor_resolved;
              DAST._IResolvedType _source121 = _3045___mcc_h22;
              if (_source121.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3046___mcc_h26 = _source121.dtor_path;
                {
                  RAST._IExpr _out236;
                  DCOMP._IOwnership _out237;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out236, out _out237, out _out238);
                  r = _out236;
                  resultingOwnership = _out237;
                  readIdents = _out238;
                }
              } else if (_source121.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3047___mcc_h28 = _source121.dtor_path;
                {
                  RAST._IExpr _out239;
                  DCOMP._IOwnership _out240;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out241;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out239, out _out240, out _out241);
                  r = _out239;
                  resultingOwnership = _out240;
                  readIdents = _out241;
                }
              } else {
                DAST._IType _3048___mcc_h30 = _source121.dtor_baseType;
                DAST._INewtypeRange _3049___mcc_h31 = _source121.dtor_range;
                bool _3050___mcc_h32 = _source121.dtor_erase;
                bool _3051_erase = _3050___mcc_h32;
                DAST._INewtypeRange _3052_range = _3049___mcc_h31;
                DAST._IType _3053_b = _3048___mcc_h30;
                {
                  RAST._IExpr _out242;
                  DCOMP._IOwnership _out243;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out244;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out242, out _out243, out _out244);
                  r = _out242;
                  resultingOwnership = _out243;
                  readIdents = _out244;
                }
              }
            } else if (_source120.is_Nullable) {
              DAST._IType _3054___mcc_h36 = _source120.dtor_Nullable_a0;
              {
                RAST._IExpr _out245;
                DCOMP._IOwnership _out246;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out245, out _out246, out _out247);
                r = _out245;
                resultingOwnership = _out246;
                readIdents = _out247;
              }
            } else if (_source120.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3055___mcc_h38 = _source120.dtor_Tuple_a0;
              {
                RAST._IExpr _out248;
                DCOMP._IOwnership _out249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out248, out _out249, out _out250);
                r = _out248;
                resultingOwnership = _out249;
                readIdents = _out250;
              }
            } else if (_source120.is_Array) {
              DAST._IType _3056___mcc_h40 = _source120.dtor_element;
              BigInteger _3057___mcc_h41 = _source120.dtor_dims;
              {
                RAST._IExpr _out251;
                DCOMP._IOwnership _out252;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out253;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out251, out _out252, out _out253);
                r = _out251;
                resultingOwnership = _out252;
                readIdents = _out253;
              }
            } else if (_source120.is_Seq) {
              DAST._IType _3058___mcc_h44 = _source120.dtor_element;
              {
                RAST._IExpr _out254;
                DCOMP._IOwnership _out255;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out256;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out254, out _out255, out _out256);
                r = _out254;
                resultingOwnership = _out255;
                readIdents = _out256;
              }
            } else if (_source120.is_Set) {
              DAST._IType _3059___mcc_h46 = _source120.dtor_element;
              {
                RAST._IExpr _out257;
                DCOMP._IOwnership _out258;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out257, out _out258, out _out259);
                r = _out257;
                resultingOwnership = _out258;
                readIdents = _out259;
              }
            } else if (_source120.is_Multiset) {
              DAST._IType _3060___mcc_h48 = _source120.dtor_element;
              {
                RAST._IExpr _out260;
                DCOMP._IOwnership _out261;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out260, out _out261, out _out262);
                r = _out260;
                resultingOwnership = _out261;
                readIdents = _out262;
              }
            } else if (_source120.is_Map) {
              DAST._IType _3061___mcc_h50 = _source120.dtor_key;
              DAST._IType _3062___mcc_h51 = _source120.dtor_value;
              {
                RAST._IExpr _out263;
                DCOMP._IOwnership _out264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out263, out _out264, out _out265);
                r = _out263;
                resultingOwnership = _out264;
                readIdents = _out265;
              }
            } else if (_source120.is_SetBuilder) {
              DAST._IType _3063___mcc_h54 = _source120.dtor_element;
              {
                RAST._IExpr _out266;
                DCOMP._IOwnership _out267;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out268;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out266, out _out267, out _out268);
                r = _out266;
                resultingOwnership = _out267;
                readIdents = _out268;
              }
            } else if (_source120.is_MapBuilder) {
              DAST._IType _3064___mcc_h56 = _source120.dtor_key;
              DAST._IType _3065___mcc_h57 = _source120.dtor_value;
              {
                RAST._IExpr _out269;
                DCOMP._IOwnership _out270;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out269, out _out270, out _out271);
                r = _out269;
                resultingOwnership = _out270;
                readIdents = _out271;
              }
            } else if (_source120.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3066___mcc_h60 = _source120.dtor_args;
              DAST._IType _3067___mcc_h61 = _source120.dtor_result;
              {
                RAST._IExpr _out272;
                DCOMP._IOwnership _out273;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out272, out _out273, out _out274);
                r = _out272;
                resultingOwnership = _out273;
                readIdents = _out274;
              }
            } else if (_source120.is_Primitive) {
              DAST._IPrimitive _3068___mcc_h64 = _source120.dtor_Primitive_a0;
              {
                RAST._IExpr _out275;
                DCOMP._IOwnership _out276;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out277;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out275, out _out276, out _out277);
                r = _out275;
                resultingOwnership = _out276;
                readIdents = _out277;
              }
            } else if (_source120.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3069___mcc_h66 = _source120.dtor_Passthrough_a0;
              {
                RAST._IExpr _out278;
                DCOMP._IOwnership _out279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out278, out _out279, out _out280);
                r = _out278;
                resultingOwnership = _out279;
                readIdents = _out280;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3070___mcc_h68 = _source120.dtor_TypeArg_a0;
              {
                RAST._IExpr _out281;
                DCOMP._IOwnership _out282;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out281, out _out282, out _out283);
                r = _out281;
                resultingOwnership = _out282;
                readIdents = _out283;
              }
            }
          } else if (_source119.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3071___mcc_h70 = _source119.dtor_path;
            DAST._IType _source122 = _3038___mcc_h1;
            if (_source122.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3072___mcc_h74 = _source122.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3073___mcc_h75 = _source122.dtor_typeArgs;
              DAST._IResolvedType _3074___mcc_h76 = _source122.dtor_resolved;
              DAST._IResolvedType _source123 = _3074___mcc_h76;
              if (_source123.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3075___mcc_h80 = _source123.dtor_path;
                {
                  RAST._IExpr _out284;
                  DCOMP._IOwnership _out285;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out286;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out284, out _out285, out _out286);
                  r = _out284;
                  resultingOwnership = _out285;
                  readIdents = _out286;
                }
              } else if (_source123.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3076___mcc_h82 = _source123.dtor_path;
                {
                  RAST._IExpr _out287;
                  DCOMP._IOwnership _out288;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out289;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out287, out _out288, out _out289);
                  r = _out287;
                  resultingOwnership = _out288;
                  readIdents = _out289;
                }
              } else {
                DAST._IType _3077___mcc_h84 = _source123.dtor_baseType;
                DAST._INewtypeRange _3078___mcc_h85 = _source123.dtor_range;
                bool _3079___mcc_h86 = _source123.dtor_erase;
                bool _3080_erase = _3079___mcc_h86;
                DAST._INewtypeRange _3081_range = _3078___mcc_h85;
                DAST._IType _3082_b = _3077___mcc_h84;
                {
                  RAST._IExpr _out290;
                  DCOMP._IOwnership _out291;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out292;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out290, out _out291, out _out292);
                  r = _out290;
                  resultingOwnership = _out291;
                  readIdents = _out292;
                }
              }
            } else if (_source122.is_Nullable) {
              DAST._IType _3083___mcc_h90 = _source122.dtor_Nullable_a0;
              {
                RAST._IExpr _out293;
                DCOMP._IOwnership _out294;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out293, out _out294, out _out295);
                r = _out293;
                resultingOwnership = _out294;
                readIdents = _out295;
              }
            } else if (_source122.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3084___mcc_h92 = _source122.dtor_Tuple_a0;
              {
                RAST._IExpr _out296;
                DCOMP._IOwnership _out297;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out298;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out296, out _out297, out _out298);
                r = _out296;
                resultingOwnership = _out297;
                readIdents = _out298;
              }
            } else if (_source122.is_Array) {
              DAST._IType _3085___mcc_h94 = _source122.dtor_element;
              BigInteger _3086___mcc_h95 = _source122.dtor_dims;
              {
                RAST._IExpr _out299;
                DCOMP._IOwnership _out300;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out301;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out299, out _out300, out _out301);
                r = _out299;
                resultingOwnership = _out300;
                readIdents = _out301;
              }
            } else if (_source122.is_Seq) {
              DAST._IType _3087___mcc_h98 = _source122.dtor_element;
              {
                RAST._IExpr _out302;
                DCOMP._IOwnership _out303;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out302, out _out303, out _out304);
                r = _out302;
                resultingOwnership = _out303;
                readIdents = _out304;
              }
            } else if (_source122.is_Set) {
              DAST._IType _3088___mcc_h100 = _source122.dtor_element;
              {
                RAST._IExpr _out305;
                DCOMP._IOwnership _out306;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out305, out _out306, out _out307);
                r = _out305;
                resultingOwnership = _out306;
                readIdents = _out307;
              }
            } else if (_source122.is_Multiset) {
              DAST._IType _3089___mcc_h102 = _source122.dtor_element;
              {
                RAST._IExpr _out308;
                DCOMP._IOwnership _out309;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out308, out _out309, out _out310);
                r = _out308;
                resultingOwnership = _out309;
                readIdents = _out310;
              }
            } else if (_source122.is_Map) {
              DAST._IType _3090___mcc_h104 = _source122.dtor_key;
              DAST._IType _3091___mcc_h105 = _source122.dtor_value;
              {
                RAST._IExpr _out311;
                DCOMP._IOwnership _out312;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out313;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out311, out _out312, out _out313);
                r = _out311;
                resultingOwnership = _out312;
                readIdents = _out313;
              }
            } else if (_source122.is_SetBuilder) {
              DAST._IType _3092___mcc_h108 = _source122.dtor_element;
              {
                RAST._IExpr _out314;
                DCOMP._IOwnership _out315;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out314, out _out315, out _out316);
                r = _out314;
                resultingOwnership = _out315;
                readIdents = _out316;
              }
            } else if (_source122.is_MapBuilder) {
              DAST._IType _3093___mcc_h110 = _source122.dtor_key;
              DAST._IType _3094___mcc_h111 = _source122.dtor_value;
              {
                RAST._IExpr _out317;
                DCOMP._IOwnership _out318;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out317, out _out318, out _out319);
                r = _out317;
                resultingOwnership = _out318;
                readIdents = _out319;
              }
            } else if (_source122.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3095___mcc_h114 = _source122.dtor_args;
              DAST._IType _3096___mcc_h115 = _source122.dtor_result;
              {
                RAST._IExpr _out320;
                DCOMP._IOwnership _out321;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out322;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out320, out _out321, out _out322);
                r = _out320;
                resultingOwnership = _out321;
                readIdents = _out322;
              }
            } else if (_source122.is_Primitive) {
              DAST._IPrimitive _3097___mcc_h118 = _source122.dtor_Primitive_a0;
              {
                RAST._IExpr _out323;
                DCOMP._IOwnership _out324;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out325;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out323, out _out324, out _out325);
                r = _out323;
                resultingOwnership = _out324;
                readIdents = _out325;
              }
            } else if (_source122.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3098___mcc_h120 = _source122.dtor_Passthrough_a0;
              {
                RAST._IExpr _out326;
                DCOMP._IOwnership _out327;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out326, out _out327, out _out328);
                r = _out326;
                resultingOwnership = _out327;
                readIdents = _out328;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3099___mcc_h122 = _source122.dtor_TypeArg_a0;
              {
                RAST._IExpr _out329;
                DCOMP._IOwnership _out330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out329, out _out330, out _out331);
                r = _out329;
                resultingOwnership = _out330;
                readIdents = _out331;
              }
            }
          } else {
            DAST._IType _3100___mcc_h124 = _source119.dtor_baseType;
            DAST._INewtypeRange _3101___mcc_h125 = _source119.dtor_range;
            bool _3102___mcc_h126 = _source119.dtor_erase;
            DAST._IType _source124 = _3038___mcc_h1;
            if (_source124.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3103___mcc_h136 = _source124.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3104___mcc_h137 = _source124.dtor_typeArgs;
              DAST._IResolvedType _3105___mcc_h138 = _source124.dtor_resolved;
              DAST._IResolvedType _source125 = _3105___mcc_h138;
              if (_source125.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3106___mcc_h145 = _source125.dtor_path;
                bool _3107_erase = _3102___mcc_h126;
                DAST._INewtypeRange _3108_range = _3101___mcc_h125;
                DAST._IType _3109_b = _3100___mcc_h124;
                {
                  RAST._IExpr _out332;
                  DCOMP._IOwnership _out333;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out334;
                  (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out332, out _out333, out _out334);
                  r = _out332;
                  resultingOwnership = _out333;
                  readIdents = _out334;
                }
              } else if (_source125.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3110___mcc_h148 = _source125.dtor_path;
                bool _3111_erase = _3102___mcc_h126;
                DAST._INewtypeRange _3112_range = _3101___mcc_h125;
                DAST._IType _3113_b = _3100___mcc_h124;
                {
                  RAST._IExpr _out335;
                  DCOMP._IOwnership _out336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out337;
                  (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out335, out _out336, out _out337);
                  r = _out335;
                  resultingOwnership = _out336;
                  readIdents = _out337;
                }
              } else {
                DAST._IType _3114___mcc_h151 = _source125.dtor_baseType;
                DAST._INewtypeRange _3115___mcc_h152 = _source125.dtor_range;
                bool _3116___mcc_h153 = _source125.dtor_erase;
                bool _3117_erase = _3116___mcc_h153;
                DAST._INewtypeRange _3118_range = _3115___mcc_h152;
                DAST._IType _3119_b = _3114___mcc_h151;
                {
                  RAST._IExpr _out338;
                  DCOMP._IOwnership _out339;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out338, out _out339, out _out340);
                  r = _out338;
                  resultingOwnership = _out339;
                  readIdents = _out340;
                }
              }
            } else if (_source124.is_Nullable) {
              DAST._IType _3120___mcc_h160 = _source124.dtor_Nullable_a0;
              {
                RAST._IExpr _out341;
                DCOMP._IOwnership _out342;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out341, out _out342, out _out343);
                r = _out341;
                resultingOwnership = _out342;
                readIdents = _out343;
              }
            } else if (_source124.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3121___mcc_h163 = _source124.dtor_Tuple_a0;
              bool _3122_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3123_range = _3101___mcc_h125;
              DAST._IType _3124_b = _3100___mcc_h124;
              {
                RAST._IExpr _out344;
                DCOMP._IOwnership _out345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out344, out _out345, out _out346);
                r = _out344;
                resultingOwnership = _out345;
                readIdents = _out346;
              }
            } else if (_source124.is_Array) {
              DAST._IType _3125___mcc_h166 = _source124.dtor_element;
              BigInteger _3126___mcc_h167 = _source124.dtor_dims;
              bool _3127_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3128_range = _3101___mcc_h125;
              DAST._IType _3129_b = _3100___mcc_h124;
              {
                RAST._IExpr _out347;
                DCOMP._IOwnership _out348;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out349;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out347, out _out348, out _out349);
                r = _out347;
                resultingOwnership = _out348;
                readIdents = _out349;
              }
            } else if (_source124.is_Seq) {
              DAST._IType _3130___mcc_h172 = _source124.dtor_element;
              bool _3131_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3132_range = _3101___mcc_h125;
              DAST._IType _3133_b = _3100___mcc_h124;
              {
                RAST._IExpr _out350;
                DCOMP._IOwnership _out351;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out350, out _out351, out _out352);
                r = _out350;
                resultingOwnership = _out351;
                readIdents = _out352;
              }
            } else if (_source124.is_Set) {
              DAST._IType _3134___mcc_h175 = _source124.dtor_element;
              bool _3135_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3136_range = _3101___mcc_h125;
              DAST._IType _3137_b = _3100___mcc_h124;
              {
                RAST._IExpr _out353;
                DCOMP._IOwnership _out354;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out353, out _out354, out _out355);
                r = _out353;
                resultingOwnership = _out354;
                readIdents = _out355;
              }
            } else if (_source124.is_Multiset) {
              DAST._IType _3138___mcc_h178 = _source124.dtor_element;
              bool _3139_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3140_range = _3101___mcc_h125;
              DAST._IType _3141_b = _3100___mcc_h124;
              {
                RAST._IExpr _out356;
                DCOMP._IOwnership _out357;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out358;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out356, out _out357, out _out358);
                r = _out356;
                resultingOwnership = _out357;
                readIdents = _out358;
              }
            } else if (_source124.is_Map) {
              DAST._IType _3142___mcc_h181 = _source124.dtor_key;
              DAST._IType _3143___mcc_h182 = _source124.dtor_value;
              bool _3144_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3145_range = _3101___mcc_h125;
              DAST._IType _3146_b = _3100___mcc_h124;
              {
                RAST._IExpr _out359;
                DCOMP._IOwnership _out360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out359, out _out360, out _out361);
                r = _out359;
                resultingOwnership = _out360;
                readIdents = _out361;
              }
            } else if (_source124.is_SetBuilder) {
              DAST._IType _3147___mcc_h187 = _source124.dtor_element;
              bool _3148_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3149_range = _3101___mcc_h125;
              DAST._IType _3150_b = _3100___mcc_h124;
              {
                RAST._IExpr _out362;
                DCOMP._IOwnership _out363;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out362, out _out363, out _out364);
                r = _out362;
                resultingOwnership = _out363;
                readIdents = _out364;
              }
            } else if (_source124.is_MapBuilder) {
              DAST._IType _3151___mcc_h190 = _source124.dtor_key;
              DAST._IType _3152___mcc_h191 = _source124.dtor_value;
              bool _3153_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3154_range = _3101___mcc_h125;
              DAST._IType _3155_b = _3100___mcc_h124;
              {
                RAST._IExpr _out365;
                DCOMP._IOwnership _out366;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out365, out _out366, out _out367);
                r = _out365;
                resultingOwnership = _out366;
                readIdents = _out367;
              }
            } else if (_source124.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3156___mcc_h196 = _source124.dtor_args;
              DAST._IType _3157___mcc_h197 = _source124.dtor_result;
              bool _3158_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3159_range = _3101___mcc_h125;
              DAST._IType _3160_b = _3100___mcc_h124;
              {
                RAST._IExpr _out368;
                DCOMP._IOwnership _out369;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out370;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out368, out _out369, out _out370);
                r = _out368;
                resultingOwnership = _out369;
                readIdents = _out370;
              }
            } else if (_source124.is_Primitive) {
              DAST._IPrimitive _3161___mcc_h202 = _source124.dtor_Primitive_a0;
              bool _3162_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3163_range = _3101___mcc_h125;
              DAST._IType _3164_b = _3100___mcc_h124;
              {
                RAST._IExpr _out371;
                DCOMP._IOwnership _out372;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out371, out _out372, out _out373);
                r = _out371;
                resultingOwnership = _out372;
                readIdents = _out373;
              }
            } else if (_source124.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3165___mcc_h205 = _source124.dtor_Passthrough_a0;
              bool _3166_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3167_range = _3101___mcc_h125;
              DAST._IType _3168_b = _3100___mcc_h124;
              {
                RAST._IExpr _out374;
                DCOMP._IOwnership _out375;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out374, out _out375, out _out376);
                r = _out374;
                resultingOwnership = _out375;
                readIdents = _out376;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3169___mcc_h208 = _source124.dtor_TypeArg_a0;
              bool _3170_erase = _3102___mcc_h126;
              DAST._INewtypeRange _3171_range = _3101___mcc_h125;
              DAST._IType _3172_b = _3100___mcc_h124;
              {
                RAST._IExpr _out377;
                DCOMP._IOwnership _out378;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                (this).GenExprConvertFromNewtype(e, selfIdent, @params, expectedOwnership, out _out377, out _out378, out _out379);
                r = _out377;
                resultingOwnership = _out378;
                readIdents = _out379;
              }
            }
          }
        } else if (_source118.is_Nullable) {
          DAST._IType _3173___mcc_h211 = _source118.dtor_Nullable_a0;
          DAST._IType _source126 = _3038___mcc_h1;
          if (_source126.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3174___mcc_h215 = _source126.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3175___mcc_h216 = _source126.dtor_typeArgs;
            DAST._IResolvedType _3176___mcc_h217 = _source126.dtor_resolved;
            DAST._IResolvedType _source127 = _3176___mcc_h217;
            if (_source127.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3177___mcc_h224 = _source127.dtor_path;
              {
                RAST._IExpr _out380;
                DCOMP._IOwnership _out381;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out382;
                (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out380, out _out381, out _out382);
                r = _out380;
                resultingOwnership = _out381;
                readIdents = _out382;
              }
            } else if (_source127.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3178___mcc_h227 = _source127.dtor_path;
              {
                RAST._IExpr _out383;
                DCOMP._IOwnership _out384;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out383, out _out384, out _out385);
                r = _out383;
                resultingOwnership = _out384;
                readIdents = _out385;
              }
            } else {
              DAST._IType _3179___mcc_h230 = _source127.dtor_baseType;
              DAST._INewtypeRange _3180___mcc_h231 = _source127.dtor_range;
              bool _3181___mcc_h232 = _source127.dtor_erase;
              {
                RAST._IExpr _out386;
                DCOMP._IOwnership _out387;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out386, out _out387, out _out388);
                r = _out386;
                resultingOwnership = _out387;
                readIdents = _out388;
              }
            }
          } else if (_source126.is_Nullable) {
            DAST._IType _3182___mcc_h239 = _source126.dtor_Nullable_a0;
            {
              RAST._IExpr _out389;
              DCOMP._IOwnership _out390;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out389, out _out390, out _out391);
              r = _out389;
              resultingOwnership = _out390;
              readIdents = _out391;
            }
          } else if (_source126.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3183___mcc_h242 = _source126.dtor_Tuple_a0;
            {
              RAST._IExpr _out392;
              DCOMP._IOwnership _out393;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out394;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out392, out _out393, out _out394);
              r = _out392;
              resultingOwnership = _out393;
              readIdents = _out394;
            }
          } else if (_source126.is_Array) {
            DAST._IType _3184___mcc_h245 = _source126.dtor_element;
            BigInteger _3185___mcc_h246 = _source126.dtor_dims;
            {
              RAST._IExpr _out395;
              DCOMP._IOwnership _out396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out395, out _out396, out _out397);
              r = _out395;
              resultingOwnership = _out396;
              readIdents = _out397;
            }
          } else if (_source126.is_Seq) {
            DAST._IType _3186___mcc_h251 = _source126.dtor_element;
            {
              RAST._IExpr _out398;
              DCOMP._IOwnership _out399;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out398, out _out399, out _out400);
              r = _out398;
              resultingOwnership = _out399;
              readIdents = _out400;
            }
          } else if (_source126.is_Set) {
            DAST._IType _3187___mcc_h254 = _source126.dtor_element;
            {
              RAST._IExpr _out401;
              DCOMP._IOwnership _out402;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out401, out _out402, out _out403);
              r = _out401;
              resultingOwnership = _out402;
              readIdents = _out403;
            }
          } else if (_source126.is_Multiset) {
            DAST._IType _3188___mcc_h257 = _source126.dtor_element;
            {
              RAST._IExpr _out404;
              DCOMP._IOwnership _out405;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out406;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out404, out _out405, out _out406);
              r = _out404;
              resultingOwnership = _out405;
              readIdents = _out406;
            }
          } else if (_source126.is_Map) {
            DAST._IType _3189___mcc_h260 = _source126.dtor_key;
            DAST._IType _3190___mcc_h261 = _source126.dtor_value;
            {
              RAST._IExpr _out407;
              DCOMP._IOwnership _out408;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out407, out _out408, out _out409);
              r = _out407;
              resultingOwnership = _out408;
              readIdents = _out409;
            }
          } else if (_source126.is_SetBuilder) {
            DAST._IType _3191___mcc_h266 = _source126.dtor_element;
            {
              RAST._IExpr _out410;
              DCOMP._IOwnership _out411;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out410, out _out411, out _out412);
              r = _out410;
              resultingOwnership = _out411;
              readIdents = _out412;
            }
          } else if (_source126.is_MapBuilder) {
            DAST._IType _3192___mcc_h269 = _source126.dtor_key;
            DAST._IType _3193___mcc_h270 = _source126.dtor_value;
            {
              RAST._IExpr _out413;
              DCOMP._IOwnership _out414;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out415;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out413, out _out414, out _out415);
              r = _out413;
              resultingOwnership = _out414;
              readIdents = _out415;
            }
          } else if (_source126.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3194___mcc_h275 = _source126.dtor_args;
            DAST._IType _3195___mcc_h276 = _source126.dtor_result;
            {
              RAST._IExpr _out416;
              DCOMP._IOwnership _out417;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out416, out _out417, out _out418);
              r = _out416;
              resultingOwnership = _out417;
              readIdents = _out418;
            }
          } else if (_source126.is_Primitive) {
            DAST._IPrimitive _3196___mcc_h281 = _source126.dtor_Primitive_a0;
            {
              RAST._IExpr _out419;
              DCOMP._IOwnership _out420;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out419, out _out420, out _out421);
              r = _out419;
              resultingOwnership = _out420;
              readIdents = _out421;
            }
          } else if (_source126.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3197___mcc_h284 = _source126.dtor_Passthrough_a0;
            {
              RAST._IExpr _out422;
              DCOMP._IOwnership _out423;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out422, out _out423, out _out424);
              r = _out422;
              resultingOwnership = _out423;
              readIdents = _out424;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3198___mcc_h287 = _source126.dtor_TypeArg_a0;
            {
              RAST._IExpr _out425;
              DCOMP._IOwnership _out426;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out427;
              (this).GenExprConvertFromNullable(e, selfIdent, @params, expectedOwnership, out _out425, out _out426, out _out427);
              r = _out425;
              resultingOwnership = _out426;
              readIdents = _out427;
            }
          }
        } else if (_source118.is_Tuple) {
          Dafny.ISequence<DAST._IType> _3199___mcc_h290 = _source118.dtor_Tuple_a0;
          DAST._IType _source128 = _3038___mcc_h1;
          if (_source128.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3200___mcc_h294 = _source128.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3201___mcc_h295 = _source128.dtor_typeArgs;
            DAST._IResolvedType _3202___mcc_h296 = _source128.dtor_resolved;
            DAST._IResolvedType _source129 = _3202___mcc_h296;
            if (_source129.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3203___mcc_h300 = _source129.dtor_path;
              {
                RAST._IExpr _out428;
                DCOMP._IOwnership _out429;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out428, out _out429, out _out430);
                r = _out428;
                resultingOwnership = _out429;
                readIdents = _out430;
              }
            } else if (_source129.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3204___mcc_h302 = _source129.dtor_path;
              {
                RAST._IExpr _out431;
                DCOMP._IOwnership _out432;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out431, out _out432, out _out433);
                r = _out431;
                resultingOwnership = _out432;
                readIdents = _out433;
              }
            } else {
              DAST._IType _3205___mcc_h304 = _source129.dtor_baseType;
              DAST._INewtypeRange _3206___mcc_h305 = _source129.dtor_range;
              bool _3207___mcc_h306 = _source129.dtor_erase;
              bool _3208_erase = _3207___mcc_h306;
              DAST._INewtypeRange _3209_range = _3206___mcc_h305;
              DAST._IType _3210_b = _3205___mcc_h304;
              {
                RAST._IExpr _out434;
                DCOMP._IOwnership _out435;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out434, out _out435, out _out436);
                r = _out434;
                resultingOwnership = _out435;
                readIdents = _out436;
              }
            }
          } else if (_source128.is_Nullable) {
            DAST._IType _3211___mcc_h310 = _source128.dtor_Nullable_a0;
            {
              RAST._IExpr _out437;
              DCOMP._IOwnership _out438;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out439;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out437, out _out438, out _out439);
              r = _out437;
              resultingOwnership = _out438;
              readIdents = _out439;
            }
          } else if (_source128.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3212___mcc_h312 = _source128.dtor_Tuple_a0;
            {
              RAST._IExpr _out440;
              DCOMP._IOwnership _out441;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out440, out _out441, out _out442);
              r = _out440;
              resultingOwnership = _out441;
              readIdents = _out442;
            }
          } else if (_source128.is_Array) {
            DAST._IType _3213___mcc_h314 = _source128.dtor_element;
            BigInteger _3214___mcc_h315 = _source128.dtor_dims;
            {
              RAST._IExpr _out443;
              DCOMP._IOwnership _out444;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out443, out _out444, out _out445);
              r = _out443;
              resultingOwnership = _out444;
              readIdents = _out445;
            }
          } else if (_source128.is_Seq) {
            DAST._IType _3215___mcc_h318 = _source128.dtor_element;
            {
              RAST._IExpr _out446;
              DCOMP._IOwnership _out447;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out446, out _out447, out _out448);
              r = _out446;
              resultingOwnership = _out447;
              readIdents = _out448;
            }
          } else if (_source128.is_Set) {
            DAST._IType _3216___mcc_h320 = _source128.dtor_element;
            {
              RAST._IExpr _out449;
              DCOMP._IOwnership _out450;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out451;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out449, out _out450, out _out451);
              r = _out449;
              resultingOwnership = _out450;
              readIdents = _out451;
            }
          } else if (_source128.is_Multiset) {
            DAST._IType _3217___mcc_h322 = _source128.dtor_element;
            {
              RAST._IExpr _out452;
              DCOMP._IOwnership _out453;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out452, out _out453, out _out454);
              r = _out452;
              resultingOwnership = _out453;
              readIdents = _out454;
            }
          } else if (_source128.is_Map) {
            DAST._IType _3218___mcc_h324 = _source128.dtor_key;
            DAST._IType _3219___mcc_h325 = _source128.dtor_value;
            {
              RAST._IExpr _out455;
              DCOMP._IOwnership _out456;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out455, out _out456, out _out457);
              r = _out455;
              resultingOwnership = _out456;
              readIdents = _out457;
            }
          } else if (_source128.is_SetBuilder) {
            DAST._IType _3220___mcc_h328 = _source128.dtor_element;
            {
              RAST._IExpr _out458;
              DCOMP._IOwnership _out459;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out458, out _out459, out _out460);
              r = _out458;
              resultingOwnership = _out459;
              readIdents = _out460;
            }
          } else if (_source128.is_MapBuilder) {
            DAST._IType _3221___mcc_h330 = _source128.dtor_key;
            DAST._IType _3222___mcc_h331 = _source128.dtor_value;
            {
              RAST._IExpr _out461;
              DCOMP._IOwnership _out462;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out463;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out461, out _out462, out _out463);
              r = _out461;
              resultingOwnership = _out462;
              readIdents = _out463;
            }
          } else if (_source128.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3223___mcc_h334 = _source128.dtor_args;
            DAST._IType _3224___mcc_h335 = _source128.dtor_result;
            {
              RAST._IExpr _out464;
              DCOMP._IOwnership _out465;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out466;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out464, out _out465, out _out466);
              r = _out464;
              resultingOwnership = _out465;
              readIdents = _out466;
            }
          } else if (_source128.is_Primitive) {
            DAST._IPrimitive _3225___mcc_h338 = _source128.dtor_Primitive_a0;
            {
              RAST._IExpr _out467;
              DCOMP._IOwnership _out468;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out467, out _out468, out _out469);
              r = _out467;
              resultingOwnership = _out468;
              readIdents = _out469;
            }
          } else if (_source128.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3226___mcc_h340 = _source128.dtor_Passthrough_a0;
            {
              RAST._IExpr _out470;
              DCOMP._IOwnership _out471;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out470, out _out471, out _out472);
              r = _out470;
              resultingOwnership = _out471;
              readIdents = _out472;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3227___mcc_h342 = _source128.dtor_TypeArg_a0;
            {
              RAST._IExpr _out473;
              DCOMP._IOwnership _out474;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out475;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out473, out _out474, out _out475);
              r = _out473;
              resultingOwnership = _out474;
              readIdents = _out475;
            }
          }
        } else if (_source118.is_Array) {
          DAST._IType _3228___mcc_h344 = _source118.dtor_element;
          BigInteger _3229___mcc_h345 = _source118.dtor_dims;
          DAST._IType _source130 = _3038___mcc_h1;
          if (_source130.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3230___mcc_h352 = _source130.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3231___mcc_h353 = _source130.dtor_typeArgs;
            DAST._IResolvedType _3232___mcc_h354 = _source130.dtor_resolved;
            DAST._IResolvedType _source131 = _3232___mcc_h354;
            if (_source131.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3233___mcc_h358 = _source131.dtor_path;
              {
                RAST._IExpr _out476;
                DCOMP._IOwnership _out477;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out476, out _out477, out _out478);
                r = _out476;
                resultingOwnership = _out477;
                readIdents = _out478;
              }
            } else if (_source131.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3234___mcc_h360 = _source131.dtor_path;
              {
                RAST._IExpr _out479;
                DCOMP._IOwnership _out480;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out479, out _out480, out _out481);
                r = _out479;
                resultingOwnership = _out480;
                readIdents = _out481;
              }
            } else {
              DAST._IType _3235___mcc_h362 = _source131.dtor_baseType;
              DAST._INewtypeRange _3236___mcc_h363 = _source131.dtor_range;
              bool _3237___mcc_h364 = _source131.dtor_erase;
              bool _3238_erase = _3237___mcc_h364;
              DAST._INewtypeRange _3239_range = _3236___mcc_h363;
              DAST._IType _3240_b = _3235___mcc_h362;
              {
                RAST._IExpr _out482;
                DCOMP._IOwnership _out483;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out482, out _out483, out _out484);
                r = _out482;
                resultingOwnership = _out483;
                readIdents = _out484;
              }
            }
          } else if (_source130.is_Nullable) {
            DAST._IType _3241___mcc_h368 = _source130.dtor_Nullable_a0;
            {
              RAST._IExpr _out485;
              DCOMP._IOwnership _out486;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out487;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out485, out _out486, out _out487);
              r = _out485;
              resultingOwnership = _out486;
              readIdents = _out487;
            }
          } else if (_source130.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3242___mcc_h370 = _source130.dtor_Tuple_a0;
            {
              RAST._IExpr _out488;
              DCOMP._IOwnership _out489;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out490;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out488, out _out489, out _out490);
              r = _out488;
              resultingOwnership = _out489;
              readIdents = _out490;
            }
          } else if (_source130.is_Array) {
            DAST._IType _3243___mcc_h372 = _source130.dtor_element;
            BigInteger _3244___mcc_h373 = _source130.dtor_dims;
            {
              RAST._IExpr _out491;
              DCOMP._IOwnership _out492;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out491, out _out492, out _out493);
              r = _out491;
              resultingOwnership = _out492;
              readIdents = _out493;
            }
          } else if (_source130.is_Seq) {
            DAST._IType _3245___mcc_h376 = _source130.dtor_element;
            {
              RAST._IExpr _out494;
              DCOMP._IOwnership _out495;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out494, out _out495, out _out496);
              r = _out494;
              resultingOwnership = _out495;
              readIdents = _out496;
            }
          } else if (_source130.is_Set) {
            DAST._IType _3246___mcc_h378 = _source130.dtor_element;
            {
              RAST._IExpr _out497;
              DCOMP._IOwnership _out498;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out499;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out497, out _out498, out _out499);
              r = _out497;
              resultingOwnership = _out498;
              readIdents = _out499;
            }
          } else if (_source130.is_Multiset) {
            DAST._IType _3247___mcc_h380 = _source130.dtor_element;
            {
              RAST._IExpr _out500;
              DCOMP._IOwnership _out501;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out500, out _out501, out _out502);
              r = _out500;
              resultingOwnership = _out501;
              readIdents = _out502;
            }
          } else if (_source130.is_Map) {
            DAST._IType _3248___mcc_h382 = _source130.dtor_key;
            DAST._IType _3249___mcc_h383 = _source130.dtor_value;
            {
              RAST._IExpr _out503;
              DCOMP._IOwnership _out504;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out503, out _out504, out _out505);
              r = _out503;
              resultingOwnership = _out504;
              readIdents = _out505;
            }
          } else if (_source130.is_SetBuilder) {
            DAST._IType _3250___mcc_h386 = _source130.dtor_element;
            {
              RAST._IExpr _out506;
              DCOMP._IOwnership _out507;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out508;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out506, out _out507, out _out508);
              r = _out506;
              resultingOwnership = _out507;
              readIdents = _out508;
            }
          } else if (_source130.is_MapBuilder) {
            DAST._IType _3251___mcc_h388 = _source130.dtor_key;
            DAST._IType _3252___mcc_h389 = _source130.dtor_value;
            {
              RAST._IExpr _out509;
              DCOMP._IOwnership _out510;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out511;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out509, out _out510, out _out511);
              r = _out509;
              resultingOwnership = _out510;
              readIdents = _out511;
            }
          } else if (_source130.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3253___mcc_h392 = _source130.dtor_args;
            DAST._IType _3254___mcc_h393 = _source130.dtor_result;
            {
              RAST._IExpr _out512;
              DCOMP._IOwnership _out513;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out512, out _out513, out _out514);
              r = _out512;
              resultingOwnership = _out513;
              readIdents = _out514;
            }
          } else if (_source130.is_Primitive) {
            DAST._IPrimitive _3255___mcc_h396 = _source130.dtor_Primitive_a0;
            {
              RAST._IExpr _out515;
              DCOMP._IOwnership _out516;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out515, out _out516, out _out517);
              r = _out515;
              resultingOwnership = _out516;
              readIdents = _out517;
            }
          } else if (_source130.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3256___mcc_h398 = _source130.dtor_Passthrough_a0;
            {
              RAST._IExpr _out518;
              DCOMP._IOwnership _out519;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out520;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out518, out _out519, out _out520);
              r = _out518;
              resultingOwnership = _out519;
              readIdents = _out520;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3257___mcc_h400 = _source130.dtor_TypeArg_a0;
            {
              RAST._IExpr _out521;
              DCOMP._IOwnership _out522;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out523;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out521, out _out522, out _out523);
              r = _out521;
              resultingOwnership = _out522;
              readIdents = _out523;
            }
          }
        } else if (_source118.is_Seq) {
          DAST._IType _3258___mcc_h402 = _source118.dtor_element;
          DAST._IType _source132 = _3038___mcc_h1;
          if (_source132.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3259___mcc_h406 = _source132.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3260___mcc_h407 = _source132.dtor_typeArgs;
            DAST._IResolvedType _3261___mcc_h408 = _source132.dtor_resolved;
            DAST._IResolvedType _source133 = _3261___mcc_h408;
            if (_source133.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3262___mcc_h412 = _source133.dtor_path;
              {
                RAST._IExpr _out524;
                DCOMP._IOwnership _out525;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out524, out _out525, out _out526);
                r = _out524;
                resultingOwnership = _out525;
                readIdents = _out526;
              }
            } else if (_source133.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3263___mcc_h414 = _source133.dtor_path;
              {
                RAST._IExpr _out527;
                DCOMP._IOwnership _out528;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out527, out _out528, out _out529);
                r = _out527;
                resultingOwnership = _out528;
                readIdents = _out529;
              }
            } else {
              DAST._IType _3264___mcc_h416 = _source133.dtor_baseType;
              DAST._INewtypeRange _3265___mcc_h417 = _source133.dtor_range;
              bool _3266___mcc_h418 = _source133.dtor_erase;
              bool _3267_erase = _3266___mcc_h418;
              DAST._INewtypeRange _3268_range = _3265___mcc_h417;
              DAST._IType _3269_b = _3264___mcc_h416;
              {
                RAST._IExpr _out530;
                DCOMP._IOwnership _out531;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out532;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out530, out _out531, out _out532);
                r = _out530;
                resultingOwnership = _out531;
                readIdents = _out532;
              }
            }
          } else if (_source132.is_Nullable) {
            DAST._IType _3270___mcc_h422 = _source132.dtor_Nullable_a0;
            {
              RAST._IExpr _out533;
              DCOMP._IOwnership _out534;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out535;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out533, out _out534, out _out535);
              r = _out533;
              resultingOwnership = _out534;
              readIdents = _out535;
            }
          } else if (_source132.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3271___mcc_h424 = _source132.dtor_Tuple_a0;
            {
              RAST._IExpr _out536;
              DCOMP._IOwnership _out537;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out536, out _out537, out _out538);
              r = _out536;
              resultingOwnership = _out537;
              readIdents = _out538;
            }
          } else if (_source132.is_Array) {
            DAST._IType _3272___mcc_h426 = _source132.dtor_element;
            BigInteger _3273___mcc_h427 = _source132.dtor_dims;
            {
              RAST._IExpr _out539;
              DCOMP._IOwnership _out540;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out539, out _out540, out _out541);
              r = _out539;
              resultingOwnership = _out540;
              readIdents = _out541;
            }
          } else if (_source132.is_Seq) {
            DAST._IType _3274___mcc_h430 = _source132.dtor_element;
            {
              RAST._IExpr _out542;
              DCOMP._IOwnership _out543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out542, out _out543, out _out544);
              r = _out542;
              resultingOwnership = _out543;
              readIdents = _out544;
            }
          } else if (_source132.is_Set) {
            DAST._IType _3275___mcc_h432 = _source132.dtor_element;
            {
              RAST._IExpr _out545;
              DCOMP._IOwnership _out546;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out547;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out545, out _out546, out _out547);
              r = _out545;
              resultingOwnership = _out546;
              readIdents = _out547;
            }
          } else if (_source132.is_Multiset) {
            DAST._IType _3276___mcc_h434 = _source132.dtor_element;
            {
              RAST._IExpr _out548;
              DCOMP._IOwnership _out549;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out548, out _out549, out _out550);
              r = _out548;
              resultingOwnership = _out549;
              readIdents = _out550;
            }
          } else if (_source132.is_Map) {
            DAST._IType _3277___mcc_h436 = _source132.dtor_key;
            DAST._IType _3278___mcc_h437 = _source132.dtor_value;
            {
              RAST._IExpr _out551;
              DCOMP._IOwnership _out552;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out551, out _out552, out _out553);
              r = _out551;
              resultingOwnership = _out552;
              readIdents = _out553;
            }
          } else if (_source132.is_SetBuilder) {
            DAST._IType _3279___mcc_h440 = _source132.dtor_element;
            {
              RAST._IExpr _out554;
              DCOMP._IOwnership _out555;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out554, out _out555, out _out556);
              r = _out554;
              resultingOwnership = _out555;
              readIdents = _out556;
            }
          } else if (_source132.is_MapBuilder) {
            DAST._IType _3280___mcc_h442 = _source132.dtor_key;
            DAST._IType _3281___mcc_h443 = _source132.dtor_value;
            {
              RAST._IExpr _out557;
              DCOMP._IOwnership _out558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out557, out _out558, out _out559);
              r = _out557;
              resultingOwnership = _out558;
              readIdents = _out559;
            }
          } else if (_source132.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3282___mcc_h446 = _source132.dtor_args;
            DAST._IType _3283___mcc_h447 = _source132.dtor_result;
            {
              RAST._IExpr _out560;
              DCOMP._IOwnership _out561;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out560, out _out561, out _out562);
              r = _out560;
              resultingOwnership = _out561;
              readIdents = _out562;
            }
          } else if (_source132.is_Primitive) {
            DAST._IPrimitive _3284___mcc_h450 = _source132.dtor_Primitive_a0;
            {
              RAST._IExpr _out563;
              DCOMP._IOwnership _out564;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out563, out _out564, out _out565);
              r = _out563;
              resultingOwnership = _out564;
              readIdents = _out565;
            }
          } else if (_source132.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3285___mcc_h452 = _source132.dtor_Passthrough_a0;
            {
              RAST._IExpr _out566;
              DCOMP._IOwnership _out567;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out568;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out566, out _out567, out _out568);
              r = _out566;
              resultingOwnership = _out567;
              readIdents = _out568;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3286___mcc_h454 = _source132.dtor_TypeArg_a0;
            {
              RAST._IExpr _out569;
              DCOMP._IOwnership _out570;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out569, out _out570, out _out571);
              r = _out569;
              resultingOwnership = _out570;
              readIdents = _out571;
            }
          }
        } else if (_source118.is_Set) {
          DAST._IType _3287___mcc_h456 = _source118.dtor_element;
          DAST._IType _source134 = _3038___mcc_h1;
          if (_source134.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3288___mcc_h460 = _source134.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3289___mcc_h461 = _source134.dtor_typeArgs;
            DAST._IResolvedType _3290___mcc_h462 = _source134.dtor_resolved;
            DAST._IResolvedType _source135 = _3290___mcc_h462;
            if (_source135.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3291___mcc_h466 = _source135.dtor_path;
              {
                RAST._IExpr _out572;
                DCOMP._IOwnership _out573;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out572, out _out573, out _out574);
                r = _out572;
                resultingOwnership = _out573;
                readIdents = _out574;
              }
            } else if (_source135.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3292___mcc_h468 = _source135.dtor_path;
              {
                RAST._IExpr _out575;
                DCOMP._IOwnership _out576;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out575, out _out576, out _out577);
                r = _out575;
                resultingOwnership = _out576;
                readIdents = _out577;
              }
            } else {
              DAST._IType _3293___mcc_h470 = _source135.dtor_baseType;
              DAST._INewtypeRange _3294___mcc_h471 = _source135.dtor_range;
              bool _3295___mcc_h472 = _source135.dtor_erase;
              bool _3296_erase = _3295___mcc_h472;
              DAST._INewtypeRange _3297_range = _3294___mcc_h471;
              DAST._IType _3298_b = _3293___mcc_h470;
              {
                RAST._IExpr _out578;
                DCOMP._IOwnership _out579;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out580;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out578, out _out579, out _out580);
                r = _out578;
                resultingOwnership = _out579;
                readIdents = _out580;
              }
            }
          } else if (_source134.is_Nullable) {
            DAST._IType _3299___mcc_h476 = _source134.dtor_Nullable_a0;
            {
              RAST._IExpr _out581;
              DCOMP._IOwnership _out582;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out581, out _out582, out _out583);
              r = _out581;
              resultingOwnership = _out582;
              readIdents = _out583;
            }
          } else if (_source134.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3300___mcc_h478 = _source134.dtor_Tuple_a0;
            {
              RAST._IExpr _out584;
              DCOMP._IOwnership _out585;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out584, out _out585, out _out586);
              r = _out584;
              resultingOwnership = _out585;
              readIdents = _out586;
            }
          } else if (_source134.is_Array) {
            DAST._IType _3301___mcc_h480 = _source134.dtor_element;
            BigInteger _3302___mcc_h481 = _source134.dtor_dims;
            {
              RAST._IExpr _out587;
              DCOMP._IOwnership _out588;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out587, out _out588, out _out589);
              r = _out587;
              resultingOwnership = _out588;
              readIdents = _out589;
            }
          } else if (_source134.is_Seq) {
            DAST._IType _3303___mcc_h484 = _source134.dtor_element;
            {
              RAST._IExpr _out590;
              DCOMP._IOwnership _out591;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out592;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out590, out _out591, out _out592);
              r = _out590;
              resultingOwnership = _out591;
              readIdents = _out592;
            }
          } else if (_source134.is_Set) {
            DAST._IType _3304___mcc_h486 = _source134.dtor_element;
            {
              RAST._IExpr _out593;
              DCOMP._IOwnership _out594;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out593, out _out594, out _out595);
              r = _out593;
              resultingOwnership = _out594;
              readIdents = _out595;
            }
          } else if (_source134.is_Multiset) {
            DAST._IType _3305___mcc_h488 = _source134.dtor_element;
            {
              RAST._IExpr _out596;
              DCOMP._IOwnership _out597;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out596, out _out597, out _out598);
              r = _out596;
              resultingOwnership = _out597;
              readIdents = _out598;
            }
          } else if (_source134.is_Map) {
            DAST._IType _3306___mcc_h490 = _source134.dtor_key;
            DAST._IType _3307___mcc_h491 = _source134.dtor_value;
            {
              RAST._IExpr _out599;
              DCOMP._IOwnership _out600;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out599, out _out600, out _out601);
              r = _out599;
              resultingOwnership = _out600;
              readIdents = _out601;
            }
          } else if (_source134.is_SetBuilder) {
            DAST._IType _3308___mcc_h494 = _source134.dtor_element;
            {
              RAST._IExpr _out602;
              DCOMP._IOwnership _out603;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out604;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out602, out _out603, out _out604);
              r = _out602;
              resultingOwnership = _out603;
              readIdents = _out604;
            }
          } else if (_source134.is_MapBuilder) {
            DAST._IType _3309___mcc_h496 = _source134.dtor_key;
            DAST._IType _3310___mcc_h497 = _source134.dtor_value;
            {
              RAST._IExpr _out605;
              DCOMP._IOwnership _out606;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out605, out _out606, out _out607);
              r = _out605;
              resultingOwnership = _out606;
              readIdents = _out607;
            }
          } else if (_source134.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3311___mcc_h500 = _source134.dtor_args;
            DAST._IType _3312___mcc_h501 = _source134.dtor_result;
            {
              RAST._IExpr _out608;
              DCOMP._IOwnership _out609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out608, out _out609, out _out610);
              r = _out608;
              resultingOwnership = _out609;
              readIdents = _out610;
            }
          } else if (_source134.is_Primitive) {
            DAST._IPrimitive _3313___mcc_h504 = _source134.dtor_Primitive_a0;
            {
              RAST._IExpr _out611;
              DCOMP._IOwnership _out612;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out613;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out611, out _out612, out _out613);
              r = _out611;
              resultingOwnership = _out612;
              readIdents = _out613;
            }
          } else if (_source134.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3314___mcc_h506 = _source134.dtor_Passthrough_a0;
            {
              RAST._IExpr _out614;
              DCOMP._IOwnership _out615;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out616;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out614, out _out615, out _out616);
              r = _out614;
              resultingOwnership = _out615;
              readIdents = _out616;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3315___mcc_h508 = _source134.dtor_TypeArg_a0;
            {
              RAST._IExpr _out617;
              DCOMP._IOwnership _out618;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out617, out _out618, out _out619);
              r = _out617;
              resultingOwnership = _out618;
              readIdents = _out619;
            }
          }
        } else if (_source118.is_Multiset) {
          DAST._IType _3316___mcc_h510 = _source118.dtor_element;
          DAST._IType _source136 = _3038___mcc_h1;
          if (_source136.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3317___mcc_h514 = _source136.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3318___mcc_h515 = _source136.dtor_typeArgs;
            DAST._IResolvedType _3319___mcc_h516 = _source136.dtor_resolved;
            DAST._IResolvedType _source137 = _3319___mcc_h516;
            if (_source137.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3320___mcc_h520 = _source137.dtor_path;
              {
                RAST._IExpr _out620;
                DCOMP._IOwnership _out621;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out620, out _out621, out _out622);
                r = _out620;
                resultingOwnership = _out621;
                readIdents = _out622;
              }
            } else if (_source137.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3321___mcc_h522 = _source137.dtor_path;
              {
                RAST._IExpr _out623;
                DCOMP._IOwnership _out624;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out625;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out623, out _out624, out _out625);
                r = _out623;
                resultingOwnership = _out624;
                readIdents = _out625;
              }
            } else {
              DAST._IType _3322___mcc_h524 = _source137.dtor_baseType;
              DAST._INewtypeRange _3323___mcc_h525 = _source137.dtor_range;
              bool _3324___mcc_h526 = _source137.dtor_erase;
              bool _3325_erase = _3324___mcc_h526;
              DAST._INewtypeRange _3326_range = _3323___mcc_h525;
              DAST._IType _3327_b = _3322___mcc_h524;
              {
                RAST._IExpr _out626;
                DCOMP._IOwnership _out627;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out628;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out626, out _out627, out _out628);
                r = _out626;
                resultingOwnership = _out627;
                readIdents = _out628;
              }
            }
          } else if (_source136.is_Nullable) {
            DAST._IType _3328___mcc_h530 = _source136.dtor_Nullable_a0;
            {
              RAST._IExpr _out629;
              DCOMP._IOwnership _out630;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out629, out _out630, out _out631);
              r = _out629;
              resultingOwnership = _out630;
              readIdents = _out631;
            }
          } else if (_source136.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3329___mcc_h532 = _source136.dtor_Tuple_a0;
            {
              RAST._IExpr _out632;
              DCOMP._IOwnership _out633;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out632, out _out633, out _out634);
              r = _out632;
              resultingOwnership = _out633;
              readIdents = _out634;
            }
          } else if (_source136.is_Array) {
            DAST._IType _3330___mcc_h534 = _source136.dtor_element;
            BigInteger _3331___mcc_h535 = _source136.dtor_dims;
            {
              RAST._IExpr _out635;
              DCOMP._IOwnership _out636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out637;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out635, out _out636, out _out637);
              r = _out635;
              resultingOwnership = _out636;
              readIdents = _out637;
            }
          } else if (_source136.is_Seq) {
            DAST._IType _3332___mcc_h538 = _source136.dtor_element;
            {
              RAST._IExpr _out638;
              DCOMP._IOwnership _out639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out638, out _out639, out _out640);
              r = _out638;
              resultingOwnership = _out639;
              readIdents = _out640;
            }
          } else if (_source136.is_Set) {
            DAST._IType _3333___mcc_h540 = _source136.dtor_element;
            {
              RAST._IExpr _out641;
              DCOMP._IOwnership _out642;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out641, out _out642, out _out643);
              r = _out641;
              resultingOwnership = _out642;
              readIdents = _out643;
            }
          } else if (_source136.is_Multiset) {
            DAST._IType _3334___mcc_h542 = _source136.dtor_element;
            {
              RAST._IExpr _out644;
              DCOMP._IOwnership _out645;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out644, out _out645, out _out646);
              r = _out644;
              resultingOwnership = _out645;
              readIdents = _out646;
            }
          } else if (_source136.is_Map) {
            DAST._IType _3335___mcc_h544 = _source136.dtor_key;
            DAST._IType _3336___mcc_h545 = _source136.dtor_value;
            {
              RAST._IExpr _out647;
              DCOMP._IOwnership _out648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out649;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out647, out _out648, out _out649);
              r = _out647;
              resultingOwnership = _out648;
              readIdents = _out649;
            }
          } else if (_source136.is_SetBuilder) {
            DAST._IType _3337___mcc_h548 = _source136.dtor_element;
            {
              RAST._IExpr _out650;
              DCOMP._IOwnership _out651;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out650, out _out651, out _out652);
              r = _out650;
              resultingOwnership = _out651;
              readIdents = _out652;
            }
          } else if (_source136.is_MapBuilder) {
            DAST._IType _3338___mcc_h550 = _source136.dtor_key;
            DAST._IType _3339___mcc_h551 = _source136.dtor_value;
            {
              RAST._IExpr _out653;
              DCOMP._IOwnership _out654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out653, out _out654, out _out655);
              r = _out653;
              resultingOwnership = _out654;
              readIdents = _out655;
            }
          } else if (_source136.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3340___mcc_h554 = _source136.dtor_args;
            DAST._IType _3341___mcc_h555 = _source136.dtor_result;
            {
              RAST._IExpr _out656;
              DCOMP._IOwnership _out657;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out658;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out656, out _out657, out _out658);
              r = _out656;
              resultingOwnership = _out657;
              readIdents = _out658;
            }
          } else if (_source136.is_Primitive) {
            DAST._IPrimitive _3342___mcc_h558 = _source136.dtor_Primitive_a0;
            {
              RAST._IExpr _out659;
              DCOMP._IOwnership _out660;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out661;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out659, out _out660, out _out661);
              r = _out659;
              resultingOwnership = _out660;
              readIdents = _out661;
            }
          } else if (_source136.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3343___mcc_h560 = _source136.dtor_Passthrough_a0;
            {
              RAST._IExpr _out662;
              DCOMP._IOwnership _out663;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out662, out _out663, out _out664);
              r = _out662;
              resultingOwnership = _out663;
              readIdents = _out664;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3344___mcc_h562 = _source136.dtor_TypeArg_a0;
            {
              RAST._IExpr _out665;
              DCOMP._IOwnership _out666;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out665, out _out666, out _out667);
              r = _out665;
              resultingOwnership = _out666;
              readIdents = _out667;
            }
          }
        } else if (_source118.is_Map) {
          DAST._IType _3345___mcc_h564 = _source118.dtor_key;
          DAST._IType _3346___mcc_h565 = _source118.dtor_value;
          DAST._IType _source138 = _3038___mcc_h1;
          if (_source138.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3347___mcc_h572 = _source138.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3348___mcc_h573 = _source138.dtor_typeArgs;
            DAST._IResolvedType _3349___mcc_h574 = _source138.dtor_resolved;
            DAST._IResolvedType _source139 = _3349___mcc_h574;
            if (_source139.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3350___mcc_h578 = _source139.dtor_path;
              {
                RAST._IExpr _out668;
                DCOMP._IOwnership _out669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out668, out _out669, out _out670);
                r = _out668;
                resultingOwnership = _out669;
                readIdents = _out670;
              }
            } else if (_source139.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3351___mcc_h580 = _source139.dtor_path;
              {
                RAST._IExpr _out671;
                DCOMP._IOwnership _out672;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out673;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out671, out _out672, out _out673);
                r = _out671;
                resultingOwnership = _out672;
                readIdents = _out673;
              }
            } else {
              DAST._IType _3352___mcc_h582 = _source139.dtor_baseType;
              DAST._INewtypeRange _3353___mcc_h583 = _source139.dtor_range;
              bool _3354___mcc_h584 = _source139.dtor_erase;
              bool _3355_erase = _3354___mcc_h584;
              DAST._INewtypeRange _3356_range = _3353___mcc_h583;
              DAST._IType _3357_b = _3352___mcc_h582;
              {
                RAST._IExpr _out674;
                DCOMP._IOwnership _out675;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out674, out _out675, out _out676);
                r = _out674;
                resultingOwnership = _out675;
                readIdents = _out676;
              }
            }
          } else if (_source138.is_Nullable) {
            DAST._IType _3358___mcc_h588 = _source138.dtor_Nullable_a0;
            {
              RAST._IExpr _out677;
              DCOMP._IOwnership _out678;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out677, out _out678, out _out679);
              r = _out677;
              resultingOwnership = _out678;
              readIdents = _out679;
            }
          } else if (_source138.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3359___mcc_h590 = _source138.dtor_Tuple_a0;
            {
              RAST._IExpr _out680;
              DCOMP._IOwnership _out681;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out682;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out680, out _out681, out _out682);
              r = _out680;
              resultingOwnership = _out681;
              readIdents = _out682;
            }
          } else if (_source138.is_Array) {
            DAST._IType _3360___mcc_h592 = _source138.dtor_element;
            BigInteger _3361___mcc_h593 = _source138.dtor_dims;
            {
              RAST._IExpr _out683;
              DCOMP._IOwnership _out684;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out685;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out683, out _out684, out _out685);
              r = _out683;
              resultingOwnership = _out684;
              readIdents = _out685;
            }
          } else if (_source138.is_Seq) {
            DAST._IType _3362___mcc_h596 = _source138.dtor_element;
            {
              RAST._IExpr _out686;
              DCOMP._IOwnership _out687;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out686, out _out687, out _out688);
              r = _out686;
              resultingOwnership = _out687;
              readIdents = _out688;
            }
          } else if (_source138.is_Set) {
            DAST._IType _3363___mcc_h598 = _source138.dtor_element;
            {
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out689, out _out690, out _out691);
              r = _out689;
              resultingOwnership = _out690;
              readIdents = _out691;
            }
          } else if (_source138.is_Multiset) {
            DAST._IType _3364___mcc_h600 = _source138.dtor_element;
            {
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out694;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out692, out _out693, out _out694);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _out694;
            }
          } else if (_source138.is_Map) {
            DAST._IType _3365___mcc_h602 = _source138.dtor_key;
            DAST._IType _3366___mcc_h603 = _source138.dtor_value;
            {
              RAST._IExpr _out695;
              DCOMP._IOwnership _out696;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out697;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out695, out _out696, out _out697);
              r = _out695;
              resultingOwnership = _out696;
              readIdents = _out697;
            }
          } else if (_source138.is_SetBuilder) {
            DAST._IType _3367___mcc_h606 = _source138.dtor_element;
            {
              RAST._IExpr _out698;
              DCOMP._IOwnership _out699;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out698, out _out699, out _out700);
              r = _out698;
              resultingOwnership = _out699;
              readIdents = _out700;
            }
          } else if (_source138.is_MapBuilder) {
            DAST._IType _3368___mcc_h608 = _source138.dtor_key;
            DAST._IType _3369___mcc_h609 = _source138.dtor_value;
            {
              RAST._IExpr _out701;
              DCOMP._IOwnership _out702;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out701, out _out702, out _out703);
              r = _out701;
              resultingOwnership = _out702;
              readIdents = _out703;
            }
          } else if (_source138.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3370___mcc_h612 = _source138.dtor_args;
            DAST._IType _3371___mcc_h613 = _source138.dtor_result;
            {
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out704, out _out705, out _out706);
              r = _out704;
              resultingOwnership = _out705;
              readIdents = _out706;
            }
          } else if (_source138.is_Primitive) {
            DAST._IPrimitive _3372___mcc_h616 = _source138.dtor_Primitive_a0;
            {
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out707, out _out708, out _out709);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _out709;
            }
          } else if (_source138.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3373___mcc_h618 = _source138.dtor_Passthrough_a0;
            {
              RAST._IExpr _out710;
              DCOMP._IOwnership _out711;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out710, out _out711, out _out712);
              r = _out710;
              resultingOwnership = _out711;
              readIdents = _out712;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3374___mcc_h620 = _source138.dtor_TypeArg_a0;
            {
              RAST._IExpr _out713;
              DCOMP._IOwnership _out714;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out713, out _out714, out _out715);
              r = _out713;
              resultingOwnership = _out714;
              readIdents = _out715;
            }
          }
        } else if (_source118.is_SetBuilder) {
          DAST._IType _3375___mcc_h622 = _source118.dtor_element;
          DAST._IType _source140 = _3038___mcc_h1;
          if (_source140.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3376___mcc_h626 = _source140.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3377___mcc_h627 = _source140.dtor_typeArgs;
            DAST._IResolvedType _3378___mcc_h628 = _source140.dtor_resolved;
            DAST._IResolvedType _source141 = _3378___mcc_h628;
            if (_source141.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3379___mcc_h632 = _source141.dtor_path;
              {
                RAST._IExpr _out716;
                DCOMP._IOwnership _out717;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out718;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out716, out _out717, out _out718);
                r = _out716;
                resultingOwnership = _out717;
                readIdents = _out718;
              }
            } else if (_source141.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3380___mcc_h634 = _source141.dtor_path;
              {
                RAST._IExpr _out719;
                DCOMP._IOwnership _out720;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out719, out _out720, out _out721);
                r = _out719;
                resultingOwnership = _out720;
                readIdents = _out721;
              }
            } else {
              DAST._IType _3381___mcc_h636 = _source141.dtor_baseType;
              DAST._INewtypeRange _3382___mcc_h637 = _source141.dtor_range;
              bool _3383___mcc_h638 = _source141.dtor_erase;
              bool _3384_erase = _3383___mcc_h638;
              DAST._INewtypeRange _3385_range = _3382___mcc_h637;
              DAST._IType _3386_b = _3381___mcc_h636;
              {
                RAST._IExpr _out722;
                DCOMP._IOwnership _out723;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out722, out _out723, out _out724);
                r = _out722;
                resultingOwnership = _out723;
                readIdents = _out724;
              }
            }
          } else if (_source140.is_Nullable) {
            DAST._IType _3387___mcc_h642 = _source140.dtor_Nullable_a0;
            {
              RAST._IExpr _out725;
              DCOMP._IOwnership _out726;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out725, out _out726, out _out727);
              r = _out725;
              resultingOwnership = _out726;
              readIdents = _out727;
            }
          } else if (_source140.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3388___mcc_h644 = _source140.dtor_Tuple_a0;
            {
              RAST._IExpr _out728;
              DCOMP._IOwnership _out729;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out728, out _out729, out _out730);
              r = _out728;
              resultingOwnership = _out729;
              readIdents = _out730;
            }
          } else if (_source140.is_Array) {
            DAST._IType _3389___mcc_h646 = _source140.dtor_element;
            BigInteger _3390___mcc_h647 = _source140.dtor_dims;
            {
              RAST._IExpr _out731;
              DCOMP._IOwnership _out732;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out731, out _out732, out _out733);
              r = _out731;
              resultingOwnership = _out732;
              readIdents = _out733;
            }
          } else if (_source140.is_Seq) {
            DAST._IType _3391___mcc_h650 = _source140.dtor_element;
            {
              RAST._IExpr _out734;
              DCOMP._IOwnership _out735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out734, out _out735, out _out736);
              r = _out734;
              resultingOwnership = _out735;
              readIdents = _out736;
            }
          } else if (_source140.is_Set) {
            DAST._IType _3392___mcc_h652 = _source140.dtor_element;
            {
              RAST._IExpr _out737;
              DCOMP._IOwnership _out738;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out739;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out737, out _out738, out _out739);
              r = _out737;
              resultingOwnership = _out738;
              readIdents = _out739;
            }
          } else if (_source140.is_Multiset) {
            DAST._IType _3393___mcc_h654 = _source140.dtor_element;
            {
              RAST._IExpr _out740;
              DCOMP._IOwnership _out741;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out742;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out740, out _out741, out _out742);
              r = _out740;
              resultingOwnership = _out741;
              readIdents = _out742;
            }
          } else if (_source140.is_Map) {
            DAST._IType _3394___mcc_h656 = _source140.dtor_key;
            DAST._IType _3395___mcc_h657 = _source140.dtor_value;
            {
              RAST._IExpr _out743;
              DCOMP._IOwnership _out744;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out743, out _out744, out _out745);
              r = _out743;
              resultingOwnership = _out744;
              readIdents = _out745;
            }
          } else if (_source140.is_SetBuilder) {
            DAST._IType _3396___mcc_h660 = _source140.dtor_element;
            {
              RAST._IExpr _out746;
              DCOMP._IOwnership _out747;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out746, out _out747, out _out748);
              r = _out746;
              resultingOwnership = _out747;
              readIdents = _out748;
            }
          } else if (_source140.is_MapBuilder) {
            DAST._IType _3397___mcc_h662 = _source140.dtor_key;
            DAST._IType _3398___mcc_h663 = _source140.dtor_value;
            {
              RAST._IExpr _out749;
              DCOMP._IOwnership _out750;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out749, out _out750, out _out751);
              r = _out749;
              resultingOwnership = _out750;
              readIdents = _out751;
            }
          } else if (_source140.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3399___mcc_h666 = _source140.dtor_args;
            DAST._IType _3400___mcc_h667 = _source140.dtor_result;
            {
              RAST._IExpr _out752;
              DCOMP._IOwnership _out753;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out752, out _out753, out _out754);
              r = _out752;
              resultingOwnership = _out753;
              readIdents = _out754;
            }
          } else if (_source140.is_Primitive) {
            DAST._IPrimitive _3401___mcc_h670 = _source140.dtor_Primitive_a0;
            {
              RAST._IExpr _out755;
              DCOMP._IOwnership _out756;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out755, out _out756, out _out757);
              r = _out755;
              resultingOwnership = _out756;
              readIdents = _out757;
            }
          } else if (_source140.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3402___mcc_h672 = _source140.dtor_Passthrough_a0;
            {
              RAST._IExpr _out758;
              DCOMP._IOwnership _out759;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out758, out _out759, out _out760);
              r = _out758;
              resultingOwnership = _out759;
              readIdents = _out760;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3403___mcc_h674 = _source140.dtor_TypeArg_a0;
            {
              RAST._IExpr _out761;
              DCOMP._IOwnership _out762;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out763;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out761, out _out762, out _out763);
              r = _out761;
              resultingOwnership = _out762;
              readIdents = _out763;
            }
          }
        } else if (_source118.is_MapBuilder) {
          DAST._IType _3404___mcc_h676 = _source118.dtor_key;
          DAST._IType _3405___mcc_h677 = _source118.dtor_value;
          DAST._IType _source142 = _3038___mcc_h1;
          if (_source142.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3406___mcc_h684 = _source142.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3407___mcc_h685 = _source142.dtor_typeArgs;
            DAST._IResolvedType _3408___mcc_h686 = _source142.dtor_resolved;
            DAST._IResolvedType _source143 = _3408___mcc_h686;
            if (_source143.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3409___mcc_h690 = _source143.dtor_path;
              {
                RAST._IExpr _out764;
                DCOMP._IOwnership _out765;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out764, out _out765, out _out766);
                r = _out764;
                resultingOwnership = _out765;
                readIdents = _out766;
              }
            } else if (_source143.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3410___mcc_h692 = _source143.dtor_path;
              {
                RAST._IExpr _out767;
                DCOMP._IOwnership _out768;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out767, out _out768, out _out769);
                r = _out767;
                resultingOwnership = _out768;
                readIdents = _out769;
              }
            } else {
              DAST._IType _3411___mcc_h694 = _source143.dtor_baseType;
              DAST._INewtypeRange _3412___mcc_h695 = _source143.dtor_range;
              bool _3413___mcc_h696 = _source143.dtor_erase;
              bool _3414_erase = _3413___mcc_h696;
              DAST._INewtypeRange _3415_range = _3412___mcc_h695;
              DAST._IType _3416_b = _3411___mcc_h694;
              {
                RAST._IExpr _out770;
                DCOMP._IOwnership _out771;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out770, out _out771, out _out772);
                r = _out770;
                resultingOwnership = _out771;
                readIdents = _out772;
              }
            }
          } else if (_source142.is_Nullable) {
            DAST._IType _3417___mcc_h700 = _source142.dtor_Nullable_a0;
            {
              RAST._IExpr _out773;
              DCOMP._IOwnership _out774;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out775;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out773, out _out774, out _out775);
              r = _out773;
              resultingOwnership = _out774;
              readIdents = _out775;
            }
          } else if (_source142.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3418___mcc_h702 = _source142.dtor_Tuple_a0;
            {
              RAST._IExpr _out776;
              DCOMP._IOwnership _out777;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out776, out _out777, out _out778);
              r = _out776;
              resultingOwnership = _out777;
              readIdents = _out778;
            }
          } else if (_source142.is_Array) {
            DAST._IType _3419___mcc_h704 = _source142.dtor_element;
            BigInteger _3420___mcc_h705 = _source142.dtor_dims;
            {
              RAST._IExpr _out779;
              DCOMP._IOwnership _out780;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out779, out _out780, out _out781);
              r = _out779;
              resultingOwnership = _out780;
              readIdents = _out781;
            }
          } else if (_source142.is_Seq) {
            DAST._IType _3421___mcc_h708 = _source142.dtor_element;
            {
              RAST._IExpr _out782;
              DCOMP._IOwnership _out783;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out782, out _out783, out _out784);
              r = _out782;
              resultingOwnership = _out783;
              readIdents = _out784;
            }
          } else if (_source142.is_Set) {
            DAST._IType _3422___mcc_h710 = _source142.dtor_element;
            {
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out785, out _out786, out _out787);
              r = _out785;
              resultingOwnership = _out786;
              readIdents = _out787;
            }
          } else if (_source142.is_Multiset) {
            DAST._IType _3423___mcc_h712 = _source142.dtor_element;
            {
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out788, out _out789, out _out790);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _out790;
            }
          } else if (_source142.is_Map) {
            DAST._IType _3424___mcc_h714 = _source142.dtor_key;
            DAST._IType _3425___mcc_h715 = _source142.dtor_value;
            {
              RAST._IExpr _out791;
              DCOMP._IOwnership _out792;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out791, out _out792, out _out793);
              r = _out791;
              resultingOwnership = _out792;
              readIdents = _out793;
            }
          } else if (_source142.is_SetBuilder) {
            DAST._IType _3426___mcc_h718 = _source142.dtor_element;
            {
              RAST._IExpr _out794;
              DCOMP._IOwnership _out795;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out794, out _out795, out _out796);
              r = _out794;
              resultingOwnership = _out795;
              readIdents = _out796;
            }
          } else if (_source142.is_MapBuilder) {
            DAST._IType _3427___mcc_h720 = _source142.dtor_key;
            DAST._IType _3428___mcc_h721 = _source142.dtor_value;
            {
              RAST._IExpr _out797;
              DCOMP._IOwnership _out798;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out799;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out797, out _out798, out _out799);
              r = _out797;
              resultingOwnership = _out798;
              readIdents = _out799;
            }
          } else if (_source142.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3429___mcc_h724 = _source142.dtor_args;
            DAST._IType _3430___mcc_h725 = _source142.dtor_result;
            {
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out800, out _out801, out _out802);
              r = _out800;
              resultingOwnership = _out801;
              readIdents = _out802;
            }
          } else if (_source142.is_Primitive) {
            DAST._IPrimitive _3431___mcc_h728 = _source142.dtor_Primitive_a0;
            {
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out803, out _out804, out _out805);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _out805;
            }
          } else if (_source142.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3432___mcc_h730 = _source142.dtor_Passthrough_a0;
            {
              RAST._IExpr _out806;
              DCOMP._IOwnership _out807;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out808;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out806, out _out807, out _out808);
              r = _out806;
              resultingOwnership = _out807;
              readIdents = _out808;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3433___mcc_h732 = _source142.dtor_TypeArg_a0;
            {
              RAST._IExpr _out809;
              DCOMP._IOwnership _out810;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out811;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out809, out _out810, out _out811);
              r = _out809;
              resultingOwnership = _out810;
              readIdents = _out811;
            }
          }
        } else if (_source118.is_Arrow) {
          Dafny.ISequence<DAST._IType> _3434___mcc_h734 = _source118.dtor_args;
          DAST._IType _3435___mcc_h735 = _source118.dtor_result;
          DAST._IType _source144 = _3038___mcc_h1;
          if (_source144.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3436___mcc_h742 = _source144.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3437___mcc_h743 = _source144.dtor_typeArgs;
            DAST._IResolvedType _3438___mcc_h744 = _source144.dtor_resolved;
            DAST._IResolvedType _source145 = _3438___mcc_h744;
            if (_source145.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3439___mcc_h748 = _source145.dtor_path;
              {
                RAST._IExpr _out812;
                DCOMP._IOwnership _out813;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out812, out _out813, out _out814);
                r = _out812;
                resultingOwnership = _out813;
                readIdents = _out814;
              }
            } else if (_source145.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3440___mcc_h750 = _source145.dtor_path;
              {
                RAST._IExpr _out815;
                DCOMP._IOwnership _out816;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out815, out _out816, out _out817);
                r = _out815;
                resultingOwnership = _out816;
                readIdents = _out817;
              }
            } else {
              DAST._IType _3441___mcc_h752 = _source145.dtor_baseType;
              DAST._INewtypeRange _3442___mcc_h753 = _source145.dtor_range;
              bool _3443___mcc_h754 = _source145.dtor_erase;
              bool _3444_erase = _3443___mcc_h754;
              DAST._INewtypeRange _3445_range = _3442___mcc_h753;
              DAST._IType _3446_b = _3441___mcc_h752;
              {
                RAST._IExpr _out818;
                DCOMP._IOwnership _out819;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out820;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out818, out _out819, out _out820);
                r = _out818;
                resultingOwnership = _out819;
                readIdents = _out820;
              }
            }
          } else if (_source144.is_Nullable) {
            DAST._IType _3447___mcc_h758 = _source144.dtor_Nullable_a0;
            {
              RAST._IExpr _out821;
              DCOMP._IOwnership _out822;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out823;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out821, out _out822, out _out823);
              r = _out821;
              resultingOwnership = _out822;
              readIdents = _out823;
            }
          } else if (_source144.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3448___mcc_h760 = _source144.dtor_Tuple_a0;
            {
              RAST._IExpr _out824;
              DCOMP._IOwnership _out825;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out824, out _out825, out _out826);
              r = _out824;
              resultingOwnership = _out825;
              readIdents = _out826;
            }
          } else if (_source144.is_Array) {
            DAST._IType _3449___mcc_h762 = _source144.dtor_element;
            BigInteger _3450___mcc_h763 = _source144.dtor_dims;
            {
              RAST._IExpr _out827;
              DCOMP._IOwnership _out828;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out829;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out827, out _out828, out _out829);
              r = _out827;
              resultingOwnership = _out828;
              readIdents = _out829;
            }
          } else if (_source144.is_Seq) {
            DAST._IType _3451___mcc_h766 = _source144.dtor_element;
            {
              RAST._IExpr _out830;
              DCOMP._IOwnership _out831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out830, out _out831, out _out832);
              r = _out830;
              resultingOwnership = _out831;
              readIdents = _out832;
            }
          } else if (_source144.is_Set) {
            DAST._IType _3452___mcc_h768 = _source144.dtor_element;
            {
              RAST._IExpr _out833;
              DCOMP._IOwnership _out834;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out833, out _out834, out _out835);
              r = _out833;
              resultingOwnership = _out834;
              readIdents = _out835;
            }
          } else if (_source144.is_Multiset) {
            DAST._IType _3453___mcc_h770 = _source144.dtor_element;
            {
              RAST._IExpr _out836;
              DCOMP._IOwnership _out837;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out836, out _out837, out _out838);
              r = _out836;
              resultingOwnership = _out837;
              readIdents = _out838;
            }
          } else if (_source144.is_Map) {
            DAST._IType _3454___mcc_h772 = _source144.dtor_key;
            DAST._IType _3455___mcc_h773 = _source144.dtor_value;
            {
              RAST._IExpr _out839;
              DCOMP._IOwnership _out840;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out841;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out839, out _out840, out _out841);
              r = _out839;
              resultingOwnership = _out840;
              readIdents = _out841;
            }
          } else if (_source144.is_SetBuilder) {
            DAST._IType _3456___mcc_h776 = _source144.dtor_element;
            {
              RAST._IExpr _out842;
              DCOMP._IOwnership _out843;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out844;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out842, out _out843, out _out844);
              r = _out842;
              resultingOwnership = _out843;
              readIdents = _out844;
            }
          } else if (_source144.is_MapBuilder) {
            DAST._IType _3457___mcc_h778 = _source144.dtor_key;
            DAST._IType _3458___mcc_h779 = _source144.dtor_value;
            {
              RAST._IExpr _out845;
              DCOMP._IOwnership _out846;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out845, out _out846, out _out847);
              r = _out845;
              resultingOwnership = _out846;
              readIdents = _out847;
            }
          } else if (_source144.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3459___mcc_h782 = _source144.dtor_args;
            DAST._IType _3460___mcc_h783 = _source144.dtor_result;
            {
              RAST._IExpr _out848;
              DCOMP._IOwnership _out849;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out848, out _out849, out _out850);
              r = _out848;
              resultingOwnership = _out849;
              readIdents = _out850;
            }
          } else if (_source144.is_Primitive) {
            DAST._IPrimitive _3461___mcc_h786 = _source144.dtor_Primitive_a0;
            {
              RAST._IExpr _out851;
              DCOMP._IOwnership _out852;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out851, out _out852, out _out853);
              r = _out851;
              resultingOwnership = _out852;
              readIdents = _out853;
            }
          } else if (_source144.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3462___mcc_h788 = _source144.dtor_Passthrough_a0;
            {
              RAST._IExpr _out854;
              DCOMP._IOwnership _out855;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out856;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out854, out _out855, out _out856);
              r = _out854;
              resultingOwnership = _out855;
              readIdents = _out856;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3463___mcc_h790 = _source144.dtor_TypeArg_a0;
            {
              RAST._IExpr _out857;
              DCOMP._IOwnership _out858;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out857, out _out858, out _out859);
              r = _out857;
              resultingOwnership = _out858;
              readIdents = _out859;
            }
          }
        } else if (_source118.is_Primitive) {
          DAST._IPrimitive _3464___mcc_h792 = _source118.dtor_Primitive_a0;
          DAST._IPrimitive _source146 = _3464___mcc_h792;
          if (_source146.is_Int) {
            DAST._IType _source147 = _3038___mcc_h1;
            if (_source147.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3465___mcc_h796 = _source147.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3466___mcc_h797 = _source147.dtor_typeArgs;
              DAST._IResolvedType _3467___mcc_h798 = _source147.dtor_resolved;
              DAST._IResolvedType _source148 = _3467___mcc_h798;
              if (_source148.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3468___mcc_h802 = _source148.dtor_path;
                {
                  RAST._IExpr _out860;
                  DCOMP._IOwnership _out861;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out860, out _out861, out _out862);
                  r = _out860;
                  resultingOwnership = _out861;
                  readIdents = _out862;
                }
              } else if (_source148.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3469___mcc_h804 = _source148.dtor_path;
                {
                  RAST._IExpr _out863;
                  DCOMP._IOwnership _out864;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out865;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out863, out _out864, out _out865);
                  r = _out863;
                  resultingOwnership = _out864;
                  readIdents = _out865;
                }
              } else {
                DAST._IType _3470___mcc_h806 = _source148.dtor_baseType;
                DAST._INewtypeRange _3471___mcc_h807 = _source148.dtor_range;
                bool _3472___mcc_h808 = _source148.dtor_erase;
                bool _3473_erase = _3472___mcc_h808;
                DAST._INewtypeRange _3474_range = _3471___mcc_h807;
                DAST._IType _3475_b = _3470___mcc_h806;
                {
                  RAST._IExpr _out866;
                  DCOMP._IOwnership _out867;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out866, out _out867, out _out868);
                  r = _out866;
                  resultingOwnership = _out867;
                  readIdents = _out868;
                }
              }
            } else if (_source147.is_Nullable) {
              DAST._IType _3476___mcc_h812 = _source147.dtor_Nullable_a0;
              {
                RAST._IExpr _out869;
                DCOMP._IOwnership _out870;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out869, out _out870, out _out871);
                r = _out869;
                resultingOwnership = _out870;
                readIdents = _out871;
              }
            } else if (_source147.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3477___mcc_h814 = _source147.dtor_Tuple_a0;
              {
                RAST._IExpr _out872;
                DCOMP._IOwnership _out873;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out872, out _out873, out _out874);
                r = _out872;
                resultingOwnership = _out873;
                readIdents = _out874;
              }
            } else if (_source147.is_Array) {
              DAST._IType _3478___mcc_h816 = _source147.dtor_element;
              BigInteger _3479___mcc_h817 = _source147.dtor_dims;
              {
                RAST._IExpr _out875;
                DCOMP._IOwnership _out876;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out877;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out875, out _out876, out _out877);
                r = _out875;
                resultingOwnership = _out876;
                readIdents = _out877;
              }
            } else if (_source147.is_Seq) {
              DAST._IType _3480___mcc_h820 = _source147.dtor_element;
              {
                RAST._IExpr _out878;
                DCOMP._IOwnership _out879;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out880;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out878, out _out879, out _out880);
                r = _out878;
                resultingOwnership = _out879;
                readIdents = _out880;
              }
            } else if (_source147.is_Set) {
              DAST._IType _3481___mcc_h822 = _source147.dtor_element;
              {
                RAST._IExpr _out881;
                DCOMP._IOwnership _out882;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out881, out _out882, out _out883);
                r = _out881;
                resultingOwnership = _out882;
                readIdents = _out883;
              }
            } else if (_source147.is_Multiset) {
              DAST._IType _3482___mcc_h824 = _source147.dtor_element;
              {
                RAST._IExpr _out884;
                DCOMP._IOwnership _out885;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out884, out _out885, out _out886);
                r = _out884;
                resultingOwnership = _out885;
                readIdents = _out886;
              }
            } else if (_source147.is_Map) {
              DAST._IType _3483___mcc_h826 = _source147.dtor_key;
              DAST._IType _3484___mcc_h827 = _source147.dtor_value;
              {
                RAST._IExpr _out887;
                DCOMP._IOwnership _out888;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out889;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out887, out _out888, out _out889);
                r = _out887;
                resultingOwnership = _out888;
                readIdents = _out889;
              }
            } else if (_source147.is_SetBuilder) {
              DAST._IType _3485___mcc_h830 = _source147.dtor_element;
              {
                RAST._IExpr _out890;
                DCOMP._IOwnership _out891;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out890, out _out891, out _out892);
                r = _out890;
                resultingOwnership = _out891;
                readIdents = _out892;
              }
            } else if (_source147.is_MapBuilder) {
              DAST._IType _3486___mcc_h832 = _source147.dtor_key;
              DAST._IType _3487___mcc_h833 = _source147.dtor_value;
              {
                RAST._IExpr _out893;
                DCOMP._IOwnership _out894;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out893, out _out894, out _out895);
                r = _out893;
                resultingOwnership = _out894;
                readIdents = _out895;
              }
            } else if (_source147.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3488___mcc_h836 = _source147.dtor_args;
              DAST._IType _3489___mcc_h837 = _source147.dtor_result;
              {
                RAST._IExpr _out896;
                DCOMP._IOwnership _out897;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out896, out _out897, out _out898);
                r = _out896;
                resultingOwnership = _out897;
                readIdents = _out898;
              }
            } else if (_source147.is_Primitive) {
              DAST._IPrimitive _3490___mcc_h840 = _source147.dtor_Primitive_a0;
              DAST._IPrimitive _source149 = _3490___mcc_h840;
              if (_source149.is_Int) {
                {
                  RAST._IExpr _out899;
                  DCOMP._IOwnership _out900;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out901;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out899, out _out900, out _out901);
                  r = _out899;
                  resultingOwnership = _out900;
                  readIdents = _out901;
                }
              } else if (_source149.is_Real) {
                {
                  RAST._IExpr _3491_recursiveGen;
                  DCOMP._IOwnership _3492___v79;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3493_recIdents;
                  RAST._IExpr _out902;
                  DCOMP._IOwnership _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out902, out _out903, out _out904);
                  _3491_recursiveGen = _out902;
                  _3492___v79 = _out903;
                  _3493_recIdents = _out904;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_3491_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out905;
                  DCOMP._IOwnership _out906;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out905, out _out906);
                  r = _out905;
                  resultingOwnership = _out906;
                  readIdents = _3493_recIdents;
                }
              } else if (_source149.is_String) {
                {
                  RAST._IExpr _out907;
                  DCOMP._IOwnership _out908;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out909;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out907, out _out908, out _out909);
                  r = _out907;
                  resultingOwnership = _out908;
                  readIdents = _out909;
                }
              } else if (_source149.is_Bool) {
                {
                  RAST._IExpr _out910;
                  DCOMP._IOwnership _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out910, out _out911, out _out912);
                  r = _out910;
                  resultingOwnership = _out911;
                  readIdents = _out912;
                }
              } else {
                {
                  RAST._IType _3494_rhsType;
                  RAST._IType _out913;
                  _out913 = (this).GenType(_3033_toTpe, true, false);
                  _3494_rhsType = _out913;
                  RAST._IExpr _3495_recursiveGen;
                  DCOMP._IOwnership _3496___v85;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3497_recIdents;
                  RAST._IExpr _out914;
                  DCOMP._IOwnership _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out914, out _out915, out _out916);
                  _3495_recursiveGen = _out914;
                  _3496___v85 = _out915;
                  _3497_recIdents = _out916;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_3495_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out917;
                  DCOMP._IOwnership _out918;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out917, out _out918);
                  r = _out917;
                  resultingOwnership = _out918;
                  readIdents = _3497_recIdents;
                }
              }
            } else if (_source147.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3498___mcc_h842 = _source147.dtor_Passthrough_a0;
              {
                RAST._IType _3499_rhsType;
                RAST._IType _out919;
                _out919 = (this).GenType(_3033_toTpe, true, false);
                _3499_rhsType = _out919;
                RAST._IExpr _3500_recursiveGen;
                DCOMP._IOwnership _3501___v82;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3502_recIdents;
                RAST._IExpr _out920;
                DCOMP._IOwnership _out921;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out920, out _out921, out _out922);
                _3500_recursiveGen = _out920;
                _3501___v82 = _out921;
                _3502_recIdents = _out922;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_3499_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_3500_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out923;
                DCOMP._IOwnership _out924;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out923, out _out924);
                r = _out923;
                resultingOwnership = _out924;
                readIdents = _3502_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3503___mcc_h844 = _source147.dtor_TypeArg_a0;
              {
                RAST._IExpr _out925;
                DCOMP._IOwnership _out926;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out925, out _out926, out _out927);
                r = _out925;
                resultingOwnership = _out926;
                readIdents = _out927;
              }
            }
          } else if (_source146.is_Real) {
            DAST._IType _source150 = _3038___mcc_h1;
            if (_source150.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3504___mcc_h846 = _source150.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3505___mcc_h847 = _source150.dtor_typeArgs;
              DAST._IResolvedType _3506___mcc_h848 = _source150.dtor_resolved;
              DAST._IResolvedType _source151 = _3506___mcc_h848;
              if (_source151.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3507___mcc_h852 = _source151.dtor_path;
                {
                  RAST._IExpr _out928;
                  DCOMP._IOwnership _out929;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out930;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out928, out _out929, out _out930);
                  r = _out928;
                  resultingOwnership = _out929;
                  readIdents = _out930;
                }
              } else if (_source151.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3508___mcc_h854 = _source151.dtor_path;
                {
                  RAST._IExpr _out931;
                  DCOMP._IOwnership _out932;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out933;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out931, out _out932, out _out933);
                  r = _out931;
                  resultingOwnership = _out932;
                  readIdents = _out933;
                }
              } else {
                DAST._IType _3509___mcc_h856 = _source151.dtor_baseType;
                DAST._INewtypeRange _3510___mcc_h857 = _source151.dtor_range;
                bool _3511___mcc_h858 = _source151.dtor_erase;
                bool _3512_erase = _3511___mcc_h858;
                DAST._INewtypeRange _3513_range = _3510___mcc_h857;
                DAST._IType _3514_b = _3509___mcc_h856;
                {
                  RAST._IExpr _out934;
                  DCOMP._IOwnership _out935;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out934, out _out935, out _out936);
                  r = _out934;
                  resultingOwnership = _out935;
                  readIdents = _out936;
                }
              }
            } else if (_source150.is_Nullable) {
              DAST._IType _3515___mcc_h862 = _source150.dtor_Nullable_a0;
              {
                RAST._IExpr _out937;
                DCOMP._IOwnership _out938;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out939;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out937, out _out938, out _out939);
                r = _out937;
                resultingOwnership = _out938;
                readIdents = _out939;
              }
            } else if (_source150.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3516___mcc_h864 = _source150.dtor_Tuple_a0;
              {
                RAST._IExpr _out940;
                DCOMP._IOwnership _out941;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out942;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out940, out _out941, out _out942);
                r = _out940;
                resultingOwnership = _out941;
                readIdents = _out942;
              }
            } else if (_source150.is_Array) {
              DAST._IType _3517___mcc_h866 = _source150.dtor_element;
              BigInteger _3518___mcc_h867 = _source150.dtor_dims;
              {
                RAST._IExpr _out943;
                DCOMP._IOwnership _out944;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out945;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out943, out _out944, out _out945);
                r = _out943;
                resultingOwnership = _out944;
                readIdents = _out945;
              }
            } else if (_source150.is_Seq) {
              DAST._IType _3519___mcc_h870 = _source150.dtor_element;
              {
                RAST._IExpr _out946;
                DCOMP._IOwnership _out947;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out946, out _out947, out _out948);
                r = _out946;
                resultingOwnership = _out947;
                readIdents = _out948;
              }
            } else if (_source150.is_Set) {
              DAST._IType _3520___mcc_h872 = _source150.dtor_element;
              {
                RAST._IExpr _out949;
                DCOMP._IOwnership _out950;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out951;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out949, out _out950, out _out951);
                r = _out949;
                resultingOwnership = _out950;
                readIdents = _out951;
              }
            } else if (_source150.is_Multiset) {
              DAST._IType _3521___mcc_h874 = _source150.dtor_element;
              {
                RAST._IExpr _out952;
                DCOMP._IOwnership _out953;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out952, out _out953, out _out954);
                r = _out952;
                resultingOwnership = _out953;
                readIdents = _out954;
              }
            } else if (_source150.is_Map) {
              DAST._IType _3522___mcc_h876 = _source150.dtor_key;
              DAST._IType _3523___mcc_h877 = _source150.dtor_value;
              {
                RAST._IExpr _out955;
                DCOMP._IOwnership _out956;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out955, out _out956, out _out957);
                r = _out955;
                resultingOwnership = _out956;
                readIdents = _out957;
              }
            } else if (_source150.is_SetBuilder) {
              DAST._IType _3524___mcc_h880 = _source150.dtor_element;
              {
                RAST._IExpr _out958;
                DCOMP._IOwnership _out959;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out958, out _out959, out _out960);
                r = _out958;
                resultingOwnership = _out959;
                readIdents = _out960;
              }
            } else if (_source150.is_MapBuilder) {
              DAST._IType _3525___mcc_h882 = _source150.dtor_key;
              DAST._IType _3526___mcc_h883 = _source150.dtor_value;
              {
                RAST._IExpr _out961;
                DCOMP._IOwnership _out962;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out963;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out961, out _out962, out _out963);
                r = _out961;
                resultingOwnership = _out962;
                readIdents = _out963;
              }
            } else if (_source150.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3527___mcc_h886 = _source150.dtor_args;
              DAST._IType _3528___mcc_h887 = _source150.dtor_result;
              {
                RAST._IExpr _out964;
                DCOMP._IOwnership _out965;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out966;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out964, out _out965, out _out966);
                r = _out964;
                resultingOwnership = _out965;
                readIdents = _out966;
              }
            } else if (_source150.is_Primitive) {
              DAST._IPrimitive _3529___mcc_h890 = _source150.dtor_Primitive_a0;
              DAST._IPrimitive _source152 = _3529___mcc_h890;
              if (_source152.is_Int) {
                {
                  RAST._IExpr _3530_recursiveGen;
                  DCOMP._IOwnership _3531___v80;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3532_recIdents;
                  RAST._IExpr _out967;
                  DCOMP._IOwnership _out968;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                  (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out967, out _out968, out _out969);
                  _3530_recursiveGen = _out967;
                  _3531___v80 = _out968;
                  _3532_recIdents = _out969;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_3530_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out970;
                  DCOMP._IOwnership _out971;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out970, out _out971);
                  r = _out970;
                  resultingOwnership = _out971;
                  readIdents = _3532_recIdents;
                }
              } else if (_source152.is_Real) {
                {
                  RAST._IExpr _out972;
                  DCOMP._IOwnership _out973;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out972, out _out973, out _out974);
                  r = _out972;
                  resultingOwnership = _out973;
                  readIdents = _out974;
                }
              } else if (_source152.is_String) {
                {
                  RAST._IExpr _out975;
                  DCOMP._IOwnership _out976;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out975, out _out976, out _out977);
                  r = _out975;
                  resultingOwnership = _out976;
                  readIdents = _out977;
                }
              } else if (_source152.is_Bool) {
                {
                  RAST._IExpr _out978;
                  DCOMP._IOwnership _out979;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out978, out _out979, out _out980);
                  r = _out978;
                  resultingOwnership = _out979;
                  readIdents = _out980;
                }
              } else {
                {
                  RAST._IExpr _out981;
                  DCOMP._IOwnership _out982;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out983;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out981, out _out982, out _out983);
                  r = _out981;
                  resultingOwnership = _out982;
                  readIdents = _out983;
                }
              }
            } else if (_source150.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3533___mcc_h892 = _source150.dtor_Passthrough_a0;
              {
                RAST._IExpr _out984;
                DCOMP._IOwnership _out985;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out986;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out984, out _out985, out _out986);
                r = _out984;
                resultingOwnership = _out985;
                readIdents = _out986;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3534___mcc_h894 = _source150.dtor_TypeArg_a0;
              {
                RAST._IExpr _out987;
                DCOMP._IOwnership _out988;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out987, out _out988, out _out989);
                r = _out987;
                resultingOwnership = _out988;
                readIdents = _out989;
              }
            }
          } else if (_source146.is_String) {
            DAST._IType _source153 = _3038___mcc_h1;
            if (_source153.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3535___mcc_h896 = _source153.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3536___mcc_h897 = _source153.dtor_typeArgs;
              DAST._IResolvedType _3537___mcc_h898 = _source153.dtor_resolved;
              DAST._IResolvedType _source154 = _3537___mcc_h898;
              if (_source154.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3538___mcc_h902 = _source154.dtor_path;
                {
                  RAST._IExpr _out990;
                  DCOMP._IOwnership _out991;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out990, out _out991, out _out992);
                  r = _out990;
                  resultingOwnership = _out991;
                  readIdents = _out992;
                }
              } else if (_source154.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3539___mcc_h904 = _source154.dtor_path;
                {
                  RAST._IExpr _out993;
                  DCOMP._IOwnership _out994;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out995;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out993, out _out994, out _out995);
                  r = _out993;
                  resultingOwnership = _out994;
                  readIdents = _out995;
                }
              } else {
                DAST._IType _3540___mcc_h906 = _source154.dtor_baseType;
                DAST._INewtypeRange _3541___mcc_h907 = _source154.dtor_range;
                bool _3542___mcc_h908 = _source154.dtor_erase;
                bool _3543_erase = _3542___mcc_h908;
                DAST._INewtypeRange _3544_range = _3541___mcc_h907;
                DAST._IType _3545_b = _3540___mcc_h906;
                {
                  RAST._IExpr _out996;
                  DCOMP._IOwnership _out997;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out996, out _out997, out _out998);
                  r = _out996;
                  resultingOwnership = _out997;
                  readIdents = _out998;
                }
              }
            } else if (_source153.is_Nullable) {
              DAST._IType _3546___mcc_h912 = _source153.dtor_Nullable_a0;
              {
                RAST._IExpr _out999;
                DCOMP._IOwnership _out1000;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1001;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out999, out _out1000, out _out1001);
                r = _out999;
                resultingOwnership = _out1000;
                readIdents = _out1001;
              }
            } else if (_source153.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3547___mcc_h914 = _source153.dtor_Tuple_a0;
              {
                RAST._IExpr _out1002;
                DCOMP._IOwnership _out1003;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1002, out _out1003, out _out1004);
                r = _out1002;
                resultingOwnership = _out1003;
                readIdents = _out1004;
              }
            } else if (_source153.is_Array) {
              DAST._IType _3548___mcc_h916 = _source153.dtor_element;
              BigInteger _3549___mcc_h917 = _source153.dtor_dims;
              {
                RAST._IExpr _out1005;
                DCOMP._IOwnership _out1006;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1005, out _out1006, out _out1007);
                r = _out1005;
                resultingOwnership = _out1006;
                readIdents = _out1007;
              }
            } else if (_source153.is_Seq) {
              DAST._IType _3550___mcc_h920 = _source153.dtor_element;
              {
                RAST._IExpr _out1008;
                DCOMP._IOwnership _out1009;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1008, out _out1009, out _out1010);
                r = _out1008;
                resultingOwnership = _out1009;
                readIdents = _out1010;
              }
            } else if (_source153.is_Set) {
              DAST._IType _3551___mcc_h922 = _source153.dtor_element;
              {
                RAST._IExpr _out1011;
                DCOMP._IOwnership _out1012;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1011, out _out1012, out _out1013);
                r = _out1011;
                resultingOwnership = _out1012;
                readIdents = _out1013;
              }
            } else if (_source153.is_Multiset) {
              DAST._IType _3552___mcc_h924 = _source153.dtor_element;
              {
                RAST._IExpr _out1014;
                DCOMP._IOwnership _out1015;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1014, out _out1015, out _out1016);
                r = _out1014;
                resultingOwnership = _out1015;
                readIdents = _out1016;
              }
            } else if (_source153.is_Map) {
              DAST._IType _3553___mcc_h926 = _source153.dtor_key;
              DAST._IType _3554___mcc_h927 = _source153.dtor_value;
              {
                RAST._IExpr _out1017;
                DCOMP._IOwnership _out1018;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1017, out _out1018, out _out1019);
                r = _out1017;
                resultingOwnership = _out1018;
                readIdents = _out1019;
              }
            } else if (_source153.is_SetBuilder) {
              DAST._IType _3555___mcc_h930 = _source153.dtor_element;
              {
                RAST._IExpr _out1020;
                DCOMP._IOwnership _out1021;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1022;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1020, out _out1021, out _out1022);
                r = _out1020;
                resultingOwnership = _out1021;
                readIdents = _out1022;
              }
            } else if (_source153.is_MapBuilder) {
              DAST._IType _3556___mcc_h932 = _source153.dtor_key;
              DAST._IType _3557___mcc_h933 = _source153.dtor_value;
              {
                RAST._IExpr _out1023;
                DCOMP._IOwnership _out1024;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1025;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1023, out _out1024, out _out1025);
                r = _out1023;
                resultingOwnership = _out1024;
                readIdents = _out1025;
              }
            } else if (_source153.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3558___mcc_h936 = _source153.dtor_args;
              DAST._IType _3559___mcc_h937 = _source153.dtor_result;
              {
                RAST._IExpr _out1026;
                DCOMP._IOwnership _out1027;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1026, out _out1027, out _out1028);
                r = _out1026;
                resultingOwnership = _out1027;
                readIdents = _out1028;
              }
            } else if (_source153.is_Primitive) {
              DAST._IPrimitive _3560___mcc_h940 = _source153.dtor_Primitive_a0;
              {
                RAST._IExpr _out1029;
                DCOMP._IOwnership _out1030;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1029, out _out1030, out _out1031);
                r = _out1029;
                resultingOwnership = _out1030;
                readIdents = _out1031;
              }
            } else if (_source153.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3561___mcc_h942 = _source153.dtor_Passthrough_a0;
              {
                RAST._IExpr _out1032;
                DCOMP._IOwnership _out1033;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1034;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1032, out _out1033, out _out1034);
                r = _out1032;
                resultingOwnership = _out1033;
                readIdents = _out1034;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3562___mcc_h944 = _source153.dtor_TypeArg_a0;
              {
                RAST._IExpr _out1035;
                DCOMP._IOwnership _out1036;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1035, out _out1036, out _out1037);
                r = _out1035;
                resultingOwnership = _out1036;
                readIdents = _out1037;
              }
            }
          } else if (_source146.is_Bool) {
            DAST._IType _source155 = _3038___mcc_h1;
            if (_source155.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3563___mcc_h946 = _source155.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3564___mcc_h947 = _source155.dtor_typeArgs;
              DAST._IResolvedType _3565___mcc_h948 = _source155.dtor_resolved;
              DAST._IResolvedType _source156 = _3565___mcc_h948;
              if (_source156.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3566___mcc_h952 = _source156.dtor_path;
                {
                  RAST._IExpr _out1038;
                  DCOMP._IOwnership _out1039;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1038, out _out1039, out _out1040);
                  r = _out1038;
                  resultingOwnership = _out1039;
                  readIdents = _out1040;
                }
              } else if (_source156.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3567___mcc_h954 = _source156.dtor_path;
                {
                  RAST._IExpr _out1041;
                  DCOMP._IOwnership _out1042;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1041, out _out1042, out _out1043);
                  r = _out1041;
                  resultingOwnership = _out1042;
                  readIdents = _out1043;
                }
              } else {
                DAST._IType _3568___mcc_h956 = _source156.dtor_baseType;
                DAST._INewtypeRange _3569___mcc_h957 = _source156.dtor_range;
                bool _3570___mcc_h958 = _source156.dtor_erase;
                bool _3571_erase = _3570___mcc_h958;
                DAST._INewtypeRange _3572_range = _3569___mcc_h957;
                DAST._IType _3573_b = _3568___mcc_h956;
                {
                  RAST._IExpr _out1044;
                  DCOMP._IOwnership _out1045;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1046;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out1044, out _out1045, out _out1046);
                  r = _out1044;
                  resultingOwnership = _out1045;
                  readIdents = _out1046;
                }
              }
            } else if (_source155.is_Nullable) {
              DAST._IType _3574___mcc_h962 = _source155.dtor_Nullable_a0;
              {
                RAST._IExpr _out1047;
                DCOMP._IOwnership _out1048;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out1047, out _out1048, out _out1049);
                r = _out1047;
                resultingOwnership = _out1048;
                readIdents = _out1049;
              }
            } else if (_source155.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3575___mcc_h964 = _source155.dtor_Tuple_a0;
              {
                RAST._IExpr _out1050;
                DCOMP._IOwnership _out1051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1050, out _out1051, out _out1052);
                r = _out1050;
                resultingOwnership = _out1051;
                readIdents = _out1052;
              }
            } else if (_source155.is_Array) {
              DAST._IType _3576___mcc_h966 = _source155.dtor_element;
              BigInteger _3577___mcc_h967 = _source155.dtor_dims;
              {
                RAST._IExpr _out1053;
                DCOMP._IOwnership _out1054;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1053, out _out1054, out _out1055);
                r = _out1053;
                resultingOwnership = _out1054;
                readIdents = _out1055;
              }
            } else if (_source155.is_Seq) {
              DAST._IType _3578___mcc_h970 = _source155.dtor_element;
              {
                RAST._IExpr _out1056;
                DCOMP._IOwnership _out1057;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1058;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1056, out _out1057, out _out1058);
                r = _out1056;
                resultingOwnership = _out1057;
                readIdents = _out1058;
              }
            } else if (_source155.is_Set) {
              DAST._IType _3579___mcc_h972 = _source155.dtor_element;
              {
                RAST._IExpr _out1059;
                DCOMP._IOwnership _out1060;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1061;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1059, out _out1060, out _out1061);
                r = _out1059;
                resultingOwnership = _out1060;
                readIdents = _out1061;
              }
            } else if (_source155.is_Multiset) {
              DAST._IType _3580___mcc_h974 = _source155.dtor_element;
              {
                RAST._IExpr _out1062;
                DCOMP._IOwnership _out1063;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1062, out _out1063, out _out1064);
                r = _out1062;
                resultingOwnership = _out1063;
                readIdents = _out1064;
              }
            } else if (_source155.is_Map) {
              DAST._IType _3581___mcc_h976 = _source155.dtor_key;
              DAST._IType _3582___mcc_h977 = _source155.dtor_value;
              {
                RAST._IExpr _out1065;
                DCOMP._IOwnership _out1066;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1065, out _out1066, out _out1067);
                r = _out1065;
                resultingOwnership = _out1066;
                readIdents = _out1067;
              }
            } else if (_source155.is_SetBuilder) {
              DAST._IType _3583___mcc_h980 = _source155.dtor_element;
              {
                RAST._IExpr _out1068;
                DCOMP._IOwnership _out1069;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1070;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1068, out _out1069, out _out1070);
                r = _out1068;
                resultingOwnership = _out1069;
                readIdents = _out1070;
              }
            } else if (_source155.is_MapBuilder) {
              DAST._IType _3584___mcc_h982 = _source155.dtor_key;
              DAST._IType _3585___mcc_h983 = _source155.dtor_value;
              {
                RAST._IExpr _out1071;
                DCOMP._IOwnership _out1072;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1073;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1071, out _out1072, out _out1073);
                r = _out1071;
                resultingOwnership = _out1072;
                readIdents = _out1073;
              }
            } else if (_source155.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3586___mcc_h986 = _source155.dtor_args;
              DAST._IType _3587___mcc_h987 = _source155.dtor_result;
              {
                RAST._IExpr _out1074;
                DCOMP._IOwnership _out1075;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1074, out _out1075, out _out1076);
                r = _out1074;
                resultingOwnership = _out1075;
                readIdents = _out1076;
              }
            } else if (_source155.is_Primitive) {
              DAST._IPrimitive _3588___mcc_h990 = _source155.dtor_Primitive_a0;
              {
                RAST._IExpr _out1077;
                DCOMP._IOwnership _out1078;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1077, out _out1078, out _out1079);
                r = _out1077;
                resultingOwnership = _out1078;
                readIdents = _out1079;
              }
            } else if (_source155.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3589___mcc_h992 = _source155.dtor_Passthrough_a0;
              {
                RAST._IExpr _out1080;
                DCOMP._IOwnership _out1081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1082;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1080, out _out1081, out _out1082);
                r = _out1080;
                resultingOwnership = _out1081;
                readIdents = _out1082;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3590___mcc_h994 = _source155.dtor_TypeArg_a0;
              {
                RAST._IExpr _out1083;
                DCOMP._IOwnership _out1084;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1083, out _out1084, out _out1085);
                r = _out1083;
                resultingOwnership = _out1084;
                readIdents = _out1085;
              }
            }
          } else {
            DAST._IType _source157 = _3038___mcc_h1;
            if (_source157.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3591___mcc_h996 = _source157.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3592___mcc_h997 = _source157.dtor_typeArgs;
              DAST._IResolvedType _3593___mcc_h998 = _source157.dtor_resolved;
              DAST._IResolvedType _source158 = _3593___mcc_h998;
              if (_source158.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3594___mcc_h1002 = _source158.dtor_path;
                {
                  RAST._IExpr _out1086;
                  DCOMP._IOwnership _out1087;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1086, out _out1087, out _out1088);
                  r = _out1086;
                  resultingOwnership = _out1087;
                  readIdents = _out1088;
                }
              } else if (_source158.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3595___mcc_h1004 = _source158.dtor_path;
                {
                  RAST._IExpr _out1089;
                  DCOMP._IOwnership _out1090;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1091;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1089, out _out1090, out _out1091);
                  r = _out1089;
                  resultingOwnership = _out1090;
                  readIdents = _out1091;
                }
              } else {
                DAST._IType _3596___mcc_h1006 = _source158.dtor_baseType;
                DAST._INewtypeRange _3597___mcc_h1007 = _source158.dtor_range;
                bool _3598___mcc_h1008 = _source158.dtor_erase;
                bool _3599_erase = _3598___mcc_h1008;
                DAST._INewtypeRange _3600_range = _3597___mcc_h1007;
                DAST._IType _3601_b = _3596___mcc_h1006;
                {
                  RAST._IExpr _out1092;
                  DCOMP._IOwnership _out1093;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1094;
                  (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out1092, out _out1093, out _out1094);
                  r = _out1092;
                  resultingOwnership = _out1093;
                  readIdents = _out1094;
                }
              }
            } else if (_source157.is_Nullable) {
              DAST._IType _3602___mcc_h1012 = _source157.dtor_Nullable_a0;
              {
                RAST._IExpr _out1095;
                DCOMP._IOwnership _out1096;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1097;
                (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out1095, out _out1096, out _out1097);
                r = _out1095;
                resultingOwnership = _out1096;
                readIdents = _out1097;
              }
            } else if (_source157.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3603___mcc_h1014 = _source157.dtor_Tuple_a0;
              {
                RAST._IExpr _out1098;
                DCOMP._IOwnership _out1099;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1098, out _out1099, out _out1100);
                r = _out1098;
                resultingOwnership = _out1099;
                readIdents = _out1100;
              }
            } else if (_source157.is_Array) {
              DAST._IType _3604___mcc_h1016 = _source157.dtor_element;
              BigInteger _3605___mcc_h1017 = _source157.dtor_dims;
              {
                RAST._IExpr _out1101;
                DCOMP._IOwnership _out1102;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1103;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1101, out _out1102, out _out1103);
                r = _out1101;
                resultingOwnership = _out1102;
                readIdents = _out1103;
              }
            } else if (_source157.is_Seq) {
              DAST._IType _3606___mcc_h1020 = _source157.dtor_element;
              {
                RAST._IExpr _out1104;
                DCOMP._IOwnership _out1105;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1106;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1104, out _out1105, out _out1106);
                r = _out1104;
                resultingOwnership = _out1105;
                readIdents = _out1106;
              }
            } else if (_source157.is_Set) {
              DAST._IType _3607___mcc_h1022 = _source157.dtor_element;
              {
                RAST._IExpr _out1107;
                DCOMP._IOwnership _out1108;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1107, out _out1108, out _out1109);
                r = _out1107;
                resultingOwnership = _out1108;
                readIdents = _out1109;
              }
            } else if (_source157.is_Multiset) {
              DAST._IType _3608___mcc_h1024 = _source157.dtor_element;
              {
                RAST._IExpr _out1110;
                DCOMP._IOwnership _out1111;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1110, out _out1111, out _out1112);
                r = _out1110;
                resultingOwnership = _out1111;
                readIdents = _out1112;
              }
            } else if (_source157.is_Map) {
              DAST._IType _3609___mcc_h1026 = _source157.dtor_key;
              DAST._IType _3610___mcc_h1027 = _source157.dtor_value;
              {
                RAST._IExpr _out1113;
                DCOMP._IOwnership _out1114;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1113, out _out1114, out _out1115);
                r = _out1113;
                resultingOwnership = _out1114;
                readIdents = _out1115;
              }
            } else if (_source157.is_SetBuilder) {
              DAST._IType _3611___mcc_h1030 = _source157.dtor_element;
              {
                RAST._IExpr _out1116;
                DCOMP._IOwnership _out1117;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1116, out _out1117, out _out1118);
                r = _out1116;
                resultingOwnership = _out1117;
                readIdents = _out1118;
              }
            } else if (_source157.is_MapBuilder) {
              DAST._IType _3612___mcc_h1032 = _source157.dtor_key;
              DAST._IType _3613___mcc_h1033 = _source157.dtor_value;
              {
                RAST._IExpr _out1119;
                DCOMP._IOwnership _out1120;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1119, out _out1120, out _out1121);
                r = _out1119;
                resultingOwnership = _out1120;
                readIdents = _out1121;
              }
            } else if (_source157.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3614___mcc_h1036 = _source157.dtor_args;
              DAST._IType _3615___mcc_h1037 = _source157.dtor_result;
              {
                RAST._IExpr _out1122;
                DCOMP._IOwnership _out1123;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1122, out _out1123, out _out1124);
                r = _out1122;
                resultingOwnership = _out1123;
                readIdents = _out1124;
              }
            } else if (_source157.is_Primitive) {
              DAST._IPrimitive _3616___mcc_h1040 = _source157.dtor_Primitive_a0;
              DAST._IPrimitive _source159 = _3616___mcc_h1040;
              if (_source159.is_Int) {
                {
                  RAST._IType _3617_rhsType;
                  RAST._IType _out1125;
                  _out1125 = (this).GenType(_3032_fromTpe, true, false);
                  _3617_rhsType = _out1125;
                  RAST._IExpr _3618_recursiveGen;
                  DCOMP._IOwnership _3619___v86;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3620_recIdents;
                  RAST._IExpr _out1126;
                  DCOMP._IOwnership _out1127;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                  (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1126, out _out1127, out _out1128);
                  _3618_recursiveGen = _out1126;
                  _3619___v86 = _out1127;
                  _3620_recIdents = _out1128;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_3618_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out1129;
                  DCOMP._IOwnership _out1130;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1129, out _out1130);
                  r = _out1129;
                  resultingOwnership = _out1130;
                  readIdents = _3620_recIdents;
                }
              } else if (_source159.is_Real) {
                {
                  RAST._IExpr _out1131;
                  DCOMP._IOwnership _out1132;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1131, out _out1132, out _out1133);
                  r = _out1131;
                  resultingOwnership = _out1132;
                  readIdents = _out1133;
                }
              } else if (_source159.is_String) {
                {
                  RAST._IExpr _out1134;
                  DCOMP._IOwnership _out1135;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1134, out _out1135, out _out1136);
                  r = _out1134;
                  resultingOwnership = _out1135;
                  readIdents = _out1136;
                }
              } else if (_source159.is_Bool) {
                {
                  RAST._IExpr _out1137;
                  DCOMP._IOwnership _out1138;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1139;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1137, out _out1138, out _out1139);
                  r = _out1137;
                  resultingOwnership = _out1138;
                  readIdents = _out1139;
                }
              } else {
                {
                  RAST._IExpr _out1140;
                  DCOMP._IOwnership _out1141;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1142;
                  (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1140, out _out1141, out _out1142);
                  r = _out1140;
                  resultingOwnership = _out1141;
                  readIdents = _out1142;
                }
              }
            } else if (_source157.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3621___mcc_h1042 = _source157.dtor_Passthrough_a0;
              {
                RAST._IExpr _out1143;
                DCOMP._IOwnership _out1144;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1143, out _out1144, out _out1145);
                r = _out1143;
                resultingOwnership = _out1144;
                readIdents = _out1145;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3622___mcc_h1044 = _source157.dtor_TypeArg_a0;
              {
                RAST._IExpr _out1146;
                DCOMP._IOwnership _out1147;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1146, out _out1147, out _out1148);
                r = _out1146;
                resultingOwnership = _out1147;
                readIdents = _out1148;
              }
            }
          }
        } else if (_source118.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _3623___mcc_h1046 = _source118.dtor_Passthrough_a0;
          DAST._IType _source160 = _3038___mcc_h1;
          if (_source160.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3624___mcc_h1050 = _source160.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3625___mcc_h1051 = _source160.dtor_typeArgs;
            DAST._IResolvedType _3626___mcc_h1052 = _source160.dtor_resolved;
            DAST._IResolvedType _source161 = _3626___mcc_h1052;
            if (_source161.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3627___mcc_h1056 = _source161.dtor_path;
              {
                RAST._IExpr _out1149;
                DCOMP._IOwnership _out1150;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1149, out _out1150, out _out1151);
                r = _out1149;
                resultingOwnership = _out1150;
                readIdents = _out1151;
              }
            } else if (_source161.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3628___mcc_h1058 = _source161.dtor_path;
              {
                RAST._IExpr _out1152;
                DCOMP._IOwnership _out1153;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1154;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1152, out _out1153, out _out1154);
                r = _out1152;
                resultingOwnership = _out1153;
                readIdents = _out1154;
              }
            } else {
              DAST._IType _3629___mcc_h1060 = _source161.dtor_baseType;
              DAST._INewtypeRange _3630___mcc_h1061 = _source161.dtor_range;
              bool _3631___mcc_h1062 = _source161.dtor_erase;
              bool _3632_erase = _3631___mcc_h1062;
              DAST._INewtypeRange _3633_range = _3630___mcc_h1061;
              DAST._IType _3634_b = _3629___mcc_h1060;
              {
                RAST._IExpr _out1155;
                DCOMP._IOwnership _out1156;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out1155, out _out1156, out _out1157);
                r = _out1155;
                resultingOwnership = _out1156;
                readIdents = _out1157;
              }
            }
          } else if (_source160.is_Nullable) {
            DAST._IType _3635___mcc_h1066 = _source160.dtor_Nullable_a0;
            {
              RAST._IExpr _out1158;
              DCOMP._IOwnership _out1159;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out1158, out _out1159, out _out1160);
              r = _out1158;
              resultingOwnership = _out1159;
              readIdents = _out1160;
            }
          } else if (_source160.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3636___mcc_h1068 = _source160.dtor_Tuple_a0;
            {
              RAST._IExpr _out1161;
              DCOMP._IOwnership _out1162;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1163;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1161, out _out1162, out _out1163);
              r = _out1161;
              resultingOwnership = _out1162;
              readIdents = _out1163;
            }
          } else if (_source160.is_Array) {
            DAST._IType _3637___mcc_h1070 = _source160.dtor_element;
            BigInteger _3638___mcc_h1071 = _source160.dtor_dims;
            {
              RAST._IExpr _out1164;
              DCOMP._IOwnership _out1165;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1164, out _out1165, out _out1166);
              r = _out1164;
              resultingOwnership = _out1165;
              readIdents = _out1166;
            }
          } else if (_source160.is_Seq) {
            DAST._IType _3639___mcc_h1074 = _source160.dtor_element;
            {
              RAST._IExpr _out1167;
              DCOMP._IOwnership _out1168;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1167, out _out1168, out _out1169);
              r = _out1167;
              resultingOwnership = _out1168;
              readIdents = _out1169;
            }
          } else if (_source160.is_Set) {
            DAST._IType _3640___mcc_h1076 = _source160.dtor_element;
            {
              RAST._IExpr _out1170;
              DCOMP._IOwnership _out1171;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1170, out _out1171, out _out1172);
              r = _out1170;
              resultingOwnership = _out1171;
              readIdents = _out1172;
            }
          } else if (_source160.is_Multiset) {
            DAST._IType _3641___mcc_h1078 = _source160.dtor_element;
            {
              RAST._IExpr _out1173;
              DCOMP._IOwnership _out1174;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1175;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1173, out _out1174, out _out1175);
              r = _out1173;
              resultingOwnership = _out1174;
              readIdents = _out1175;
            }
          } else if (_source160.is_Map) {
            DAST._IType _3642___mcc_h1080 = _source160.dtor_key;
            DAST._IType _3643___mcc_h1081 = _source160.dtor_value;
            {
              RAST._IExpr _out1176;
              DCOMP._IOwnership _out1177;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1176, out _out1177, out _out1178);
              r = _out1176;
              resultingOwnership = _out1177;
              readIdents = _out1178;
            }
          } else if (_source160.is_SetBuilder) {
            DAST._IType _3644___mcc_h1084 = _source160.dtor_element;
            {
              RAST._IExpr _out1179;
              DCOMP._IOwnership _out1180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1179, out _out1180, out _out1181);
              r = _out1179;
              resultingOwnership = _out1180;
              readIdents = _out1181;
            }
          } else if (_source160.is_MapBuilder) {
            DAST._IType _3645___mcc_h1086 = _source160.dtor_key;
            DAST._IType _3646___mcc_h1087 = _source160.dtor_value;
            {
              RAST._IExpr _out1182;
              DCOMP._IOwnership _out1183;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1182, out _out1183, out _out1184);
              r = _out1182;
              resultingOwnership = _out1183;
              readIdents = _out1184;
            }
          } else if (_source160.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3647___mcc_h1090 = _source160.dtor_args;
            DAST._IType _3648___mcc_h1091 = _source160.dtor_result;
            {
              RAST._IExpr _out1185;
              DCOMP._IOwnership _out1186;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1187;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1185, out _out1186, out _out1187);
              r = _out1185;
              resultingOwnership = _out1186;
              readIdents = _out1187;
            }
          } else if (_source160.is_Primitive) {
            DAST._IPrimitive _3649___mcc_h1094 = _source160.dtor_Primitive_a0;
            DAST._IPrimitive _source162 = _3649___mcc_h1094;
            if (_source162.is_Int) {
              {
                RAST._IType _3650_rhsType;
                RAST._IType _out1188;
                _out1188 = (this).GenType(_3032_fromTpe, true, false);
                _3650_rhsType = _out1188;
                RAST._IExpr _3651_recursiveGen;
                DCOMP._IOwnership _3652___v84;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3653_recIdents;
                RAST._IExpr _out1189;
                DCOMP._IOwnership _out1190;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1189, out _out1190, out _out1191);
                _3651_recursiveGen = _out1189;
                _3652___v84 = _out1190;
                _3653_recIdents = _out1191;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_3651_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out1192;
                DCOMP._IOwnership _out1193;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1192, out _out1193);
                r = _out1192;
                resultingOwnership = _out1193;
                readIdents = _3653_recIdents;
              }
            } else if (_source162.is_Real) {
              {
                RAST._IExpr _out1194;
                DCOMP._IOwnership _out1195;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1194, out _out1195, out _out1196);
                r = _out1194;
                resultingOwnership = _out1195;
                readIdents = _out1196;
              }
            } else if (_source162.is_String) {
              {
                RAST._IExpr _out1197;
                DCOMP._IOwnership _out1198;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1199;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1197, out _out1198, out _out1199);
                r = _out1197;
                resultingOwnership = _out1198;
                readIdents = _out1199;
              }
            } else if (_source162.is_Bool) {
              {
                RAST._IExpr _out1200;
                DCOMP._IOwnership _out1201;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1200, out _out1201, out _out1202);
                r = _out1200;
                resultingOwnership = _out1201;
                readIdents = _out1202;
              }
            } else {
              {
                RAST._IExpr _out1203;
                DCOMP._IOwnership _out1204;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1203, out _out1204, out _out1205);
                r = _out1203;
                resultingOwnership = _out1204;
                readIdents = _out1205;
              }
            }
          } else if (_source160.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3654___mcc_h1096 = _source160.dtor_Passthrough_a0;
            {
              RAST._IExpr _3655_recursiveGen;
              DCOMP._IOwnership _3656___v89;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3657_recIdents;
              RAST._IExpr _out1206;
              DCOMP._IOwnership _out1207;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1208;
              (this).GenExpr(_3031_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1206, out _out1207, out _out1208);
              _3655_recursiveGen = _out1206;
              _3656___v89 = _out1207;
              _3657_recIdents = _out1208;
              RAST._IType _3658_toTpeGen;
              RAST._IType _out1209;
              _out1209 = (this).GenType(_3033_toTpe, true, false);
              _3658_toTpeGen = _out1209;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_3655_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_3658_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out1210;
              DCOMP._IOwnership _out1211;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1210, out _out1211);
              r = _out1210;
              resultingOwnership = _out1211;
              readIdents = _3657_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3659___mcc_h1098 = _source160.dtor_TypeArg_a0;
            {
              RAST._IExpr _out1212;
              DCOMP._IOwnership _out1213;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1212, out _out1213, out _out1214);
              r = _out1212;
              resultingOwnership = _out1213;
              readIdents = _out1214;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _3660___mcc_h1100 = _source118.dtor_TypeArg_a0;
          DAST._IType _source163 = _3038___mcc_h1;
          if (_source163.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3661___mcc_h1104 = _source163.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3662___mcc_h1105 = _source163.dtor_typeArgs;
            DAST._IResolvedType _3663___mcc_h1106 = _source163.dtor_resolved;
            DAST._IResolvedType _source164 = _3663___mcc_h1106;
            if (_source164.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3664___mcc_h1110 = _source164.dtor_path;
              {
                RAST._IExpr _out1215;
                DCOMP._IOwnership _out1216;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1215, out _out1216, out _out1217);
                r = _out1215;
                resultingOwnership = _out1216;
                readIdents = _out1217;
              }
            } else if (_source164.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3665___mcc_h1112 = _source164.dtor_path;
              {
                RAST._IExpr _out1218;
                DCOMP._IOwnership _out1219;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1220;
                (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1218, out _out1219, out _out1220);
                r = _out1218;
                resultingOwnership = _out1219;
                readIdents = _out1220;
              }
            } else {
              DAST._IType _3666___mcc_h1114 = _source164.dtor_baseType;
              DAST._INewtypeRange _3667___mcc_h1115 = _source164.dtor_range;
              bool _3668___mcc_h1116 = _source164.dtor_erase;
              bool _3669_erase = _3668___mcc_h1116;
              DAST._INewtypeRange _3670_range = _3667___mcc_h1115;
              DAST._IType _3671_b = _3666___mcc_h1114;
              {
                RAST._IExpr _out1221;
                DCOMP._IOwnership _out1222;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
                (this).GenExprConvertToNewtype(e, selfIdent, @params, expectedOwnership, out _out1221, out _out1222, out _out1223);
                r = _out1221;
                resultingOwnership = _out1222;
                readIdents = _out1223;
              }
            }
          } else if (_source163.is_Nullable) {
            DAST._IType _3672___mcc_h1120 = _source163.dtor_Nullable_a0;
            {
              RAST._IExpr _out1224;
              DCOMP._IOwnership _out1225;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
              (this).GenExprConvertToNullable(e, selfIdent, @params, expectedOwnership, out _out1224, out _out1225, out _out1226);
              r = _out1224;
              resultingOwnership = _out1225;
              readIdents = _out1226;
            }
          } else if (_source163.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3673___mcc_h1122 = _source163.dtor_Tuple_a0;
            {
              RAST._IExpr _out1227;
              DCOMP._IOwnership _out1228;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1227, out _out1228, out _out1229);
              r = _out1227;
              resultingOwnership = _out1228;
              readIdents = _out1229;
            }
          } else if (_source163.is_Array) {
            DAST._IType _3674___mcc_h1124 = _source163.dtor_element;
            BigInteger _3675___mcc_h1125 = _source163.dtor_dims;
            {
              RAST._IExpr _out1230;
              DCOMP._IOwnership _out1231;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1230, out _out1231, out _out1232);
              r = _out1230;
              resultingOwnership = _out1231;
              readIdents = _out1232;
            }
          } else if (_source163.is_Seq) {
            DAST._IType _3676___mcc_h1128 = _source163.dtor_element;
            {
              RAST._IExpr _out1233;
              DCOMP._IOwnership _out1234;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1233, out _out1234, out _out1235);
              r = _out1233;
              resultingOwnership = _out1234;
              readIdents = _out1235;
            }
          } else if (_source163.is_Set) {
            DAST._IType _3677___mcc_h1130 = _source163.dtor_element;
            {
              RAST._IExpr _out1236;
              DCOMP._IOwnership _out1237;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1236, out _out1237, out _out1238);
              r = _out1236;
              resultingOwnership = _out1237;
              readIdents = _out1238;
            }
          } else if (_source163.is_Multiset) {
            DAST._IType _3678___mcc_h1132 = _source163.dtor_element;
            {
              RAST._IExpr _out1239;
              DCOMP._IOwnership _out1240;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1239, out _out1240, out _out1241);
              r = _out1239;
              resultingOwnership = _out1240;
              readIdents = _out1241;
            }
          } else if (_source163.is_Map) {
            DAST._IType _3679___mcc_h1134 = _source163.dtor_key;
            DAST._IType _3680___mcc_h1135 = _source163.dtor_value;
            {
              RAST._IExpr _out1242;
              DCOMP._IOwnership _out1243;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1244;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1242, out _out1243, out _out1244);
              r = _out1242;
              resultingOwnership = _out1243;
              readIdents = _out1244;
            }
          } else if (_source163.is_SetBuilder) {
            DAST._IType _3681___mcc_h1138 = _source163.dtor_element;
            {
              RAST._IExpr _out1245;
              DCOMP._IOwnership _out1246;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1245, out _out1246, out _out1247);
              r = _out1245;
              resultingOwnership = _out1246;
              readIdents = _out1247;
            }
          } else if (_source163.is_MapBuilder) {
            DAST._IType _3682___mcc_h1140 = _source163.dtor_key;
            DAST._IType _3683___mcc_h1141 = _source163.dtor_value;
            {
              RAST._IExpr _out1248;
              DCOMP._IOwnership _out1249;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1250;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1248, out _out1249, out _out1250);
              r = _out1248;
              resultingOwnership = _out1249;
              readIdents = _out1250;
            }
          } else if (_source163.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3684___mcc_h1144 = _source163.dtor_args;
            DAST._IType _3685___mcc_h1145 = _source163.dtor_result;
            {
              RAST._IExpr _out1251;
              DCOMP._IOwnership _out1252;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1251, out _out1252, out _out1253);
              r = _out1251;
              resultingOwnership = _out1252;
              readIdents = _out1253;
            }
          } else if (_source163.is_Primitive) {
            DAST._IPrimitive _3686___mcc_h1148 = _source163.dtor_Primitive_a0;
            {
              RAST._IExpr _out1254;
              DCOMP._IOwnership _out1255;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1256;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1254, out _out1255, out _out1256);
              r = _out1254;
              resultingOwnership = _out1255;
              readIdents = _out1256;
            }
          } else if (_source163.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3687___mcc_h1150 = _source163.dtor_Passthrough_a0;
            {
              RAST._IExpr _out1257;
              DCOMP._IOwnership _out1258;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1257, out _out1258, out _out1259);
              r = _out1257;
              resultingOwnership = _out1258;
              readIdents = _out1259;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3688___mcc_h1152 = _source163.dtor_TypeArg_a0;
            {
              RAST._IExpr _out1260;
              DCOMP._IOwnership _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              (this).GenExprConvertNotImplemented(e, selfIdent, @params, expectedOwnership, out _out1260, out _out1261, out _out1262);
              r = _out1260;
              resultingOwnership = _out1261;
              readIdents = _out1262;
            }
          }
        }
      }
      return ;
    }
    public void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source165 = e;
      if (_source165.is_Literal) {
        DAST._ILiteral _3689___mcc_h0 = _source165.dtor_Literal_a0;
        RAST._IExpr _out1263;
        DCOMP._IOwnership _out1264;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
        (this).GenExprLiteral(e, selfIdent, @params, expectedOwnership, out _out1263, out _out1264, out _out1265);
        r = _out1263;
        resultingOwnership = _out1264;
        readIdents = _out1265;
      } else if (_source165.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _3690___mcc_h1 = _source165.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _3691_name = _3690___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_3691_name));
          bool _3692_currentlyBorrowed;
          _3692_currentlyBorrowed = (@params).Contains(_3691_name);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (_3692_currentlyBorrowed) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3691_name);
          return ;
        }
      } else if (_source165.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3693___mcc_h2 = _source165.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3694_path = _3693___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _3695_p;
          Dafny.ISequence<Dafny.Rune> _out1266;
          _out1266 = DCOMP.COMP.GenPath(_3694_path);
          _3695_p = _out1266;
          r = RAST.Expr.create_RawExpr(_3695_p);
          RAST._IExpr _out1267;
          DCOMP._IOwnership _out1268;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1267, out _out1268);
          r = _out1267;
          resultingOwnership = _out1268;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source165.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _3696___mcc_h3 = _source165.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _3697_values = _3696___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _3698_s;
          _3698_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3699_i;
          _3699_i = BigInteger.Zero;
          while ((_3699_i) < (new BigInteger((_3697_values).Count))) {
            if ((_3699_i).Sign == 1) {
              _3698_s = Dafny.Sequence<Dafny.Rune>.Concat(_3698_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _3700_recursiveGen;
            DCOMP._IOwnership _3701___v92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3702_recIdents;
            RAST._IExpr _out1269;
            DCOMP._IOwnership _out1270;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
            (this).GenExpr((_3697_values).Select(_3699_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1269, out _out1270, out _out1271);
            _3700_recursiveGen = _out1269;
            _3701___v92 = _out1270;
            _3702_recIdents = _out1271;
            _3698_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3698_s, (_3700_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3702_recIdents);
            _3699_i = (_3699_i) + (BigInteger.One);
          }
          _3698_s = Dafny.Sequence<Dafny.Rune>.Concat(_3698_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_3698_s);
          RAST._IExpr _out1272;
          DCOMP._IOwnership _out1273;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1272, out _out1273);
          r = _out1272;
          resultingOwnership = _out1273;
          return ;
        }
      } else if (_source165.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3703___mcc_h4 = _source165.dtor_path;
        Dafny.ISequence<DAST._IType> _3704___mcc_h5 = _source165.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3705___mcc_h6 = _source165.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3706_args = _3705___mcc_h6;
        Dafny.ISequence<DAST._IType> _3707_typeArgs = _3704___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3708_path = _3703___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _3709_path;
          Dafny.ISequence<Dafny.Rune> _out1274;
          _out1274 = DCOMP.COMP.GenPath(_3708_path);
          _3709_path = _out1274;
          Dafny.ISequence<Dafny.Rune> _3710_s;
          _3710_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _3709_path);
          if ((new BigInteger((_3707_typeArgs).Count)).Sign == 1) {
            BigInteger _3711_i;
            _3711_i = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _3712_typeExprs;
            _3712_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_3711_i) < (new BigInteger((_3707_typeArgs).Count))) {
              RAST._IType _3713_typeExpr;
              RAST._IType _out1275;
              _out1275 = (this).GenType((_3707_typeArgs).Select(_3711_i), false, false);
              _3713_typeExpr = _out1275;
              _3712_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_3712_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_3713_typeExpr));
              _3711_i = (_3711_i) + (BigInteger.One);
            }
            _3710_s = Dafny.Sequence<Dafny.Rune>.Concat(_3710_s, (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3712_typeExprs))._ToString(DCOMP.__default.IND));
          }
          _3710_s = Dafny.Sequence<Dafny.Rune>.Concat(_3710_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3714_i;
          _3714_i = BigInteger.Zero;
          while ((_3714_i) < (new BigInteger((_3706_args).Count))) {
            if ((_3714_i).Sign == 1) {
              _3710_s = Dafny.Sequence<Dafny.Rune>.Concat(_3710_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3715_recursiveGen;
            DCOMP._IOwnership _3716___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3717_recIdents;
            RAST._IExpr _out1276;
            DCOMP._IOwnership _out1277;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
            (this).GenExpr((_3706_args).Select(_3714_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1276, out _out1277, out _out1278);
            _3715_recursiveGen = _out1276;
            _3716___v93 = _out1277;
            _3717_recIdents = _out1278;
            _3710_s = Dafny.Sequence<Dafny.Rune>.Concat(_3710_s, (_3715_recursiveGen)._ToString(DCOMP.__default.IND));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3717_recIdents);
            _3714_i = (_3714_i) + (BigInteger.One);
          }
          _3710_s = Dafny.Sequence<Dafny.Rune>.Concat(_3710_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          r = RAST.Expr.create_RawExpr(_3710_s);
          RAST._IExpr _out1279;
          DCOMP._IOwnership _out1280;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1279, out _out1280);
          r = _out1279;
          resultingOwnership = _out1280;
          return ;
        }
      } else if (_source165.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _3718___mcc_h7 = _source165.dtor_dims;
        DAST._IType _3719___mcc_h8 = _source165.dtor_typ;
        DAST._IType _3720_typ = _3719___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _3721_dims = _3718___mcc_h7;
        {
          BigInteger _3722_i;
          _3722_i = (new BigInteger((_3721_dims).Count)) - (BigInteger.One);
          RAST._IType _3723_genTyp;
          RAST._IType _out1281;
          _out1281 = (this).GenType(_3720_typ, false, false);
          _3723_genTyp = _out1281;
          Dafny.ISequence<Dafny.Rune> _3724_s;
          _3724_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_3723_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_3722_i).Sign != -1) {
            RAST._IExpr _3725_recursiveGen;
            DCOMP._IOwnership _3726___v94;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3727_recIdents;
            RAST._IExpr _out1282;
            DCOMP._IOwnership _out1283;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
            (this).GenExpr((_3721_dims).Select(_3722_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1282, out _out1283, out _out1284);
            _3725_recursiveGen = _out1282;
            _3726___v94 = _out1283;
            _3727_recIdents = _out1284;
            _3724_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _3724_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_3725_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3727_recIdents);
            _3722_i = (_3722_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_3724_s);
          RAST._IExpr _out1285;
          DCOMP._IOwnership _out1286;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1285, out _out1286);
          r = _out1285;
          resultingOwnership = _out1286;
          return ;
        }
      } else if (_source165.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3728___mcc_h9 = _source165.dtor_path;
        Dafny.ISequence<DAST._IType> _3729___mcc_h10 = _source165.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _3730___mcc_h11 = _source165.dtor_variant;
        bool _3731___mcc_h12 = _source165.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3732___mcc_h13 = _source165.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3733_values = _3732___mcc_h13;
        bool _3734_isCo = _3731___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _3735_variant = _3730___mcc_h11;
        Dafny.ISequence<DAST._IType> _3736_typeArgs = _3729___mcc_h10;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3737_path = _3728___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _3738_path;
          Dafny.ISequence<Dafny.Rune> _out1287;
          _out1287 = DCOMP.COMP.GenPath(_3737_path);
          _3738_path = _out1287;
          Dafny.ISequence<Dafny.Rune> _3739_s;
          _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _3738_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_3736_typeArgs).Count)).Sign == 1) {
            _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _3740_i;
            _3740_i = BigInteger.Zero;
            while ((_3740_i) < (new BigInteger((_3736_typeArgs).Count))) {
              if ((_3740_i).Sign == 1) {
                _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              RAST._IType _3741_typeExpr;
              RAST._IType _out1288;
              _out1288 = (this).GenType((_3736_typeArgs).Select(_3740_i), false, false);
              _3741_typeExpr = _out1288;
              _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, (_3741_typeExpr)._ToString(DCOMP.__default.IND));
              _3740_i = (_3740_i) + (BigInteger.One);
            }
            _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, DCOMP.__default.escapeIdent(_3735_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3742_i;
          _3742_i = BigInteger.Zero;
          _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_3742_i) < (new BigInteger((_3733_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs60 = (_3733_values).Select(_3742_i);
            Dafny.ISequence<Dafny.Rune> _3743_name = _let_tmp_rhs60.dtor__0;
            DAST._IExpression _3744_value = _let_tmp_rhs60.dtor__1;
            if ((_3742_i).Sign == 1) {
              _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_3734_isCo) {
              RAST._IExpr _3745_recursiveGen;
              DCOMP._IOwnership _3746___v95;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3747_recIdents;
              RAST._IExpr _out1289;
              DCOMP._IOwnership _out1290;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1291;
              (this).GenExpr(_3744_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out1289, out _out1290, out _out1291);
              _3745_recursiveGen = _out1289;
              _3746___v95 = _out1290;
              _3747_recIdents = _out1291;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3747_recIdents);
              Dafny.ISequence<Dafny.Rune> _3748_allReadCloned;
              _3748_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_3747_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _3749_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_3747_recIdents).Elements) {
                  _3749_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_3747_recIdents).Contains(_3749_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2849)");
              after__ASSIGN_SUCH_THAT_2: ;
                _3748_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3748_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3749_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3749_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _3747_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3747_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3749_next));
              }
              _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, DCOMP.__default.escapeIdent(_3743_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _3748_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_3745_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              RAST._IExpr _3750_recursiveGen;
              DCOMP._IOwnership _3751___v96;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3752_recIdents;
              RAST._IExpr _out1292;
              DCOMP._IOwnership _out1293;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1294;
              (this).GenExpr(_3744_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1292, out _out1293, out _out1294);
              _3750_recursiveGen = _out1292;
              _3751___v96 = _out1293;
              _3752_recIdents = _out1294;
              _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, DCOMP.__default.escapeIdent(_3743_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3750_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3752_recIdents);
            }
            _3742_i = (_3742_i) + (BigInteger.One);
          }
          _3739_s = Dafny.Sequence<Dafny.Rune>.Concat(_3739_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          r = RAST.Expr.create_RawExpr(_3739_s);
          RAST._IExpr _out1295;
          DCOMP._IOwnership _out1296;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1295, out _out1296);
          r = _out1295;
          resultingOwnership = _out1296;
          return ;
        }
      } else if (_source165.is_Convert) {
        DAST._IExpression _3753___mcc_h14 = _source165.dtor_value;
        DAST._IType _3754___mcc_h15 = _source165.dtor_from;
        DAST._IType _3755___mcc_h16 = _source165.dtor_typ;
        {
          RAST._IExpr _out1297;
          DCOMP._IOwnership _out1298;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1299;
          (this).GenExprConvert(e, selfIdent, @params, expectedOwnership, out _out1297, out _out1298, out _out1299);
          r = _out1297;
          resultingOwnership = _out1298;
          readIdents = _out1299;
        }
      } else if (_source165.is_SeqConstruct) {
        DAST._IExpression _3756___mcc_h17 = _source165.dtor_length;
        DAST._IExpression _3757___mcc_h18 = _source165.dtor_elem;
        DAST._IExpression _3758_expr = _3757___mcc_h18;
        DAST._IExpression _3759_length = _3756___mcc_h17;
        {
          RAST._IExpr _3760_recursiveGen;
          DCOMP._IOwnership _3761___v100;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3762_recIdents;
          RAST._IExpr _out1300;
          DCOMP._IOwnership _out1301;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
          (this).GenExpr(_3758_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1300, out _out1301, out _out1302);
          _3760_recursiveGen = _out1300;
          _3761___v100 = _out1301;
          _3762_recIdents = _out1302;
          RAST._IExpr _3763_lengthGen;
          DCOMP._IOwnership _3764___v101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3765_lengthIdents;
          RAST._IExpr _out1303;
          DCOMP._IOwnership _out1304;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
          (this).GenExpr(_3759_length, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1303, out _out1304, out _out1305);
          _3763_lengthGen = _out1303;
          _3764___v101 = _out1304;
          _3765_lengthIdents = _out1305;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_3760_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_3763_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3762_recIdents, _3765_lengthIdents);
          RAST._IExpr _out1306;
          DCOMP._IOwnership _out1307;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1306, out _out1307);
          r = _out1306;
          resultingOwnership = _out1307;
          return ;
        }
      } else if (_source165.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3766___mcc_h19 = _source165.dtor_elements;
        DAST._IType _3767___mcc_h20 = _source165.dtor_typ;
        DAST._IType _3768_typ = _3767___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _3769_exprs = _3766___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _3770_genTpe;
          RAST._IType _out1308;
          _out1308 = (this).GenType(_3768_typ, false, false);
          _3770_genTpe = _out1308;
          BigInteger _3771_i;
          _3771_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _3772_args;
          _3772_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_3771_i) < (new BigInteger((_3769_exprs).Count))) {
            RAST._IExpr _3773_recursiveGen;
            DCOMP._IOwnership _3774___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3775_recIdents;
            RAST._IExpr _out1309;
            DCOMP._IOwnership _out1310;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
            (this).GenExpr((_3769_exprs).Select(_3771_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1309, out _out1310, out _out1311);
            _3773_recursiveGen = _out1309;
            _3774___v102 = _out1310;
            _3775_recIdents = _out1311;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3775_recIdents);
            _3772_args = Dafny.Sequence<RAST._IExpr>.Concat(_3772_args, Dafny.Sequence<RAST._IExpr>.FromElements(_3773_recursiveGen));
            _3771_i = (_3771_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _3772_args);
          if ((new BigInteger((_3772_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_3770_genTpe));
          }
          RAST._IExpr _out1312;
          DCOMP._IOwnership _out1313;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1312, out _out1313);
          r = _out1312;
          resultingOwnership = _out1313;
          return ;
        }
      } else if (_source165.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3776___mcc_h21 = _source165.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3777_exprs = _3776___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _3778_generatedValues;
          _3778_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3779_i;
          _3779_i = BigInteger.Zero;
          while ((_3779_i) < (new BigInteger((_3777_exprs).Count))) {
            RAST._IExpr _3780_recursiveGen;
            DCOMP._IOwnership _3781___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3782_recIdents;
            RAST._IExpr _out1314;
            DCOMP._IOwnership _out1315;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
            (this).GenExpr((_3777_exprs).Select(_3779_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1314, out _out1315, out _out1316);
            _3780_recursiveGen = _out1314;
            _3781___v103 = _out1315;
            _3782_recIdents = _out1316;
            _3778_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_3778_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_3780_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3782_recIdents);
            _3779_i = (_3779_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _3778_generatedValues);
          RAST._IExpr _out1317;
          DCOMP._IOwnership _out1318;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1317, out _out1318);
          r = _out1317;
          resultingOwnership = _out1318;
          return ;
        }
      } else if (_source165.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _3783___mcc_h22 = _source165.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3784_exprs = _3783___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _3785_generatedValues;
          _3785_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3786_i;
          _3786_i = BigInteger.Zero;
          while ((_3786_i) < (new BigInteger((_3784_exprs).Count))) {
            RAST._IExpr _3787_recursiveGen;
            DCOMP._IOwnership _3788___v104;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3789_recIdents;
            RAST._IExpr _out1319;
            DCOMP._IOwnership _out1320;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
            (this).GenExpr((_3784_exprs).Select(_3786_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1319, out _out1320, out _out1321);
            _3787_recursiveGen = _out1319;
            _3788___v104 = _out1320;
            _3789_recIdents = _out1321;
            _3785_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_3785_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_3787_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3789_recIdents);
            _3786_i = (_3786_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _3785_generatedValues);
          RAST._IExpr _out1322;
          DCOMP._IOwnership _out1323;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1322, out _out1323);
          r = _out1322;
          resultingOwnership = _out1323;
          return ;
        }
      } else if (_source165.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3790___mcc_h23 = _source165.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3791_mapElems = _3790___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _3792_generatedValues;
          _3792_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3793_i;
          _3793_i = BigInteger.Zero;
          while ((_3793_i) < (new BigInteger((_3791_mapElems).Count))) {
            RAST._IExpr _3794_recursiveGenKey;
            DCOMP._IOwnership _3795___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3796_recIdentsKey;
            RAST._IExpr _out1324;
            DCOMP._IOwnership _out1325;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1326;
            (this).GenExpr(((_3791_mapElems).Select(_3793_i)).dtor__0, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1324, out _out1325, out _out1326);
            _3794_recursiveGenKey = _out1324;
            _3795___v106 = _out1325;
            _3796_recIdentsKey = _out1326;
            RAST._IExpr _3797_recursiveGenValue;
            DCOMP._IOwnership _3798___v107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3799_recIdentsValue;
            RAST._IExpr _out1327;
            DCOMP._IOwnership _out1328;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
            (this).GenExpr(((_3791_mapElems).Select(_3793_i)).dtor__1, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1327, out _out1328, out _out1329);
            _3797_recursiveGenValue = _out1327;
            _3798___v107 = _out1328;
            _3799_recIdentsValue = _out1329;
            _3792_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_3792_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_3794_recursiveGenKey, _3797_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3796_recIdentsKey), _3799_recIdentsValue);
            _3793_i = (_3793_i) + (BigInteger.One);
          }
          _3793_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _3800_arguments;
          _3800_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_3793_i) < (new BigInteger((_3792_generatedValues).Count))) {
            RAST._IExpr _3801_genKey;
            _3801_genKey = ((_3792_generatedValues).Select(_3793_i)).dtor__0;
            RAST._IExpr _3802_genValue;
            _3802_genValue = ((_3792_generatedValues).Select(_3793_i)).dtor__1;
            _3800_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_3800_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _3801_genKey, _3802_genValue, DAST.Format.BinaryOpFormat.create_NoFormat())));
            _3793_i = (_3793_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _3800_arguments);
          RAST._IExpr _out1330;
          DCOMP._IOwnership _out1331;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1330, out _out1331);
          r = _out1330;
          resultingOwnership = _out1331;
          return ;
        }
      } else if (_source165.is_MapBuilder) {
        DAST._IType _3803___mcc_h24 = _source165.dtor_keyType;
        DAST._IType _3804___mcc_h25 = _source165.dtor_valueType;
        DAST._IType _3805_valueType = _3804___mcc_h25;
        DAST._IType _3806_keyType = _3803___mcc_h24;
        {
          RAST._IType _3807_kType;
          RAST._IType _out1332;
          _out1332 = (this).GenType(_3806_keyType, false, false);
          _3807_kType = _out1332;
          RAST._IType _3808_vType;
          RAST._IType _out1333;
          _out1333 = (this).GenType(_3805_valueType, false, false);
          _3808_vType = _out1333;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_3807_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3808_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out1334;
          DCOMP._IOwnership _out1335;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1334, out _out1335);
          r = _out1334;
          resultingOwnership = _out1335;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source165.is_SeqUpdate) {
        DAST._IExpression _3809___mcc_h26 = _source165.dtor_expr;
        DAST._IExpression _3810___mcc_h27 = _source165.dtor_indexExpr;
        DAST._IExpression _3811___mcc_h28 = _source165.dtor_value;
        DAST._IExpression _3812_value = _3811___mcc_h28;
        DAST._IExpression _3813_index = _3810___mcc_h27;
        DAST._IExpression _3814_expr = _3809___mcc_h26;
        {
          RAST._IExpr _3815_exprR;
          DCOMP._IOwnership _3816___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3817_exprIdents;
          RAST._IExpr _out1336;
          DCOMP._IOwnership _out1337;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
          (this).GenExpr(_3814_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1336, out _out1337, out _out1338);
          _3815_exprR = _out1336;
          _3816___v108 = _out1337;
          _3817_exprIdents = _out1338;
          RAST._IExpr _3818_indexR;
          DCOMP._IOwnership _3819_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3820_indexIdents;
          RAST._IExpr _out1339;
          DCOMP._IOwnership _out1340;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
          (this).GenExpr(_3813_index, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1339, out _out1340, out _out1341);
          _3818_indexR = _out1339;
          _3819_indexOwnership = _out1340;
          _3820_indexIdents = _out1341;
          RAST._IExpr _3821_valueR;
          DCOMP._IOwnership _3822_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3823_valueIdents;
          RAST._IExpr _out1342;
          DCOMP._IOwnership _out1343;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1344;
          (this).GenExpr(_3812_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1342, out _out1343, out _out1344);
          _3821_valueR = _out1342;
          _3822_valueOwnership = _out1343;
          _3823_valueIdents = _out1344;
          r = ((_3815_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3818_indexR, _3821_valueR));
          RAST._IExpr _out1345;
          DCOMP._IOwnership _out1346;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1345, out _out1346);
          r = _out1345;
          resultingOwnership = _out1346;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3817_exprIdents, _3820_indexIdents), _3823_valueIdents);
          return ;
        }
      } else if (_source165.is_MapUpdate) {
        DAST._IExpression _3824___mcc_h29 = _source165.dtor_expr;
        DAST._IExpression _3825___mcc_h30 = _source165.dtor_indexExpr;
        DAST._IExpression _3826___mcc_h31 = _source165.dtor_value;
        DAST._IExpression _3827_value = _3826___mcc_h31;
        DAST._IExpression _3828_index = _3825___mcc_h30;
        DAST._IExpression _3829_expr = _3824___mcc_h29;
        {
          RAST._IExpr _3830_exprR;
          DCOMP._IOwnership _3831___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3832_exprIdents;
          RAST._IExpr _out1347;
          DCOMP._IOwnership _out1348;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
          (this).GenExpr(_3829_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1347, out _out1348, out _out1349);
          _3830_exprR = _out1347;
          _3831___v109 = _out1348;
          _3832_exprIdents = _out1349;
          RAST._IExpr _3833_indexR;
          DCOMP._IOwnership _3834_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3835_indexIdents;
          RAST._IExpr _out1350;
          DCOMP._IOwnership _out1351;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
          (this).GenExpr(_3828_index, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1350, out _out1351, out _out1352);
          _3833_indexR = _out1350;
          _3834_indexOwnership = _out1351;
          _3835_indexIdents = _out1352;
          RAST._IExpr _3836_valueR;
          DCOMP._IOwnership _3837_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3838_valueIdents;
          RAST._IExpr _out1353;
          DCOMP._IOwnership _out1354;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1355;
          (this).GenExpr(_3827_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1353, out _out1354, out _out1355);
          _3836_valueR = _out1353;
          _3837_valueOwnership = _out1354;
          _3838_valueIdents = _out1355;
          r = ((_3830_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3833_indexR, _3836_valueR));
          RAST._IExpr _out1356;
          DCOMP._IOwnership _out1357;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1356, out _out1357);
          r = _out1356;
          resultingOwnership = _out1357;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3832_exprIdents, _3835_indexIdents), _3838_valueIdents);
          return ;
        }
      } else if (_source165.is_SetBuilder) {
        DAST._IType _3839___mcc_h32 = _source165.dtor_elemType;
        DAST._IType _3840_elemType = _3839___mcc_h32;
        {
          RAST._IType _3841_eType;
          RAST._IType _out1358;
          _out1358 = (this).GenType(_3840_elemType, false, false);
          _3841_eType = _out1358;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_3841_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out1359;
          DCOMP._IOwnership _out1360;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1359, out _out1360);
          r = _out1359;
          resultingOwnership = _out1360;
          return ;
        }
      } else if (_source165.is_ToMultiset) {
        DAST._IExpression _3842___mcc_h33 = _source165.dtor_ToMultiset_a0;
        DAST._IExpression _3843_expr = _3842___mcc_h33;
        {
          RAST._IExpr _3844_recursiveGen;
          DCOMP._IOwnership _3845___v105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3846_recIdents;
          RAST._IExpr _out1361;
          DCOMP._IOwnership _out1362;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
          (this).GenExpr(_3843_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1361, out _out1362, out _out1363);
          _3844_recursiveGen = _out1361;
          _3845___v105 = _out1362;
          _3846_recIdents = _out1363;
          r = ((_3844_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _3846_recIdents;
          RAST._IExpr _out1364;
          DCOMP._IOwnership _out1365;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1364, out _out1365);
          r = _out1364;
          resultingOwnership = _out1365;
          return ;
        }
      } else if (_source165.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source166 = selfIdent;
          if (_source166.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out1366;
              DCOMP._IOwnership _out1367;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1366, out _out1367);
              r = _out1366;
              resultingOwnership = _out1367;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3847___mcc_h273 = _source166.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3848_id = _3847___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_3848_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_3848_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_3848_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3848_id);
            }
          }
          return ;
        }
      } else if (_source165.is_Ite) {
        DAST._IExpression _3849___mcc_h34 = _source165.dtor_cond;
        DAST._IExpression _3850___mcc_h35 = _source165.dtor_thn;
        DAST._IExpression _3851___mcc_h36 = _source165.dtor_els;
        DAST._IExpression _3852_f = _3851___mcc_h36;
        DAST._IExpression _3853_t = _3850___mcc_h35;
        DAST._IExpression _3854_cond = _3849___mcc_h34;
        {
          RAST._IExpr _3855_cond;
          DCOMP._IOwnership _3856___v110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3857_recIdentsCond;
          RAST._IExpr _out1368;
          DCOMP._IOwnership _out1369;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1370;
          (this).GenExpr(_3854_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1368, out _out1369, out _out1370);
          _3855_cond = _out1368;
          _3856___v110 = _out1369;
          _3857_recIdentsCond = _out1370;
          Dafny.ISequence<Dafny.Rune> _3858_condString;
          _3858_condString = (_3855_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _3859___v111;
          DCOMP._IOwnership _3860_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3861___v112;
          RAST._IExpr _out1371;
          DCOMP._IOwnership _out1372;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
          (this).GenExpr(_3853_t, selfIdent, @params, expectedOwnership, out _out1371, out _out1372, out _out1373);
          _3859___v111 = _out1371;
          _3860_tHasToBeOwned = _out1372;
          _3861___v112 = _out1373;
          RAST._IExpr _3862_fExpr;
          DCOMP._IOwnership _3863_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3864_recIdentsF;
          RAST._IExpr _out1374;
          DCOMP._IOwnership _out1375;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
          (this).GenExpr(_3852_f, selfIdent, @params, _3860_tHasToBeOwned, out _out1374, out _out1375, out _out1376);
          _3862_fExpr = _out1374;
          _3863_fOwned = _out1375;
          _3864_recIdentsF = _out1376;
          Dafny.ISequence<Dafny.Rune> _3865_fString;
          _3865_fString = (_3862_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _3866_tExpr;
          DCOMP._IOwnership _3867___v113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3868_recIdentsT;
          RAST._IExpr _out1377;
          DCOMP._IOwnership _out1378;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
          (this).GenExpr(_3853_t, selfIdent, @params, _3863_fOwned, out _out1377, out _out1378, out _out1379);
          _3866_tExpr = _out1377;
          _3867___v113 = _out1378;
          _3868_recIdentsT = _out1379;
          Dafny.ISequence<Dafny.Rune> _3869_tString;
          _3869_tString = (_3866_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3858_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3869_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3865_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out1380;
          DCOMP._IOwnership _out1381;
          DCOMP.COMP.FromOwnership(r, _3863_fOwned, expectedOwnership, out _out1380, out _out1381);
          r = _out1380;
          resultingOwnership = _out1381;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3857_recIdentsCond, _3868_recIdentsT), _3864_recIdentsF);
          return ;
        }
      } else if (_source165.is_UnOp) {
        DAST._IUnaryOp _3870___mcc_h37 = _source165.dtor_unOp;
        DAST._IExpression _3871___mcc_h38 = _source165.dtor_expr;
        DAST.Format._IUnaryOpFormat _3872___mcc_h39 = _source165.dtor_format1;
        DAST._IUnaryOp _source167 = _3870___mcc_h37;
        if (_source167.is_Not) {
          DAST.Format._IUnaryOpFormat _3873_format = _3872___mcc_h39;
          DAST._IExpression _3874_e = _3871___mcc_h38;
          {
            RAST._IExpr _3875_recursiveGen;
            DCOMP._IOwnership _3876___v114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3877_recIdents;
            RAST._IExpr _out1382;
            DCOMP._IOwnership _out1383;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
            (this).GenExpr(_3874_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1382, out _out1383, out _out1384);
            _3875_recursiveGen = _out1382;
            _3876___v114 = _out1383;
            _3877_recIdents = _out1384;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _3875_recursiveGen, _3873_format);
            RAST._IExpr _out1385;
            DCOMP._IOwnership _out1386;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1385, out _out1386);
            r = _out1385;
            resultingOwnership = _out1386;
            readIdents = _3877_recIdents;
            return ;
          }
        } else if (_source167.is_BitwiseNot) {
          DAST.Format._IUnaryOpFormat _3878_format = _3872___mcc_h39;
          DAST._IExpression _3879_e = _3871___mcc_h38;
          {
            RAST._IExpr _3880_recursiveGen;
            DCOMP._IOwnership _3881___v115;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3882_recIdents;
            RAST._IExpr _out1387;
            DCOMP._IOwnership _out1388;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
            (this).GenExpr(_3879_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1387, out _out1388, out _out1389);
            _3880_recursiveGen = _out1387;
            _3881___v115 = _out1388;
            _3882_recIdents = _out1389;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _3880_recursiveGen, _3878_format);
            RAST._IExpr _out1390;
            DCOMP._IOwnership _out1391;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1390, out _out1391);
            r = _out1390;
            resultingOwnership = _out1391;
            readIdents = _3882_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnaryOpFormat _3883_format = _3872___mcc_h39;
          DAST._IExpression _3884_e = _3871___mcc_h38;
          {
            RAST._IExpr _3885_recursiveGen;
            DCOMP._IOwnership _3886_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3887_recIdents;
            RAST._IExpr _out1392;
            DCOMP._IOwnership _out1393;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
            (this).GenExpr(_3884_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1392, out _out1393, out _out1394);
            _3885_recursiveGen = _out1392;
            _3886_recOwned = _out1393;
            _3887_recIdents = _out1394;
            r = ((_3885_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out1395;
            DCOMP._IOwnership _out1396;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1395, out _out1396);
            r = _out1395;
            resultingOwnership = _out1396;
            readIdents = _3887_recIdents;
            return ;
          }
        }
      } else if (_source165.is_BinOp) {
        DAST._IBinOp _3888___mcc_h40 = _source165.dtor_op;
        DAST._IExpression _3889___mcc_h41 = _source165.dtor_left;
        DAST._IExpression _3890___mcc_h42 = _source165.dtor_right;
        DAST.Format._IBinaryOpFormat _3891___mcc_h43 = _source165.dtor_format2;
        RAST._IExpr _out1397;
        DCOMP._IOwnership _out1398;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
        (this).GenExprBinary(e, selfIdent, @params, expectedOwnership, out _out1397, out _out1398, out _out1399);
        r = _out1397;
        resultingOwnership = _out1398;
        readIdents = _out1399;
      } else if (_source165.is_ArrayLen) {
        DAST._IExpression _3892___mcc_h44 = _source165.dtor_expr;
        BigInteger _3893___mcc_h45 = _source165.dtor_dim;
        BigInteger _3894_dim = _3893___mcc_h45;
        DAST._IExpression _3895_expr = _3892___mcc_h44;
        {
          RAST._IExpr _3896_recursiveGen;
          DCOMP._IOwnership _3897___v120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3898_recIdents;
          RAST._IExpr _out1400;
          DCOMP._IOwnership _out1401;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1402;
          (this).GenExpr(_3895_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1400, out _out1401, out _out1402);
          _3896_recursiveGen = _out1400;
          _3897___v120 = _out1401;
          _3898_recIdents = _out1402;
          if ((_3894_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_3896_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _3899_s;
            _3899_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _3900_i;
            _3900_i = BigInteger.One;
            while ((_3900_i) < (_3894_dim)) {
              _3899_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _3899_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3900_i = (_3900_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3896_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _3899_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out1403;
          DCOMP._IOwnership _out1404;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1403, out _out1404);
          r = _out1403;
          resultingOwnership = _out1404;
          readIdents = _3898_recIdents;
          return ;
        }
      } else if (_source165.is_MapKeys) {
        DAST._IExpression _3901___mcc_h46 = _source165.dtor_expr;
        DAST._IExpression _3902_expr = _3901___mcc_h46;
        {
          RAST._IExpr _3903_recursiveGen;
          DCOMP._IOwnership _3904___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3905_recIdents;
          RAST._IExpr _out1405;
          DCOMP._IOwnership _out1406;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
          (this).GenExpr(_3902_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1405, out _out1406, out _out1407);
          _3903_recursiveGen = _out1405;
          _3904___v121 = _out1406;
          _3905_recIdents = _out1407;
          readIdents = _3905_recIdents;
          r = RAST.Expr.create_Call((_3903_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1408;
          DCOMP._IOwnership _out1409;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1408, out _out1409);
          r = _out1408;
          resultingOwnership = _out1409;
          return ;
        }
      } else if (_source165.is_MapValues) {
        DAST._IExpression _3906___mcc_h47 = _source165.dtor_expr;
        DAST._IExpression _3907_expr = _3906___mcc_h47;
        {
          RAST._IExpr _3908_recursiveGen;
          DCOMP._IOwnership _3909___v122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3910_recIdents;
          RAST._IExpr _out1410;
          DCOMP._IOwnership _out1411;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
          (this).GenExpr(_3907_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1410, out _out1411, out _out1412);
          _3908_recursiveGen = _out1410;
          _3909___v122 = _out1411;
          _3910_recIdents = _out1412;
          readIdents = _3910_recIdents;
          r = RAST.Expr.create_Call((_3908_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1413;
          DCOMP._IOwnership _out1414;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1413, out _out1414);
          r = _out1413;
          resultingOwnership = _out1414;
          return ;
        }
      } else if (_source165.is_Select) {
        DAST._IExpression _3911___mcc_h48 = _source165.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3912___mcc_h49 = _source165.dtor_field;
        bool _3913___mcc_h50 = _source165.dtor_isConstant;
        bool _3914___mcc_h51 = _source165.dtor_onDatatype;
        DAST._IExpression _source168 = _3911___mcc_h48;
        if (_source168.is_Literal) {
          DAST._ILiteral _3915___mcc_h52 = _source168.dtor_Literal_a0;
          bool _3916_isDatatype = _3914___mcc_h51;
          bool _3917_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3918_field = _3912___mcc_h49;
          DAST._IExpression _3919_on = _3911___mcc_h48;
          {
            RAST._IExpr _3920_onExpr;
            DCOMP._IOwnership _3921_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3922_recIdents;
            RAST._IExpr _out1415;
            DCOMP._IOwnership _out1416;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1417;
            (this).GenExpr(_3919_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1415, out _out1416, out _out1417);
            _3920_onExpr = _out1415;
            _3921_onOwned = _out1416;
            _3922_recIdents = _out1417;
            if ((_3916_isDatatype) || (_3917_isConstant)) {
              r = RAST.Expr.create_Call((_3920_onExpr).Sel(DCOMP.__default.escapeIdent(_3918_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1418;
              DCOMP._IOwnership _out1419;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1418, out _out1419);
              r = _out1418;
              resultingOwnership = _out1419;
            } else {
              Dafny.ISequence<Dafny.Rune> _3923_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3920_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3918_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1420;
              DCOMP._IOwnership _out1421;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3923_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1420, out _out1421);
              r = _out1420;
              resultingOwnership = _out1421;
            }
            readIdents = _3922_recIdents;
            return ;
          }
        } else if (_source168.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3924___mcc_h54 = _source168.dtor_Ident_a0;
          bool _3925_isDatatype = _3914___mcc_h51;
          bool _3926_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3927_field = _3912___mcc_h49;
          DAST._IExpression _3928_on = _3911___mcc_h48;
          {
            RAST._IExpr _3929_onExpr;
            DCOMP._IOwnership _3930_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3931_recIdents;
            RAST._IExpr _out1422;
            DCOMP._IOwnership _out1423;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
            (this).GenExpr(_3928_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1422, out _out1423, out _out1424);
            _3929_onExpr = _out1422;
            _3930_onOwned = _out1423;
            _3931_recIdents = _out1424;
            if ((_3925_isDatatype) || (_3926_isConstant)) {
              r = RAST.Expr.create_Call((_3929_onExpr).Sel(DCOMP.__default.escapeIdent(_3927_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1425;
              DCOMP._IOwnership _out1426;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1425, out _out1426);
              r = _out1425;
              resultingOwnership = _out1426;
            } else {
              Dafny.ISequence<Dafny.Rune> _3932_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3932_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3929_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3927_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1427;
              DCOMP._IOwnership _out1428;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3932_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1427, out _out1428);
              r = _out1427;
              resultingOwnership = _out1428;
            }
            readIdents = _3931_recIdents;
            return ;
          }
        } else if (_source168.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3933___mcc_h56 = _source168.dtor_Companion_a0;
          bool _3934_isDatatype = _3914___mcc_h51;
          bool _3935_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3936_field = _3912___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3937_c = _3933___mcc_h56;
          {
            RAST._IExpr _3938_onExpr;
            DCOMP._IOwnership _3939_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3940_recIdents;
            RAST._IExpr _out1429;
            DCOMP._IOwnership _out1430;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
            (this).GenExpr(DAST.Expression.create_Companion(_3937_c), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1429, out _out1430, out _out1431);
            _3938_onExpr = _out1429;
            _3939_onOwned = _out1430;
            _3940_recIdents = _out1431;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3938_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3936_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out1432;
            DCOMP._IOwnership _out1433;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1432, out _out1433);
            r = _out1432;
            resultingOwnership = _out1433;
            readIdents = _3940_recIdents;
            return ;
          }
        } else if (_source168.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3941___mcc_h58 = _source168.dtor_Tuple_a0;
          bool _3942_isDatatype = _3914___mcc_h51;
          bool _3943_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3944_field = _3912___mcc_h49;
          DAST._IExpression _3945_on = _3911___mcc_h48;
          {
            RAST._IExpr _3946_onExpr;
            DCOMP._IOwnership _3947_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3948_recIdents;
            RAST._IExpr _out1434;
            DCOMP._IOwnership _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            (this).GenExpr(_3945_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1434, out _out1435, out _out1436);
            _3946_onExpr = _out1434;
            _3947_onOwned = _out1435;
            _3948_recIdents = _out1436;
            if ((_3942_isDatatype) || (_3943_isConstant)) {
              r = RAST.Expr.create_Call((_3946_onExpr).Sel(DCOMP.__default.escapeIdent(_3944_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1437;
              DCOMP._IOwnership _out1438;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1437, out _out1438);
              r = _out1437;
              resultingOwnership = _out1438;
            } else {
              Dafny.ISequence<Dafny.Rune> _3949_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3949_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3946_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3944_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1439;
              DCOMP._IOwnership _out1440;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3949_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1439, out _out1440);
              r = _out1439;
              resultingOwnership = _out1440;
            }
            readIdents = _3948_recIdents;
            return ;
          }
        } else if (_source168.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3950___mcc_h60 = _source168.dtor_path;
          Dafny.ISequence<DAST._IType> _3951___mcc_h61 = _source168.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3952___mcc_h62 = _source168.dtor_args;
          bool _3953_isDatatype = _3914___mcc_h51;
          bool _3954_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3955_field = _3912___mcc_h49;
          DAST._IExpression _3956_on = _3911___mcc_h48;
          {
            RAST._IExpr _3957_onExpr;
            DCOMP._IOwnership _3958_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3959_recIdents;
            RAST._IExpr _out1441;
            DCOMP._IOwnership _out1442;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1443;
            (this).GenExpr(_3956_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1441, out _out1442, out _out1443);
            _3957_onExpr = _out1441;
            _3958_onOwned = _out1442;
            _3959_recIdents = _out1443;
            if ((_3953_isDatatype) || (_3954_isConstant)) {
              r = RAST.Expr.create_Call((_3957_onExpr).Sel(DCOMP.__default.escapeIdent(_3955_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1444;
              DCOMP._IOwnership _out1445;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1444, out _out1445);
              r = _out1444;
              resultingOwnership = _out1445;
            } else {
              Dafny.ISequence<Dafny.Rune> _3960_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3960_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3957_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3955_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1446;
              DCOMP._IOwnership _out1447;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3960_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1446, out _out1447);
              r = _out1446;
              resultingOwnership = _out1447;
            }
            readIdents = _3959_recIdents;
            return ;
          }
        } else if (_source168.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3961___mcc_h66 = _source168.dtor_dims;
          DAST._IType _3962___mcc_h67 = _source168.dtor_typ;
          bool _3963_isDatatype = _3914___mcc_h51;
          bool _3964_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3965_field = _3912___mcc_h49;
          DAST._IExpression _3966_on = _3911___mcc_h48;
          {
            RAST._IExpr _3967_onExpr;
            DCOMP._IOwnership _3968_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3969_recIdents;
            RAST._IExpr _out1448;
            DCOMP._IOwnership _out1449;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1450;
            (this).GenExpr(_3966_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1448, out _out1449, out _out1450);
            _3967_onExpr = _out1448;
            _3968_onOwned = _out1449;
            _3969_recIdents = _out1450;
            if ((_3963_isDatatype) || (_3964_isConstant)) {
              r = RAST.Expr.create_Call((_3967_onExpr).Sel(DCOMP.__default.escapeIdent(_3965_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1451;
              DCOMP._IOwnership _out1452;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1451, out _out1452);
              r = _out1451;
              resultingOwnership = _out1452;
            } else {
              Dafny.ISequence<Dafny.Rune> _3970_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3970_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3967_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3965_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1453;
              DCOMP._IOwnership _out1454;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3970_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1453, out _out1454);
              r = _out1453;
              resultingOwnership = _out1454;
            }
            readIdents = _3969_recIdents;
            return ;
          }
        } else if (_source168.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3971___mcc_h70 = _source168.dtor_path;
          Dafny.ISequence<DAST._IType> _3972___mcc_h71 = _source168.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3973___mcc_h72 = _source168.dtor_variant;
          bool _3974___mcc_h73 = _source168.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3975___mcc_h74 = _source168.dtor_contents;
          bool _3976_isDatatype = _3914___mcc_h51;
          bool _3977_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3978_field = _3912___mcc_h49;
          DAST._IExpression _3979_on = _3911___mcc_h48;
          {
            RAST._IExpr _3980_onExpr;
            DCOMP._IOwnership _3981_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3982_recIdents;
            RAST._IExpr _out1455;
            DCOMP._IOwnership _out1456;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
            (this).GenExpr(_3979_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1455, out _out1456, out _out1457);
            _3980_onExpr = _out1455;
            _3981_onOwned = _out1456;
            _3982_recIdents = _out1457;
            if ((_3976_isDatatype) || (_3977_isConstant)) {
              r = RAST.Expr.create_Call((_3980_onExpr).Sel(DCOMP.__default.escapeIdent(_3978_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1458;
              DCOMP._IOwnership _out1459;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1458, out _out1459);
              r = _out1458;
              resultingOwnership = _out1459;
            } else {
              Dafny.ISequence<Dafny.Rune> _3983_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3983_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3980_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3978_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1460;
              DCOMP._IOwnership _out1461;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3983_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1460, out _out1461);
              r = _out1460;
              resultingOwnership = _out1461;
            }
            readIdents = _3982_recIdents;
            return ;
          }
        } else if (_source168.is_Convert) {
          DAST._IExpression _3984___mcc_h80 = _source168.dtor_value;
          DAST._IType _3985___mcc_h81 = _source168.dtor_from;
          DAST._IType _3986___mcc_h82 = _source168.dtor_typ;
          bool _3987_isDatatype = _3914___mcc_h51;
          bool _3988_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3989_field = _3912___mcc_h49;
          DAST._IExpression _3990_on = _3911___mcc_h48;
          {
            RAST._IExpr _3991_onExpr;
            DCOMP._IOwnership _3992_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3993_recIdents;
            RAST._IExpr _out1462;
            DCOMP._IOwnership _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            (this).GenExpr(_3990_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1462, out _out1463, out _out1464);
            _3991_onExpr = _out1462;
            _3992_onOwned = _out1463;
            _3993_recIdents = _out1464;
            if ((_3987_isDatatype) || (_3988_isConstant)) {
              r = RAST.Expr.create_Call((_3991_onExpr).Sel(DCOMP.__default.escapeIdent(_3989_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1465;
              DCOMP._IOwnership _out1466;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1465, out _out1466);
              r = _out1465;
              resultingOwnership = _out1466;
            } else {
              Dafny.ISequence<Dafny.Rune> _3994_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _3994_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3991_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3989_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1467;
              DCOMP._IOwnership _out1468;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_3994_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1467, out _out1468);
              r = _out1467;
              resultingOwnership = _out1468;
            }
            readIdents = _3993_recIdents;
            return ;
          }
        } else if (_source168.is_SeqConstruct) {
          DAST._IExpression _3995___mcc_h86 = _source168.dtor_length;
          DAST._IExpression _3996___mcc_h87 = _source168.dtor_elem;
          bool _3997_isDatatype = _3914___mcc_h51;
          bool _3998_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3999_field = _3912___mcc_h49;
          DAST._IExpression _4000_on = _3911___mcc_h48;
          {
            RAST._IExpr _4001_onExpr;
            DCOMP._IOwnership _4002_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4003_recIdents;
            RAST._IExpr _out1469;
            DCOMP._IOwnership _out1470;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
            (this).GenExpr(_4000_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1469, out _out1470, out _out1471);
            _4001_onExpr = _out1469;
            _4002_onOwned = _out1470;
            _4003_recIdents = _out1471;
            if ((_3997_isDatatype) || (_3998_isConstant)) {
              r = RAST.Expr.create_Call((_4001_onExpr).Sel(DCOMP.__default.escapeIdent(_3999_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1472;
              DCOMP._IOwnership _out1473;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1472, out _out1473);
              r = _out1472;
              resultingOwnership = _out1473;
            } else {
              Dafny.ISequence<Dafny.Rune> _4004_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4004_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4001_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3999_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1474;
              DCOMP._IOwnership _out1475;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4004_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1474, out _out1475);
              r = _out1474;
              resultingOwnership = _out1475;
            }
            readIdents = _4003_recIdents;
            return ;
          }
        } else if (_source168.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _4005___mcc_h90 = _source168.dtor_elements;
          DAST._IType _4006___mcc_h91 = _source168.dtor_typ;
          bool _4007_isDatatype = _3914___mcc_h51;
          bool _4008_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4009_field = _3912___mcc_h49;
          DAST._IExpression _4010_on = _3911___mcc_h48;
          {
            RAST._IExpr _4011_onExpr;
            DCOMP._IOwnership _4012_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4013_recIdents;
            RAST._IExpr _out1476;
            DCOMP._IOwnership _out1477;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1478;
            (this).GenExpr(_4010_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1476, out _out1477, out _out1478);
            _4011_onExpr = _out1476;
            _4012_onOwned = _out1477;
            _4013_recIdents = _out1478;
            if ((_4007_isDatatype) || (_4008_isConstant)) {
              r = RAST.Expr.create_Call((_4011_onExpr).Sel(DCOMP.__default.escapeIdent(_4009_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1479;
              DCOMP._IOwnership _out1480;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1479, out _out1480);
              r = _out1479;
              resultingOwnership = _out1480;
            } else {
              Dafny.ISequence<Dafny.Rune> _4014_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4011_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4009_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1481;
              DCOMP._IOwnership _out1482;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4014_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1481, out _out1482);
              r = _out1481;
              resultingOwnership = _out1482;
            }
            readIdents = _4013_recIdents;
            return ;
          }
        } else if (_source168.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _4015___mcc_h94 = _source168.dtor_elements;
          bool _4016_isDatatype = _3914___mcc_h51;
          bool _4017_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4018_field = _3912___mcc_h49;
          DAST._IExpression _4019_on = _3911___mcc_h48;
          {
            RAST._IExpr _4020_onExpr;
            DCOMP._IOwnership _4021_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4022_recIdents;
            RAST._IExpr _out1483;
            DCOMP._IOwnership _out1484;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
            (this).GenExpr(_4019_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1483, out _out1484, out _out1485);
            _4020_onExpr = _out1483;
            _4021_onOwned = _out1484;
            _4022_recIdents = _out1485;
            if ((_4016_isDatatype) || (_4017_isConstant)) {
              r = RAST.Expr.create_Call((_4020_onExpr).Sel(DCOMP.__default.escapeIdent(_4018_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1486;
              DCOMP._IOwnership _out1487;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1486, out _out1487);
              r = _out1486;
              resultingOwnership = _out1487;
            } else {
              Dafny.ISequence<Dafny.Rune> _4023_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4023_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4020_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4018_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1488;
              DCOMP._IOwnership _out1489;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4023_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1488, out _out1489);
              r = _out1488;
              resultingOwnership = _out1489;
            }
            readIdents = _4022_recIdents;
            return ;
          }
        } else if (_source168.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _4024___mcc_h96 = _source168.dtor_elements;
          bool _4025_isDatatype = _3914___mcc_h51;
          bool _4026_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4027_field = _3912___mcc_h49;
          DAST._IExpression _4028_on = _3911___mcc_h48;
          {
            RAST._IExpr _4029_onExpr;
            DCOMP._IOwnership _4030_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4031_recIdents;
            RAST._IExpr _out1490;
            DCOMP._IOwnership _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            (this).GenExpr(_4028_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1490, out _out1491, out _out1492);
            _4029_onExpr = _out1490;
            _4030_onOwned = _out1491;
            _4031_recIdents = _out1492;
            if ((_4025_isDatatype) || (_4026_isConstant)) {
              r = RAST.Expr.create_Call((_4029_onExpr).Sel(DCOMP.__default.escapeIdent(_4027_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1493;
              DCOMP._IOwnership _out1494;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1493, out _out1494);
              r = _out1493;
              resultingOwnership = _out1494;
            } else {
              Dafny.ISequence<Dafny.Rune> _4032_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4032_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4029_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4027_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1495;
              DCOMP._IOwnership _out1496;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4032_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1495, out _out1496);
              r = _out1495;
              resultingOwnership = _out1496;
            }
            readIdents = _4031_recIdents;
            return ;
          }
        } else if (_source168.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4033___mcc_h98 = _source168.dtor_mapElems;
          bool _4034_isDatatype = _3914___mcc_h51;
          bool _4035_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4036_field = _3912___mcc_h49;
          DAST._IExpression _4037_on = _3911___mcc_h48;
          {
            RAST._IExpr _4038_onExpr;
            DCOMP._IOwnership _4039_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4040_recIdents;
            RAST._IExpr _out1497;
            DCOMP._IOwnership _out1498;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1499;
            (this).GenExpr(_4037_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1497, out _out1498, out _out1499);
            _4038_onExpr = _out1497;
            _4039_onOwned = _out1498;
            _4040_recIdents = _out1499;
            if ((_4034_isDatatype) || (_4035_isConstant)) {
              r = RAST.Expr.create_Call((_4038_onExpr).Sel(DCOMP.__default.escapeIdent(_4036_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1500;
              DCOMP._IOwnership _out1501;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1500, out _out1501);
              r = _out1500;
              resultingOwnership = _out1501;
            } else {
              Dafny.ISequence<Dafny.Rune> _4041_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4041_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4038_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4036_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1502;
              DCOMP._IOwnership _out1503;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4041_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1502, out _out1503);
              r = _out1502;
              resultingOwnership = _out1503;
            }
            readIdents = _4040_recIdents;
            return ;
          }
        } else if (_source168.is_MapBuilder) {
          DAST._IType _4042___mcc_h100 = _source168.dtor_keyType;
          DAST._IType _4043___mcc_h101 = _source168.dtor_valueType;
          bool _4044_isDatatype = _3914___mcc_h51;
          bool _4045_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4046_field = _3912___mcc_h49;
          DAST._IExpression _4047_on = _3911___mcc_h48;
          {
            RAST._IExpr _4048_onExpr;
            DCOMP._IOwnership _4049_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4050_recIdents;
            RAST._IExpr _out1504;
            DCOMP._IOwnership _out1505;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1506;
            (this).GenExpr(_4047_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1504, out _out1505, out _out1506);
            _4048_onExpr = _out1504;
            _4049_onOwned = _out1505;
            _4050_recIdents = _out1506;
            if ((_4044_isDatatype) || (_4045_isConstant)) {
              r = RAST.Expr.create_Call((_4048_onExpr).Sel(DCOMP.__default.escapeIdent(_4046_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1507;
              DCOMP._IOwnership _out1508;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1507, out _out1508);
              r = _out1507;
              resultingOwnership = _out1508;
            } else {
              Dafny.ISequence<Dafny.Rune> _4051_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4051_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4048_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4046_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1509;
              DCOMP._IOwnership _out1510;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4051_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1509, out _out1510);
              r = _out1509;
              resultingOwnership = _out1510;
            }
            readIdents = _4050_recIdents;
            return ;
          }
        } else if (_source168.is_SeqUpdate) {
          DAST._IExpression _4052___mcc_h104 = _source168.dtor_expr;
          DAST._IExpression _4053___mcc_h105 = _source168.dtor_indexExpr;
          DAST._IExpression _4054___mcc_h106 = _source168.dtor_value;
          bool _4055_isDatatype = _3914___mcc_h51;
          bool _4056_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4057_field = _3912___mcc_h49;
          DAST._IExpression _4058_on = _3911___mcc_h48;
          {
            RAST._IExpr _4059_onExpr;
            DCOMP._IOwnership _4060_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4061_recIdents;
            RAST._IExpr _out1511;
            DCOMP._IOwnership _out1512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
            (this).GenExpr(_4058_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1511, out _out1512, out _out1513);
            _4059_onExpr = _out1511;
            _4060_onOwned = _out1512;
            _4061_recIdents = _out1513;
            if ((_4055_isDatatype) || (_4056_isConstant)) {
              r = RAST.Expr.create_Call((_4059_onExpr).Sel(DCOMP.__default.escapeIdent(_4057_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1514;
              DCOMP._IOwnership _out1515;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1514, out _out1515);
              r = _out1514;
              resultingOwnership = _out1515;
            } else {
              Dafny.ISequence<Dafny.Rune> _4062_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4062_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4059_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4057_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1516;
              DCOMP._IOwnership _out1517;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4062_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1516, out _out1517);
              r = _out1516;
              resultingOwnership = _out1517;
            }
            readIdents = _4061_recIdents;
            return ;
          }
        } else if (_source168.is_MapUpdate) {
          DAST._IExpression _4063___mcc_h110 = _source168.dtor_expr;
          DAST._IExpression _4064___mcc_h111 = _source168.dtor_indexExpr;
          DAST._IExpression _4065___mcc_h112 = _source168.dtor_value;
          bool _4066_isDatatype = _3914___mcc_h51;
          bool _4067_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4068_field = _3912___mcc_h49;
          DAST._IExpression _4069_on = _3911___mcc_h48;
          {
            RAST._IExpr _4070_onExpr;
            DCOMP._IOwnership _4071_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4072_recIdents;
            RAST._IExpr _out1518;
            DCOMP._IOwnership _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            (this).GenExpr(_4069_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1518, out _out1519, out _out1520);
            _4070_onExpr = _out1518;
            _4071_onOwned = _out1519;
            _4072_recIdents = _out1520;
            if ((_4066_isDatatype) || (_4067_isConstant)) {
              r = RAST.Expr.create_Call((_4070_onExpr).Sel(DCOMP.__default.escapeIdent(_4068_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1521;
              DCOMP._IOwnership _out1522;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1521, out _out1522);
              r = _out1521;
              resultingOwnership = _out1522;
            } else {
              Dafny.ISequence<Dafny.Rune> _4073_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4073_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4070_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4068_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1523;
              DCOMP._IOwnership _out1524;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4073_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1523, out _out1524);
              r = _out1523;
              resultingOwnership = _out1524;
            }
            readIdents = _4072_recIdents;
            return ;
          }
        } else if (_source168.is_SetBuilder) {
          DAST._IType _4074___mcc_h116 = _source168.dtor_elemType;
          bool _4075_isDatatype = _3914___mcc_h51;
          bool _4076_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4077_field = _3912___mcc_h49;
          DAST._IExpression _4078_on = _3911___mcc_h48;
          {
            RAST._IExpr _4079_onExpr;
            DCOMP._IOwnership _4080_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4081_recIdents;
            RAST._IExpr _out1525;
            DCOMP._IOwnership _out1526;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1527;
            (this).GenExpr(_4078_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1525, out _out1526, out _out1527);
            _4079_onExpr = _out1525;
            _4080_onOwned = _out1526;
            _4081_recIdents = _out1527;
            if ((_4075_isDatatype) || (_4076_isConstant)) {
              r = RAST.Expr.create_Call((_4079_onExpr).Sel(DCOMP.__default.escapeIdent(_4077_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1528;
              DCOMP._IOwnership _out1529;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1528, out _out1529);
              r = _out1528;
              resultingOwnership = _out1529;
            } else {
              Dafny.ISequence<Dafny.Rune> _4082_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4082_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4079_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4077_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1530;
              DCOMP._IOwnership _out1531;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4082_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1530, out _out1531);
              r = _out1530;
              resultingOwnership = _out1531;
            }
            readIdents = _4081_recIdents;
            return ;
          }
        } else if (_source168.is_ToMultiset) {
          DAST._IExpression _4083___mcc_h118 = _source168.dtor_ToMultiset_a0;
          bool _4084_isDatatype = _3914___mcc_h51;
          bool _4085_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4086_field = _3912___mcc_h49;
          DAST._IExpression _4087_on = _3911___mcc_h48;
          {
            RAST._IExpr _4088_onExpr;
            DCOMP._IOwnership _4089_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4090_recIdents;
            RAST._IExpr _out1532;
            DCOMP._IOwnership _out1533;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1534;
            (this).GenExpr(_4087_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1532, out _out1533, out _out1534);
            _4088_onExpr = _out1532;
            _4089_onOwned = _out1533;
            _4090_recIdents = _out1534;
            if ((_4084_isDatatype) || (_4085_isConstant)) {
              r = RAST.Expr.create_Call((_4088_onExpr).Sel(DCOMP.__default.escapeIdent(_4086_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1535;
              DCOMP._IOwnership _out1536;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1535, out _out1536);
              r = _out1535;
              resultingOwnership = _out1536;
            } else {
              Dafny.ISequence<Dafny.Rune> _4091_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4091_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4088_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4086_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1537;
              DCOMP._IOwnership _out1538;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4091_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1537, out _out1538);
              r = _out1537;
              resultingOwnership = _out1538;
            }
            readIdents = _4090_recIdents;
            return ;
          }
        } else if (_source168.is_This) {
          bool _4092_isDatatype = _3914___mcc_h51;
          bool _4093_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4094_field = _3912___mcc_h49;
          DAST._IExpression _4095_on = _3911___mcc_h48;
          {
            RAST._IExpr _4096_onExpr;
            DCOMP._IOwnership _4097_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4098_recIdents;
            RAST._IExpr _out1539;
            DCOMP._IOwnership _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            (this).GenExpr(_4095_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1539, out _out1540, out _out1541);
            _4096_onExpr = _out1539;
            _4097_onOwned = _out1540;
            _4098_recIdents = _out1541;
            if ((_4092_isDatatype) || (_4093_isConstant)) {
              r = RAST.Expr.create_Call((_4096_onExpr).Sel(DCOMP.__default.escapeIdent(_4094_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1542;
              DCOMP._IOwnership _out1543;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1542, out _out1543);
              r = _out1542;
              resultingOwnership = _out1543;
            } else {
              Dafny.ISequence<Dafny.Rune> _4099_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4099_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4096_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4094_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1544;
              DCOMP._IOwnership _out1545;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4099_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1544, out _out1545);
              r = _out1544;
              resultingOwnership = _out1545;
            }
            readIdents = _4098_recIdents;
            return ;
          }
        } else if (_source168.is_Ite) {
          DAST._IExpression _4100___mcc_h120 = _source168.dtor_cond;
          DAST._IExpression _4101___mcc_h121 = _source168.dtor_thn;
          DAST._IExpression _4102___mcc_h122 = _source168.dtor_els;
          bool _4103_isDatatype = _3914___mcc_h51;
          bool _4104_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4105_field = _3912___mcc_h49;
          DAST._IExpression _4106_on = _3911___mcc_h48;
          {
            RAST._IExpr _4107_onExpr;
            DCOMP._IOwnership _4108_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4109_recIdents;
            RAST._IExpr _out1546;
            DCOMP._IOwnership _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            (this).GenExpr(_4106_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1546, out _out1547, out _out1548);
            _4107_onExpr = _out1546;
            _4108_onOwned = _out1547;
            _4109_recIdents = _out1548;
            if ((_4103_isDatatype) || (_4104_isConstant)) {
              r = RAST.Expr.create_Call((_4107_onExpr).Sel(DCOMP.__default.escapeIdent(_4105_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1549;
              DCOMP._IOwnership _out1550;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1549, out _out1550);
              r = _out1549;
              resultingOwnership = _out1550;
            } else {
              Dafny.ISequence<Dafny.Rune> _4110_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4110_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4107_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4105_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1551;
              DCOMP._IOwnership _out1552;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4110_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1551, out _out1552);
              r = _out1551;
              resultingOwnership = _out1552;
            }
            readIdents = _4109_recIdents;
            return ;
          }
        } else if (_source168.is_UnOp) {
          DAST._IUnaryOp _4111___mcc_h126 = _source168.dtor_unOp;
          DAST._IExpression _4112___mcc_h127 = _source168.dtor_expr;
          DAST.Format._IUnaryOpFormat _4113___mcc_h128 = _source168.dtor_format1;
          bool _4114_isDatatype = _3914___mcc_h51;
          bool _4115_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4116_field = _3912___mcc_h49;
          DAST._IExpression _4117_on = _3911___mcc_h48;
          {
            RAST._IExpr _4118_onExpr;
            DCOMP._IOwnership _4119_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4120_recIdents;
            RAST._IExpr _out1553;
            DCOMP._IOwnership _out1554;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1555;
            (this).GenExpr(_4117_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1553, out _out1554, out _out1555);
            _4118_onExpr = _out1553;
            _4119_onOwned = _out1554;
            _4120_recIdents = _out1555;
            if ((_4114_isDatatype) || (_4115_isConstant)) {
              r = RAST.Expr.create_Call((_4118_onExpr).Sel(DCOMP.__default.escapeIdent(_4116_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1556;
              DCOMP._IOwnership _out1557;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1556, out _out1557);
              r = _out1556;
              resultingOwnership = _out1557;
            } else {
              Dafny.ISequence<Dafny.Rune> _4121_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4121_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4118_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4116_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1558;
              DCOMP._IOwnership _out1559;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4121_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1558, out _out1559);
              r = _out1558;
              resultingOwnership = _out1559;
            }
            readIdents = _4120_recIdents;
            return ;
          }
        } else if (_source168.is_BinOp) {
          DAST._IBinOp _4122___mcc_h132 = _source168.dtor_op;
          DAST._IExpression _4123___mcc_h133 = _source168.dtor_left;
          DAST._IExpression _4124___mcc_h134 = _source168.dtor_right;
          DAST.Format._IBinaryOpFormat _4125___mcc_h135 = _source168.dtor_format2;
          bool _4126_isDatatype = _3914___mcc_h51;
          bool _4127_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4128_field = _3912___mcc_h49;
          DAST._IExpression _4129_on = _3911___mcc_h48;
          {
            RAST._IExpr _4130_onExpr;
            DCOMP._IOwnership _4131_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4132_recIdents;
            RAST._IExpr _out1560;
            DCOMP._IOwnership _out1561;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
            (this).GenExpr(_4129_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1560, out _out1561, out _out1562);
            _4130_onExpr = _out1560;
            _4131_onOwned = _out1561;
            _4132_recIdents = _out1562;
            if ((_4126_isDatatype) || (_4127_isConstant)) {
              r = RAST.Expr.create_Call((_4130_onExpr).Sel(DCOMP.__default.escapeIdent(_4128_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1563;
              DCOMP._IOwnership _out1564;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1563, out _out1564);
              r = _out1563;
              resultingOwnership = _out1564;
            } else {
              Dafny.ISequence<Dafny.Rune> _4133_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4133_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4130_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4128_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1565;
              DCOMP._IOwnership _out1566;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4133_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1565, out _out1566);
              r = _out1565;
              resultingOwnership = _out1566;
            }
            readIdents = _4132_recIdents;
            return ;
          }
        } else if (_source168.is_ArrayLen) {
          DAST._IExpression _4134___mcc_h140 = _source168.dtor_expr;
          BigInteger _4135___mcc_h141 = _source168.dtor_dim;
          bool _4136_isDatatype = _3914___mcc_h51;
          bool _4137_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4138_field = _3912___mcc_h49;
          DAST._IExpression _4139_on = _3911___mcc_h48;
          {
            RAST._IExpr _4140_onExpr;
            DCOMP._IOwnership _4141_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4142_recIdents;
            RAST._IExpr _out1567;
            DCOMP._IOwnership _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            (this).GenExpr(_4139_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1567, out _out1568, out _out1569);
            _4140_onExpr = _out1567;
            _4141_onOwned = _out1568;
            _4142_recIdents = _out1569;
            if ((_4136_isDatatype) || (_4137_isConstant)) {
              r = RAST.Expr.create_Call((_4140_onExpr).Sel(DCOMP.__default.escapeIdent(_4138_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1570;
              DCOMP._IOwnership _out1571;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1570, out _out1571);
              r = _out1570;
              resultingOwnership = _out1571;
            } else {
              Dafny.ISequence<Dafny.Rune> _4143_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4143_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4140_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4138_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1572;
              DCOMP._IOwnership _out1573;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4143_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1572, out _out1573);
              r = _out1572;
              resultingOwnership = _out1573;
            }
            readIdents = _4142_recIdents;
            return ;
          }
        } else if (_source168.is_MapKeys) {
          DAST._IExpression _4144___mcc_h144 = _source168.dtor_expr;
          bool _4145_isDatatype = _3914___mcc_h51;
          bool _4146_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4147_field = _3912___mcc_h49;
          DAST._IExpression _4148_on = _3911___mcc_h48;
          {
            RAST._IExpr _4149_onExpr;
            DCOMP._IOwnership _4150_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4151_recIdents;
            RAST._IExpr _out1574;
            DCOMP._IOwnership _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            (this).GenExpr(_4148_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1574, out _out1575, out _out1576);
            _4149_onExpr = _out1574;
            _4150_onOwned = _out1575;
            _4151_recIdents = _out1576;
            if ((_4145_isDatatype) || (_4146_isConstant)) {
              r = RAST.Expr.create_Call((_4149_onExpr).Sel(DCOMP.__default.escapeIdent(_4147_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1577;
              DCOMP._IOwnership _out1578;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1577, out _out1578);
              r = _out1577;
              resultingOwnership = _out1578;
            } else {
              Dafny.ISequence<Dafny.Rune> _4152_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4152_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4149_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4147_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1579;
              DCOMP._IOwnership _out1580;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4152_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1579, out _out1580);
              r = _out1579;
              resultingOwnership = _out1580;
            }
            readIdents = _4151_recIdents;
            return ;
          }
        } else if (_source168.is_MapValues) {
          DAST._IExpression _4153___mcc_h146 = _source168.dtor_expr;
          bool _4154_isDatatype = _3914___mcc_h51;
          bool _4155_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4156_field = _3912___mcc_h49;
          DAST._IExpression _4157_on = _3911___mcc_h48;
          {
            RAST._IExpr _4158_onExpr;
            DCOMP._IOwnership _4159_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4160_recIdents;
            RAST._IExpr _out1581;
            DCOMP._IOwnership _out1582;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1583;
            (this).GenExpr(_4157_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1581, out _out1582, out _out1583);
            _4158_onExpr = _out1581;
            _4159_onOwned = _out1582;
            _4160_recIdents = _out1583;
            if ((_4154_isDatatype) || (_4155_isConstant)) {
              r = RAST.Expr.create_Call((_4158_onExpr).Sel(DCOMP.__default.escapeIdent(_4156_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1584;
              DCOMP._IOwnership _out1585;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1584, out _out1585);
              r = _out1584;
              resultingOwnership = _out1585;
            } else {
              Dafny.ISequence<Dafny.Rune> _4161_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4161_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4158_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4156_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1586;
              DCOMP._IOwnership _out1587;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4161_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1586, out _out1587);
              r = _out1586;
              resultingOwnership = _out1587;
            }
            readIdents = _4160_recIdents;
            return ;
          }
        } else if (_source168.is_Select) {
          DAST._IExpression _4162___mcc_h148 = _source168.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4163___mcc_h149 = _source168.dtor_field;
          bool _4164___mcc_h150 = _source168.dtor_isConstant;
          bool _4165___mcc_h151 = _source168.dtor_onDatatype;
          bool _4166_isDatatype = _3914___mcc_h51;
          bool _4167_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4168_field = _3912___mcc_h49;
          DAST._IExpression _4169_on = _3911___mcc_h48;
          {
            RAST._IExpr _4170_onExpr;
            DCOMP._IOwnership _4171_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4172_recIdents;
            RAST._IExpr _out1588;
            DCOMP._IOwnership _out1589;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
            (this).GenExpr(_4169_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1588, out _out1589, out _out1590);
            _4170_onExpr = _out1588;
            _4171_onOwned = _out1589;
            _4172_recIdents = _out1590;
            if ((_4166_isDatatype) || (_4167_isConstant)) {
              r = RAST.Expr.create_Call((_4170_onExpr).Sel(DCOMP.__default.escapeIdent(_4168_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1591;
              DCOMP._IOwnership _out1592;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1591, out _out1592);
              r = _out1591;
              resultingOwnership = _out1592;
            } else {
              Dafny.ISequence<Dafny.Rune> _4173_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4173_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4170_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4168_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1593;
              DCOMP._IOwnership _out1594;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4173_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1593, out _out1594);
              r = _out1593;
              resultingOwnership = _out1594;
            }
            readIdents = _4172_recIdents;
            return ;
          }
        } else if (_source168.is_SelectFn) {
          DAST._IExpression _4174___mcc_h156 = _source168.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4175___mcc_h157 = _source168.dtor_field;
          bool _4176___mcc_h158 = _source168.dtor_onDatatype;
          bool _4177___mcc_h159 = _source168.dtor_isStatic;
          BigInteger _4178___mcc_h160 = _source168.dtor_arity;
          bool _4179_isDatatype = _3914___mcc_h51;
          bool _4180_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4181_field = _3912___mcc_h49;
          DAST._IExpression _4182_on = _3911___mcc_h48;
          {
            RAST._IExpr _4183_onExpr;
            DCOMP._IOwnership _4184_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4185_recIdents;
            RAST._IExpr _out1595;
            DCOMP._IOwnership _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            (this).GenExpr(_4182_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1595, out _out1596, out _out1597);
            _4183_onExpr = _out1595;
            _4184_onOwned = _out1596;
            _4185_recIdents = _out1597;
            if ((_4179_isDatatype) || (_4180_isConstant)) {
              r = RAST.Expr.create_Call((_4183_onExpr).Sel(DCOMP.__default.escapeIdent(_4181_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1598;
              DCOMP._IOwnership _out1599;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1598, out _out1599);
              r = _out1598;
              resultingOwnership = _out1599;
            } else {
              Dafny.ISequence<Dafny.Rune> _4186_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4186_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4183_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4181_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1600;
              DCOMP._IOwnership _out1601;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4186_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1600, out _out1601);
              r = _out1600;
              resultingOwnership = _out1601;
            }
            readIdents = _4185_recIdents;
            return ;
          }
        } else if (_source168.is_Index) {
          DAST._IExpression _4187___mcc_h166 = _source168.dtor_expr;
          DAST._ICollKind _4188___mcc_h167 = _source168.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _4189___mcc_h168 = _source168.dtor_indices;
          bool _4190_isDatatype = _3914___mcc_h51;
          bool _4191_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4192_field = _3912___mcc_h49;
          DAST._IExpression _4193_on = _3911___mcc_h48;
          {
            RAST._IExpr _4194_onExpr;
            DCOMP._IOwnership _4195_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4196_recIdents;
            RAST._IExpr _out1602;
            DCOMP._IOwnership _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            (this).GenExpr(_4193_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1602, out _out1603, out _out1604);
            _4194_onExpr = _out1602;
            _4195_onOwned = _out1603;
            _4196_recIdents = _out1604;
            if ((_4190_isDatatype) || (_4191_isConstant)) {
              r = RAST.Expr.create_Call((_4194_onExpr).Sel(DCOMP.__default.escapeIdent(_4192_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1605;
              DCOMP._IOwnership _out1606;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1605, out _out1606);
              r = _out1605;
              resultingOwnership = _out1606;
            } else {
              Dafny.ISequence<Dafny.Rune> _4197_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4197_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4194_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4192_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1607;
              DCOMP._IOwnership _out1608;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4197_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1607, out _out1608);
              r = _out1607;
              resultingOwnership = _out1608;
            }
            readIdents = _4196_recIdents;
            return ;
          }
        } else if (_source168.is_IndexRange) {
          DAST._IExpression _4198___mcc_h172 = _source168.dtor_expr;
          bool _4199___mcc_h173 = _source168.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _4200___mcc_h174 = _source168.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _4201___mcc_h175 = _source168.dtor_high;
          bool _4202_isDatatype = _3914___mcc_h51;
          bool _4203_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4204_field = _3912___mcc_h49;
          DAST._IExpression _4205_on = _3911___mcc_h48;
          {
            RAST._IExpr _4206_onExpr;
            DCOMP._IOwnership _4207_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4208_recIdents;
            RAST._IExpr _out1609;
            DCOMP._IOwnership _out1610;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1611;
            (this).GenExpr(_4205_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1609, out _out1610, out _out1611);
            _4206_onExpr = _out1609;
            _4207_onOwned = _out1610;
            _4208_recIdents = _out1611;
            if ((_4202_isDatatype) || (_4203_isConstant)) {
              r = RAST.Expr.create_Call((_4206_onExpr).Sel(DCOMP.__default.escapeIdent(_4204_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1612;
              DCOMP._IOwnership _out1613;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1612, out _out1613);
              r = _out1612;
              resultingOwnership = _out1613;
            } else {
              Dafny.ISequence<Dafny.Rune> _4209_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4209_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4206_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4204_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1614;
              DCOMP._IOwnership _out1615;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4209_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1614, out _out1615);
              r = _out1614;
              resultingOwnership = _out1615;
            }
            readIdents = _4208_recIdents;
            return ;
          }
        } else if (_source168.is_TupleSelect) {
          DAST._IExpression _4210___mcc_h180 = _source168.dtor_expr;
          BigInteger _4211___mcc_h181 = _source168.dtor_index;
          bool _4212_isDatatype = _3914___mcc_h51;
          bool _4213_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4214_field = _3912___mcc_h49;
          DAST._IExpression _4215_on = _3911___mcc_h48;
          {
            RAST._IExpr _4216_onExpr;
            DCOMP._IOwnership _4217_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4218_recIdents;
            RAST._IExpr _out1616;
            DCOMP._IOwnership _out1617;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
            (this).GenExpr(_4215_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1616, out _out1617, out _out1618);
            _4216_onExpr = _out1616;
            _4217_onOwned = _out1617;
            _4218_recIdents = _out1618;
            if ((_4212_isDatatype) || (_4213_isConstant)) {
              r = RAST.Expr.create_Call((_4216_onExpr).Sel(DCOMP.__default.escapeIdent(_4214_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1619;
              DCOMP._IOwnership _out1620;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1619, out _out1620);
              r = _out1619;
              resultingOwnership = _out1620;
            } else {
              Dafny.ISequence<Dafny.Rune> _4219_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4219_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4216_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4214_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1621;
              DCOMP._IOwnership _out1622;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4219_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1621, out _out1622);
              r = _out1621;
              resultingOwnership = _out1622;
            }
            readIdents = _4218_recIdents;
            return ;
          }
        } else if (_source168.is_Call) {
          DAST._IExpression _4220___mcc_h184 = _source168.dtor_on;
          DAST._ICallName _4221___mcc_h185 = _source168.dtor_callName;
          Dafny.ISequence<DAST._IType> _4222___mcc_h186 = _source168.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4223___mcc_h187 = _source168.dtor_args;
          bool _4224_isDatatype = _3914___mcc_h51;
          bool _4225_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4226_field = _3912___mcc_h49;
          DAST._IExpression _4227_on = _3911___mcc_h48;
          {
            RAST._IExpr _4228_onExpr;
            DCOMP._IOwnership _4229_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4230_recIdents;
            RAST._IExpr _out1623;
            DCOMP._IOwnership _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            (this).GenExpr(_4227_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1623, out _out1624, out _out1625);
            _4228_onExpr = _out1623;
            _4229_onOwned = _out1624;
            _4230_recIdents = _out1625;
            if ((_4224_isDatatype) || (_4225_isConstant)) {
              r = RAST.Expr.create_Call((_4228_onExpr).Sel(DCOMP.__default.escapeIdent(_4226_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1626;
              DCOMP._IOwnership _out1627;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1626, out _out1627);
              r = _out1626;
              resultingOwnership = _out1627;
            } else {
              Dafny.ISequence<Dafny.Rune> _4231_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4231_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4228_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4226_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1628;
              DCOMP._IOwnership _out1629;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4231_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1628, out _out1629);
              r = _out1628;
              resultingOwnership = _out1629;
            }
            readIdents = _4230_recIdents;
            return ;
          }
        } else if (_source168.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _4232___mcc_h192 = _source168.dtor_params;
          DAST._IType _4233___mcc_h193 = _source168.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _4234___mcc_h194 = _source168.dtor_body;
          bool _4235_isDatatype = _3914___mcc_h51;
          bool _4236_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4237_field = _3912___mcc_h49;
          DAST._IExpression _4238_on = _3911___mcc_h48;
          {
            RAST._IExpr _4239_onExpr;
            DCOMP._IOwnership _4240_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4241_recIdents;
            RAST._IExpr _out1630;
            DCOMP._IOwnership _out1631;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
            (this).GenExpr(_4238_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1630, out _out1631, out _out1632);
            _4239_onExpr = _out1630;
            _4240_onOwned = _out1631;
            _4241_recIdents = _out1632;
            if ((_4235_isDatatype) || (_4236_isConstant)) {
              r = RAST.Expr.create_Call((_4239_onExpr).Sel(DCOMP.__default.escapeIdent(_4237_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1633;
              DCOMP._IOwnership _out1634;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1633, out _out1634);
              r = _out1633;
              resultingOwnership = _out1634;
            } else {
              Dafny.ISequence<Dafny.Rune> _4242_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4242_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4239_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4237_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1635;
              DCOMP._IOwnership _out1636;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4242_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1635, out _out1636);
              r = _out1635;
              resultingOwnership = _out1636;
            }
            readIdents = _4241_recIdents;
            return ;
          }
        } else if (_source168.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4243___mcc_h198 = _source168.dtor_values;
          DAST._IType _4244___mcc_h199 = _source168.dtor_retType;
          DAST._IExpression _4245___mcc_h200 = _source168.dtor_expr;
          bool _4246_isDatatype = _3914___mcc_h51;
          bool _4247_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4248_field = _3912___mcc_h49;
          DAST._IExpression _4249_on = _3911___mcc_h48;
          {
            RAST._IExpr _4250_onExpr;
            DCOMP._IOwnership _4251_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4252_recIdents;
            RAST._IExpr _out1637;
            DCOMP._IOwnership _out1638;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1639;
            (this).GenExpr(_4249_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1637, out _out1638, out _out1639);
            _4250_onExpr = _out1637;
            _4251_onOwned = _out1638;
            _4252_recIdents = _out1639;
            if ((_4246_isDatatype) || (_4247_isConstant)) {
              r = RAST.Expr.create_Call((_4250_onExpr).Sel(DCOMP.__default.escapeIdent(_4248_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1640;
              DCOMP._IOwnership _out1641;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1640, out _out1641);
              r = _out1640;
              resultingOwnership = _out1641;
            } else {
              Dafny.ISequence<Dafny.Rune> _4253_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4250_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4248_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1642;
              DCOMP._IOwnership _out1643;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4253_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1642, out _out1643);
              r = _out1642;
              resultingOwnership = _out1643;
            }
            readIdents = _4252_recIdents;
            return ;
          }
        } else if (_source168.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _4254___mcc_h204 = _source168.dtor_name;
          DAST._IType _4255___mcc_h205 = _source168.dtor_typ;
          DAST._IExpression _4256___mcc_h206 = _source168.dtor_value;
          DAST._IExpression _4257___mcc_h207 = _source168.dtor_iifeBody;
          bool _4258_isDatatype = _3914___mcc_h51;
          bool _4259_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4260_field = _3912___mcc_h49;
          DAST._IExpression _4261_on = _3911___mcc_h48;
          {
            RAST._IExpr _4262_onExpr;
            DCOMP._IOwnership _4263_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4264_recIdents;
            RAST._IExpr _out1644;
            DCOMP._IOwnership _out1645;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1646;
            (this).GenExpr(_4261_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1644, out _out1645, out _out1646);
            _4262_onExpr = _out1644;
            _4263_onOwned = _out1645;
            _4264_recIdents = _out1646;
            if ((_4258_isDatatype) || (_4259_isConstant)) {
              r = RAST.Expr.create_Call((_4262_onExpr).Sel(DCOMP.__default.escapeIdent(_4260_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1647;
              DCOMP._IOwnership _out1648;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1647, out _out1648);
              r = _out1647;
              resultingOwnership = _out1648;
            } else {
              Dafny.ISequence<Dafny.Rune> _4265_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4265_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4262_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4260_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1649;
              DCOMP._IOwnership _out1650;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4265_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1649, out _out1650);
              r = _out1649;
              resultingOwnership = _out1650;
            }
            readIdents = _4264_recIdents;
            return ;
          }
        } else if (_source168.is_Apply) {
          DAST._IExpression _4266___mcc_h212 = _source168.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _4267___mcc_h213 = _source168.dtor_args;
          bool _4268_isDatatype = _3914___mcc_h51;
          bool _4269_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4270_field = _3912___mcc_h49;
          DAST._IExpression _4271_on = _3911___mcc_h48;
          {
            RAST._IExpr _4272_onExpr;
            DCOMP._IOwnership _4273_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4274_recIdents;
            RAST._IExpr _out1651;
            DCOMP._IOwnership _out1652;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
            (this).GenExpr(_4271_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1651, out _out1652, out _out1653);
            _4272_onExpr = _out1651;
            _4273_onOwned = _out1652;
            _4274_recIdents = _out1653;
            if ((_4268_isDatatype) || (_4269_isConstant)) {
              r = RAST.Expr.create_Call((_4272_onExpr).Sel(DCOMP.__default.escapeIdent(_4270_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1654;
              DCOMP._IOwnership _out1655;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1654, out _out1655);
              r = _out1654;
              resultingOwnership = _out1655;
            } else {
              Dafny.ISequence<Dafny.Rune> _4275_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4275_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4272_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4270_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1656;
              DCOMP._IOwnership _out1657;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4275_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1656, out _out1657);
              r = _out1656;
              resultingOwnership = _out1657;
            }
            readIdents = _4274_recIdents;
            return ;
          }
        } else if (_source168.is_TypeTest) {
          DAST._IExpression _4276___mcc_h216 = _source168.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4277___mcc_h217 = _source168.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _4278___mcc_h218 = _source168.dtor_variant;
          bool _4279_isDatatype = _3914___mcc_h51;
          bool _4280_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4281_field = _3912___mcc_h49;
          DAST._IExpression _4282_on = _3911___mcc_h48;
          {
            RAST._IExpr _4283_onExpr;
            DCOMP._IOwnership _4284_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4285_recIdents;
            RAST._IExpr _out1658;
            DCOMP._IOwnership _out1659;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
            (this).GenExpr(_4282_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1658, out _out1659, out _out1660);
            _4283_onExpr = _out1658;
            _4284_onOwned = _out1659;
            _4285_recIdents = _out1660;
            if ((_4279_isDatatype) || (_4280_isConstant)) {
              r = RAST.Expr.create_Call((_4283_onExpr).Sel(DCOMP.__default.escapeIdent(_4281_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1661;
              DCOMP._IOwnership _out1662;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1661, out _out1662);
              r = _out1661;
              resultingOwnership = _out1662;
            } else {
              Dafny.ISequence<Dafny.Rune> _4286_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4286_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4283_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4281_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1663;
              DCOMP._IOwnership _out1664;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4286_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1663, out _out1664);
              r = _out1663;
              resultingOwnership = _out1664;
            }
            readIdents = _4285_recIdents;
            return ;
          }
        } else if (_source168.is_InitializationValue) {
          DAST._IType _4287___mcc_h222 = _source168.dtor_typ;
          bool _4288_isDatatype = _3914___mcc_h51;
          bool _4289_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4290_field = _3912___mcc_h49;
          DAST._IExpression _4291_on = _3911___mcc_h48;
          {
            RAST._IExpr _4292_onExpr;
            DCOMP._IOwnership _4293_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4294_recIdents;
            RAST._IExpr _out1665;
            DCOMP._IOwnership _out1666;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1667;
            (this).GenExpr(_4291_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1665, out _out1666, out _out1667);
            _4292_onExpr = _out1665;
            _4293_onOwned = _out1666;
            _4294_recIdents = _out1667;
            if ((_4288_isDatatype) || (_4289_isConstant)) {
              r = RAST.Expr.create_Call((_4292_onExpr).Sel(DCOMP.__default.escapeIdent(_4290_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1668;
              DCOMP._IOwnership _out1669;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1668, out _out1669);
              r = _out1668;
              resultingOwnership = _out1669;
            } else {
              Dafny.ISequence<Dafny.Rune> _4295_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4295_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4292_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4290_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1670;
              DCOMP._IOwnership _out1671;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4295_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1670, out _out1671);
              r = _out1670;
              resultingOwnership = _out1671;
            }
            readIdents = _4294_recIdents;
            return ;
          }
        } else if (_source168.is_BoolBoundedPool) {
          bool _4296_isDatatype = _3914___mcc_h51;
          bool _4297_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4298_field = _3912___mcc_h49;
          DAST._IExpression _4299_on = _3911___mcc_h48;
          {
            RAST._IExpr _4300_onExpr;
            DCOMP._IOwnership _4301_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4302_recIdents;
            RAST._IExpr _out1672;
            DCOMP._IOwnership _out1673;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1674;
            (this).GenExpr(_4299_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1672, out _out1673, out _out1674);
            _4300_onExpr = _out1672;
            _4301_onOwned = _out1673;
            _4302_recIdents = _out1674;
            if ((_4296_isDatatype) || (_4297_isConstant)) {
              r = RAST.Expr.create_Call((_4300_onExpr).Sel(DCOMP.__default.escapeIdent(_4298_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1675;
              DCOMP._IOwnership _out1676;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1675, out _out1676);
              r = _out1675;
              resultingOwnership = _out1676;
            } else {
              Dafny.ISequence<Dafny.Rune> _4303_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4303_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4300_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4298_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1677;
              DCOMP._IOwnership _out1678;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4303_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1677, out _out1678);
              r = _out1677;
              resultingOwnership = _out1678;
            }
            readIdents = _4302_recIdents;
            return ;
          }
        } else if (_source168.is_SetBoundedPool) {
          DAST._IExpression _4304___mcc_h224 = _source168.dtor_of;
          bool _4305_isDatatype = _3914___mcc_h51;
          bool _4306_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4307_field = _3912___mcc_h49;
          DAST._IExpression _4308_on = _3911___mcc_h48;
          {
            RAST._IExpr _4309_onExpr;
            DCOMP._IOwnership _4310_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4311_recIdents;
            RAST._IExpr _out1679;
            DCOMP._IOwnership _out1680;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
            (this).GenExpr(_4308_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1679, out _out1680, out _out1681);
            _4309_onExpr = _out1679;
            _4310_onOwned = _out1680;
            _4311_recIdents = _out1681;
            if ((_4305_isDatatype) || (_4306_isConstant)) {
              r = RAST.Expr.create_Call((_4309_onExpr).Sel(DCOMP.__default.escapeIdent(_4307_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1682;
              DCOMP._IOwnership _out1683;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1682, out _out1683);
              r = _out1682;
              resultingOwnership = _out1683;
            } else {
              Dafny.ISequence<Dafny.Rune> _4312_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4312_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4309_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4307_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1684;
              DCOMP._IOwnership _out1685;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4312_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1684, out _out1685);
              r = _out1684;
              resultingOwnership = _out1685;
            }
            readIdents = _4311_recIdents;
            return ;
          }
        } else if (_source168.is_SeqBoundedPool) {
          DAST._IExpression _4313___mcc_h226 = _source168.dtor_of;
          bool _4314___mcc_h227 = _source168.dtor_includeDuplicates;
          bool _4315_isDatatype = _3914___mcc_h51;
          bool _4316_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4317_field = _3912___mcc_h49;
          DAST._IExpression _4318_on = _3911___mcc_h48;
          {
            RAST._IExpr _4319_onExpr;
            DCOMP._IOwnership _4320_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4321_recIdents;
            RAST._IExpr _out1686;
            DCOMP._IOwnership _out1687;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
            (this).GenExpr(_4318_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1686, out _out1687, out _out1688);
            _4319_onExpr = _out1686;
            _4320_onOwned = _out1687;
            _4321_recIdents = _out1688;
            if ((_4315_isDatatype) || (_4316_isConstant)) {
              r = RAST.Expr.create_Call((_4319_onExpr).Sel(DCOMP.__default.escapeIdent(_4317_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1689;
              DCOMP._IOwnership _out1690;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1689, out _out1690);
              r = _out1689;
              resultingOwnership = _out1690;
            } else {
              Dafny.ISequence<Dafny.Rune> _4322_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4322_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4319_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4317_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1691;
              DCOMP._IOwnership _out1692;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4322_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1691, out _out1692);
              r = _out1691;
              resultingOwnership = _out1692;
            }
            readIdents = _4321_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _4323___mcc_h230 = _source168.dtor_lo;
          DAST._IExpression _4324___mcc_h231 = _source168.dtor_hi;
          bool _4325_isDatatype = _3914___mcc_h51;
          bool _4326_isConstant = _3913___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4327_field = _3912___mcc_h49;
          DAST._IExpression _4328_on = _3911___mcc_h48;
          {
            RAST._IExpr _4329_onExpr;
            DCOMP._IOwnership _4330_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4331_recIdents;
            RAST._IExpr _out1693;
            DCOMP._IOwnership _out1694;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1695;
            (this).GenExpr(_4328_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1693, out _out1694, out _out1695);
            _4329_onExpr = _out1693;
            _4330_onOwned = _out1694;
            _4331_recIdents = _out1695;
            if ((_4325_isDatatype) || (_4326_isConstant)) {
              r = RAST.Expr.create_Call((_4329_onExpr).Sel(DCOMP.__default.escapeIdent(_4327_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out1696;
              DCOMP._IOwnership _out1697;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1696, out _out1697);
              r = _out1696;
              resultingOwnership = _out1697;
            } else {
              Dafny.ISequence<Dafny.Rune> _4332_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4332_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4329_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4327_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out1698;
              DCOMP._IOwnership _out1699;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4332_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1698, out _out1699);
              r = _out1698;
              resultingOwnership = _out1699;
            }
            readIdents = _4331_recIdents;
            return ;
          }
        }
      } else if (_source165.is_SelectFn) {
        DAST._IExpression _4333___mcc_h234 = _source165.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4334___mcc_h235 = _source165.dtor_field;
        bool _4335___mcc_h236 = _source165.dtor_onDatatype;
        bool _4336___mcc_h237 = _source165.dtor_isStatic;
        BigInteger _4337___mcc_h238 = _source165.dtor_arity;
        BigInteger _4338_arity = _4337___mcc_h238;
        bool _4339_isStatic = _4336___mcc_h237;
        bool _4340_isDatatype = _4335___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _4341_field = _4334___mcc_h235;
        DAST._IExpression _4342_on = _4333___mcc_h234;
        {
          RAST._IExpr _4343_onExpr;
          DCOMP._IOwnership _4344_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4345_recIdents;
          RAST._IExpr _out1700;
          DCOMP._IOwnership _out1701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1702;
          (this).GenExpr(_4342_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1700, out _out1701, out _out1702);
          _4343_onExpr = _out1700;
          _4344_onOwned = _out1701;
          _4345_recIdents = _out1702;
          Dafny.ISequence<Dafny.Rune> _4346_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _4347_onString;
          _4347_onString = (_4343_onExpr)._ToString(DCOMP.__default.IND);
          if (_4339_isStatic) {
            _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4347_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4341_field));
          } else {
            _4346_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4346_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _4347_onString), ((object.Equals(_4344_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _4348_args;
            _4348_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _4349_i;
            _4349_i = BigInteger.Zero;
            while ((_4349_i) < (_4338_arity)) {
              if ((_4349_i).Sign == 1) {
                _4348_args = Dafny.Sequence<Dafny.Rune>.Concat(_4348_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _4348_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4348_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_4349_i));
              _4349_i = (_4349_i) + (BigInteger.One);
            }
            _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4346_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _4348_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4346_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _4341_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4348_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(_4346_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(_4346_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _4350_typeShape;
          _4350_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _4351_i;
          _4351_i = BigInteger.Zero;
          while ((_4351_i) < (_4338_arity)) {
            if ((_4351_i).Sign == 1) {
              _4350_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4350_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _4350_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4350_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _4351_i = (_4351_i) + (BigInteger.One);
          }
          _4350_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4350_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _4346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _4346_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _4350_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_4346_s);
          RAST._IExpr _out1703;
          DCOMP._IOwnership _out1704;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1703, out _out1704);
          r = _out1703;
          resultingOwnership = _out1704;
          readIdents = _4345_recIdents;
          return ;
        }
      } else if (_source165.is_Index) {
        DAST._IExpression _4352___mcc_h239 = _source165.dtor_expr;
        DAST._ICollKind _4353___mcc_h240 = _source165.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _4354___mcc_h241 = _source165.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _4355_indices = _4354___mcc_h241;
        DAST._ICollKind _4356_collKind = _4353___mcc_h240;
        DAST._IExpression _4357_on = _4352___mcc_h239;
        {
          RAST._IExpr _4358_onExpr;
          DCOMP._IOwnership _4359_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4360_recIdents;
          RAST._IExpr _out1705;
          DCOMP._IOwnership _out1706;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1707;
          (this).GenExpr(_4357_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1705, out _out1706, out _out1707);
          _4358_onExpr = _out1705;
          _4359_onOwned = _out1706;
          _4360_recIdents = _out1707;
          readIdents = _4360_recIdents;
          r = _4358_onExpr;
          BigInteger _4361_i;
          _4361_i = BigInteger.Zero;
          while ((_4361_i) < (new BigInteger((_4355_indices).Count))) {
            if (object.Equals(_4356_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _4362_idx;
            DCOMP._IOwnership _4363_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4364_recIdentsIdx;
            RAST._IExpr _out1708;
            DCOMP._IOwnership _out1709;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1710;
            (this).GenExpr((_4355_indices).Select(_4361_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1708, out _out1709, out _out1710);
            _4362_idx = _out1708;
            _4363_idxOwned = _out1709;
            _4364_recIdentsIdx = _out1710;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_4362_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4364_recIdentsIdx);
            _4361_i = (_4361_i) + (BigInteger.One);
          }
          RAST._IExpr _out1711;
          DCOMP._IOwnership _out1712;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1711, out _out1712);
          r = _out1711;
          resultingOwnership = _out1712;
          return ;
        }
      } else if (_source165.is_IndexRange) {
        DAST._IExpression _4365___mcc_h242 = _source165.dtor_expr;
        bool _4366___mcc_h243 = _source165.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _4367___mcc_h244 = _source165.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _4368___mcc_h245 = _source165.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _4369_high = _4368___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _4370_low = _4367___mcc_h244;
        bool _4371_isArray = _4366___mcc_h243;
        DAST._IExpression _4372_on = _4365___mcc_h242;
        {
          RAST._IExpr _4373_onExpr;
          DCOMP._IOwnership _4374_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4375_recIdents;
          RAST._IExpr _out1713;
          DCOMP._IOwnership _out1714;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1715;
          (this).GenExpr(_4372_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1713, out _out1714, out _out1715);
          _4373_onExpr = _out1713;
          _4374_onOwned = _out1714;
          _4375_recIdents = _out1715;
          readIdents = _4375_recIdents;
          Dafny.ISequence<Dafny.Rune> _4376_methodName;
          _4376_methodName = (((_4370_low).is_Some) ? ((((_4369_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_4369_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _4377_arguments;
          _4377_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source169 = _4370_low;
          if (_source169.is_None) {
          } else {
            DAST._IExpression _4378___mcc_h274 = _source169.dtor_value;
            DAST._IExpression _4379_l = _4378___mcc_h274;
            {
              RAST._IExpr _4380_lExpr;
              DCOMP._IOwnership _4381___v123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4382_recIdentsL;
              RAST._IExpr _out1716;
              DCOMP._IOwnership _out1717;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
              (this).GenExpr(_4379_l, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1716, out _out1717, out _out1718);
              _4380_lExpr = _out1716;
              _4381___v123 = _out1717;
              _4382_recIdentsL = _out1718;
              _4377_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4377_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_4380_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4382_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source170 = _4369_high;
          if (_source170.is_None) {
          } else {
            DAST._IExpression _4383___mcc_h275 = _source170.dtor_value;
            DAST._IExpression _4384_h = _4383___mcc_h275;
            {
              RAST._IExpr _4385_hExpr;
              DCOMP._IOwnership _4386___v124;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4387_recIdentsH;
              RAST._IExpr _out1719;
              DCOMP._IOwnership _out1720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1721;
              (this).GenExpr(_4384_h, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1719, out _out1720, out _out1721);
              _4385_hExpr = _out1719;
              _4386___v124 = _out1720;
              _4387_recIdentsH = _out1721;
              _4377_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4377_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_4385_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4387_recIdentsH);
            }
          }
          r = _4373_onExpr;
          if (_4371_isArray) {
            if (!(_4376_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _4376_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _4376_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _4376_methodName))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _4377_arguments);
          } else {
            if (!(_4376_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_4376_methodName)).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _4377_arguments);
            }
          }
          RAST._IExpr _out1722;
          DCOMP._IOwnership _out1723;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1722, out _out1723);
          r = _out1722;
          resultingOwnership = _out1723;
          return ;
        }
      } else if (_source165.is_TupleSelect) {
        DAST._IExpression _4388___mcc_h246 = _source165.dtor_expr;
        BigInteger _4389___mcc_h247 = _source165.dtor_index;
        BigInteger _4390_idx = _4389___mcc_h247;
        DAST._IExpression _4391_on = _4388___mcc_h246;
        {
          RAST._IExpr _4392_onExpr;
          DCOMP._IOwnership _4393_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4394_recIdents;
          RAST._IExpr _out1724;
          DCOMP._IOwnership _out1725;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
          (this).GenExpr(_4391_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1724, out _out1725, out _out1726);
          _4392_onExpr = _out1724;
          _4393_onOwnership = _out1725;
          _4394_recIdents = _out1726;
          r = (_4392_onExpr).Sel(Std.Strings.__default.OfNat(_4390_idx));
          RAST._IExpr _out1727;
          DCOMP._IOwnership _out1728;
          DCOMP.COMP.FromOwnership(r, _4393_onOwnership, expectedOwnership, out _out1727, out _out1728);
          r = _out1727;
          resultingOwnership = _out1728;
          readIdents = _4394_recIdents;
          return ;
        }
      } else if (_source165.is_Call) {
        DAST._IExpression _4395___mcc_h248 = _source165.dtor_on;
        DAST._ICallName _4396___mcc_h249 = _source165.dtor_callName;
        Dafny.ISequence<DAST._IType> _4397___mcc_h250 = _source165.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4398___mcc_h251 = _source165.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4399_args = _4398___mcc_h251;
        Dafny.ISequence<DAST._IType> _4400_typeArgs = _4397___mcc_h250;
        DAST._ICallName _4401_name = _4396___mcc_h249;
        DAST._IExpression _4402_on = _4395___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _4403_typeExprs;
          _4403_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_4400_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _4404_typeI;
            _4404_typeI = BigInteger.Zero;
            while ((_4404_typeI) < (new BigInteger((_4400_typeArgs).Count))) {
              RAST._IType _4405_typeExpr;
              RAST._IType _out1729;
              _out1729 = (this).GenType((_4400_typeArgs).Select(_4404_typeI), false, false);
              _4405_typeExpr = _out1729;
              _4403_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4403_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4405_typeExpr));
              _4404_typeI = (_4404_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _4406_argExprs;
          _4406_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _4407_i;
          _4407_i = BigInteger.Zero;
          while ((_4407_i) < (new BigInteger((_4399_args).Count))) {
            RAST._IExpr _4408_argExpr;
            DCOMP._IOwnership _4409_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4410_argIdents;
            RAST._IExpr _out1730;
            DCOMP._IOwnership _out1731;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1732;
            (this).GenExpr((_4399_args).Select(_4407_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1730, out _out1731, out _out1732);
            _4408_argExpr = _out1730;
            _4409_argOwnership = _out1731;
            _4410_argIdents = _out1732;
            _4406_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_4406_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4408_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4410_argIdents);
            _4407_i = (_4407_i) + (BigInteger.One);
          }
          RAST._IExpr _4411_onExpr;
          DCOMP._IOwnership _4412___v125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4413_recIdents;
          RAST._IExpr _out1733;
          DCOMP._IOwnership _out1734;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1735;
          (this).GenExpr(_4402_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1733, out _out1734, out _out1735);
          _4411_onExpr = _out1733;
          _4412___v125 = _out1734;
          _4413_recIdents = _out1735;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4413_recIdents);
          Dafny.ISequence<Dafny.Rune> _4414_renderedName;
          _4414_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source171) => {
            if (_source171.is_Name) {
              Dafny.ISequence<Dafny.Rune> _4415___mcc_h276 = _source171.dtor_name;
              Dafny.ISequence<Dafny.Rune> _4416_ident = _4415___mcc_h276;
              return DCOMP.__default.escapeIdent(_4416_ident);
            } else if (_source171.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source171.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source171.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_4401_name);
          DAST._IExpression _source172 = _4402_on;
          if (_source172.is_Literal) {
            DAST._ILiteral _4417___mcc_h277 = _source172.dtor_Literal_a0;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _4418___mcc_h279 = _source172.dtor_Ident_a0;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4419___mcc_h281 = _source172.dtor_Companion_a0;
            {
              _4411_onExpr = (_4411_onExpr).MSel(_4414_renderedName);
            }
          } else if (_source172.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _4420___mcc_h283 = _source172.dtor_Tuple_a0;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4421___mcc_h285 = _source172.dtor_path;
            Dafny.ISequence<DAST._IType> _4422___mcc_h286 = _source172.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4423___mcc_h287 = _source172.dtor_args;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _4424___mcc_h291 = _source172.dtor_dims;
            DAST._IType _4425___mcc_h292 = _source172.dtor_typ;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4426___mcc_h295 = _source172.dtor_path;
            Dafny.ISequence<DAST._IType> _4427___mcc_h296 = _source172.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _4428___mcc_h297 = _source172.dtor_variant;
            bool _4429___mcc_h298 = _source172.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4430___mcc_h299 = _source172.dtor_contents;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Convert) {
            DAST._IExpression _4431___mcc_h305 = _source172.dtor_value;
            DAST._IType _4432___mcc_h306 = _source172.dtor_from;
            DAST._IType _4433___mcc_h307 = _source172.dtor_typ;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SeqConstruct) {
            DAST._IExpression _4434___mcc_h311 = _source172.dtor_length;
            DAST._IExpression _4435___mcc_h312 = _source172.dtor_elem;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _4436___mcc_h315 = _source172.dtor_elements;
            DAST._IType _4437___mcc_h316 = _source172.dtor_typ;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _4438___mcc_h319 = _source172.dtor_elements;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _4439___mcc_h321 = _source172.dtor_elements;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4440___mcc_h323 = _source172.dtor_mapElems;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_MapBuilder) {
            DAST._IType _4441___mcc_h325 = _source172.dtor_keyType;
            DAST._IType _4442___mcc_h326 = _source172.dtor_valueType;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SeqUpdate) {
            DAST._IExpression _4443___mcc_h329 = _source172.dtor_expr;
            DAST._IExpression _4444___mcc_h330 = _source172.dtor_indexExpr;
            DAST._IExpression _4445___mcc_h331 = _source172.dtor_value;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_MapUpdate) {
            DAST._IExpression _4446___mcc_h335 = _source172.dtor_expr;
            DAST._IExpression _4447___mcc_h336 = _source172.dtor_indexExpr;
            DAST._IExpression _4448___mcc_h337 = _source172.dtor_value;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SetBuilder) {
            DAST._IType _4449___mcc_h341 = _source172.dtor_elemType;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_ToMultiset) {
            DAST._IExpression _4450___mcc_h343 = _source172.dtor_ToMultiset_a0;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_This) {
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Ite) {
            DAST._IExpression _4451___mcc_h345 = _source172.dtor_cond;
            DAST._IExpression _4452___mcc_h346 = _source172.dtor_thn;
            DAST._IExpression _4453___mcc_h347 = _source172.dtor_els;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_UnOp) {
            DAST._IUnaryOp _4454___mcc_h351 = _source172.dtor_unOp;
            DAST._IExpression _4455___mcc_h352 = _source172.dtor_expr;
            DAST.Format._IUnaryOpFormat _4456___mcc_h353 = _source172.dtor_format1;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_BinOp) {
            DAST._IBinOp _4457___mcc_h357 = _source172.dtor_op;
            DAST._IExpression _4458___mcc_h358 = _source172.dtor_left;
            DAST._IExpression _4459___mcc_h359 = _source172.dtor_right;
            DAST.Format._IBinaryOpFormat _4460___mcc_h360 = _source172.dtor_format2;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_ArrayLen) {
            DAST._IExpression _4461___mcc_h365 = _source172.dtor_expr;
            BigInteger _4462___mcc_h366 = _source172.dtor_dim;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_MapKeys) {
            DAST._IExpression _4463___mcc_h369 = _source172.dtor_expr;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_MapValues) {
            DAST._IExpression _4464___mcc_h371 = _source172.dtor_expr;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Select) {
            DAST._IExpression _4465___mcc_h373 = _source172.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4466___mcc_h374 = _source172.dtor_field;
            bool _4467___mcc_h375 = _source172.dtor_isConstant;
            bool _4468___mcc_h376 = _source172.dtor_onDatatype;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SelectFn) {
            DAST._IExpression _4469___mcc_h381 = _source172.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4470___mcc_h382 = _source172.dtor_field;
            bool _4471___mcc_h383 = _source172.dtor_onDatatype;
            bool _4472___mcc_h384 = _source172.dtor_isStatic;
            BigInteger _4473___mcc_h385 = _source172.dtor_arity;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Index) {
            DAST._IExpression _4474___mcc_h391 = _source172.dtor_expr;
            DAST._ICollKind _4475___mcc_h392 = _source172.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _4476___mcc_h393 = _source172.dtor_indices;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_IndexRange) {
            DAST._IExpression _4477___mcc_h397 = _source172.dtor_expr;
            bool _4478___mcc_h398 = _source172.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _4479___mcc_h399 = _source172.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _4480___mcc_h400 = _source172.dtor_high;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_TupleSelect) {
            DAST._IExpression _4481___mcc_h405 = _source172.dtor_expr;
            BigInteger _4482___mcc_h406 = _source172.dtor_index;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Call) {
            DAST._IExpression _4483___mcc_h409 = _source172.dtor_on;
            DAST._ICallName _4484___mcc_h410 = _source172.dtor_callName;
            Dafny.ISequence<DAST._IType> _4485___mcc_h411 = _source172.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4486___mcc_h412 = _source172.dtor_args;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _4487___mcc_h417 = _source172.dtor_params;
            DAST._IType _4488___mcc_h418 = _source172.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _4489___mcc_h419 = _source172.dtor_body;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4490___mcc_h423 = _source172.dtor_values;
            DAST._IType _4491___mcc_h424 = _source172.dtor_retType;
            DAST._IExpression _4492___mcc_h425 = _source172.dtor_expr;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _4493___mcc_h429 = _source172.dtor_name;
            DAST._IType _4494___mcc_h430 = _source172.dtor_typ;
            DAST._IExpression _4495___mcc_h431 = _source172.dtor_value;
            DAST._IExpression _4496___mcc_h432 = _source172.dtor_iifeBody;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_Apply) {
            DAST._IExpression _4497___mcc_h437 = _source172.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _4498___mcc_h438 = _source172.dtor_args;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_TypeTest) {
            DAST._IExpression _4499___mcc_h441 = _source172.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4500___mcc_h442 = _source172.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _4501___mcc_h443 = _source172.dtor_variant;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_InitializationValue) {
            DAST._IType _4502___mcc_h447 = _source172.dtor_typ;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_BoolBoundedPool) {
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SetBoundedPool) {
            DAST._IExpression _4503___mcc_h449 = _source172.dtor_of;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else if (_source172.is_SeqBoundedPool) {
            DAST._IExpression _4504___mcc_h451 = _source172.dtor_of;
            bool _4505___mcc_h452 = _source172.dtor_includeDuplicates;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          } else {
            DAST._IExpression _4506___mcc_h455 = _source172.dtor_lo;
            DAST._IExpression _4507___mcc_h456 = _source172.dtor_hi;
            {
              _4411_onExpr = (_4411_onExpr).Sel(_4414_renderedName);
            }
          }
          r = RAST.Expr.create_Call(_4411_onExpr, _4403_typeExprs, _4406_argExprs);
          RAST._IExpr _out1736;
          DCOMP._IOwnership _out1737;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1736, out _out1737);
          r = _out1736;
          resultingOwnership = _out1737;
          return ;
        }
      } else if (_source165.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _4508___mcc_h252 = _source165.dtor_params;
        DAST._IType _4509___mcc_h253 = _source165.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _4510___mcc_h254 = _source165.dtor_body;
        Dafny.ISequence<DAST._IStatement> _4511_body = _4510___mcc_h254;
        DAST._IType _4512_retType = _4509___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _4513_params = _4508___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4514_paramNames;
          _4514_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4515_i;
          _4515_i = BigInteger.Zero;
          while ((_4515_i) < (new BigInteger((_4513_params).Count))) {
            _4514_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4514_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_4513_params).Select(_4515_i)).dtor_name));
            _4515_i = (_4515_i) + (BigInteger.One);
          }
          RAST._IExpr _4516_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4517_recIdents;
          RAST._IExpr _out1738;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
          (this).GenStmts(_4511_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _4514_paramNames, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out1738, out _out1739);
          _4516_recursiveGen = _out1738;
          _4517_recIdents = _out1739;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4518_allReadCloned;
          _4518_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_4517_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _4519_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_4517_recIdents).Elements) {
              _4519_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_4517_recIdents).Contains(_4519_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3283)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_4519_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _4518_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_4518_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_4514_paramNames).Contains(_4519_next))) {
              _4518_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4518_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_4519_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_4519_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4519_next));
            }
            _4517_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4517_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4519_next));
          }
          Dafny.ISequence<Dafny.Rune> _4520_paramsString;
          _4520_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _4521_paramTypes;
          _4521_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4515_i = BigInteger.Zero;
          while ((_4515_i) < (new BigInteger((_4513_params).Count))) {
            if ((_4515_i).Sign == 1) {
              _4520_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4520_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _4521_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4521_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _4522_typStr;
            RAST._IType _out1740;
            _out1740 = (this).GenType(((_4513_params).Select(_4515_i)).dtor_typ, false, true);
            _4522_typStr = _out1740;
            _4520_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4520_paramsString, DCOMP.__default.escapeIdent(((_4513_params).Select(_4515_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_4522_typStr))._ToString(DCOMP.__default.IND));
            _4521_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4521_paramTypes, (RAST.Type.create_Borrowed(_4522_typStr))._ToString(DCOMP.__default.IND));
            _4515_i = (_4515_i) + (BigInteger.One);
          }
          RAST._IType _4523_retTypeGen;
          RAST._IType _out1741;
          _out1741 = (this).GenType(_4512_retType, false, true);
          _4523_retTypeGen = _out1741;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _4521_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_4523_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _4518_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _4520_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_4523_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_4516_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out1742;
          DCOMP._IOwnership _out1743;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1742, out _out1743);
          r = _out1742;
          resultingOwnership = _out1743;
          return ;
        }
      } else if (_source165.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4524___mcc_h255 = _source165.dtor_values;
        DAST._IType _4525___mcc_h256 = _source165.dtor_retType;
        DAST._IExpression _4526___mcc_h257 = _source165.dtor_expr;
        DAST._IExpression _4527_expr = _4526___mcc_h257;
        DAST._IType _4528_retType = _4525___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4529_values = _4524___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4530_paramNames;
          _4530_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4531_paramNamesSet;
          _4531_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4532_i;
          _4532_i = BigInteger.Zero;
          while ((_4532_i) < (new BigInteger((_4529_values).Count))) {
            _4530_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4530_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4529_values).Select(_4532_i)).dtor__0).dtor_name));
            _4531_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4531_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4529_values).Select(_4532_i)).dtor__0).dtor_name));
            _4532_i = (_4532_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4533_s;
          _4533_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _4534_paramsString;
          _4534_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4532_i = BigInteger.Zero;
          while ((_4532_i) < (new BigInteger((_4529_values).Count))) {
            if ((_4532_i).Sign == 1) {
              _4534_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4534_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _4535_typStr;
            RAST._IType _out1744;
            _out1744 = (this).GenType((((_4529_values).Select(_4532_i)).dtor__0).dtor_typ, false, true);
            _4535_typStr = _out1744;
            RAST._IExpr _4536_valueGen;
            DCOMP._IOwnership _4537___v128;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4538_recIdents;
            RAST._IExpr _out1745;
            DCOMP._IOwnership _out1746;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1747;
            (this).GenExpr(((_4529_values).Select(_4532_i)).dtor__1, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1745, out _out1746, out _out1747);
            _4536_valueGen = _out1745;
            _4537___v128 = _out1746;
            _4538_recIdents = _out1747;
            _4533_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4533_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_4529_values).Select(_4532_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_4535_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4538_recIdents);
            _4533_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4533_s, (_4536_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _4532_i = (_4532_i) + (BigInteger.One);
          }
          RAST._IExpr _4539_recGen;
          DCOMP._IOwnership _4540_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4541_recIdents;
          RAST._IExpr _out1748;
          DCOMP._IOwnership _out1749;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1750;
          (this).GenExpr(_4527_expr, selfIdent, _4530_paramNames, expectedOwnership, out _out1748, out _out1749, out _out1750);
          _4539_recGen = _out1748;
          _4540_recOwned = _out1749;
          _4541_recIdents = _out1750;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4541_recIdents, _4531_paramNamesSet);
          _4533_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4533_s, (_4539_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_4533_s);
          RAST._IExpr _out1751;
          DCOMP._IOwnership _out1752;
          DCOMP.COMP.FromOwnership(r, _4540_recOwned, expectedOwnership, out _out1751, out _out1752);
          r = _out1751;
          resultingOwnership = _out1752;
          return ;
        }
      } else if (_source165.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _4542___mcc_h258 = _source165.dtor_name;
        DAST._IType _4543___mcc_h259 = _source165.dtor_typ;
        DAST._IExpression _4544___mcc_h260 = _source165.dtor_value;
        DAST._IExpression _4545___mcc_h261 = _source165.dtor_iifeBody;
        DAST._IExpression _4546_iifeBody = _4545___mcc_h261;
        DAST._IExpression _4547_value = _4544___mcc_h260;
        DAST._IType _4548_tpe = _4543___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _4549_name = _4542___mcc_h258;
        {
          RAST._IExpr _4550_valueGen;
          DCOMP._IOwnership _4551___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4552_recIdents;
          RAST._IExpr _out1753;
          DCOMP._IOwnership _out1754;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1755;
          (this).GenExpr(_4547_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1753, out _out1754, out _out1755);
          _4550_valueGen = _out1753;
          _4551___v129 = _out1754;
          _4552_recIdents = _out1755;
          readIdents = _4552_recIdents;
          RAST._IType _4553_valueTypeGen;
          RAST._IType _out1756;
          _out1756 = (this).GenType(_4548_tpe, false, true);
          _4553_valueTypeGen = _out1756;
          RAST._IExpr _4554_bodyGen;
          DCOMP._IOwnership _4555___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4556_bodyIdents;
          RAST._IExpr _out1757;
          DCOMP._IOwnership _out1758;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1759;
          (this).GenExpr(_4546_iifeBody, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1757, out _out1758, out _out1759);
          _4554_bodyGen = _out1757;
          _4555___v130 = _out1758;
          _4556_bodyIdents = _out1759;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4556_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_4549_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_4549_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_4553_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_4550_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_4554_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out1760;
          DCOMP._IOwnership _out1761;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1760, out _out1761);
          r = _out1760;
          resultingOwnership = _out1761;
          return ;
        }
      } else if (_source165.is_Apply) {
        DAST._IExpression _4557___mcc_h262 = _source165.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _4558___mcc_h263 = _source165.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4559_args = _4558___mcc_h263;
        DAST._IExpression _4560_func = _4557___mcc_h262;
        {
          RAST._IExpr _4561_funcExpr;
          DCOMP._IOwnership _4562___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4563_recIdents;
          RAST._IExpr _out1762;
          DCOMP._IOwnership _out1763;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1764;
          (this).GenExpr(_4560_func, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1762, out _out1763, out _out1764);
          _4561_funcExpr = _out1762;
          _4562___v131 = _out1763;
          _4563_recIdents = _out1764;
          readIdents = _4563_recIdents;
          Dafny.ISequence<Dafny.Rune> _4564_argString;
          _4564_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _4565_i;
          _4565_i = BigInteger.Zero;
          while ((_4565_i) < (new BigInteger((_4559_args).Count))) {
            if ((_4565_i).Sign == 1) {
              _4564_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4564_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _4566_argExpr;
            DCOMP._IOwnership _4567_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4568_argIdents;
            RAST._IExpr _out1765;
            DCOMP._IOwnership _out1766;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1767;
            (this).GenExpr((_4559_args).Select(_4565_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1765, out _out1766, out _out1767);
            _4566_argExpr = _out1765;
            _4567_argOwned = _out1766;
            _4568_argIdents = _out1767;
            Dafny.ISequence<Dafny.Rune> _4569_argExprString;
            _4569_argExprString = (_4566_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_4567_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _4569_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4569_argExprString);
            }
            _4564_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4564_argString, _4569_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4568_argIdents);
            _4565_i = (_4565_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4561_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4564_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out1768;
          DCOMP._IOwnership _out1769;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1768, out _out1769);
          r = _out1768;
          resultingOwnership = _out1769;
          return ;
        }
      } else if (_source165.is_TypeTest) {
        DAST._IExpression _4570___mcc_h264 = _source165.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4571___mcc_h265 = _source165.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _4572___mcc_h266 = _source165.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _4573_variant = _4572___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4574_dType = _4571___mcc_h265;
        DAST._IExpression _4575_on = _4570___mcc_h264;
        {
          RAST._IExpr _4576_exprGen;
          DCOMP._IOwnership _4577___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4578_recIdents;
          RAST._IExpr _out1770;
          DCOMP._IOwnership _out1771;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1772;
          (this).GenExpr(_4575_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1770, out _out1771, out _out1772);
          _4576_exprGen = _out1770;
          _4577___v132 = _out1771;
          _4578_recIdents = _out1772;
          Dafny.ISequence<Dafny.Rune> _4579_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1773;
          _out1773 = DCOMP.COMP.GenPath(_4574_dType);
          _4579_dTypePath = _out1773;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_4576_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _4579_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4573_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          RAST._IExpr _out1774;
          DCOMP._IOwnership _out1775;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1774, out _out1775);
          r = _out1774;
          resultingOwnership = _out1775;
          readIdents = _4578_recIdents;
          return ;
        }
      } else if (_source165.is_InitializationValue) {
        DAST._IType _4580___mcc_h267 = _source165.dtor_typ;
        DAST._IType _4581_typ = _4580___mcc_h267;
        {
          RAST._IType _4582_typExpr;
          RAST._IType _out1776;
          _out1776 = (this).GenType(_4581_typ, false, false);
          _4582_typExpr = _out1776;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4582_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out1777;
          DCOMP._IOwnership _out1778;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1777, out _out1778);
          r = _out1777;
          resultingOwnership = _out1778;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source165.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out1779;
          DCOMP._IOwnership _out1780;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1779, out _out1780);
          r = _out1779;
          resultingOwnership = _out1780;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source165.is_SetBoundedPool) {
        DAST._IExpression _4583___mcc_h268 = _source165.dtor_of;
        DAST._IExpression _4584_of = _4583___mcc_h268;
        {
          RAST._IExpr _4585_exprGen;
          DCOMP._IOwnership _4586___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4587_recIdents;
          RAST._IExpr _out1781;
          DCOMP._IOwnership _out1782;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1783;
          (this).GenExpr(_4584_of, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1781, out _out1782, out _out1783);
          _4585_exprGen = _out1781;
          _4586___v133 = _out1782;
          _4587_recIdents = _out1783;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4585_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out1784;
          DCOMP._IOwnership _out1785;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1784, out _out1785);
          r = _out1784;
          resultingOwnership = _out1785;
          readIdents = _4587_recIdents;
          return ;
        }
      } else if (_source165.is_SeqBoundedPool) {
        DAST._IExpression _4588___mcc_h269 = _source165.dtor_of;
        bool _4589___mcc_h270 = _source165.dtor_includeDuplicates;
        bool _4590_includeDuplicates = _4589___mcc_h270;
        DAST._IExpression _4591_of = _4588___mcc_h269;
        {
          RAST._IExpr _4592_exprGen;
          DCOMP._IOwnership _4593___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4594_recIdents;
          RAST._IExpr _out1786;
          DCOMP._IOwnership _out1787;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1788;
          (this).GenExpr(_4591_of, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1786, out _out1787, out _out1788);
          _4592_exprGen = _out1786;
          _4593___v134 = _out1787;
          _4594_recIdents = _out1788;
          Dafny.ISequence<Dafny.Rune> _4595_s;
          _4595_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4592_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_4590_includeDuplicates)) {
            _4595_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _4595_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_4595_s);
          RAST._IExpr _out1789;
          DCOMP._IOwnership _out1790;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1789, out _out1790);
          r = _out1789;
          resultingOwnership = _out1790;
          readIdents = _4594_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _4596___mcc_h271 = _source165.dtor_lo;
        DAST._IExpression _4597___mcc_h272 = _source165.dtor_hi;
        DAST._IExpression _4598_hi = _4597___mcc_h272;
        DAST._IExpression _4599_lo = _4596___mcc_h271;
        {
          RAST._IExpr _4600_lo;
          DCOMP._IOwnership _4601___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4602_recIdentsLo;
          RAST._IExpr _out1791;
          DCOMP._IOwnership _out1792;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1793;
          (this).GenExpr(_4599_lo, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1791, out _out1792, out _out1793);
          _4600_lo = _out1791;
          _4601___v135 = _out1792;
          _4602_recIdentsLo = _out1793;
          RAST._IExpr _4603_hi;
          DCOMP._IOwnership _4604___v136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4605_recIdentsHi;
          RAST._IExpr _out1794;
          DCOMP._IOwnership _out1795;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1796;
          (this).GenExpr(_4598_hi, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1794, out _out1795, out _out1796);
          _4603_hi = _out1794;
          _4604___v136 = _out1795;
          _4605_recIdentsHi = _out1796;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_4600_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4603_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out1797;
          DCOMP._IOwnership _out1798;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1797, out _out1798);
          r = _out1797;
          resultingOwnership = _out1798;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4602_recIdentsLo, _4605_recIdentsHi);
          return ;
        }
      }
    }
    public Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _4606_i;
      _4606_i = BigInteger.Zero;
      while ((_4606_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _4607_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _4608_m;
        RAST._IMod _out1799;
        _out1799 = (this).GenModule((p).Select(_4606_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _4608_m = _out1799;
        _4607_generated = (_4608_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_4606_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _4607_generated);
        _4606_i = (_4606_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _4609_i;
      _4609_i = BigInteger.Zero;
      while ((_4609_i) < (new BigInteger((fullName).Count))) {
        if ((_4609_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_4609_i)));
        _4609_i = (_4609_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public bool _UnicodeChars {get; set;}
    public bool UnicodeChars { get {
      return this._UnicodeChars;
    } }
    public Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if ((this).UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP

