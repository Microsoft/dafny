// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_83_xs) => ((System.Func<BigInteger, __T>)((_84_i) => {
        return (_83_xs).Select(_84_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_85_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_85_xs).CloneAsArray()) {
          __T _86_x = (__T)_compr_0;
          if ((_85_xs).Contains(_86_x)) {
            _coll0.Add(_86_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _87___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_87___accumulator);
      } else {
        _87___accumulator = (_87___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_88_v) => ((System.Func<__T, bool>)((_89_x) => {
        return object.Equals(_89_x, _88_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _90_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_90_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_90_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_91_v) => ((System.Func<__T, bool>)((_92_x) => {
        return object.Equals(_92_x, _91_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _93_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_93_i), (xs).Drop((_93_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _94___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_94___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _94___accumulator = Dafny.Sequence<__T>.Concat(_94___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _95___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_95___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _95___accumulator = Dafny.Sequence<__T>.Concat(_95___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _96_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _97_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_96_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_97_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _98___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _98___accumulator);
      } else {
        _98___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _98___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _99___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_99___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__T>.Concat(_99___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _100___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _100___accumulator);
      } else {
        _100___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _100___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _101___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_101___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_101___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _101___accumulator = Dafny.Sequence<__T>.Concat(_101___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _102___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _103_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_103_i).is_Some) {
        _102___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_102___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_103_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_103_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_102___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _104_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_104_i).dtor_value), (s).Drop(((_104_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _105_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_105_valueOrError0).IsFailure()) {
        return (_105_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _106_i = (_105_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_106_i), (s).Drop((_106_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _107___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_107___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _107___accumulator = Dafny.Sequence<__R>.Concat(_107___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _108_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_108_valueOrError0).IsFailure()) {
          return (_108_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _109_head = (_108_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _110_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_110_valueOrError1).IsFailure()) {
            return (_110_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _111_tail = (_110_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_109_head), _111_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _113_left;
      _113_left = s;
      while (!(_113_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _114_x;
        foreach (__T _assign_such_that_0 in (_113_left).Elements) {
          _114_x = (__T)_assign_such_that_0;
          if ((_113_left).Contains(_114_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0: ;
        _113_left = Dafny.Set<__T>.Difference(_113_left, Dafny.Set<__T>.FromElements(_114_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_114_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _115_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _116_left = (a).Take(_115_splitIndex);
        Dafny.ISequence<__T> _117_right = (a).Drop(_115_splitIndex);
        Dafny.ISequence<__T> _118_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _116_left);
        Dafny.ISequence<__T> _119_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _117_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_118_leftSorted, _119_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _120___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_120___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_120___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _120___accumulator = Dafny.Sequence<__T>.Concat(_120___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _120___accumulator = Dafny.Sequence<__T>.Concat(_120___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = (_149___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _150___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _150___accumulator = (_150___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_150___accumulator);
      } else {
        _150___accumulator = (_150___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _151___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_151___accumulator);
      } else {
        _151___accumulator = (_151___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _152___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_152___accumulator);
      } else {
        _152___accumulator = (_152___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _153___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _153___accumulator);
      } else {
        _153___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _153___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_154_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_154_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _155_c = (Dafny.Rune)_forall_var_1;
        return !(((_154_str).Drop(BigInteger.One)).Contains(_155_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_155_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _156_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_156_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _157___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_157___accumulator);
      } else {
        _157___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_157___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _158___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_158___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _158___accumulator = Dafny.Sequence<BigInteger>.Concat(_158___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _159_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _159_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _160_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _160_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _161_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _162_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _163_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_162_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_163_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_163_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_163_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _164_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _165_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_161_zs_k, Dafny.Sequence<BigInteger>.FromElements(_164_sum__out)), _165_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _166_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _167_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_167_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_167_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_167_cin), BigInteger.One)));
        BigInteger _168_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _169_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_166_zs, Dafny.Sequence<BigInteger>.FromElements(_168_diff__out)), _169_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(Dafny.ISequence<Dafny.Rune> __source) {
      Dafny.ISequence<Dafny.Rune> _170_chars = __source;
      return (new BigInteger((_170_chars).Count)) > (BigInteger.One);
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _171_i = __source;
      if (_System.nat._Is(_171_i)) {
        return ((_171_i).Sign != -1) && ((_171_i) < (Std.Strings.HexConversion.__default.BASE()));
      }
      return false;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _172___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _172___accumulator);
      } else {
        _172___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _172___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_173_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_173_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _174_c = (Dafny.Rune)_forall_var_2;
        return !(((_173_str).Drop(BigInteger.One)).Contains(_174_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_174_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _175_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_175_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _176___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_176___accumulator);
      } else {
        _176___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_176___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _177___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_177___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _177___accumulator = Dafny.Sequence<BigInteger>.Concat(_177___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _178_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _178_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _179_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _179_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _180_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _181_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _182_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_181_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_182_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_182_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_182_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _183_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _184_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_180_zs_k, Dafny.Sequence<BigInteger>.FromElements(_183_sum__out)), _184_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _185_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _186_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_186_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_186_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_186_cin), BigInteger.One)));
        BigInteger _187_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _188_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_185_zs, Dafny.Sequence<BigInteger>.FromElements(_187_diff__out)), _188_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(Dafny.ISequence<Dafny.Rune> __source) {
      Dafny.ISequence<Dafny.Rune> _189_chars = __source;
      return (new BigInteger((_189_chars).Count)) > (BigInteger.One);
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
    public static bool _Is(BigInteger __source) {
      BigInteger _190_i = __source;
      if (_System.nat._Is(_190_i)) {
        return ((_190_i).Sign != -1) && ((_190_i) < (Std.Strings.DecimalConversion.__default.BASE()));
      }
      return false;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _191___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_191___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _191___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_191___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _191___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_191___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _192_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_192_valueOrError0).IsFailure()) {
            return (_192_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _193_tl = (_192_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _193_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _194_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_194_valueOrError1).IsFailure()) {
          return (_194_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _195_tl = (_194_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _195_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnaryOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineFormat { get; }
    _IUnaryOpFormat DowncastClone();
  }
  public abstract class UnaryOpFormat : _IUnaryOpFormat {
    public UnaryOpFormat() {
    }
    private static readonly DAST.Format._IUnaryOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnaryOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnaryOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnaryOpFormat>(DAST.Format.UnaryOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnaryOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOpFormat create_NoFormat() {
      return new UnaryOpFormat_NoFormat();
    }
    public static _IUnaryOpFormat create_CombineFormat() {
      return new UnaryOpFormat_CombineFormat();
    }
    public bool is_NoFormat { get { return this is UnaryOpFormat_NoFormat; } }
    public bool is_CombineFormat { get { return this is UnaryOpFormat_CombineFormat; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOpFormat> AllSingletonConstructors {
      get {
        yield return UnaryOpFormat.create_NoFormat();
        yield return UnaryOpFormat.create_CombineFormat();
      }
    }
    public abstract _IUnaryOpFormat DowncastClone();
  }
  public class UnaryOpFormat_NoFormat : UnaryOpFormat {
    public UnaryOpFormat_NoFormat() : base() {
    }
    public override _IUnaryOpFormat DowncastClone() {
      if (this is _IUnaryOpFormat dt) { return dt; }
      return new UnaryOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnaryOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnaryOpFormat.NoFormat";
      return s;
    }
  }
  public class UnaryOpFormat_CombineFormat : UnaryOpFormat {
    public UnaryOpFormat_CombineFormat() : base() {
    }
    public override _IUnaryOpFormat DowncastClone() {
      if (this is _IUnaryOpFormat dt) { return dt; }
      return new UnaryOpFormat_CombineFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnaryOpFormat_CombineFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnaryOpFormat.CombineFormat";
      return s;
    }
  }

  public interface _IBinaryOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_EquivalenceFormat { get; }
    bool is_ReverseFormat { get; }
    _IBinaryOpFormat DowncastClone();
  }
  public abstract class BinaryOpFormat : _IBinaryOpFormat {
    public BinaryOpFormat() {
    }
    private static readonly DAST.Format._IBinaryOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinaryOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinaryOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinaryOpFormat>(DAST.Format.BinaryOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinaryOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinaryOpFormat create_NoFormat() {
      return new BinaryOpFormat_NoFormat();
    }
    public static _IBinaryOpFormat create_ImpliesFormat() {
      return new BinaryOpFormat_ImpliesFormat();
    }
    public static _IBinaryOpFormat create_EquivalenceFormat() {
      return new BinaryOpFormat_EquivalenceFormat();
    }
    public static _IBinaryOpFormat create_ReverseFormat() {
      return new BinaryOpFormat_ReverseFormat();
    }
    public bool is_NoFormat { get { return this is BinaryOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinaryOpFormat_ImpliesFormat; } }
    public bool is_EquivalenceFormat { get { return this is BinaryOpFormat_EquivalenceFormat; } }
    public bool is_ReverseFormat { get { return this is BinaryOpFormat_ReverseFormat; } }
    public static System.Collections.Generic.IEnumerable<_IBinaryOpFormat> AllSingletonConstructors {
      get {
        yield return BinaryOpFormat.create_NoFormat();
        yield return BinaryOpFormat.create_ImpliesFormat();
        yield return BinaryOpFormat.create_EquivalenceFormat();
        yield return BinaryOpFormat.create_ReverseFormat();
      }
    }
    public abstract _IBinaryOpFormat DowncastClone();
  }
  public class BinaryOpFormat_NoFormat : BinaryOpFormat {
    public BinaryOpFormat_NoFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.NoFormat";
      return s;
    }
  }
  public class BinaryOpFormat_ImpliesFormat : BinaryOpFormat {
    public BinaryOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinaryOpFormat_EquivalenceFormat : BinaryOpFormat {
    public BinaryOpFormat_EquivalenceFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_EquivalenceFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_EquivalenceFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.EquivalenceFormat";
      return s;
    }
  }
  public class BinaryOpFormat_ReverseFormat : BinaryOpFormat {
    public BinaryOpFormat_ReverseFormat() : base() {
    }
    public override _IBinaryOpFormat DowncastClone() {
      if (this is _IBinaryOpFormat dt) { return dt; }
      return new BinaryOpFormat_ReverseFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinaryOpFormat_ReverseFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinaryOpFormat.ReverseFormat";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) {
      return new ResolvedType_Newtype(baseType, range, erase);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SeqProperPrefix { get; }
    bool is_SeqPrefix { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_Subset { get; }
    bool is_ProperSubset { get; }
    bool is_SetDisjoint { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_MultisetMerge { get; }
    bool is_MultisetSubtraction { get; }
    bool is_MultisetIntersection { get; }
    bool is_Submultiset { get; }
    bool is_ProperSubmultiset { get; }
    bool is_MultisetDisjoint { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SeqProperPrefix() {
      return new BinOp_SeqProperPrefix();
    }
    public static _IBinOp create_SeqPrefix() {
      return new BinOp_SeqPrefix();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_Subset() {
      return new BinOp_Subset();
    }
    public static _IBinOp create_ProperSubset() {
      return new BinOp_ProperSubset();
    }
    public static _IBinOp create_SetDisjoint() {
      return new BinOp_SetDisjoint();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_MultisetMerge() {
      return new BinOp_MultisetMerge();
    }
    public static _IBinOp create_MultisetSubtraction() {
      return new BinOp_MultisetSubtraction();
    }
    public static _IBinOp create_MultisetIntersection() {
      return new BinOp_MultisetIntersection();
    }
    public static _IBinOp create_Submultiset() {
      return new BinOp_Submultiset();
    }
    public static _IBinOp create_ProperSubmultiset() {
      return new BinOp_ProperSubmultiset();
    }
    public static _IBinOp create_MultisetDisjoint() {
      return new BinOp_MultisetDisjoint();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SeqProperPrefix { get { return this is BinOp_SeqProperPrefix; } }
    public bool is_SeqPrefix { get { return this is BinOp_SeqPrefix; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_Subset { get { return this is BinOp_Subset; } }
    public bool is_ProperSubset { get { return this is BinOp_ProperSubset; } }
    public bool is_SetDisjoint { get { return this is BinOp_SetDisjoint; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_MultisetMerge { get { return this is BinOp_MultisetMerge; } }
    public bool is_MultisetSubtraction { get { return this is BinOp_MultisetSubtraction; } }
    public bool is_MultisetIntersection { get { return this is BinOp_MultisetIntersection; } }
    public bool is_Submultiset { get { return this is BinOp_Submultiset; } }
    public bool is_ProperSubmultiset { get { return this is BinOp_ProperSubmultiset; } }
    public bool is_MultisetDisjoint { get { return this is BinOp_MultisetDisjoint; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SeqProperPrefix : BinOp {
    public BinOp_SeqProperPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqProperPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqProperPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqProperPrefix";
      return s;
    }
  }
  public class BinOp_SeqPrefix : BinOp {
    public BinOp_SeqPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqPrefix";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_Subset : BinOp {
    public BinOp_Subset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Subset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Subset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Subset";
      return s;
    }
  }
  public class BinOp_ProperSubset : BinOp {
    public BinOp_ProperSubset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubset";
      return s;
    }
  }
  public class BinOp_SetDisjoint : BinOp {
    public BinOp_SetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDisjoint";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetMerge : BinOp {
    public BinOp_MultisetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetMerge";
      return s;
    }
  }
  public class BinOp_MultisetSubtraction : BinOp {
    public BinOp_MultisetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetIntersection : BinOp {
    public BinOp_MultisetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetIntersection";
      return s;
    }
  }
  public class BinOp_Submultiset : BinOp {
    public BinOp_Submultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Submultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Submultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Submultiset";
      return s;
    }
  }
  public class BinOp_ProperSubmultiset : BinOp {
    public BinOp_ProperSubmultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubmultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubmultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubmultiset";
      return s;
    }
  }
  public class BinOp_MultisetDisjoint : BinOp {
    public BinOp_MultisetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetDisjoint";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MultisetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SeqUpdate { get; }
    bool is_MapUpdate { get; }
    bool is_SetBuilder { get; }
    bool is_ToMultiset { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IExpression dtor_indexExpr { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_ToMultiset_a0 { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST.Format._IUnaryOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinaryOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_MultisetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_SeqUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_MapUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_ToMultiset(DAST._IExpression _a0) {
      return new Expression_ToMultiset(_a0);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnaryOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinaryOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MultisetValue { get { return this is Expression_MultisetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SeqUpdate { get { return this is Expression_SeqUpdate; } }
    public bool is_MapUpdate { get { return this is Expression_MapUpdate; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_ToMultiset { get { return this is Expression_ToMultiset; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._value; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        if (d is Expression_SetValue) { return ((Expression_SetValue)d)._elements; }
        return ((Expression_MultisetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._expr; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._expr; }
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IExpression dtor_indexExpr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._indexExpr; }
        return ((Expression_MapUpdate)d)._indexExpr;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_ToMultiset_a0 {
      get {
        var d = this;
        return ((Expression_ToMultiset)d)._a0;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST.Format._IUnaryOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinaryOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MultisetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MultisetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MultisetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MultisetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_MapUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_ToMultiset : Expression {
    public readonly DAST._IExpression _a0;
    public Expression_ToMultiset(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ToMultiset(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ToMultiset;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ToMultiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnaryOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnaryOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinaryOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinaryOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 37;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 38;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 39;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 40;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _828_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _829_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_828_i) < (_829_j)) {
          return _829_j;
        } else {
          return _828_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!")), Dafny.Sequence<RAST._IType>.FromElements(), elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnaryOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnaryOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TIdentifier(content);
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _830___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _830___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_830___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType Self { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType global__type { get {
      return RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IType std__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static RAST._IType cell__type { get {
      return (RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"));
    } }
    public static RAST._IType refcell__type { get {
      return (RAST.__default.cell__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"));
    } }
    public static RAST._IType dafny__runtime__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr @global { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IExpr dafny__runtime { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return (RAST.__default.dafny__runtime__Set).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Sequence { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"));
    } }
    public static RAST._IExpr Sequence__from__array__owned { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array_owned"));
    } }
    public static RAST._IExpr Sequence__from__array { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset__from__array { get {
      return (RAST.__default.dafny__runtime__Multiset).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return (RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return (RAST.__default.std__rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return (RAST.__default.std__rc__Rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _832___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _833_body = _832___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _834_name = _831___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _834_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_833_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_835_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_836_modDecl) => {
          return (_836_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_835_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _837___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _838_name = _837___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _838_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_839_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_840_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_840_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _839_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _841_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _842_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _843_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _842_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_844_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_845_field) => {
          return (_845_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_844_ind, RAST.__default.IND));
        })))(ind), _841_separator)), _843_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _846_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_847_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_848_t) => {
          return (_848_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_847_ind, RAST.__default.IND));
        })))(ind), _846_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_849_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_850_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _849_ind), RAST.__default.IND), (_850_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_849_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_851_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_852_t) => {
          return (_852_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_851_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _853___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_853___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _853___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_853___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _854_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _855_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_854_dt__update__tmp_h0).dtor_content, _855_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_856_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_857_t) => {
        return (_857_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_856_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TIdentifier { get; }
    bool is_TMemberSelect { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_base { get; }
    RAST._IType dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IType Apply1(RAST._IType arg);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TIdentifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TIdentifier(name);
    }
    public static _IType create_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TMemberSelect(@base, name);
    }
    public static _IType create_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TIdentifier { get { return this is Type_TIdentifier; } }
    public bool is_TMemberSelect { get { return this is Type_TMemberSelect; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Type_TIdentifier) { return ((Type_TIdentifier)d)._name; }
        return ((Type_TMemberSelect)d)._name;
      }
    }
    public RAST._IType dtor_base {
      get {
        var d = this;
        return ((Type_TMemberSelect)d)._base;
      }
    }
    public RAST._IType dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TIdentifier) {
        Dafny.ISequence<Dafny.Rune> _858___mcc_h0 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _859_underlying = _858___mcc_h0;
        return _859_underlying;
      } else if (_source26.is_TMemberSelect) {
        RAST._IType _860___mcc_h1 = _source26.dtor_base;
        Dafny.ISequence<Dafny.Rune> _861___mcc_h2 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _862_name = _861___mcc_h2;
        RAST._IType _863_underlying = _860___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_863_underlying)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _862_name);
      } else if (_source26.is_TypeApp) {
        RAST._IType _864___mcc_h3 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _865___mcc_h4 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _866_args = _865___mcc_h4;
        RAST._IType _867_base = _864___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat((_867_base)._ToString(ind), (((_866_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_866_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_868_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_869_arg) => {
          return (_869_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_868_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _870___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _871_underlying = _870___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_871_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _872___mcc_h6 = _source26.dtor_underlying;
        RAST._IType _873_underlying = _872___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_873_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _874___mcc_h7 = _source26.dtor_underlying;
        RAST._IType _875_underlying = _874___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_875_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _876___mcc_h8 = _source26.dtor_underlying;
        RAST._IType _877_underlying = _876___mcc_h8;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_877_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _878___mcc_h9 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _879_args = _878___mcc_h9;
        if ((_879_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_879_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_880_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_881_arg) => {
            return (_881_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_880_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _882___mcc_h10 = _source26.dtor_arguments;
        RAST._IType _883___mcc_h11 = _source26.dtor_returnType;
        RAST._IType _884_returnType = _883___mcc_h11;
        Dafny.ISequence<RAST._IType> _885_arguments = _882___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_885_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_886_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_887_arg) => {
          return (_887_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_886_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_884_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _888___mcc_h12 = _source26.dtor_left;
        RAST._IType _889___mcc_h13 = _source26.dtor_right;
        RAST._IType _890_right = _889___mcc_h13;
        RAST._IType _891_left = _888___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_891_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_890_right)._ToString(ind));
      }
    }
    public RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Type.create_TMemberSelect(this, name);
    }
    public RAST._IType Apply1(RAST._IType arg) {
      return RAST.Type.create_TypeApp(this, Dafny.Sequence<RAST._IType>.FromElements(arg));
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TIdentifier : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TIdentifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TIdentifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TIdentifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TIdentifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TMemberSelect : Type {
    public readonly RAST._IType _base;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._base = @base;
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TMemberSelect(_base, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TMemberSelect;
      return oth != null && object.Equals(this._base, oth._base) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TMemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly RAST._IType _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_892_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_893_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _892_ind), RAST.__default.IND), (_893_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_892_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_894_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_895_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _894_ind), RAST.__default.IND), (_895_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_894_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.Self);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _896_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _897_rhsString = ((this).dtor_rhs)._ToString(_896_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_897_rhsString).Contains(new Dafny.Rune('\n'))) && (((_897_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _897_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _897_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_TypeAscription { get; }
    bool is_LiteralInt { get; }
    bool is_LiteralString { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnaryOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinaryOpFormat dtor_format2 { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    bool dtor_binary { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
    RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr Apply(Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments);
    RAST._IExpr Apply1(RAST._IExpr argument);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnaryOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinaryOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_TypeAscription(RAST._IExpr left, RAST._IType tpe) {
      return new Expr_TypeAscription(left, tpe);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) {
      return new Expr_LiteralString(@value, binary);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, typeParameters, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_TypeAscription { get { return this is Expr_TypeAscription; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_LiteralString { get { return this is Expr_LiteralString; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnaryOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        if (d is Expr_BinaryOp) { return ((Expr_BinaryOp)d)._left; }
        return ((Expr_TypeAscription)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinaryOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Expr_TypeAscription) { return ((Expr_TypeAscription)d)._tpe; }
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        if (d is Expr_LiteralInt) { return ((Expr_LiteralInt)d)._value; }
        return ((Expr_LiteralString)d)._value;
      }
    }
    public bool dtor_binary {
      get {
        var d = this;
        return ((Expr_LiteralString)d)._binary;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_Call)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _898___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _899___mcc_h2 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _900___mcc_h4 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _901___mcc_h5 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _902_cases = _901___mcc_h5;
        RAST._IExpr _903_matchee = _900___mcc_h4;
        return (BigInteger.One) + (RAST.__default.max((_903_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_902_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_904_oneCase) => {
          return (_904_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _905___mcc_h8 = _source27.dtor_stmt;
        RAST._IExpr _906___mcc_h9 = _source27.dtor_rhs;
        RAST._IExpr _907_rhs = _906___mcc_h9;
        RAST._IExpr _908_stmt = _905___mcc_h8;
        BigInteger _909_default = (BigInteger.One) + (RAST.__default.max((_908_stmt).Height(), (_907_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _910___mcc_h100 = _source28.dtor_content;
          return _909_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _911___mcc_h102 = _source28.dtor_name;
          return _909_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _912___mcc_h104 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _913___mcc_h105 = _source28.dtor_cases;
          return _909_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _914___mcc_h108 = _source28.dtor_stmt;
          RAST._IExpr _915___mcc_h109 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _914___mcc_h108;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _916___mcc_h112 = _source29.dtor_content;
            return _909_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _917___mcc_h114 = _source29.dtor_name;
            return _909_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _918___mcc_h116 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _919___mcc_h117 = _source29.dtor_cases;
            return _909_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _920___mcc_h120 = _source29.dtor_stmt;
            RAST._IExpr _921___mcc_h121 = _source29.dtor_rhs;
            return _909_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _922___mcc_h124 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _923___mcc_h126 = _source29.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _924___mcc_h127 = _source29.dtor_assignments;
            return _909_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _925___mcc_h130 = _source29.dtor_arguments;
            return _909_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _926___mcc_h132 = _source29.dtor_op1;
            RAST._IExpr _927___mcc_h133 = _source29.dtor_underlying;
            DAST.Format._IUnaryOpFormat _928___mcc_h134 = _source29.dtor_format;
            return _909_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _929___mcc_h138 = _source29.dtor_op2;
            RAST._IExpr _930___mcc_h139 = _source29.dtor_left;
            RAST._IExpr _931___mcc_h140 = _source29.dtor_right;
            DAST.Format._IBinaryOpFormat _932___mcc_h141 = _source29.dtor_format2;
            return _909_default;
          } else if (_source29.is_TypeAscription) {
            RAST._IExpr _933___mcc_h146 = _source29.dtor_left;
            RAST._IType _934___mcc_h147 = _source29.dtor_tpe;
            return _909_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _935___mcc_h150 = _source29.dtor_value;
            return _909_default;
          } else if (_source29.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _936___mcc_h152 = _source29.dtor_value;
            bool _937___mcc_h153 = _source29.dtor_binary;
            return _909_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _938___mcc_h156 = _source29.dtor_tpe;
            RAST._IExpr _939___mcc_h157 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _940___mcc_h160 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _941___mcc_h161 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _942___mcc_h162 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _943___mcc_h163 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _942___mcc_h162;
            if (_source30.is_None) {
              return _909_default;
            } else {
              RAST._IType _944___mcc_h168 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _943___mcc_h163;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _915___mcc_h109;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _945___mcc_h170 = _source32.dtor_content;
                  return _909_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _946___mcc_h172 = _source32.dtor_name;
                  return _909_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _947___mcc_h174 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _948___mcc_h175 = _source32.dtor_cases;
                  return _909_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _949___mcc_h178 = _source32.dtor_stmt;
                  RAST._IExpr _950___mcc_h179 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _949___mcc_h178;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _951___mcc_h182 = _source33.dtor_content;
                    return _909_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _952___mcc_h184 = _source33.dtor_name;
                    return _909_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _953___mcc_h186 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _954___mcc_h187 = _source33.dtor_cases;
                    return _909_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _955___mcc_h190 = _source33.dtor_stmt;
                    RAST._IExpr _956___mcc_h191 = _source33.dtor_rhs;
                    return _909_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _957___mcc_h194 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _958___mcc_h196 = _source33.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _959___mcc_h197 = _source33.dtor_assignments;
                    return _909_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _960___mcc_h200 = _source33.dtor_arguments;
                    return _909_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _961___mcc_h202 = _source33.dtor_op1;
                    RAST._IExpr _962___mcc_h203 = _source33.dtor_underlying;
                    DAST.Format._IUnaryOpFormat _963___mcc_h204 = _source33.dtor_format;
                    return _909_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _964___mcc_h208 = _source33.dtor_op2;
                    RAST._IExpr _965___mcc_h209 = _source33.dtor_left;
                    RAST._IExpr _966___mcc_h210 = _source33.dtor_right;
                    DAST.Format._IBinaryOpFormat _967___mcc_h211 = _source33.dtor_format2;
                    return _909_default;
                  } else if (_source33.is_TypeAscription) {
                    RAST._IExpr _968___mcc_h216 = _source33.dtor_left;
                    RAST._IType _969___mcc_h217 = _source33.dtor_tpe;
                    return _909_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _970___mcc_h220 = _source33.dtor_value;
                    return _909_default;
                  } else if (_source33.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _971___mcc_h222 = _source33.dtor_value;
                    bool _972___mcc_h223 = _source33.dtor_binary;
                    return _909_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _973___mcc_h226 = _source33.dtor_tpe;
                    RAST._IExpr _974___mcc_h227 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _975___mcc_h230 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _976___mcc_h231 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _977___mcc_h232 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _978___mcc_h233 = _source33.dtor_optRhs;
                    return _909_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _979___mcc_h238 = _source33.dtor_name;
                    RAST._IExpr _980___mcc_h239 = _source33.dtor_rhs;
                    RAST._IExpr _981_last = _950___mcc_h179;
                    RAST._IExpr _982_rhs = _980___mcc_h239;
                    Dafny.ISequence<Dafny.Rune> _983_name2 = _979___mcc_h238;
                    RAST._IType _984_tpe = _944___mcc_h168;
                    Dafny.ISequence<Dafny.Rune> _985_name = _941___mcc_h161;
                    RAST._IDeclareType _986_mod = _940___mcc_h160;
                    if ((_985_name).Equals(_983_name2)) {
                      return (BigInteger.One) + (_909_default);
                    } else {
                      return _909_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _987___mcc_h242 = _source33.dtor_cond;
                    RAST._IExpr _988___mcc_h243 = _source33.dtor_thn;
                    RAST._IExpr _989___mcc_h244 = _source33.dtor_els;
                    return _909_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _990___mcc_h248 = _source33.dtor_optCond;
                    RAST._IExpr _991___mcc_h249 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _992___mcc_h252 = _source33.dtor_name;
                    RAST._IExpr _993___mcc_h253 = _source33.dtor_range;
                    RAST._IExpr _994___mcc_h254 = _source33.dtor_body;
                    return _909_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _995___mcc_h258 = _source33.dtor_lbl;
                    RAST._IExpr _996___mcc_h259 = _source33.dtor_underlying;
                    return _909_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _997___mcc_h262 = _source33.dtor_optLbl;
                    return _909_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _998___mcc_h264 = _source33.dtor_optLbl;
                    return _909_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _999___mcc_h266 = _source33.dtor_optExpr;
                    return _909_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _1000___mcc_h268 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1001___mcc_h269 = _source33.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _1002___mcc_h270 = _source33.dtor_arguments;
                    return _909_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _1003___mcc_h274 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1004___mcc_h275 = _source33.dtor_name;
                    return _909_default;
                  } else {
                    RAST._IExpr _1005___mcc_h278 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1006___mcc_h279 = _source33.dtor_name;
                    return _909_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _1007___mcc_h282 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1008___mcc_h284 = _source32.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1009___mcc_h285 = _source32.dtor_assignments;
                  return _909_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1010___mcc_h288 = _source32.dtor_arguments;
                  return _909_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1011___mcc_h290 = _source32.dtor_op1;
                  RAST._IExpr _1012___mcc_h291 = _source32.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _1013___mcc_h292 = _source32.dtor_format;
                  return _909_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1014___mcc_h296 = _source32.dtor_op2;
                  RAST._IExpr _1015___mcc_h297 = _source32.dtor_left;
                  RAST._IExpr _1016___mcc_h298 = _source32.dtor_right;
                  DAST.Format._IBinaryOpFormat _1017___mcc_h299 = _source32.dtor_format2;
                  return _909_default;
                } else if (_source32.is_TypeAscription) {
                  RAST._IExpr _1018___mcc_h304 = _source32.dtor_left;
                  RAST._IType _1019___mcc_h305 = _source32.dtor_tpe;
                  return _909_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1020___mcc_h308 = _source32.dtor_value;
                  return _909_default;
                } else if (_source32.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1021___mcc_h310 = _source32.dtor_value;
                  bool _1022___mcc_h311 = _source32.dtor_binary;
                  return _909_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _1023___mcc_h314 = _source32.dtor_tpe;
                  RAST._IExpr _1024___mcc_h315 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _1025___mcc_h318 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1026___mcc_h319 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1027___mcc_h320 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1028___mcc_h321 = _source32.dtor_optRhs;
                  return _909_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1029___mcc_h326 = _source32.dtor_name;
                  RAST._IExpr _1030___mcc_h327 = _source32.dtor_rhs;
                  return _909_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _1031___mcc_h330 = _source32.dtor_cond;
                  RAST._IExpr _1032___mcc_h331 = _source32.dtor_thn;
                  RAST._IExpr _1033___mcc_h332 = _source32.dtor_els;
                  return _909_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1034___mcc_h336 = _source32.dtor_optCond;
                  RAST._IExpr _1035___mcc_h337 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1036___mcc_h340 = _source32.dtor_name;
                  RAST._IExpr _1037___mcc_h341 = _source32.dtor_range;
                  RAST._IExpr _1038___mcc_h342 = _source32.dtor_body;
                  return _909_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1039___mcc_h346 = _source32.dtor_lbl;
                  RAST._IExpr _1040___mcc_h347 = _source32.dtor_underlying;
                  return _909_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1041___mcc_h350 = _source32.dtor_optLbl;
                  return _909_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1042___mcc_h352 = _source32.dtor_optLbl;
                  return _909_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1043___mcc_h354 = _source32.dtor_optExpr;
                  return _909_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _1044___mcc_h356 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1045___mcc_h357 = _source32.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1046___mcc_h358 = _source32.dtor_arguments;
                  return _909_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1047___mcc_h362 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1048___mcc_h363 = _source32.dtor_name;
                  return _909_default;
                } else {
                  RAST._IExpr _1049___mcc_h366 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1050___mcc_h367 = _source32.dtor_name;
                  return _909_default;
                }
              } else {
                RAST._IExpr _1051___mcc_h370 = _source31.dtor_value;
                return _909_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1052___mcc_h372 = _source29.dtor_name;
            RAST._IExpr _1053___mcc_h373 = _source29.dtor_rhs;
            return _909_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1054___mcc_h376 = _source29.dtor_cond;
            RAST._IExpr _1055___mcc_h377 = _source29.dtor_thn;
            RAST._IExpr _1056___mcc_h378 = _source29.dtor_els;
            return _909_default;
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1057___mcc_h382 = _source29.dtor_optCond;
            RAST._IExpr _1058___mcc_h383 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1059___mcc_h386 = _source29.dtor_name;
            RAST._IExpr _1060___mcc_h387 = _source29.dtor_range;
            RAST._IExpr _1061___mcc_h388 = _source29.dtor_body;
            return _909_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1062___mcc_h392 = _source29.dtor_lbl;
            RAST._IExpr _1063___mcc_h393 = _source29.dtor_underlying;
            return _909_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1064___mcc_h396 = _source29.dtor_optLbl;
            return _909_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1065___mcc_h398 = _source29.dtor_optLbl;
            return _909_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1066___mcc_h400 = _source29.dtor_optExpr;
            return _909_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1067___mcc_h402 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1068___mcc_h403 = _source29.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1069___mcc_h404 = _source29.dtor_arguments;
            return _909_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1070___mcc_h408 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1071___mcc_h409 = _source29.dtor_name;
            return _909_default;
          } else {
            RAST._IExpr _1072___mcc_h412 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1073___mcc_h413 = _source29.dtor_name;
            return _909_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1074___mcc_h416 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1075___mcc_h418 = _source28.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1076___mcc_h419 = _source28.dtor_assignments;
          return _909_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1077___mcc_h422 = _source28.dtor_arguments;
          return _909_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1078___mcc_h424 = _source28.dtor_op1;
          RAST._IExpr _1079___mcc_h425 = _source28.dtor_underlying;
          DAST.Format._IUnaryOpFormat _1080___mcc_h426 = _source28.dtor_format;
          return _909_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1081___mcc_h430 = _source28.dtor_op2;
          RAST._IExpr _1082___mcc_h431 = _source28.dtor_left;
          RAST._IExpr _1083___mcc_h432 = _source28.dtor_right;
          DAST.Format._IBinaryOpFormat _1084___mcc_h433 = _source28.dtor_format2;
          return _909_default;
        } else if (_source28.is_TypeAscription) {
          RAST._IExpr _1085___mcc_h438 = _source28.dtor_left;
          RAST._IType _1086___mcc_h439 = _source28.dtor_tpe;
          return _909_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1087___mcc_h442 = _source28.dtor_value;
          return _909_default;
        } else if (_source28.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1088___mcc_h444 = _source28.dtor_value;
          bool _1089___mcc_h445 = _source28.dtor_binary;
          return _909_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1090___mcc_h448 = _source28.dtor_tpe;
          RAST._IExpr _1091___mcc_h449 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1092___mcc_h452 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1093___mcc_h453 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1094___mcc_h454 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1095___mcc_h455 = _source28.dtor_optRhs;
          return _909_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1096___mcc_h460 = _source28.dtor_name;
          RAST._IExpr _1097___mcc_h461 = _source28.dtor_rhs;
          return _909_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1098___mcc_h464 = _source28.dtor_cond;
          RAST._IExpr _1099___mcc_h465 = _source28.dtor_thn;
          RAST._IExpr _1100___mcc_h466 = _source28.dtor_els;
          return _909_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1101___mcc_h470 = _source28.dtor_optCond;
          RAST._IExpr _1102___mcc_h471 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1103___mcc_h474 = _source28.dtor_name;
          RAST._IExpr _1104___mcc_h475 = _source28.dtor_range;
          RAST._IExpr _1105___mcc_h476 = _source28.dtor_body;
          return _909_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1106___mcc_h480 = _source28.dtor_lbl;
          RAST._IExpr _1107___mcc_h481 = _source28.dtor_underlying;
          return _909_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1108___mcc_h484 = _source28.dtor_optLbl;
          return _909_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1109___mcc_h486 = _source28.dtor_optLbl;
          return _909_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1110___mcc_h488 = _source28.dtor_optExpr;
          return _909_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1111___mcc_h490 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1112___mcc_h491 = _source28.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1113___mcc_h492 = _source28.dtor_arguments;
          return _909_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1114___mcc_h496 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1115___mcc_h497 = _source28.dtor_name;
          return _909_default;
        } else {
          RAST._IExpr _1116___mcc_h500 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1117___mcc_h501 = _source28.dtor_name;
          return _909_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1118___mcc_h12 = _source27.dtor_underlying;
        RAST._IExpr _1119_underlying = _1118___mcc_h12;
        return (BigInteger.One) + ((_1119_underlying).Height());
      } else if (_source27.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1120___mcc_h14 = _source27.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1121___mcc_h15 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1122_assignments = _1121___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _1123_name = _1120___mcc_h14;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1122_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1124_assignment) => {
          return (_1124_assignment).Height();
        }))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1125___mcc_h18 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1126_arguments = _1125___mcc_h18;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1126_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1127_argument) => {
          return (_1127_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1128___mcc_h20 = _source27.dtor_op1;
        RAST._IExpr _1129___mcc_h21 = _source27.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1130___mcc_h22 = _source27.dtor_format;
        RAST._IExpr _1131_underlying = _1129___mcc_h21;
        return (BigInteger.One) + ((_1131_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1132___mcc_h26 = _source27.dtor_op2;
        RAST._IExpr _1133___mcc_h27 = _source27.dtor_left;
        RAST._IExpr _1134___mcc_h28 = _source27.dtor_right;
        DAST.Format._IBinaryOpFormat _1135___mcc_h29 = _source27.dtor_format2;
        DAST.Format._IBinaryOpFormat _1136_format = _1135___mcc_h29;
        RAST._IExpr _1137_right = _1134___mcc_h28;
        RAST._IExpr _1138_left = _1133___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1139_op = _1132___mcc_h26;
        return (BigInteger.One) + (RAST.__default.max((_1138_left).Height(), (_1137_right).Height()));
      } else if (_source27.is_TypeAscription) {
        RAST._IExpr _1140___mcc_h34 = _source27.dtor_left;
        RAST._IType _1141___mcc_h35 = _source27.dtor_tpe;
        RAST._IType _1142_tpe = _1141___mcc_h35;
        RAST._IExpr _1143_left = _1140___mcc_h34;
        return (BigInteger.One) + ((_1143_left).Height());
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1144___mcc_h38 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1145___mcc_h40 = _source27.dtor_value;
        bool _1146___mcc_h41 = _source27.dtor_binary;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1147___mcc_h44 = _source27.dtor_tpe;
        RAST._IExpr _1148___mcc_h45 = _source27.dtor_underlying;
        RAST._IExpr _1149_underlying = _1148___mcc_h45;
        return (BigInteger.One) + ((_1149_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1150___mcc_h48 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1151___mcc_h49 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1152___mcc_h50 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1153___mcc_h51 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1154_expr = _1153___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _1155_tpe = _1152___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _1156_name = _1151___mcc_h49;
        RAST._IDeclareType _1157_declareType = _1150___mcc_h48;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source34) => {
          if (_source34.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1158___mcc_h504 = _source34.dtor_value;
            RAST._IExpr _1159_e = _1158___mcc_h504;
            return (_1159_e).Height();
          }
        }))(_1154_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1160___mcc_h56 = _source27.dtor_name;
        RAST._IExpr _1161___mcc_h57 = _source27.dtor_rhs;
        RAST._IExpr _1162_expr = _1161___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _1163_name = _1160___mcc_h56;
        return (BigInteger.One) + ((_1162_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1164___mcc_h60 = _source27.dtor_cond;
        RAST._IExpr _1165___mcc_h61 = _source27.dtor_thn;
        RAST._IExpr _1166___mcc_h62 = _source27.dtor_els;
        RAST._IExpr _1167_els = _1166___mcc_h62;
        RAST._IExpr _1168_thn = _1165___mcc_h61;
        RAST._IExpr _1169_cond = _1164___mcc_h60;
        return (BigInteger.One) + (RAST.__default.max((_1169_cond).Height(), RAST.__default.max((_1168_thn).Height(), (_1167_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1170___mcc_h66 = _source27.dtor_optCond;
        RAST._IExpr _1171___mcc_h67 = _source27.dtor_underlying;
        RAST._IExpr _1172_underlying = _1171___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _1173_optCond = _1170___mcc_h66;
        return (BigInteger.One) + ((((_1173_optCond).is_Some) ? (RAST.__default.max(((_1173_optCond).dtor_value).Height(), (_1172_underlying).Height())) : ((_1172_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1174___mcc_h70 = _source27.dtor_name;
        RAST._IExpr _1175___mcc_h71 = _source27.dtor_range;
        RAST._IExpr _1176___mcc_h72 = _source27.dtor_body;
        RAST._IExpr _1177_body = _1176___mcc_h72;
        RAST._IExpr _1178_range = _1175___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _1179_name = _1174___mcc_h70;
        return (BigInteger.One) + (RAST.__default.max((_1178_range).Height(), (_1177_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1180___mcc_h76 = _source27.dtor_lbl;
        RAST._IExpr _1181___mcc_h77 = _source27.dtor_underlying;
        RAST._IExpr _1182_underlying = _1181___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _1183_lbl = _1180___mcc_h76;
        return (BigInteger.One) + ((_1182_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1184___mcc_h80 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1185___mcc_h82 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1186___mcc_h84 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1187_optExpr = _1186___mcc_h84;
        if ((_1187_optExpr).is_Some) {
          return (BigInteger.One) + (((_1187_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_Call) {
        RAST._IExpr _1188___mcc_h86 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1189___mcc_h87 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1190___mcc_h88 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1191_args = _1190___mcc_h88;
        Dafny.ISequence<RAST._IType> _1192_tpes = _1189___mcc_h87;
        RAST._IExpr _1193_obj = _1188___mcc_h86;
        return (BigInteger.One) + (RAST.__default.max((_1193_obj).Height(), RAST.__default.max(RAST.__default.SeqToHeight<RAST._IType>(_1192_tpes, ((System.Func<RAST._IType, BigInteger>)((_1194_tpe) => {
          return BigInteger.One;
        }))), RAST.__default.SeqToHeight<RAST._IExpr>(_1191_args, ((System.Func<RAST._IExpr, BigInteger>)((_1195_arg) => {
          return (_1195_arg).Height();
        }))))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1196___mcc_h92 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1197___mcc_h93 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1198_name = _1197___mcc_h93;
        RAST._IExpr _1199_expression = _1196___mcc_h92;
        return (BigInteger.One) + ((_1199_expression).Height());
      } else {
        RAST._IExpr _1200___mcc_h96 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1201___mcc_h97 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1202_name = _1201___mcc_h97;
        RAST._IExpr _1203_expression = _1200___mcc_h96;
        return (BigInteger.One) + ((_1203_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source35 = this;
      if (_source35.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1204___mcc_h0 = _source35.dtor_content;
        return this;
      } else if (_source35.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1205___mcc_h2 = _source35.dtor_name;
        return this;
      } else if (_source35.is_Match) {
        RAST._IExpr _1206___mcc_h4 = _source35.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1207___mcc_h5 = _source35.dtor_cases;
        return this;
      } else if (_source35.is_StmtExpr) {
        RAST._IExpr _1208___mcc_h8 = _source35.dtor_stmt;
        RAST._IExpr _1209___mcc_h9 = _source35.dtor_rhs;
        RAST._IExpr _source36 = _1208___mcc_h8;
        if (_source36.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1210___mcc_h12 = _source36.dtor_content;
          return this;
        } else if (_source36.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1211___mcc_h14 = _source36.dtor_name;
          return this;
        } else if (_source36.is_Match) {
          RAST._IExpr _1212___mcc_h16 = _source36.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1213___mcc_h17 = _source36.dtor_cases;
          return this;
        } else if (_source36.is_StmtExpr) {
          RAST._IExpr _1214___mcc_h20 = _source36.dtor_stmt;
          RAST._IExpr _1215___mcc_h21 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_Block) {
          RAST._IExpr _1216___mcc_h24 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1217___mcc_h26 = _source36.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1218___mcc_h27 = _source36.dtor_assignments;
          return this;
        } else if (_source36.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1219___mcc_h30 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1220___mcc_h32 = _source36.dtor_op1;
          RAST._IExpr _1221___mcc_h33 = _source36.dtor_underlying;
          DAST.Format._IUnaryOpFormat _1222___mcc_h34 = _source36.dtor_format;
          return this;
        } else if (_source36.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1223___mcc_h38 = _source36.dtor_op2;
          RAST._IExpr _1224___mcc_h39 = _source36.dtor_left;
          RAST._IExpr _1225___mcc_h40 = _source36.dtor_right;
          DAST.Format._IBinaryOpFormat _1226___mcc_h41 = _source36.dtor_format2;
          return this;
        } else if (_source36.is_TypeAscription) {
          RAST._IExpr _1227___mcc_h46 = _source36.dtor_left;
          RAST._IType _1228___mcc_h47 = _source36.dtor_tpe;
          return this;
        } else if (_source36.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1229___mcc_h50 = _source36.dtor_value;
          return this;
        } else if (_source36.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1230___mcc_h52 = _source36.dtor_value;
          bool _1231___mcc_h53 = _source36.dtor_binary;
          return this;
        } else if (_source36.is_ConversionNum) {
          RAST._IType _1232___mcc_h56 = _source36.dtor_tpe;
          RAST._IExpr _1233___mcc_h57 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_DeclareVar) {
          RAST._IDeclareType _1234___mcc_h60 = _source36.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1235___mcc_h61 = _source36.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1236___mcc_h62 = _source36.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1237___mcc_h63 = _source36.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source37 = _1236___mcc_h62;
          if (_source37.is_None) {
            return this;
          } else {
            RAST._IType _1238___mcc_h68 = _source37.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source38 = _1237___mcc_h63;
            if (_source38.is_None) {
              RAST._IExpr _source39 = _1209___mcc_h9;
              if (_source39.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1239___mcc_h70 = _source39.dtor_content;
                return this;
              } else if (_source39.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1240___mcc_h72 = _source39.dtor_name;
                return this;
              } else if (_source39.is_Match) {
                RAST._IExpr _1241___mcc_h74 = _source39.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1242___mcc_h75 = _source39.dtor_cases;
                return this;
              } else if (_source39.is_StmtExpr) {
                RAST._IExpr _1243___mcc_h78 = _source39.dtor_stmt;
                RAST._IExpr _1244___mcc_h79 = _source39.dtor_rhs;
                RAST._IExpr _source40 = _1243___mcc_h78;
                if (_source40.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1245___mcc_h82 = _source40.dtor_content;
                  return this;
                } else if (_source40.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1246___mcc_h84 = _source40.dtor_name;
                  return this;
                } else if (_source40.is_Match) {
                  RAST._IExpr _1247___mcc_h86 = _source40.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1248___mcc_h87 = _source40.dtor_cases;
                  return this;
                } else if (_source40.is_StmtExpr) {
                  RAST._IExpr _1249___mcc_h90 = _source40.dtor_stmt;
                  RAST._IExpr _1250___mcc_h91 = _source40.dtor_rhs;
                  return this;
                } else if (_source40.is_Block) {
                  RAST._IExpr _1251___mcc_h94 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1252___mcc_h96 = _source40.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1253___mcc_h97 = _source40.dtor_assignments;
                  return this;
                } else if (_source40.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1254___mcc_h100 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1255___mcc_h102 = _source40.dtor_op1;
                  RAST._IExpr _1256___mcc_h103 = _source40.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _1257___mcc_h104 = _source40.dtor_format;
                  return this;
                } else if (_source40.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1258___mcc_h108 = _source40.dtor_op2;
                  RAST._IExpr _1259___mcc_h109 = _source40.dtor_left;
                  RAST._IExpr _1260___mcc_h110 = _source40.dtor_right;
                  DAST.Format._IBinaryOpFormat _1261___mcc_h111 = _source40.dtor_format2;
                  return this;
                } else if (_source40.is_TypeAscription) {
                  RAST._IExpr _1262___mcc_h116 = _source40.dtor_left;
                  RAST._IType _1263___mcc_h117 = _source40.dtor_tpe;
                  return this;
                } else if (_source40.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1264___mcc_h120 = _source40.dtor_value;
                  return this;
                } else if (_source40.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1265___mcc_h122 = _source40.dtor_value;
                  bool _1266___mcc_h123 = _source40.dtor_binary;
                  return this;
                } else if (_source40.is_ConversionNum) {
                  RAST._IType _1267___mcc_h126 = _source40.dtor_tpe;
                  RAST._IExpr _1268___mcc_h127 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_DeclareVar) {
                  RAST._IDeclareType _1269___mcc_h130 = _source40.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1270___mcc_h131 = _source40.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1271___mcc_h132 = _source40.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1272___mcc_h133 = _source40.dtor_optRhs;
                  return this;
                } else if (_source40.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1273___mcc_h138 = _source40.dtor_name;
                  RAST._IExpr _1274___mcc_h139 = _source40.dtor_rhs;
                  RAST._IExpr _1275_last = _1244___mcc_h79;
                  RAST._IExpr _1276_rhs = _1274___mcc_h139;
                  Dafny.ISequence<Dafny.Rune> _1277_name2 = _1273___mcc_h138;
                  RAST._IType _1278_tpe = _1238___mcc_h68;
                  Dafny.ISequence<Dafny.Rune> _1279_name = _1235___mcc_h61;
                  RAST._IDeclareType _1280_mod = _1234___mcc_h60;
                  if ((_1279_name).Equals(_1277_name2)) {
                    RAST._IExpr _1281_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1280_mod, _1279_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1278_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1276_rhs)), _1275_last);
                    return _1281_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source40.is_IfExpr) {
                  RAST._IExpr _1282___mcc_h142 = _source40.dtor_cond;
                  RAST._IExpr _1283___mcc_h143 = _source40.dtor_thn;
                  RAST._IExpr _1284___mcc_h144 = _source40.dtor_els;
                  return this;
                } else if (_source40.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1285___mcc_h148 = _source40.dtor_optCond;
                  RAST._IExpr _1286___mcc_h149 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1287___mcc_h152 = _source40.dtor_name;
                  RAST._IExpr _1288___mcc_h153 = _source40.dtor_range;
                  RAST._IExpr _1289___mcc_h154 = _source40.dtor_body;
                  return this;
                } else if (_source40.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1290___mcc_h158 = _source40.dtor_lbl;
                  RAST._IExpr _1291___mcc_h159 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1292___mcc_h162 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1293___mcc_h164 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1294___mcc_h166 = _source40.dtor_optExpr;
                  return this;
                } else if (_source40.is_Call) {
                  RAST._IExpr _1295___mcc_h168 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1296___mcc_h169 = _source40.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1297___mcc_h170 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_Select) {
                  RAST._IExpr _1298___mcc_h174 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1299___mcc_h175 = _source40.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1300___mcc_h178 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1301___mcc_h179 = _source40.dtor_name;
                  return this;
                }
              } else if (_source39.is_Block) {
                RAST._IExpr _1302___mcc_h182 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1303___mcc_h184 = _source39.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1304___mcc_h185 = _source39.dtor_assignments;
                return this;
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1305___mcc_h188 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1306___mcc_h190 = _source39.dtor_op1;
                RAST._IExpr _1307___mcc_h191 = _source39.dtor_underlying;
                DAST.Format._IUnaryOpFormat _1308___mcc_h192 = _source39.dtor_format;
                return this;
              } else if (_source39.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1309___mcc_h196 = _source39.dtor_op2;
                RAST._IExpr _1310___mcc_h197 = _source39.dtor_left;
                RAST._IExpr _1311___mcc_h198 = _source39.dtor_right;
                DAST.Format._IBinaryOpFormat _1312___mcc_h199 = _source39.dtor_format2;
                return this;
              } else if (_source39.is_TypeAscription) {
                RAST._IExpr _1313___mcc_h204 = _source39.dtor_left;
                RAST._IType _1314___mcc_h205 = _source39.dtor_tpe;
                return this;
              } else if (_source39.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1315___mcc_h208 = _source39.dtor_value;
                return this;
              } else if (_source39.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1316___mcc_h210 = _source39.dtor_value;
                bool _1317___mcc_h211 = _source39.dtor_binary;
                return this;
              } else if (_source39.is_ConversionNum) {
                RAST._IType _1318___mcc_h214 = _source39.dtor_tpe;
                RAST._IExpr _1319___mcc_h215 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_DeclareVar) {
                RAST._IDeclareType _1320___mcc_h218 = _source39.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1321___mcc_h219 = _source39.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1322___mcc_h220 = _source39.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1323___mcc_h221 = _source39.dtor_optRhs;
                return this;
              } else if (_source39.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1324___mcc_h226 = _source39.dtor_name;
                RAST._IExpr _1325___mcc_h227 = _source39.dtor_rhs;
                return this;
              } else if (_source39.is_IfExpr) {
                RAST._IExpr _1326___mcc_h230 = _source39.dtor_cond;
                RAST._IExpr _1327___mcc_h231 = _source39.dtor_thn;
                RAST._IExpr _1328___mcc_h232 = _source39.dtor_els;
                return this;
              } else if (_source39.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1329___mcc_h236 = _source39.dtor_optCond;
                RAST._IExpr _1330___mcc_h237 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_For) {
                Dafny.ISequence<Dafny.Rune> _1331___mcc_h240 = _source39.dtor_name;
                RAST._IExpr _1332___mcc_h241 = _source39.dtor_range;
                RAST._IExpr _1333___mcc_h242 = _source39.dtor_body;
                return this;
              } else if (_source39.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1334___mcc_h246 = _source39.dtor_lbl;
                RAST._IExpr _1335___mcc_h247 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1336___mcc_h250 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1337___mcc_h252 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1338___mcc_h254 = _source39.dtor_optExpr;
                return this;
              } else if (_source39.is_Call) {
                RAST._IExpr _1339___mcc_h256 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IType> _1340___mcc_h257 = _source39.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1341___mcc_h258 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_Select) {
                RAST._IExpr _1342___mcc_h262 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1343___mcc_h263 = _source39.dtor_name;
                return this;
              } else {
                RAST._IExpr _1344___mcc_h266 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1345___mcc_h267 = _source39.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1346___mcc_h270 = _source38.dtor_value;
              return this;
            }
          }
        } else if (_source36.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1347___mcc_h272 = _source36.dtor_name;
          RAST._IExpr _1348___mcc_h273 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_IfExpr) {
          RAST._IExpr _1349___mcc_h276 = _source36.dtor_cond;
          RAST._IExpr _1350___mcc_h277 = _source36.dtor_thn;
          RAST._IExpr _1351___mcc_h278 = _source36.dtor_els;
          return this;
        } else if (_source36.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1352___mcc_h282 = _source36.dtor_optCond;
          RAST._IExpr _1353___mcc_h283 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_For) {
          Dafny.ISequence<Dafny.Rune> _1354___mcc_h286 = _source36.dtor_name;
          RAST._IExpr _1355___mcc_h287 = _source36.dtor_range;
          RAST._IExpr _1356___mcc_h288 = _source36.dtor_body;
          return this;
        } else if (_source36.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1357___mcc_h292 = _source36.dtor_lbl;
          RAST._IExpr _1358___mcc_h293 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1359___mcc_h296 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1360___mcc_h298 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1361___mcc_h300 = _source36.dtor_optExpr;
          return this;
        } else if (_source36.is_Call) {
          RAST._IExpr _1362___mcc_h302 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IType> _1363___mcc_h303 = _source36.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1364___mcc_h304 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_Select) {
          RAST._IExpr _1365___mcc_h308 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1366___mcc_h309 = _source36.dtor_name;
          return this;
        } else {
          RAST._IExpr _1367___mcc_h312 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1368___mcc_h313 = _source36.dtor_name;
          return this;
        }
      } else if (_source35.is_Block) {
        RAST._IExpr _1369___mcc_h316 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1370___mcc_h318 = _source35.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1371___mcc_h319 = _source35.dtor_assignments;
        return this;
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1372___mcc_h322 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1373___mcc_h324 = _source35.dtor_op1;
        RAST._IExpr _1374___mcc_h325 = _source35.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1375___mcc_h326 = _source35.dtor_format;
        if (object.Equals(_1373___mcc_h324, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source41 = _1374___mcc_h325;
          if (_source41.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1376___mcc_h330 = _source41.dtor_content;
            return this;
          } else if (_source41.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1377___mcc_h332 = _source41.dtor_name;
            return this;
          } else if (_source41.is_Match) {
            RAST._IExpr _1378___mcc_h334 = _source41.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1379___mcc_h335 = _source41.dtor_cases;
            return this;
          } else if (_source41.is_StmtExpr) {
            RAST._IExpr _1380___mcc_h338 = _source41.dtor_stmt;
            RAST._IExpr _1381___mcc_h339 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_Block) {
            RAST._IExpr _1382___mcc_h342 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1383___mcc_h344 = _source41.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1384___mcc_h345 = _source41.dtor_assignments;
            return this;
          } else if (_source41.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1385___mcc_h348 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1386___mcc_h350 = _source41.dtor_op1;
            RAST._IExpr _1387___mcc_h351 = _source41.dtor_underlying;
            DAST.Format._IUnaryOpFormat _1388___mcc_h352 = _source41.dtor_format;
            return this;
          } else if (_source41.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1389___mcc_h356 = _source41.dtor_op2;
            RAST._IExpr _1390___mcc_h357 = _source41.dtor_left;
            RAST._IExpr _1391___mcc_h358 = _source41.dtor_right;
            DAST.Format._IBinaryOpFormat _1392___mcc_h359 = _source41.dtor_format2;
            return this;
          } else if (_source41.is_TypeAscription) {
            RAST._IExpr _1393___mcc_h364 = _source41.dtor_left;
            RAST._IType _1394___mcc_h365 = _source41.dtor_tpe;
            return this;
          } else if (_source41.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1395___mcc_h368 = _source41.dtor_value;
            return this;
          } else if (_source41.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1396___mcc_h370 = _source41.dtor_value;
            bool _1397___mcc_h371 = _source41.dtor_binary;
            return this;
          } else if (_source41.is_ConversionNum) {
            RAST._IType _1398___mcc_h374 = _source41.dtor_tpe;
            RAST._IExpr _1399___mcc_h375 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_DeclareVar) {
            RAST._IDeclareType _1400___mcc_h378 = _source41.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1401___mcc_h379 = _source41.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1402___mcc_h380 = _source41.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1403___mcc_h381 = _source41.dtor_optRhs;
            return this;
          } else if (_source41.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1404___mcc_h386 = _source41.dtor_name;
            RAST._IExpr _1405___mcc_h387 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_IfExpr) {
            RAST._IExpr _1406___mcc_h390 = _source41.dtor_cond;
            RAST._IExpr _1407___mcc_h391 = _source41.dtor_thn;
            RAST._IExpr _1408___mcc_h392 = _source41.dtor_els;
            return this;
          } else if (_source41.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1409___mcc_h396 = _source41.dtor_optCond;
            RAST._IExpr _1410___mcc_h397 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_For) {
            Dafny.ISequence<Dafny.Rune> _1411___mcc_h400 = _source41.dtor_name;
            RAST._IExpr _1412___mcc_h401 = _source41.dtor_range;
            RAST._IExpr _1413___mcc_h402 = _source41.dtor_body;
            return this;
          } else if (_source41.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1414___mcc_h406 = _source41.dtor_lbl;
            RAST._IExpr _1415___mcc_h407 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1416___mcc_h410 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1417___mcc_h412 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1418___mcc_h414 = _source41.dtor_optExpr;
            return this;
          } else if (_source41.is_Call) {
            RAST._IExpr _1419___mcc_h416 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IType> _1420___mcc_h417 = _source41.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1421___mcc_h418 = _source41.dtor_arguments;
            RAST._IExpr _source42 = _1419___mcc_h416;
            if (_source42.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1422___mcc_h422 = _source42.dtor_content;
              return this;
            } else if (_source42.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1423___mcc_h424 = _source42.dtor_name;
              return this;
            } else if (_source42.is_Match) {
              RAST._IExpr _1424___mcc_h426 = _source42.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1425___mcc_h427 = _source42.dtor_cases;
              return this;
            } else if (_source42.is_StmtExpr) {
              RAST._IExpr _1426___mcc_h430 = _source42.dtor_stmt;
              RAST._IExpr _1427___mcc_h431 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_Block) {
              RAST._IExpr _1428___mcc_h434 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_StructBuild) {
              Dafny.ISequence<Dafny.Rune> _1429___mcc_h436 = _source42.dtor_name;
              Dafny.ISequence<RAST._IAssignIdentifier> _1430___mcc_h437 = _source42.dtor_assignments;
              return this;
            } else if (_source42.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1431___mcc_h440 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1432___mcc_h442 = _source42.dtor_op1;
              RAST._IExpr _1433___mcc_h443 = _source42.dtor_underlying;
              DAST.Format._IUnaryOpFormat _1434___mcc_h444 = _source42.dtor_format;
              return this;
            } else if (_source42.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1435___mcc_h448 = _source42.dtor_op2;
              RAST._IExpr _1436___mcc_h449 = _source42.dtor_left;
              RAST._IExpr _1437___mcc_h450 = _source42.dtor_right;
              DAST.Format._IBinaryOpFormat _1438___mcc_h451 = _source42.dtor_format2;
              return this;
            } else if (_source42.is_TypeAscription) {
              RAST._IExpr _1439___mcc_h456 = _source42.dtor_left;
              RAST._IType _1440___mcc_h457 = _source42.dtor_tpe;
              return this;
            } else if (_source42.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1441___mcc_h460 = _source42.dtor_value;
              return this;
            } else if (_source42.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1442___mcc_h462 = _source42.dtor_value;
              bool _1443___mcc_h463 = _source42.dtor_binary;
              return this;
            } else if (_source42.is_ConversionNum) {
              RAST._IType _1444___mcc_h466 = _source42.dtor_tpe;
              RAST._IExpr _1445___mcc_h467 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_DeclareVar) {
              RAST._IDeclareType _1446___mcc_h470 = _source42.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1447___mcc_h471 = _source42.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1448___mcc_h472 = _source42.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1449___mcc_h473 = _source42.dtor_optRhs;
              return this;
            } else if (_source42.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1450___mcc_h478 = _source42.dtor_name;
              RAST._IExpr _1451___mcc_h479 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_IfExpr) {
              RAST._IExpr _1452___mcc_h482 = _source42.dtor_cond;
              RAST._IExpr _1453___mcc_h483 = _source42.dtor_thn;
              RAST._IExpr _1454___mcc_h484 = _source42.dtor_els;
              return this;
            } else if (_source42.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1455___mcc_h488 = _source42.dtor_optCond;
              RAST._IExpr _1456___mcc_h489 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_For) {
              Dafny.ISequence<Dafny.Rune> _1457___mcc_h492 = _source42.dtor_name;
              RAST._IExpr _1458___mcc_h493 = _source42.dtor_range;
              RAST._IExpr _1459___mcc_h494 = _source42.dtor_body;
              return this;
            } else if (_source42.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1460___mcc_h498 = _source42.dtor_lbl;
              RAST._IExpr _1461___mcc_h499 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1462___mcc_h502 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1463___mcc_h504 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1464___mcc_h506 = _source42.dtor_optExpr;
              return this;
            } else if (_source42.is_Call) {
              RAST._IExpr _1465___mcc_h508 = _source42.dtor_obj;
              Dafny.ISequence<RAST._IType> _1466___mcc_h509 = _source42.dtor_typeParameters;
              Dafny.ISequence<RAST._IExpr> _1467___mcc_h510 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_Select) {
              RAST._IExpr _1468___mcc_h514 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1469___mcc_h515 = _source42.dtor_name;
              if (object.Equals(_1469___mcc_h515, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnaryOpFormat _1470_format = _1375___mcc_h326;
                Dafny.ISequence<RAST._IExpr> _1471_args = _1421___mcc_h418;
                Dafny.ISequence<RAST._IType> _1472_typeArgs = _1420___mcc_h417;
                RAST._IExpr _1473_underlying = _1468___mcc_h514;
                if (((_1472_typeArgs).Equals(Dafny.Sequence<RAST._IType>.FromElements())) && ((_1471_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements()))) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1473_underlying, _1470_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1474___mcc_h518 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1475___mcc_h519 = _source42.dtor_name;
              return this;
            }
          } else if (_source41.is_Select) {
            RAST._IExpr _1476___mcc_h522 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1477___mcc_h523 = _source41.dtor_name;
            return this;
          } else {
            RAST._IExpr _1478___mcc_h526 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1479___mcc_h527 = _source41.dtor_name;
            return this;
          }
        } else if (object.Equals(_1373___mcc_h324, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source43 = _1374___mcc_h325;
          if (_source43.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1480___mcc_h530 = _source43.dtor_content;
            return this;
          } else if (_source43.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1481___mcc_h532 = _source43.dtor_name;
            return this;
          } else if (_source43.is_Match) {
            RAST._IExpr _1482___mcc_h534 = _source43.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1483___mcc_h535 = _source43.dtor_cases;
            return this;
          } else if (_source43.is_StmtExpr) {
            RAST._IExpr _1484___mcc_h538 = _source43.dtor_stmt;
            RAST._IExpr _1485___mcc_h539 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_Block) {
            RAST._IExpr _1486___mcc_h542 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1487___mcc_h544 = _source43.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1488___mcc_h545 = _source43.dtor_assignments;
            return this;
          } else if (_source43.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1489___mcc_h548 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1490___mcc_h550 = _source43.dtor_op1;
            RAST._IExpr _1491___mcc_h551 = _source43.dtor_underlying;
            DAST.Format._IUnaryOpFormat _1492___mcc_h552 = _source43.dtor_format;
            return this;
          } else if (_source43.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1493___mcc_h556 = _source43.dtor_op2;
            RAST._IExpr _1494___mcc_h557 = _source43.dtor_left;
            RAST._IExpr _1495___mcc_h558 = _source43.dtor_right;
            DAST.Format._IBinaryOpFormat _1496___mcc_h559 = _source43.dtor_format2;
            if (object.Equals(_1493___mcc_h556, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnaryOpFormat _source44 = _1375___mcc_h326;
              if (_source44.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinaryOpFormat _1497_format = _1496___mcc_h559;
                RAST._IExpr _1498_right = _1495___mcc_h558;
                RAST._IExpr _1499_left = _1494___mcc_h557;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1499_left, _1498_right, DAST.Format.BinaryOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1493___mcc_h556, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinaryOpFormat _source45 = _1496___mcc_h559;
              if (_source45.is_NoFormat) {
                DAST.Format._IUnaryOpFormat _source46 = _1375___mcc_h326;
                if (_source46.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1500_right = _1495___mcc_h558;
                  RAST._IExpr _1501_left = _1494___mcc_h557;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1501_left, _1500_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              } else if (_source45.is_ImpliesFormat) {
                return this;
              } else if (_source45.is_EquivalenceFormat) {
                return this;
              } else {
                DAST.Format._IUnaryOpFormat _source47 = _1375___mcc_h326;
                if (_source47.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1502_right = _1495___mcc_h558;
                  RAST._IExpr _1503_left = _1494___mcc_h557;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1502_right, _1503_left, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source43.is_TypeAscription) {
            RAST._IExpr _1504___mcc_h564 = _source43.dtor_left;
            RAST._IType _1505___mcc_h565 = _source43.dtor_tpe;
            return this;
          } else if (_source43.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1506___mcc_h568 = _source43.dtor_value;
            return this;
          } else if (_source43.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1507___mcc_h570 = _source43.dtor_value;
            bool _1508___mcc_h571 = _source43.dtor_binary;
            return this;
          } else if (_source43.is_ConversionNum) {
            RAST._IType _1509___mcc_h574 = _source43.dtor_tpe;
            RAST._IExpr _1510___mcc_h575 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_DeclareVar) {
            RAST._IDeclareType _1511___mcc_h578 = _source43.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1512___mcc_h579 = _source43.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1513___mcc_h580 = _source43.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1514___mcc_h581 = _source43.dtor_optRhs;
            return this;
          } else if (_source43.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1515___mcc_h586 = _source43.dtor_name;
            RAST._IExpr _1516___mcc_h587 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_IfExpr) {
            RAST._IExpr _1517___mcc_h590 = _source43.dtor_cond;
            RAST._IExpr _1518___mcc_h591 = _source43.dtor_thn;
            RAST._IExpr _1519___mcc_h592 = _source43.dtor_els;
            return this;
          } else if (_source43.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1520___mcc_h596 = _source43.dtor_optCond;
            RAST._IExpr _1521___mcc_h597 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_For) {
            Dafny.ISequence<Dafny.Rune> _1522___mcc_h600 = _source43.dtor_name;
            RAST._IExpr _1523___mcc_h601 = _source43.dtor_range;
            RAST._IExpr _1524___mcc_h602 = _source43.dtor_body;
            return this;
          } else if (_source43.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1525___mcc_h606 = _source43.dtor_lbl;
            RAST._IExpr _1526___mcc_h607 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1527___mcc_h610 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1528___mcc_h612 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1529___mcc_h614 = _source43.dtor_optExpr;
            return this;
          } else if (_source43.is_Call) {
            RAST._IExpr _1530___mcc_h616 = _source43.dtor_obj;
            Dafny.ISequence<RAST._IType> _1531___mcc_h617 = _source43.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1532___mcc_h618 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_Select) {
            RAST._IExpr _1533___mcc_h622 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1534___mcc_h623 = _source43.dtor_name;
            return this;
          } else {
            RAST._IExpr _1535___mcc_h626 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1536___mcc_h627 = _source43.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1537___mcc_h630 = _source35.dtor_op2;
        RAST._IExpr _1538___mcc_h631 = _source35.dtor_left;
        RAST._IExpr _1539___mcc_h632 = _source35.dtor_right;
        DAST.Format._IBinaryOpFormat _1540___mcc_h633 = _source35.dtor_format2;
        return this;
      } else if (_source35.is_TypeAscription) {
        RAST._IExpr _1541___mcc_h638 = _source35.dtor_left;
        RAST._IType _1542___mcc_h639 = _source35.dtor_tpe;
        return this;
      } else if (_source35.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1543___mcc_h642 = _source35.dtor_value;
        return this;
      } else if (_source35.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1544___mcc_h644 = _source35.dtor_value;
        bool _1545___mcc_h645 = _source35.dtor_binary;
        return this;
      } else if (_source35.is_ConversionNum) {
        RAST._IType _1546___mcc_h648 = _source35.dtor_tpe;
        RAST._IExpr _1547___mcc_h649 = _source35.dtor_underlying;
        RAST._IExpr _1548_expr = _1547___mcc_h649;
        RAST._IType _1549_tpe = _1546___mcc_h648;
        if (((((((((((_1549_tpe).is_U8) || ((_1549_tpe).is_U16)) || ((_1549_tpe).is_U32)) || ((_1549_tpe).is_U64)) || ((_1549_tpe).is_U128)) || ((_1549_tpe).is_I8)) || ((_1549_tpe).is_I16)) || ((_1549_tpe).is_I32)) || ((_1549_tpe).is_I64)) || ((_1549_tpe).is_I128)) {
          RAST._IExpr _source48 = _1548_expr;
          if (_source48.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1550___mcc_h704 = _source48.dtor_content;
            return this;
          } else if (_source48.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1551___mcc_h706 = _source48.dtor_name;
            return this;
          } else if (_source48.is_Match) {
            RAST._IExpr _1552___mcc_h708 = _source48.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1553___mcc_h709 = _source48.dtor_cases;
            return this;
          } else if (_source48.is_StmtExpr) {
            RAST._IExpr _1554___mcc_h712 = _source48.dtor_stmt;
            RAST._IExpr _1555___mcc_h713 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_Block) {
            RAST._IExpr _1556___mcc_h716 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1557___mcc_h718 = _source48.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1558___mcc_h719 = _source48.dtor_assignments;
            return this;
          } else if (_source48.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1559___mcc_h722 = _source48.dtor_arguments;
            return this;
          } else if (_source48.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1560___mcc_h724 = _source48.dtor_op1;
            RAST._IExpr _1561___mcc_h725 = _source48.dtor_underlying;
            DAST.Format._IUnaryOpFormat _1562___mcc_h726 = _source48.dtor_format;
            return this;
          } else if (_source48.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1563___mcc_h730 = _source48.dtor_op2;
            RAST._IExpr _1564___mcc_h731 = _source48.dtor_left;
            RAST._IExpr _1565___mcc_h732 = _source48.dtor_right;
            DAST.Format._IBinaryOpFormat _1566___mcc_h733 = _source48.dtor_format2;
            return this;
          } else if (_source48.is_TypeAscription) {
            RAST._IExpr _1567___mcc_h738 = _source48.dtor_left;
            RAST._IType _1568___mcc_h739 = _source48.dtor_tpe;
            return this;
          } else if (_source48.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1569___mcc_h742 = _source48.dtor_value;
            return this;
          } else if (_source48.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1570___mcc_h744 = _source48.dtor_value;
            bool _1571___mcc_h745 = _source48.dtor_binary;
            return this;
          } else if (_source48.is_ConversionNum) {
            RAST._IType _1572___mcc_h748 = _source48.dtor_tpe;
            RAST._IExpr _1573___mcc_h749 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_DeclareVar) {
            RAST._IDeclareType _1574___mcc_h752 = _source48.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1575___mcc_h753 = _source48.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1576___mcc_h754 = _source48.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1577___mcc_h755 = _source48.dtor_optRhs;
            return this;
          } else if (_source48.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1578___mcc_h760 = _source48.dtor_name;
            RAST._IExpr _1579___mcc_h761 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_IfExpr) {
            RAST._IExpr _1580___mcc_h764 = _source48.dtor_cond;
            RAST._IExpr _1581___mcc_h765 = _source48.dtor_thn;
            RAST._IExpr _1582___mcc_h766 = _source48.dtor_els;
            return this;
          } else if (_source48.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1583___mcc_h770 = _source48.dtor_optCond;
            RAST._IExpr _1584___mcc_h771 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_For) {
            Dafny.ISequence<Dafny.Rune> _1585___mcc_h774 = _source48.dtor_name;
            RAST._IExpr _1586___mcc_h775 = _source48.dtor_range;
            RAST._IExpr _1587___mcc_h776 = _source48.dtor_body;
            return this;
          } else if (_source48.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1588___mcc_h780 = _source48.dtor_lbl;
            RAST._IExpr _1589___mcc_h781 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1590___mcc_h784 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1591___mcc_h786 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1592___mcc_h788 = _source48.dtor_optExpr;
            return this;
          } else if (_source48.is_Call) {
            RAST._IExpr _1593___mcc_h790 = _source48.dtor_obj;
            Dafny.ISequence<RAST._IType> _1594___mcc_h791 = _source48.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1595___mcc_h792 = _source48.dtor_arguments;
            RAST._IExpr _source49 = _1593___mcc_h790;
            if (_source49.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1596___mcc_h796 = _source49.dtor_content;
              return this;
            } else if (_source49.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1597___mcc_h798 = _source49.dtor_name;
              return this;
            } else if (_source49.is_Match) {
              RAST._IExpr _1598___mcc_h800 = _source49.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1599___mcc_h801 = _source49.dtor_cases;
              return this;
            } else if (_source49.is_StmtExpr) {
              RAST._IExpr _1600___mcc_h804 = _source49.dtor_stmt;
              RAST._IExpr _1601___mcc_h805 = _source49.dtor_rhs;
              return this;
            } else if (_source49.is_Block) {
              RAST._IExpr _1602___mcc_h808 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_StructBuild) {
              Dafny.ISequence<Dafny.Rune> _1603___mcc_h810 = _source49.dtor_name;
              Dafny.ISequence<RAST._IAssignIdentifier> _1604___mcc_h811 = _source49.dtor_assignments;
              return this;
            } else if (_source49.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1605___mcc_h814 = _source49.dtor_arguments;
              return this;
            } else if (_source49.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1606___mcc_h816 = _source49.dtor_op1;
              RAST._IExpr _1607___mcc_h817 = _source49.dtor_underlying;
              DAST.Format._IUnaryOpFormat _1608___mcc_h818 = _source49.dtor_format;
              return this;
            } else if (_source49.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1609___mcc_h822 = _source49.dtor_op2;
              RAST._IExpr _1610___mcc_h823 = _source49.dtor_left;
              RAST._IExpr _1611___mcc_h824 = _source49.dtor_right;
              DAST.Format._IBinaryOpFormat _1612___mcc_h825 = _source49.dtor_format2;
              return this;
            } else if (_source49.is_TypeAscription) {
              RAST._IExpr _1613___mcc_h830 = _source49.dtor_left;
              RAST._IType _1614___mcc_h831 = _source49.dtor_tpe;
              return this;
            } else if (_source49.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1615___mcc_h834 = _source49.dtor_value;
              return this;
            } else if (_source49.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1616___mcc_h836 = _source49.dtor_value;
              bool _1617___mcc_h837 = _source49.dtor_binary;
              return this;
            } else if (_source49.is_ConversionNum) {
              RAST._IType _1618___mcc_h840 = _source49.dtor_tpe;
              RAST._IExpr _1619___mcc_h841 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_DeclareVar) {
              RAST._IDeclareType _1620___mcc_h844 = _source49.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1621___mcc_h845 = _source49.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1622___mcc_h846 = _source49.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1623___mcc_h847 = _source49.dtor_optRhs;
              return this;
            } else if (_source49.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1624___mcc_h852 = _source49.dtor_name;
              RAST._IExpr _1625___mcc_h853 = _source49.dtor_rhs;
              return this;
            } else if (_source49.is_IfExpr) {
              RAST._IExpr _1626___mcc_h856 = _source49.dtor_cond;
              RAST._IExpr _1627___mcc_h857 = _source49.dtor_thn;
              RAST._IExpr _1628___mcc_h858 = _source49.dtor_els;
              return this;
            } else if (_source49.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1629___mcc_h862 = _source49.dtor_optCond;
              RAST._IExpr _1630___mcc_h863 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_For) {
              Dafny.ISequence<Dafny.Rune> _1631___mcc_h866 = _source49.dtor_name;
              RAST._IExpr _1632___mcc_h867 = _source49.dtor_range;
              RAST._IExpr _1633___mcc_h868 = _source49.dtor_body;
              return this;
            } else if (_source49.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1634___mcc_h872 = _source49.dtor_lbl;
              RAST._IExpr _1635___mcc_h873 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1636___mcc_h876 = _source49.dtor_optLbl;
              return this;
            } else if (_source49.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1637___mcc_h878 = _source49.dtor_optLbl;
              return this;
            } else if (_source49.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1638___mcc_h880 = _source49.dtor_optExpr;
              return this;
            } else if (_source49.is_Call) {
              RAST._IExpr _1639___mcc_h882 = _source49.dtor_obj;
              Dafny.ISequence<RAST._IType> _1640___mcc_h883 = _source49.dtor_typeParameters;
              Dafny.ISequence<RAST._IExpr> _1641___mcc_h884 = _source49.dtor_arguments;
              return this;
            } else if (_source49.is_Select) {
              RAST._IExpr _1642___mcc_h888 = _source49.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1643___mcc_h889 = _source49.dtor_name;
              return this;
            } else {
              RAST._IExpr _1644___mcc_h892 = _source49.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1645___mcc_h893 = _source49.dtor_name;
              RAST._IExpr _source50 = _1644___mcc_h892;
              if (_source50.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1646___mcc_h896 = _source50.dtor_content;
                return this;
              } else if (_source50.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1647___mcc_h898 = _source50.dtor_name;
                return this;
              } else if (_source50.is_Match) {
                RAST._IExpr _1648___mcc_h900 = _source50.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1649___mcc_h901 = _source50.dtor_cases;
                return this;
              } else if (_source50.is_StmtExpr) {
                RAST._IExpr _1650___mcc_h904 = _source50.dtor_stmt;
                RAST._IExpr _1651___mcc_h905 = _source50.dtor_rhs;
                return this;
              } else if (_source50.is_Block) {
                RAST._IExpr _1652___mcc_h908 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1653___mcc_h910 = _source50.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1654___mcc_h911 = _source50.dtor_assignments;
                return this;
              } else if (_source50.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1655___mcc_h914 = _source50.dtor_arguments;
                return this;
              } else if (_source50.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1656___mcc_h916 = _source50.dtor_op1;
                RAST._IExpr _1657___mcc_h917 = _source50.dtor_underlying;
                DAST.Format._IUnaryOpFormat _1658___mcc_h918 = _source50.dtor_format;
                return this;
              } else if (_source50.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1659___mcc_h922 = _source50.dtor_op2;
                RAST._IExpr _1660___mcc_h923 = _source50.dtor_left;
                RAST._IExpr _1661___mcc_h924 = _source50.dtor_right;
                DAST.Format._IBinaryOpFormat _1662___mcc_h925 = _source50.dtor_format2;
                return this;
              } else if (_source50.is_TypeAscription) {
                RAST._IExpr _1663___mcc_h930 = _source50.dtor_left;
                RAST._IType _1664___mcc_h931 = _source50.dtor_tpe;
                return this;
              } else if (_source50.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1665___mcc_h934 = _source50.dtor_value;
                return this;
              } else if (_source50.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1666___mcc_h936 = _source50.dtor_value;
                bool _1667___mcc_h937 = _source50.dtor_binary;
                return this;
              } else if (_source50.is_ConversionNum) {
                RAST._IType _1668___mcc_h940 = _source50.dtor_tpe;
                RAST._IExpr _1669___mcc_h941 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_DeclareVar) {
                RAST._IDeclareType _1670___mcc_h944 = _source50.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1671___mcc_h945 = _source50.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1672___mcc_h946 = _source50.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1673___mcc_h947 = _source50.dtor_optRhs;
                return this;
              } else if (_source50.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1674___mcc_h952 = _source50.dtor_name;
                RAST._IExpr _1675___mcc_h953 = _source50.dtor_rhs;
                return this;
              } else if (_source50.is_IfExpr) {
                RAST._IExpr _1676___mcc_h956 = _source50.dtor_cond;
                RAST._IExpr _1677___mcc_h957 = _source50.dtor_thn;
                RAST._IExpr _1678___mcc_h958 = _source50.dtor_els;
                return this;
              } else if (_source50.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1679___mcc_h962 = _source50.dtor_optCond;
                RAST._IExpr _1680___mcc_h963 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_For) {
                Dafny.ISequence<Dafny.Rune> _1681___mcc_h966 = _source50.dtor_name;
                RAST._IExpr _1682___mcc_h967 = _source50.dtor_range;
                RAST._IExpr _1683___mcc_h968 = _source50.dtor_body;
                return this;
              } else if (_source50.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1684___mcc_h972 = _source50.dtor_lbl;
                RAST._IExpr _1685___mcc_h973 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1686___mcc_h976 = _source50.dtor_optLbl;
                return this;
              } else if (_source50.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1687___mcc_h978 = _source50.dtor_optLbl;
                return this;
              } else if (_source50.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1688___mcc_h980 = _source50.dtor_optExpr;
                return this;
              } else if (_source50.is_Call) {
                RAST._IExpr _1689___mcc_h982 = _source50.dtor_obj;
                Dafny.ISequence<RAST._IType> _1690___mcc_h983 = _source50.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1691___mcc_h984 = _source50.dtor_arguments;
                return this;
              } else if (_source50.is_Select) {
                RAST._IExpr _1692___mcc_h988 = _source50.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1693___mcc_h989 = _source50.dtor_name;
                return this;
              } else {
                RAST._IExpr _1694___mcc_h992 = _source50.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1695___mcc_h993 = _source50.dtor_name;
                RAST._IExpr _source51 = _1694___mcc_h992;
                if (_source51.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1696___mcc_h996 = _source51.dtor_content;
                  return this;
                } else if (_source51.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1697___mcc_h998 = _source51.dtor_name;
                  return this;
                } else if (_source51.is_Match) {
                  RAST._IExpr _1698___mcc_h1000 = _source51.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1699___mcc_h1001 = _source51.dtor_cases;
                  return this;
                } else if (_source51.is_StmtExpr) {
                  RAST._IExpr _1700___mcc_h1004 = _source51.dtor_stmt;
                  RAST._IExpr _1701___mcc_h1005 = _source51.dtor_rhs;
                  return this;
                } else if (_source51.is_Block) {
                  RAST._IExpr _1702___mcc_h1008 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1703___mcc_h1010 = _source51.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1704___mcc_h1011 = _source51.dtor_assignments;
                  return this;
                } else if (_source51.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1705___mcc_h1014 = _source51.dtor_arguments;
                  return this;
                } else if (_source51.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1706___mcc_h1016 = _source51.dtor_op1;
                  RAST._IExpr _1707___mcc_h1017 = _source51.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _1708___mcc_h1018 = _source51.dtor_format;
                  return this;
                } else if (_source51.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1709___mcc_h1022 = _source51.dtor_op2;
                  RAST._IExpr _1710___mcc_h1023 = _source51.dtor_left;
                  RAST._IExpr _1711___mcc_h1024 = _source51.dtor_right;
                  DAST.Format._IBinaryOpFormat _1712___mcc_h1025 = _source51.dtor_format2;
                  return this;
                } else if (_source51.is_TypeAscription) {
                  RAST._IExpr _1713___mcc_h1030 = _source51.dtor_left;
                  RAST._IType _1714___mcc_h1031 = _source51.dtor_tpe;
                  return this;
                } else if (_source51.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1715___mcc_h1034 = _source51.dtor_value;
                  return this;
                } else if (_source51.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1716___mcc_h1036 = _source51.dtor_value;
                  bool _1717___mcc_h1037 = _source51.dtor_binary;
                  return this;
                } else if (_source51.is_ConversionNum) {
                  RAST._IType _1718___mcc_h1040 = _source51.dtor_tpe;
                  RAST._IExpr _1719___mcc_h1041 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_DeclareVar) {
                  RAST._IDeclareType _1720___mcc_h1044 = _source51.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1721___mcc_h1045 = _source51.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1722___mcc_h1046 = _source51.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1723___mcc_h1047 = _source51.dtor_optRhs;
                  return this;
                } else if (_source51.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1724___mcc_h1052 = _source51.dtor_name;
                  RAST._IExpr _1725___mcc_h1053 = _source51.dtor_rhs;
                  return this;
                } else if (_source51.is_IfExpr) {
                  RAST._IExpr _1726___mcc_h1056 = _source51.dtor_cond;
                  RAST._IExpr _1727___mcc_h1057 = _source51.dtor_thn;
                  RAST._IExpr _1728___mcc_h1058 = _source51.dtor_els;
                  return this;
                } else if (_source51.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1729___mcc_h1062 = _source51.dtor_optCond;
                  RAST._IExpr _1730___mcc_h1063 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1731___mcc_h1066 = _source51.dtor_name;
                  RAST._IExpr _1732___mcc_h1067 = _source51.dtor_range;
                  RAST._IExpr _1733___mcc_h1068 = _source51.dtor_body;
                  return this;
                } else if (_source51.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1734___mcc_h1072 = _source51.dtor_lbl;
                  RAST._IExpr _1735___mcc_h1073 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1736___mcc_h1076 = _source51.dtor_optLbl;
                  return this;
                } else if (_source51.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1737___mcc_h1078 = _source51.dtor_optLbl;
                  return this;
                } else if (_source51.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1738___mcc_h1080 = _source51.dtor_optExpr;
                  return this;
                } else if (_source51.is_Call) {
                  RAST._IExpr _1739___mcc_h1082 = _source51.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1740___mcc_h1083 = _source51.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1741___mcc_h1084 = _source51.dtor_arguments;
                  return this;
                } else if (_source51.is_Select) {
                  RAST._IExpr _1742___mcc_h1088 = _source51.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1743___mcc_h1089 = _source51.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1744___mcc_h1092 = _source51.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1745___mcc_h1093 = _source51.dtor_name;
                  RAST._IExpr _source52 = _1744___mcc_h1092;
                  if (_source52.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _1746___mcc_h1096 = _source52.dtor_content;
                    return this;
                  } else if (_source52.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _1747___mcc_h1098 = _source52.dtor_name;
                    if (object.Equals(_1747___mcc_h1098, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                      if (object.Equals(_1745___mcc_h1093, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"))) {
                        if (object.Equals(_1695___mcc_h993, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))) {
                          if (object.Equals(_1645___mcc_h893, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))) {
                            Dafny.ISequence<RAST._IExpr> _1748_args = _1595___mcc_h792;
                            Dafny.ISequence<RAST._IType> _1749_tpe = _1594___mcc_h791;
                            if (((new BigInteger((_1749_tpe).Count)).Sign == 0) && ((new BigInteger((_1748_args).Count)) == (BigInteger.One))) {
                              RAST._IExpr _source53 = (_1748_args).Select(BigInteger.Zero);
                              if (_source53.is_RawExpr) {
                                Dafny.ISequence<Dafny.Rune> _1750___mcc_h1204 = _source53.dtor_content;
                                return this;
                              } else if (_source53.is_Identifier) {
                                Dafny.ISequence<Dafny.Rune> _1751___mcc_h1206 = _source53.dtor_name;
                                return this;
                              } else if (_source53.is_Match) {
                                RAST._IExpr _1752___mcc_h1208 = _source53.dtor_matchee;
                                Dafny.ISequence<RAST._IMatchCase> _1753___mcc_h1209 = _source53.dtor_cases;
                                return this;
                              } else if (_source53.is_StmtExpr) {
                                RAST._IExpr _1754___mcc_h1212 = _source53.dtor_stmt;
                                RAST._IExpr _1755___mcc_h1213 = _source53.dtor_rhs;
                                return this;
                              } else if (_source53.is_Block) {
                                RAST._IExpr _1756___mcc_h1216 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_StructBuild) {
                                Dafny.ISequence<Dafny.Rune> _1757___mcc_h1218 = _source53.dtor_name;
                                Dafny.ISequence<RAST._IAssignIdentifier> _1758___mcc_h1219 = _source53.dtor_assignments;
                                return this;
                              } else if (_source53.is_Tuple) {
                                Dafny.ISequence<RAST._IExpr> _1759___mcc_h1222 = _source53.dtor_arguments;
                                return this;
                              } else if (_source53.is_UnaryOp) {
                                Dafny.ISequence<Dafny.Rune> _1760___mcc_h1224 = _source53.dtor_op1;
                                RAST._IExpr _1761___mcc_h1225 = _source53.dtor_underlying;
                                DAST.Format._IUnaryOpFormat _1762___mcc_h1226 = _source53.dtor_format;
                                return this;
                              } else if (_source53.is_BinaryOp) {
                                Dafny.ISequence<Dafny.Rune> _1763___mcc_h1230 = _source53.dtor_op2;
                                RAST._IExpr _1764___mcc_h1231 = _source53.dtor_left;
                                RAST._IExpr _1765___mcc_h1232 = _source53.dtor_right;
                                DAST.Format._IBinaryOpFormat _1766___mcc_h1233 = _source53.dtor_format2;
                                return this;
                              } else if (_source53.is_TypeAscription) {
                                RAST._IExpr _1767___mcc_h1238 = _source53.dtor_left;
                                RAST._IType _1768___mcc_h1239 = _source53.dtor_tpe;
                                return this;
                              } else if (_source53.is_LiteralInt) {
                                Dafny.ISequence<Dafny.Rune> _1769___mcc_h1242 = _source53.dtor_value;
                                Dafny.ISequence<Dafny.Rune> _1770_number = _1769___mcc_h1242;
                                return RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*optimized*/"), _1770_number));
                              } else if (_source53.is_LiteralString) {
                                Dafny.ISequence<Dafny.Rune> _1771___mcc_h1244 = _source53.dtor_value;
                                bool _1772___mcc_h1245 = _source53.dtor_binary;
                                Dafny.ISequence<Dafny.Rune> _1773_number = _1771___mcc_h1244;
                                return RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*optimized*/"), _1773_number));
                              } else if (_source53.is_ConversionNum) {
                                RAST._IType _1774___mcc_h1248 = _source53.dtor_tpe;
                                RAST._IExpr _1775___mcc_h1249 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_DeclareVar) {
                                RAST._IDeclareType _1776___mcc_h1252 = _source53.dtor_declareType;
                                Dafny.ISequence<Dafny.Rune> _1777___mcc_h1253 = _source53.dtor_name;
                                Std.Wrappers._IOption<RAST._IType> _1778___mcc_h1254 = _source53.dtor_optType;
                                Std.Wrappers._IOption<RAST._IExpr> _1779___mcc_h1255 = _source53.dtor_optRhs;
                                return this;
                              } else if (_source53.is_AssignVar) {
                                Dafny.ISequence<Dafny.Rune> _1780___mcc_h1260 = _source53.dtor_name;
                                RAST._IExpr _1781___mcc_h1261 = _source53.dtor_rhs;
                                return this;
                              } else if (_source53.is_IfExpr) {
                                RAST._IExpr _1782___mcc_h1264 = _source53.dtor_cond;
                                RAST._IExpr _1783___mcc_h1265 = _source53.dtor_thn;
                                RAST._IExpr _1784___mcc_h1266 = _source53.dtor_els;
                                return this;
                              } else if (_source53.is_Loop) {
                                Std.Wrappers._IOption<RAST._IExpr> _1785___mcc_h1270 = _source53.dtor_optCond;
                                RAST._IExpr _1786___mcc_h1271 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_For) {
                                Dafny.ISequence<Dafny.Rune> _1787___mcc_h1274 = _source53.dtor_name;
                                RAST._IExpr _1788___mcc_h1275 = _source53.dtor_range;
                                RAST._IExpr _1789___mcc_h1276 = _source53.dtor_body;
                                return this;
                              } else if (_source53.is_Labelled) {
                                Dafny.ISequence<Dafny.Rune> _1790___mcc_h1280 = _source53.dtor_lbl;
                                RAST._IExpr _1791___mcc_h1281 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_Break) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1792___mcc_h1284 = _source53.dtor_optLbl;
                                return this;
                              } else if (_source53.is_Continue) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1793___mcc_h1286 = _source53.dtor_optLbl;
                                return this;
                              } else if (_source53.is_Return) {
                                Std.Wrappers._IOption<RAST._IExpr> _1794___mcc_h1288 = _source53.dtor_optExpr;
                                return this;
                              } else if (_source53.is_Call) {
                                RAST._IExpr _1795___mcc_h1290 = _source53.dtor_obj;
                                Dafny.ISequence<RAST._IType> _1796___mcc_h1291 = _source53.dtor_typeParameters;
                                Dafny.ISequence<RAST._IExpr> _1797___mcc_h1292 = _source53.dtor_arguments;
                                return this;
                              } else if (_source53.is_Select) {
                                RAST._IExpr _1798___mcc_h1296 = _source53.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _1799___mcc_h1297 = _source53.dtor_name;
                                return this;
                              } else {
                                RAST._IExpr _1800___mcc_h1300 = _source53.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _1801___mcc_h1301 = _source53.dtor_name;
                                return this;
                              }
                            } else {
                              return this;
                            }
                          } else {
                            return this;
                          }
                        } else {
                          return this;
                        }
                      } else {
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source52.is_Match) {
                    RAST._IExpr _1802___mcc_h1100 = _source52.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _1803___mcc_h1101 = _source52.dtor_cases;
                    return this;
                  } else if (_source52.is_StmtExpr) {
                    RAST._IExpr _1804___mcc_h1104 = _source52.dtor_stmt;
                    RAST._IExpr _1805___mcc_h1105 = _source52.dtor_rhs;
                    return this;
                  } else if (_source52.is_Block) {
                    RAST._IExpr _1806___mcc_h1108 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _1807___mcc_h1110 = _source52.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _1808___mcc_h1111 = _source52.dtor_assignments;
                    return this;
                  } else if (_source52.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _1809___mcc_h1114 = _source52.dtor_arguments;
                    return this;
                  } else if (_source52.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1810___mcc_h1116 = _source52.dtor_op1;
                    RAST._IExpr _1811___mcc_h1117 = _source52.dtor_underlying;
                    DAST.Format._IUnaryOpFormat _1812___mcc_h1118 = _source52.dtor_format;
                    return this;
                  } else if (_source52.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1813___mcc_h1122 = _source52.dtor_op2;
                    RAST._IExpr _1814___mcc_h1123 = _source52.dtor_left;
                    RAST._IExpr _1815___mcc_h1124 = _source52.dtor_right;
                    DAST.Format._IBinaryOpFormat _1816___mcc_h1125 = _source52.dtor_format2;
                    return this;
                  } else if (_source52.is_TypeAscription) {
                    RAST._IExpr _1817___mcc_h1130 = _source52.dtor_left;
                    RAST._IType _1818___mcc_h1131 = _source52.dtor_tpe;
                    return this;
                  } else if (_source52.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _1819___mcc_h1134 = _source52.dtor_value;
                    return this;
                  } else if (_source52.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _1820___mcc_h1136 = _source52.dtor_value;
                    bool _1821___mcc_h1137 = _source52.dtor_binary;
                    return this;
                  } else if (_source52.is_ConversionNum) {
                    RAST._IType _1822___mcc_h1140 = _source52.dtor_tpe;
                    RAST._IExpr _1823___mcc_h1141 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_DeclareVar) {
                    RAST._IDeclareType _1824___mcc_h1144 = _source52.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _1825___mcc_h1145 = _source52.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _1826___mcc_h1146 = _source52.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _1827___mcc_h1147 = _source52.dtor_optRhs;
                    return this;
                  } else if (_source52.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _1828___mcc_h1152 = _source52.dtor_name;
                    RAST._IExpr _1829___mcc_h1153 = _source52.dtor_rhs;
                    return this;
                  } else if (_source52.is_IfExpr) {
                    RAST._IExpr _1830___mcc_h1156 = _source52.dtor_cond;
                    RAST._IExpr _1831___mcc_h1157 = _source52.dtor_thn;
                    RAST._IExpr _1832___mcc_h1158 = _source52.dtor_els;
                    return this;
                  } else if (_source52.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _1833___mcc_h1162 = _source52.dtor_optCond;
                    RAST._IExpr _1834___mcc_h1163 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_For) {
                    Dafny.ISequence<Dafny.Rune> _1835___mcc_h1166 = _source52.dtor_name;
                    RAST._IExpr _1836___mcc_h1167 = _source52.dtor_range;
                    RAST._IExpr _1837___mcc_h1168 = _source52.dtor_body;
                    return this;
                  } else if (_source52.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _1838___mcc_h1172 = _source52.dtor_lbl;
                    RAST._IExpr _1839___mcc_h1173 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1840___mcc_h1176 = _source52.dtor_optLbl;
                    return this;
                  } else if (_source52.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1841___mcc_h1178 = _source52.dtor_optLbl;
                    return this;
                  } else if (_source52.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _1842___mcc_h1180 = _source52.dtor_optExpr;
                    return this;
                  } else if (_source52.is_Call) {
                    RAST._IExpr _1843___mcc_h1182 = _source52.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1844___mcc_h1183 = _source52.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _1845___mcc_h1184 = _source52.dtor_arguments;
                    return this;
                  } else if (_source52.is_Select) {
                    RAST._IExpr _1846___mcc_h1188 = _source52.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1847___mcc_h1189 = _source52.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _1848___mcc_h1192 = _source52.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1849___mcc_h1193 = _source52.dtor_name;
                    return this;
                  }
                }
              }
            }
          } else if (_source48.is_Select) {
            RAST._IExpr _1850___mcc_h1196 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1851___mcc_h1197 = _source48.dtor_name;
            return this;
          } else {
            RAST._IExpr _1852___mcc_h1200 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1853___mcc_h1201 = _source48.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_DeclareVar) {
        RAST._IDeclareType _1854___mcc_h652 = _source35.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1855___mcc_h653 = _source35.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1856___mcc_h654 = _source35.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1857___mcc_h655 = _source35.dtor_optRhs;
        return this;
      } else if (_source35.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1858___mcc_h660 = _source35.dtor_name;
        RAST._IExpr _1859___mcc_h661 = _source35.dtor_rhs;
        return this;
      } else if (_source35.is_IfExpr) {
        RAST._IExpr _1860___mcc_h664 = _source35.dtor_cond;
        RAST._IExpr _1861___mcc_h665 = _source35.dtor_thn;
        RAST._IExpr _1862___mcc_h666 = _source35.dtor_els;
        return this;
      } else if (_source35.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1863___mcc_h670 = _source35.dtor_optCond;
        RAST._IExpr _1864___mcc_h671 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_For) {
        Dafny.ISequence<Dafny.Rune> _1865___mcc_h674 = _source35.dtor_name;
        RAST._IExpr _1866___mcc_h675 = _source35.dtor_range;
        RAST._IExpr _1867___mcc_h676 = _source35.dtor_body;
        return this;
      } else if (_source35.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1868___mcc_h680 = _source35.dtor_lbl;
        RAST._IExpr _1869___mcc_h681 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1870___mcc_h684 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1871___mcc_h686 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1872___mcc_h688 = _source35.dtor_optExpr;
        return this;
      } else if (_source35.is_Call) {
        RAST._IExpr _1873___mcc_h690 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IType> _1874___mcc_h691 = _source35.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1875___mcc_h692 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_Select) {
        RAST._IExpr _1876___mcc_h696 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1877___mcc_h697 = _source35.dtor_name;
        return this;
      } else {
        RAST._IExpr _1878___mcc_h700 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1879___mcc_h701 = _source35.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier() {
      RAST._IExpr _source54 = this;
      if (_source54.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1880___mcc_h0 = _source54.dtor_content;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1881___mcc_h2 = _source54.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Match) {
        RAST._IExpr _1882___mcc_h4 = _source54.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1883___mcc_h5 = _source54.dtor_cases;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_StmtExpr) {
        RAST._IExpr _1884___mcc_h8 = _source54.dtor_stmt;
        RAST._IExpr _1885___mcc_h9 = _source54.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Block) {
        RAST._IExpr _1886___mcc_h12 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1887___mcc_h14 = _source54.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1888___mcc_h15 = _source54.dtor_assignments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1889___mcc_h18 = _source54.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1890___mcc_h20 = _source54.dtor_op1;
        RAST._IExpr _1891___mcc_h21 = _source54.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1892___mcc_h22 = _source54.dtor_format;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1893___mcc_h26 = _source54.dtor_op2;
        RAST._IExpr _1894___mcc_h27 = _source54.dtor_left;
        RAST._IExpr _1895___mcc_h28 = _source54.dtor_right;
        DAST.Format._IBinaryOpFormat _1896___mcc_h29 = _source54.dtor_format2;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_TypeAscription) {
        RAST._IExpr _1897___mcc_h34 = _source54.dtor_left;
        RAST._IType _1898___mcc_h35 = _source54.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1899___mcc_h38 = _source54.dtor_value;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1900___mcc_h40 = _source54.dtor_value;
        bool _1901___mcc_h41 = _source54.dtor_binary;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_ConversionNum) {
        RAST._IType _1902___mcc_h44 = _source54.dtor_tpe;
        RAST._IExpr _1903___mcc_h45 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_DeclareVar) {
        RAST._IDeclareType _1904___mcc_h48 = _source54.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1905___mcc_h49 = _source54.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1906___mcc_h50 = _source54.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1907___mcc_h51 = _source54.dtor_optRhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1908___mcc_h56 = _source54.dtor_name;
        RAST._IExpr _1909___mcc_h57 = _source54.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_IfExpr) {
        RAST._IExpr _1910___mcc_h60 = _source54.dtor_cond;
        RAST._IExpr _1911___mcc_h61 = _source54.dtor_thn;
        RAST._IExpr _1912___mcc_h62 = _source54.dtor_els;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1913___mcc_h66 = _source54.dtor_optCond;
        RAST._IExpr _1914___mcc_h67 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_For) {
        Dafny.ISequence<Dafny.Rune> _1915___mcc_h70 = _source54.dtor_name;
        RAST._IExpr _1916___mcc_h71 = _source54.dtor_range;
        RAST._IExpr _1917___mcc_h72 = _source54.dtor_body;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1918___mcc_h76 = _source54.dtor_lbl;
        RAST._IExpr _1919___mcc_h77 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1920___mcc_h80 = _source54.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1921___mcc_h82 = _source54.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1922___mcc_h84 = _source54.dtor_optExpr;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Call) {
        RAST._IExpr _1923___mcc_h86 = _source54.dtor_obj;
        Dafny.ISequence<RAST._IType> _1924___mcc_h87 = _source54.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1925___mcc_h88 = _source54.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Select) {
        RAST._IExpr _1926___mcc_h92 = _source54.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1927___mcc_h93 = _source54.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else {
        RAST._IExpr _1928___mcc_h96 = _source54.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1929___mcc_h97 = _source54.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1930_id = _1929___mcc_h97;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_1930_id);
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source55 = (this).Optimize();
      if (_source55.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1931___mcc_h0 = _source55.dtor_content;
        RAST._IExpr _1932_r = (this).Optimize();
        return RAST.__default.AddIndent((_1932_r).dtor_content, ind);
      } else if (_source55.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1933___mcc_h2 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1934_name = _1933___mcc_h2;
        return _1934_name;
      } else if (_source55.is_Match) {
        RAST._IExpr _1935___mcc_h4 = _source55.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1936___mcc_h5 = _source55.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _1937_cases = _1936___mcc_h5;
        RAST._IExpr _1938_matchee = _1935___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_1938_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_1937_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_1939_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_1940_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1939_ind), RAST.__default.IND), (_1940_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1939_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_StmtExpr) {
        RAST._IExpr _1941___mcc_h8 = _source55.dtor_stmt;
        RAST._IExpr _1942___mcc_h9 = _source55.dtor_rhs;
        RAST._IExpr _1943_rhs = _1942___mcc_h9;
        RAST._IExpr _1944_stmt = _1941___mcc_h8;
        if (((_1944_stmt).is_RawExpr) && (((_1944_stmt).dtor_content).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_1943_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1944_stmt)._ToString(ind), (((_1944_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_1943_rhs)._ToString(ind));
        }
      } else if (_source55.is_Block) {
        RAST._IExpr _1945___mcc_h12 = _source55.dtor_underlying;
        RAST._IExpr _1946_underlying = _1945___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_1946_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1947___mcc_h14 = _source55.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1948___mcc_h15 = _source55.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1949_assignments = _1948___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _1950_name = _1947___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1950_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_1949_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_1951_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_1952_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1951_ind), RAST.__default.IND), (_1952_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1951_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1949_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1953___mcc_h18 = _source55.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1954_arguments = _1953___mcc_h18;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_1954_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1955_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1956_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1955_ind), RAST.__default.IND), (_1956_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1955_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1954_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source55.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1957___mcc_h20 = _source55.dtor_op1;
        RAST._IExpr _1958___mcc_h21 = _source55.dtor_underlying;
        DAST.Format._IUnaryOpFormat _1959___mcc_h22 = _source55.dtor_format;
        DAST.Format._IUnaryOpFormat _1960_format = _1959___mcc_h22;
        RAST._IExpr _1961_underlying = _1958___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1962_op = _1957___mcc_h20;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_1961_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1963_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1964_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1965_leftOp = ((((_1962_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_1963_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1962_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_1962_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_1962_op))));
        Dafny.ISequence<Dafny.Rune> _1966_rightOp = (((_1962_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_1962_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1965_leftOp, _1963_leftP), (_1961_underlying)._ToString(ind)), _1964_rightP), _1966_rightOp);
      } else if (_source55.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1967___mcc_h26 = _source55.dtor_op2;
        RAST._IExpr _1968___mcc_h27 = _source55.dtor_left;
        RAST._IExpr _1969___mcc_h28 = _source55.dtor_right;
        DAST.Format._IBinaryOpFormat _1970___mcc_h29 = _source55.dtor_format2;
        DAST.Format._IBinaryOpFormat _1971_format = _1970___mcc_h29;
        RAST._IExpr _1972_right = _1969___mcc_h28;
        RAST._IExpr _1973_left = _1968___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1974_op2 = _1967___mcc_h26;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_1973_left);
        Dafny.ISequence<Dafny.Rune> _1975_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1976_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_1972_right);
        Dafny.ISequence<Dafny.Rune> _1977_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1978_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1979_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _1974_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _1980_indLeft = (((_1975_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _1981_indRight = (((_1977_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1975_leftLeftP, (_1973_left)._ToString(_1980_indLeft)), _1976_leftRighP), _1979_opRendered), _1977_rightLeftP), (_1972_right)._ToString(_1981_indRight)), _1978_rightRightP);
      } else if (_source55.is_TypeAscription) {
        RAST._IExpr _1982___mcc_h34 = _source55.dtor_left;
        RAST._IType _1983___mcc_h35 = _source55.dtor_tpe;
        RAST._IType _1984_tpe = _1983___mcc_h35;
        RAST._IExpr _1985_left = _1982___mcc_h34;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_1985_left);
        Dafny.ISequence<Dafny.Rune> _1986_leftLeftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1987_leftRightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1986_leftLeftP, (_1985_left)._ToString(RAST.__default.IND)), _1987_leftRightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_1984_tpe)._ToString(RAST.__default.IND));
      } else if (_source55.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1988___mcc_h38 = _source55.dtor_value;
        Dafny.ISequence<Dafny.Rune> _1989_number = _1988___mcc_h38;
        return _1989_number;
      } else if (_source55.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1990___mcc_h40 = _source55.dtor_value;
        bool _1991___mcc_h41 = _source55.dtor_binary;
        bool _1992_binary = _1991___mcc_h41;
        Dafny.ISequence<Dafny.Rune> _1993_characters = _1990___mcc_h40;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((_1992_binary) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _1993_characters), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source55.is_ConversionNum) {
        RAST._IType _1994___mcc_h44 = _source55.dtor_tpe;
        RAST._IExpr _1995___mcc_h45 = _source55.dtor_underlying;
        RAST._IExpr _1996_expr = _1995___mcc_h45;
        RAST._IType _1997_tpe = _1994___mcc_h44;
        if (((((((((((_1997_tpe).is_U8) || ((_1997_tpe).is_U16)) || ((_1997_tpe).is_U32)) || ((_1997_tpe).is_U64)) || ((_1997_tpe).is_U128)) || ((_1997_tpe).is_I8)) || ((_1997_tpe).is_I16)) || ((_1997_tpe).is_I32)) || ((_1997_tpe).is_I64)) || ((_1997_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_1997_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1996_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_1997_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source55.is_DeclareVar) {
        RAST._IDeclareType _1998___mcc_h48 = _source55.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1999___mcc_h49 = _source55.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2000___mcc_h50 = _source55.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2001___mcc_h51 = _source55.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _2002_optExpr = _2001___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _2003_optType = _2000___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _2004_name = _1999___mcc_h49;
        RAST._IDeclareType _2005_declareType = _1998___mcc_h48;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_2005_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2004_name), (((_2003_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_2003_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_2002_optExpr).is_Some) ? (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(((_2002_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)), _pat_let6_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let6_0, _2006_optExprString => (((_2006_optExprString).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("= /*issue with empty RHS*/"), ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_source56) => {
          if (_source56.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2007___mcc_h100 = _source56.dtor_content;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty Raw expr");
          } else if (_source56.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2008___mcc_h102 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Match) {
            RAST._IExpr _2009___mcc_h104 = _source56.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2010___mcc_h105 = _source56.dtor_cases;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_StmtExpr) {
            RAST._IExpr _2011___mcc_h108 = _source56.dtor_stmt;
            RAST._IExpr _2012___mcc_h109 = _source56.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Block) {
            RAST._IExpr _2013___mcc_h112 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _2014___mcc_h114 = _source56.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _2015___mcc_h115 = _source56.dtor_assignments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2016___mcc_h118 = _source56.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2017___mcc_h120 = _source56.dtor_op1;
            RAST._IExpr _2018___mcc_h121 = _source56.dtor_underlying;
            DAST.Format._IUnaryOpFormat _2019___mcc_h122 = _source56.dtor_format;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2020___mcc_h126 = _source56.dtor_op2;
            RAST._IExpr _2021___mcc_h127 = _source56.dtor_left;
            RAST._IExpr _2022___mcc_h128 = _source56.dtor_right;
            DAST.Format._IBinaryOpFormat _2023___mcc_h129 = _source56.dtor_format2;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_TypeAscription) {
            RAST._IExpr _2024___mcc_h134 = _source56.dtor_left;
            RAST._IType _2025___mcc_h135 = _source56.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2026___mcc_h138 = _source56.dtor_value;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty int literal");
          } else if (_source56.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2027___mcc_h140 = _source56.dtor_value;
            bool _2028___mcc_h141 = _source56.dtor_binary;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty string literal");
          } else if (_source56.is_ConversionNum) {
            RAST._IType _2029___mcc_h144 = _source56.dtor_tpe;
            RAST._IExpr _2030___mcc_h145 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_DeclareVar) {
            RAST._IDeclareType _2031___mcc_h148 = _source56.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2032___mcc_h149 = _source56.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2033___mcc_h150 = _source56.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2034___mcc_h151 = _source56.dtor_optRhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2035___mcc_h156 = _source56.dtor_name;
            RAST._IExpr _2036___mcc_h157 = _source56.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_IfExpr) {
            RAST._IExpr _2037___mcc_h160 = _source56.dtor_cond;
            RAST._IExpr _2038___mcc_h161 = _source56.dtor_thn;
            RAST._IExpr _2039___mcc_h162 = _source56.dtor_els;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2040___mcc_h166 = _source56.dtor_optCond;
            RAST._IExpr _2041___mcc_h167 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_For) {
            Dafny.ISequence<Dafny.Rune> _2042___mcc_h170 = _source56.dtor_name;
            RAST._IExpr _2043___mcc_h171 = _source56.dtor_range;
            RAST._IExpr _2044___mcc_h172 = _source56.dtor_body;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2045___mcc_h176 = _source56.dtor_lbl;
            RAST._IExpr _2046___mcc_h177 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2047___mcc_h180 = _source56.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2048___mcc_h182 = _source56.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2049___mcc_h184 = _source56.dtor_optExpr;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Call) {
            RAST._IExpr _2050___mcc_h186 = _source56.dtor_obj;
            Dafny.ISequence<RAST._IType> _2051___mcc_h187 = _source56.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _2052___mcc_h188 = _source56.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Select) {
            RAST._IExpr _2053___mcc_h192 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2054___mcc_h193 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else {
            RAST._IExpr _2055___mcc_h196 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2056___mcc_h197 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          }
        }))((_2002_optExpr).dtor_value))) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), _2006_optExprString)))))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2057___mcc_h56 = _source55.dtor_name;
        RAST._IExpr _2058___mcc_h57 = _source55.dtor_rhs;
        RAST._IExpr _2059_expr = _2058___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _2060_name = _2057___mcc_h56;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2060_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_2059_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_IfExpr) {
        RAST._IExpr _2061___mcc_h60 = _source55.dtor_cond;
        RAST._IExpr _2062___mcc_h61 = _source55.dtor_thn;
        RAST._IExpr _2063___mcc_h62 = _source55.dtor_els;
        RAST._IExpr _2064_els = _2063___mcc_h62;
        RAST._IExpr _2065_thn = _2062___mcc_h61;
        RAST._IExpr _2066_cond = _2061___mcc_h60;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_2066_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2065_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} else {\n")), ind), RAST.__default.IND), (_2064_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2067___mcc_h66 = _source55.dtor_optCond;
        RAST._IExpr _2068___mcc_h67 = _source55.dtor_underlying;
        RAST._IExpr _2069_underlying = _2068___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _2070_optCond = _2067___mcc_h66;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source57) => {
          if (_source57.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _2071___mcc_h200 = _source57.dtor_value;
            RAST._IExpr _2072_c = _2071___mcc_h200;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_2072_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_2070_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2069_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_For) {
        Dafny.ISequence<Dafny.Rune> _2073___mcc_h70 = _source55.dtor_name;
        RAST._IExpr _2074___mcc_h71 = _source55.dtor_range;
        RAST._IExpr _2075___mcc_h72 = _source55.dtor_body;
        RAST._IExpr _2076_body = _2075___mcc_h72;
        RAST._IExpr _2077_range = _2074___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _2078_name = _2073___mcc_h70;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _2078_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_2077_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2076_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2079___mcc_h76 = _source55.dtor_lbl;
        RAST._IExpr _2080___mcc_h77 = _source55.dtor_underlying;
        RAST._IExpr _2081_underlying = _2080___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _2082_name = _2079___mcc_h76;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _2082_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_2081_underlying)._ToString(ind));
      } else if (_source55.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2083___mcc_h80 = _source55.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2084_optLbl = _2083___mcc_h80;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source58 = _2084_optLbl;
        if (_source58.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2085___mcc_h201 = _source58.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2086_lbl = _2085___mcc_h201;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _2086_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source55.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2087___mcc_h82 = _source55.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2088_optLbl = _2087___mcc_h82;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source59 = _2088_optLbl;
        if (_source59.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2089___mcc_h202 = _source59.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2090_lbl = _2089___mcc_h202;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _2090_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source55.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2091___mcc_h84 = _source55.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _2092_optExpr = _2091___mcc_h84;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_2092_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_2092_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_Call) {
        RAST._IExpr _2093___mcc_h86 = _source55.dtor_obj;
        Dafny.ISequence<RAST._IType> _2094___mcc_h87 = _source55.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _2095___mcc_h88 = _source55.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2096_args = _2095___mcc_h88;
        Dafny.ISequence<RAST._IType> _2097_tpes = _2094___mcc_h87;
        RAST._IExpr _2098_expr = _2093___mcc_h86;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_2098_expr);
        Dafny.ISequence<Dafny.Rune> _2099_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2100_rightP = _let_tmp_rhs45.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>)((_source60) => {
          if (_source60.is_None) {
            return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _2101___mcc_h203 = _source60.dtor_value;
            if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else if (object.Equals(_2101___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        }))((_2098_expr).RightMostIdentifier());
        Dafny.ISequence<Dafny.Rune> _2102_leftCallP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2103_rightCallP = _let_tmp_rhs46.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2099_leftP, (_2098_expr)._ToString(ind)), _2100_rightP), (((new BigInteger((_2097_tpes).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"), RAST.__default.SeqToString<RAST._IType>(_2097_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_2104_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_2105_tpe) => {
          return (_2105_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2104_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))), _2102_leftCallP), RAST.__default.SeqToString<RAST._IExpr>(_2096_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2106_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2107_arg) => {
          return (_2107_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2106_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), _2103_rightCallP);
      } else if (_source55.is_Select) {
        RAST._IExpr _2108___mcc_h92 = _source55.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2109___mcc_h93 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2110_name = _2109___mcc_h93;
        RAST._IExpr _2111_expression = _2108___mcc_h92;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs47 = (this).LeftParentheses(_2111_expression);
        Dafny.ISequence<Dafny.Rune> _2112_leftP = _let_tmp_rhs47.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2113_rightP = _let_tmp_rhs47.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2112_leftP, (_2111_expression)._ToString(ind)), _2113_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2110_name);
      } else {
        RAST._IExpr _2114___mcc_h96 = _source55.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2115___mcc_h97 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2116_name = _2115___mcc_h97;
        RAST._IExpr _2117_expression = _2114___mcc_h96;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs48 = (this).LeftParentheses(_2117_expression);
        Dafny.ISequence<Dafny.Rune> _2118_leftP = _let_tmp_rhs48.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2119_rightP = _let_tmp_rhs48.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2118_leftP, (_2117_expression)._ToString(ind)), _2119_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2116_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_Select(this, name);
    }
    public RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_MemberSelect(this, name);
    }
    public RAST._IExpr Apply(Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments)
    {
      return RAST.Expr.create_Call(this, typeParameters, arguments);
    }
    public RAST._IExpr Apply1(RAST._IExpr argument) {
      return RAST.Expr.create_Call(this, Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(argument));
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source61 = this;
      if (_source61.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2120___mcc_h0 = _source61.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2121___mcc_h2 = _source61.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_Match) {
        RAST._IExpr _2122___mcc_h4 = _source61.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2123___mcc_h5 = _source61.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_StmtExpr) {
        RAST._IExpr _2124___mcc_h8 = _source61.dtor_stmt;
        RAST._IExpr _2125___mcc_h9 = _source61.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Block) {
        RAST._IExpr _2126___mcc_h12 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _2127___mcc_h14 = _source61.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _2128___mcc_h15 = _source61.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2129___mcc_h18 = _source61.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2130___mcc_h20 = _source61.dtor_op1;
        RAST._IExpr _2131___mcc_h21 = _source61.dtor_underlying;
        DAST.Format._IUnaryOpFormat _2132___mcc_h22 = _source61.dtor_format;
        DAST.Format._IUnaryOpFormat _2133_format = _2132___mcc_h22;
        RAST._IExpr _2134_underlying = _2131___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2135_op = _2130___mcc_h20;
        if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2135_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source61.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2136___mcc_h26 = _source61.dtor_op2;
        RAST._IExpr _2137___mcc_h27 = _source61.dtor_left;
        RAST._IExpr _2138___mcc_h28 = _source61.dtor_right;
        DAST.Format._IBinaryOpFormat _2139___mcc_h29 = _source61.dtor_format2;
        DAST.Format._IBinaryOpFormat _2140_format = _2139___mcc_h29;
        RAST._IExpr _2141_right = _2138___mcc_h28;
        RAST._IExpr _2142_left = _2137___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2143_op2 = _2136___mcc_h26;
        if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2143_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source61.is_TypeAscription) {
        RAST._IExpr _2144___mcc_h34 = _source61.dtor_left;
        RAST._IType _2145___mcc_h35 = _source61.dtor_tpe;
        RAST._IType _2146_tpe = _2145___mcc_h35;
        RAST._IExpr _2147_left = _2144___mcc_h34;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2148___mcc_h38 = _source61.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2149___mcc_h40 = _source61.dtor_value;
        bool _2150___mcc_h41 = _source61.dtor_binary;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_ConversionNum) {
        RAST._IType _2151___mcc_h44 = _source61.dtor_tpe;
        RAST._IExpr _2152___mcc_h45 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_DeclareVar) {
        RAST._IDeclareType _2153___mcc_h48 = _source61.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2154___mcc_h49 = _source61.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2155___mcc_h50 = _source61.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2156___mcc_h51 = _source61.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2157___mcc_h56 = _source61.dtor_name;
        RAST._IExpr _2158___mcc_h57 = _source61.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_IfExpr) {
        RAST._IExpr _2159___mcc_h60 = _source61.dtor_cond;
        RAST._IExpr _2160___mcc_h61 = _source61.dtor_thn;
        RAST._IExpr _2161___mcc_h62 = _source61.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2162___mcc_h66 = _source61.dtor_optCond;
        RAST._IExpr _2163___mcc_h67 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_For) {
        Dafny.ISequence<Dafny.Rune> _2164___mcc_h70 = _source61.dtor_name;
        RAST._IExpr _2165___mcc_h71 = _source61.dtor_range;
        RAST._IExpr _2166___mcc_h72 = _source61.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2167___mcc_h76 = _source61.dtor_lbl;
        RAST._IExpr _2168___mcc_h77 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2169___mcc_h80 = _source61.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2170___mcc_h82 = _source61.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2171___mcc_h84 = _source61.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Call) {
        RAST._IExpr _2172___mcc_h86 = _source61.dtor_obj;
        Dafny.ISequence<RAST._IType> _2173___mcc_h87 = _source61.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _2174___mcc_h88 = _source61.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_Select) {
        RAST._IExpr _2175___mcc_h92 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2176___mcc_h93 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2177_name = _2176___mcc_h93;
        RAST._IExpr _2178_underlying = _2175___mcc_h92;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _2179___mcc_h96 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2180___mcc_h97 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2181_name = _2180___mcc_h97;
        RAST._IExpr _2182_underlying = _2179___mcc_h96;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnaryOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnaryOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinaryOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinaryOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_TypeAscription : Expr {
    public readonly RAST._IExpr _left;
    public readonly RAST._IType _tpe;
    public Expr_TypeAscription(RAST._IExpr left, RAST._IType tpe) : base() {
      this._left = left;
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_TypeAscription(_left, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_TypeAscription;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.TypeAscription";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralString : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public readonly bool _binary;
    public Expr_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) : base() {
      this._value = @value;
      this._binary = binary;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralString(_value, _binary);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralString;
      return oth != null && object.Equals(this._value, oth._value) && this._binary == oth._binary;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._binary));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralString";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._binary);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _typeParameters, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_2183_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_2184_formal) => {
        return (_2184_formal)._ToString(_2183_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source62) => {
        if (_source62.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _2185___mcc_h0 = _source62.dtor_value;
          RAST._IType _2186_t = _2185___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_2186_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source63) => {
        if (_source63.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _2187___mcc_h2 = _source63.dtor_value;
          RAST._IExpr _2188_body = _2187___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_2188_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2189___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2189___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2189___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2189___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2189___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2189___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2190___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2190___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2190___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2190___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2190___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2190___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2191_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2191_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMP.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _2192_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _2192_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _2192_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _2193_i;
      _2193_i = BigInteger.Zero;
      while ((_2193_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _2194_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source64 = (body).Select(_2193_i);
        if (_source64.is_Module) {
          DAST._IModule _2195___mcc_h0 = _source64.dtor_Module_a0;
          DAST._IModule _2196_m = _2195___mcc_h0;
          RAST._IMod _2197_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_2196_m, containingPath);
          _2197_mm = _out16;
          _2194_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2197_mm));
        } else if (_source64.is_Class) {
          DAST._IClass _2198___mcc_h1 = _source64.dtor_Class_a0;
          DAST._IClass _2199_c = _2198___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_2199_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2199_c).dtor_name)));
          _2194_generated = _out17;
        } else if (_source64.is_Trait) {
          DAST._ITrait _2200___mcc_h2 = _source64.dtor_Trait_a0;
          DAST._ITrait _2201_t = _2200___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2202_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_2201_t, containingPath);
          _2202_tt = _out18;
          _2194_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2202_tt));
        } else if (_source64.is_Newtype) {
          DAST._INewtype _2203___mcc_h3 = _source64.dtor_Newtype_a0;
          DAST._INewtype _2204_n = _2203___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_2204_n);
          _2194_generated = _out19;
        } else {
          DAST._IDatatype _2205___mcc_h4 = _source64.dtor_Datatype_a0;
          DAST._IDatatype _2206_d = _2205___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_2206_d);
          _2194_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2194_generated);
        _2193_i = (_2193_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _2207_tpI;
      _2207_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_2207_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _2208_tp;
          _2208_tp = (@params).Select(_2207_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2208_tp));
          RAST._IType _2209_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_2208_tp, false, false);
          _2209_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2209_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _2207_tpI = (_2207_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _2210_baseConstraints;
      _2210_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _2210_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2211_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2212_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2213_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2214_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _2211_typeParamsSet = _out22;
      _2212_sTypeParams = _out23;
      _2213_sConstrainedTypeParams = _out24;
      _2214_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _2215_constrainedTypeParams;
      _2215_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2213_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _2216_fields;
      _2216_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2217_fieldInits;
      _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _2218_fieldI;
      _2218_fieldI = BigInteger.Zero;
      while ((_2218_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _2219_field;
        _2219_field = ((c).dtor_fields).Select(_2218_fieldI);
        RAST._IType _2220_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_2219_field).dtor_formal).dtor_typ, false, false);
        _2220_fieldType = _out26;
        _2216_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2216_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_2219_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_2220_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source65 = (_2219_field).dtor_defaultValue;
        if (_source65.is_None) {
          {
            _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2217_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2219_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _2221___mcc_h0 = _source65.dtor_value;
          DAST._IExpression _2222_e = _2221___mcc_h0;
          {
            RAST._IExpr _2223_eStr;
            DCOMP._IOwnership _2224___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2225___v36;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_2222_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _2223_eStr = _out27;
            _2224___v35 = _out28;
            _2225___v36 = _out29;
            _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2217_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2219_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_2223_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _2218_fieldI = (_2218_fieldI) + (BigInteger.One);
      }
      BigInteger _2226_typeParamI;
      _2226_typeParamI = BigInteger.Zero;
      while ((_2226_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _2227_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2226_typeParamI), false, false);
        _2227_tpeGen = _out30;
        _2216_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2216_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2226_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2227_tpeGen)))));
        _2217_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2217_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2226_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _2226_typeParamI = (_2226_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _2228_struct;
      _2228_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _2212_sTypeParams, RAST.Formals.create_NamedFormals(_2216_fields));
      Dafny.ISequence<RAST._IType> _2229_typeParamsAsTypes;
      _2229_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2230_typeParam) => {
        return RAST.__default.RawType((_2230_typeParam).dtor_content);
      })), _2212_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2228_struct));
      Dafny.ISequence<RAST._IImplMember> _2231_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2232_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _2211_typeParamsSet, out _out31, out _out32);
      _2231_implBodyRaw = _out31;
      _2232_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _2233_implBody;
      _2233_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _2217_fieldInits))))), _2231_implBodyRaw);
      RAST._IImpl _2234_i;
      _2234_i = RAST.Impl.create_Impl(_2213_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), _2214_whereConstraints, _2233_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2234_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2235_i;
        _2235_i = BigInteger.Zero;
        while ((_2235_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2236_superClass;
          _2236_superClass = ((c).dtor_superClasses).Select(_2235_i);
          DAST._IType _source66 = _2236_superClass;
          if (_source66.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2237___mcc_h1 = _source66.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2238___mcc_h2 = _source66.dtor_typeArgs;
            DAST._IResolvedType _2239___mcc_h3 = _source66.dtor_resolved;
            DAST._IResolvedType _source67 = _2239___mcc_h3;
            if (_source67.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2240___mcc_h7 = _source67.dtor_path;
            } else if (_source67.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2241___mcc_h9 = _source67.dtor_path;
              Dafny.ISequence<DAST._IType> _2242_typeArgs = _2238___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2243_traitPath = _2237___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _2244_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_2243_traitPath);
                _2244_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _2245_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_2242_typeArgs, false, false);
                _2245_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _2246_body;
                _2246_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2232_traitBodies).Contains(_2243_traitPath)) {
                  _2246_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2232_traitBodies,_2243_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _2247_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _2247_genSelfPath = _out35;
                RAST._IModDecl _2248_x;
                _2248_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2213_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2244_pathStr), _2245_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2247_genSelfPath), _2229_typeParamsAsTypes)), _2214_whereConstraints, _2246_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2248_x));
              }
            } else {
              DAST._IType _2249___mcc_h11 = _source67.dtor_baseType;
              DAST._INewtypeRange _2250___mcc_h12 = _source67.dtor_range;
              bool _2251___mcc_h13 = _source67.dtor_erase;
            }
          } else if (_source66.is_Nullable) {
            DAST._IType _2252___mcc_h17 = _source66.dtor_Nullable_a0;
          } else if (_source66.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2253___mcc_h19 = _source66.dtor_Tuple_a0;
          } else if (_source66.is_Array) {
            DAST._IType _2254___mcc_h21 = _source66.dtor_element;
            BigInteger _2255___mcc_h22 = _source66.dtor_dims;
          } else if (_source66.is_Seq) {
            DAST._IType _2256___mcc_h25 = _source66.dtor_element;
          } else if (_source66.is_Set) {
            DAST._IType _2257___mcc_h27 = _source66.dtor_element;
          } else if (_source66.is_Multiset) {
            DAST._IType _2258___mcc_h29 = _source66.dtor_element;
          } else if (_source66.is_Map) {
            DAST._IType _2259___mcc_h31 = _source66.dtor_key;
            DAST._IType _2260___mcc_h32 = _source66.dtor_value;
          } else if (_source66.is_SetBuilder) {
            DAST._IType _2261___mcc_h35 = _source66.dtor_element;
          } else if (_source66.is_MapBuilder) {
            DAST._IType _2262___mcc_h37 = _source66.dtor_key;
            DAST._IType _2263___mcc_h38 = _source66.dtor_value;
          } else if (_source66.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2264___mcc_h41 = _source66.dtor_args;
            DAST._IType _2265___mcc_h42 = _source66.dtor_result;
          } else if (_source66.is_Primitive) {
            DAST._IPrimitive _2266___mcc_h45 = _source66.dtor_Primitive_a0;
          } else if (_source66.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2267___mcc_h47 = _source66.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2268___mcc_h49 = _source66.dtor_TypeArg_a0;
          }
          _2235_i = (_2235_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _2269_d;
      _2269_d = RAST.Impl.create_ImplFor(_2213_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), _2214_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _2270_defaultImpl;
      _2270_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2269_d));
      RAST._IImpl _2271_p;
      _2271_p = RAST.Impl.create_ImplFor(_2213_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _2272_printImpl;
      _2272_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2271_p));
      RAST._IImpl _2273_pp;
      _2273_pp = RAST.Impl.create_ImplFor(_2212_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2229_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _2274_ptrPartialEqImpl;
      _2274_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2273_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _2270_defaultImpl), _2272_printImpl), _2274_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2275_typeParamsSet;
      _2275_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _2276_typeParams;
      _2276_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2277_tpI;
      _2277_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2277_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _2278_tp;
          _2278_tp = ((t).dtor_typeParams).Select(_2277_tpI);
          _2275_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2275_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2278_tp));
          RAST._IType _2279_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_2278_tp, false, false);
          _2279_genTp = _out36;
          _2276_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2276_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2279_genTp));
          _2277_tpI = (_2277_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2280_fullPath;
      _2280_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2281_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2282___v39;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2280_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2280_fullPath)), _2275_typeParamsSet, out _out37, out _out38);
      _2281_implBody = _out37;
      _2282___v39 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((t).dtor_name)), _2276_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2281_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2283_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2284_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2285_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2286_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _2283_typeParamsSet = _out39;
      _2284_sTypeParams = _out40;
      _2285_sConstrainedTypeParams = _out41;
      _2286_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _2287_typeParamsAsTypes;
      _2287_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2288_t) => {
        return RAST.__default.RawType((_2288_t).dtor_content);
      })), _2284_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2289_constrainedTypeParams;
      _2289_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2285_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2290_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source68 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source68.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _2290_underlyingType = _out43;
      } else {
        RAST._IType _2291___mcc_h0 = _source68.dtor_value;
        RAST._IType _2292_v = _2291___mcc_h0;
        _2290_underlyingType = _2292_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _2284_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _2290_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _2293_fnBody;
      _2293_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source69 = (c).dtor_witnessExpr;
      if (_source69.is_None) {
        {
          _2293_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _2294___mcc_h1 = _source69.dtor_value;
        DAST._IExpression _2295_e = _2294___mcc_h1;
        {
          RAST._IExpr _2296_eStr;
          DCOMP._IOwnership _2297___v40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2298___v41;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_2295_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _2296_eStr = _out44;
          _2297___v40 = _out45;
          _2298___v41 = _out46;
          _2293_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2296_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _2299_body;
      _2299_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_2293_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2285_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2287_typeParamsAsTypes), _2286_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2299_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2285_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2287_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2285_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2287_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2290_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2300_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2301_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2302_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2303_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2300_typeParamsSet = _out47;
      _2301_sTypeParams = _out48;
      _2302_sConstrainedTypeParams = _out49;
      _2303_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _2304_typeParamsAsTypes;
      _2304_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2305_t) => {
        return RAST.__default.RawType((_2305_t).dtor_content);
      })), _2301_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2306_constrainedTypeParams;
      _2306_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2302_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _2307_ctors;
      _2307_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _2308_i;
      _2308_i = BigInteger.Zero;
      while ((_2308_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2309_ctor;
        _2309_ctor = ((c).dtor_ctors).Select(_2308_i);
        Dafny.ISequence<RAST._IFormal> _2310_ctorArgs;
        _2310_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _2311_j;
        _2311_j = BigInteger.Zero;
        while ((_2311_j) < (new BigInteger(((_2309_ctor).dtor_args).Count))) {
          DAST._IFormal _2312_formal;
          _2312_formal = ((_2309_ctor).dtor_args).Select(_2311_j);
          RAST._IType _2313_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_2312_formal).dtor_typ, false, false);
          _2313_formalType = _out51;
          if ((c).dtor_isCo) {
            _2310_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2310_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2312_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2313_formalType)))));
          } else {
            _2310_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2310_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2312_formal).dtor_name), _2313_formalType)));
          }
          _2311_j = (_2311_j) + (BigInteger.One);
        }
        _2307_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2307_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_2309_ctor).dtor_name), RAST.Formals.create_NamedFormals(_2310_ctorArgs))));
        _2308_i = (_2308_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2314_selfPath;
      _2314_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2315_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2316_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_2314_selfPath)), _2300_typeParamsSet, out _out52, out _out53);
      _2315_implBodyRaw = _out52;
      _2316_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _2317_implBody;
      _2317_implBody = _2315_implBodyRaw;
      _2308_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2318_emittedFields;
      _2318_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_2308_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2319_ctor;
        _2319_ctor = ((c).dtor_ctors).Select(_2308_i);
        BigInteger _2320_j;
        _2320_j = BigInteger.Zero;
        while ((_2320_j) < (new BigInteger(((_2319_ctor).dtor_args).Count))) {
          DAST._IFormal _2321_formal;
          _2321_formal = ((_2319_ctor).dtor_args).Select(_2320_j);
          if (!((_2318_emittedFields).Contains((_2321_formal).dtor_name))) {
            _2318_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2318_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2321_formal).dtor_name));
            RAST._IType _2322_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_2321_formal).dtor_typ, false, false);
            _2322_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _2323_cases;
            _2323_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _2324_k;
            _2324_k = BigInteger.Zero;
            while ((_2324_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _2325_ctor2;
              _2325_ctor2 = ((c).dtor_ctors).Select(_2324_k);
              Dafny.ISequence<Dafny.Rune> _2326_pattern;
              _2326_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2325_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2327_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _2328_l;
              _2328_l = BigInteger.Zero;
              bool _2329_hasMatchingField;
              _2329_hasMatchingField = false;
              while ((_2328_l) < (new BigInteger(((_2325_ctor2).dtor_args).Count))) {
                DAST._IFormal _2330_formal2;
                _2330_formal2 = ((_2325_ctor2).dtor_args).Select(_2328_l);
                if (((_2321_formal).dtor_name).Equals((_2330_formal2).dtor_name)) {
                  _2329_hasMatchingField = true;
                }
                _2326_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2326_pattern, DCOMP.__default.escapeIdent((_2330_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _2328_l = (_2328_l) + (BigInteger.One);
              }
              _2326_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2326_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2329_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2327_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_2321_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2327_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2321_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2327_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2331_ctorMatch;
              _2331_ctorMatch = RAST.MatchCase.create(_2326_pattern, RAST.Expr.create_RawExpr(_2327_rhs));
              _2323_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2323_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2331_ctorMatch));
              _2324_k = (_2324_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2323_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2323_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2332_methodBody;
            _2332_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _2323_cases);
            _2317_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2317_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_2321_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2322_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2332_methodBody)))));
          }
          _2320_j = (_2320_j) + (BigInteger.One);
        }
        _2308_i = (_2308_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _2333_typeI;
        _2333_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _2334_types;
        _2334_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_2333_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _2335_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2333_typeI), false, false);
          _2335_genTp = _out55;
          _2334_types = Dafny.Sequence<RAST._IType>.Concat(_2334_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_2335_genTp))));
          _2333_typeI = (_2333_typeI) + (BigInteger.One);
        }
        _2307_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2307_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_2336_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _2336_tpe);
})), _2334_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2337_enumBody;
      _2337_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _2301_sTypeParams, _2307_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2302_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2304_typeParamsAsTypes), _2303_whereConstraints, _2317_implBody)));
      _2308_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _2338_printImplBodyCases;
      _2338_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_2308_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2339_ctor;
        _2339_ctor = ((c).dtor_ctors).Select(_2308_i);
        Dafny.ISequence<Dafny.Rune> _2340_ctorMatch;
        _2340_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2339_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2341_modulePrefix;
        _2341_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2342_printRhs;
        _2342_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2341_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_2339_ctor).dtor_name)), (((_2339_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _2343_j;
        _2343_j = BigInteger.Zero;
        while ((_2343_j) < (new BigInteger(((_2339_ctor).dtor_args).Count))) {
          DAST._IFormal _2344_formal;
          _2344_formal = ((_2339_ctor).dtor_args).Select(_2343_j);
          _2340_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2340_ctorMatch, DCOMP.__default.escapeIdent((_2344_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_2343_j).Sign == 1) {
            _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_2344_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _2343_j = (_2343_j) + (BigInteger.One);
        }
        _2340_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2340_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2339_ctor).dtor_hasAnyArgs) {
          _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2342_printRhs = (_2342_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2338_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2338_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2340_ctorMatch), RAST.Expr.create_Block(_2342_printRhs))));
        _2308_i = (_2308_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2338_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2338_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _2345_printImplBody;
      _2345_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _2338_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2346_printImpl;
      _2346_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2302_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2304_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2345_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2347_defaultImpl;
      _2347_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _2308_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _2348_structName;
        _2348_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2349_structAssignments;
        _2349_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_2308_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _2350_formal;
          _2350_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2308_i);
          _2349_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2349_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_2350_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _2308_i = (_2308_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _2351_defaultConstrainedTypeParams;
        _2351_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_2301_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _2347_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2351_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2304_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2348_structName, _2349_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2337_enumBody, _2346_printImpl), _2347_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _2352_i;
        _2352_i = BigInteger.Zero;
        while ((_2352_i) < (new BigInteger((p).Count))) {
          if ((_2352_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_2352_i))));
          _2352_i = (_2352_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2353_i;
        _2353_i = BigInteger.Zero;
        while ((_2353_i) < (new BigInteger((args).Count))) {
          RAST._IType _2354_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_2353_i), inBinding, inFn);
          _2354_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2354_genTp));
          _2353_i = (_2353_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source70 = c;
      if (_source70.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2355___mcc_h0 = _source70.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _2356___mcc_h1 = _source70.dtor_typeArgs;
        DAST._IResolvedType _2357___mcc_h2 = _source70.dtor_resolved;
        DAST._IResolvedType _2358_resolved = _2357___mcc_h2;
        Dafny.ISequence<DAST._IType> _2359_args = _2356___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2360_p = _2355___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _2361_t;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenPath(_2360_p);
          _2361_t = _out57;
          s = RAST.Type.create_TIdentifier(_2361_t);
          Dafny.ISequence<RAST._IType> _2362_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_2359_args, inBinding, inFn);
          _2362_typeArgs = _out58;
          s = RAST.Type.create_TypeApp(s, _2362_typeArgs);
          DAST._IResolvedType _source71 = _2358_resolved;
          if (_source71.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2363___mcc_h21 = _source71.dtor_path;
            {
              s = RAST.__default.Rc(s);
            }
          } else if (_source71.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2364___mcc_h22 = _source71.dtor_path;
            {
              if ((_2360_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>"));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _2365___mcc_h23 = _source71.dtor_baseType;
            DAST._INewtypeRange _2366___mcc_h24 = _source71.dtor_range;
            bool _2367___mcc_h25 = _source71.dtor_erase;
            bool _2368_erased = _2367___mcc_h25;
            DAST._INewtypeRange _2369_range = _2366___mcc_h24;
            DAST._IType _2370_t = _2365___mcc_h23;
            {
              if (_2368_erased) {
                Std.Wrappers._IOption<RAST._IType> _source72 = DCOMP.COMP.NewtypeToRustType(_2370_t, _2369_range);
                if (_source72.is_None) {
                } else {
                  RAST._IType _2371___mcc_h26 = _source72.dtor_value;
                  RAST._IType _2372_v = _2371___mcc_h26;
                  s = _2372_v;
                }
              }
            }
          }
        }
      } else if (_source70.is_Nullable) {
        DAST._IType _2373___mcc_h3 = _source70.dtor_Nullable_a0;
        DAST._IType _2374_inner = _2373___mcc_h3;
        {
          RAST._IType _2375_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_2374_inner, inBinding, inFn);
          _2375_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2375_innerExpr));
        }
      } else if (_source70.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2376___mcc_h4 = _source70.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _2377_types = _2376___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2378_args;
          _2378_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2379_i;
          _2379_i = BigInteger.Zero;
          while ((_2379_i) < (new BigInteger((_2377_types).Count))) {
            RAST._IType _2380_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_2377_types).Select(_2379_i), inBinding, inFn);
            _2380_generated = _out60;
            _2378_args = Dafny.Sequence<RAST._IType>.Concat(_2378_args, Dafny.Sequence<RAST._IType>.FromElements(_2380_generated));
            _2379_i = (_2379_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2378_args);
        }
      } else if (_source70.is_Array) {
        DAST._IType _2381___mcc_h5 = _source70.dtor_element;
        BigInteger _2382___mcc_h6 = _source70.dtor_dims;
        BigInteger _2383_dims = _2382___mcc_h6;
        DAST._IType _2384_element = _2381___mcc_h5;
        {
          RAST._IType _2385_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_2384_element, inBinding, inFn);
          _2385_elem = _out61;
          s = _2385_elem;
          BigInteger _2386_i;
          _2386_i = BigInteger.Zero;
          while ((_2386_i) < (_2383_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _2386_i = (_2386_i) + (BigInteger.One);
          }
        }
      } else if (_source70.is_Seq) {
        DAST._IType _2387___mcc_h7 = _source70.dtor_element;
        DAST._IType _2388_element = _2387___mcc_h7;
        {
          RAST._IType _2389_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_2388_element, inBinding, inFn);
          _2389_elem = _out62;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2389_elem));
        }
      } else if (_source70.is_Set) {
        DAST._IType _2390___mcc_h8 = _source70.dtor_element;
        DAST._IType _2391_element = _2390___mcc_h8;
        {
          RAST._IType _2392_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_2391_element, inBinding, inFn);
          _2392_elem = _out63;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2392_elem));
        }
      } else if (_source70.is_Multiset) {
        DAST._IType _2393___mcc_h9 = _source70.dtor_element;
        DAST._IType _2394_element = _2393___mcc_h9;
        {
          RAST._IType _2395_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_2394_element, inBinding, inFn);
          _2395_elem = _out64;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2395_elem));
        }
      } else if (_source70.is_Map) {
        DAST._IType _2396___mcc_h10 = _source70.dtor_key;
        DAST._IType _2397___mcc_h11 = _source70.dtor_value;
        DAST._IType _2398_value = _2397___mcc_h11;
        DAST._IType _2399_key = _2396___mcc_h10;
        {
          RAST._IType _2400_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_2399_key, inBinding, inFn);
          _2400_keyType = _out65;
          RAST._IType _2401_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_2398_value, inBinding, inFn);
          _2401_valueType = _out66;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2400_keyType, _2401_valueType));
        }
      } else if (_source70.is_SetBuilder) {
        DAST._IType _2402___mcc_h12 = _source70.dtor_element;
        DAST._IType _2403_elem = _2402___mcc_h12;
        {
          RAST._IType _2404_elemType;
          RAST._IType _out67;
          _out67 = DCOMP.COMP.GenType(_2403_elem, inBinding, inFn);
          _2404_elemType = _out67;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2404_elemType));
        }
      } else if (_source70.is_MapBuilder) {
        DAST._IType _2405___mcc_h13 = _source70.dtor_key;
        DAST._IType _2406___mcc_h14 = _source70.dtor_value;
        DAST._IType _2407_value = _2406___mcc_h14;
        DAST._IType _2408_key = _2405___mcc_h13;
        {
          RAST._IType _2409_keyType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_2408_key, inBinding, inFn);
          _2409_keyType = _out68;
          RAST._IType _2410_valueType;
          RAST._IType _out69;
          _out69 = DCOMP.COMP.GenType(_2407_value, inBinding, inFn);
          _2410_valueType = _out69;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2409_keyType, _2410_valueType));
        }
      } else if (_source70.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2411___mcc_h15 = _source70.dtor_args;
        DAST._IType _2412___mcc_h16 = _source70.dtor_result;
        DAST._IType _2413_result = _2412___mcc_h16;
        Dafny.ISequence<DAST._IType> _2414_args = _2411___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2415_argTypes;
          _2415_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2416_i;
          _2416_i = BigInteger.Zero;
          while ((_2416_i) < (new BigInteger((_2414_args).Count))) {
            RAST._IType _2417_generated;
            RAST._IType _out70;
            _out70 = DCOMP.COMP.GenType((_2414_args).Select(_2416_i), inBinding, true);
            _2417_generated = _out70;
            _2415_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2415_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2417_generated)));
            _2416_i = (_2416_i) + (BigInteger.One);
          }
          RAST._IType _2418_resultType;
          RAST._IType _out71;
          _out71 = DCOMP.COMP.GenType(_2413_result, inBinding, (inFn) || (inBinding));
          _2418_resultType = _out71;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_2415_argTypes, RAST.Type.create_IntersectionType(_2418_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source70.is_Primitive) {
        DAST._IPrimitive _2419___mcc_h17 = _source70.dtor_Primitive_a0;
        DAST._IPrimitive _2420_p = _2419___mcc_h17;
        {
          DAST._IPrimitive _source73 = _2420_p;
          if (_source73.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source73.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source73.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar)));
          } else if (_source73.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar);
          }
        }
      } else if (_source70.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2421___mcc_h18 = _source70.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _2422_v = _2421___mcc_h18;
        s = RAST.__default.RawType(_2422_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2423___mcc_h19 = _source70.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source74 = _2423___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2424___mcc_h20 = _source74;
        Dafny.ISequence<Dafny.Rune> _2425_name = _2424___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_2425_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _2426_i;
      _2426_i = BigInteger.Zero;
      while ((_2426_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source75 = (body).Select(_2426_i);
        DAST._IMethod _2427___mcc_h0 = _source75;
        DAST._IMethod _2428_m = _2427___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source76 = (_2428_m).dtor_overridingPath;
          if (_source76.is_None) {
            {
              RAST._IImplMember _2429_generated;
              RAST._IImplMember _out72;
              _out72 = DCOMP.COMP.GenMethod(_2428_m, forTrait, enclosingType, enclosingTypeParams);
              _2429_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2429_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2430___mcc_h1 = _source76.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2431_p = _2430___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2432_existing;
              _2432_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2431_p)) {
                _2432_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2431_p);
              }
              RAST._IImplMember _2433_genMethod;
              RAST._IImplMember _out73;
              _out73 = DCOMP.COMP.GenMethod(_2428_m, true, enclosingType, enclosingTypeParams);
              _2433_genMethod = _out73;
              _2432_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2432_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2433_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2431_p, _2432_existing)));
            }
          }
        }
        _2426_i = (_2426_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _2434_i;
      _2434_i = BigInteger.Zero;
      while ((_2434_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _2435_param;
        _2435_param = (@params).Select(_2434_i);
        RAST._IType _2436_paramType;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType((_2435_param).dtor_typ, false, false);
        _2436_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2435_param).dtor_name), RAST.Type.create_Borrowed(_2436_paramType))));
        _2434_i = (_2434_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2437_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = DCOMP.COMP.GenParams((m).dtor_params);
      _2437_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2438_paramNames;
      _2438_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2439_paramI;
      _2439_paramI = BigInteger.Zero;
      while ((_2439_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _2438_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2438_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_2439_paramI)).dtor_name));
        _2439_paramI = (_2439_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _2437_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _2437_params);
        } else {
          RAST._IType _2440_tpe;
          RAST._IType _out76;
          _out76 = DCOMP.COMP.GenType(enclosingType, false, false);
          _2440_tpe = _out76;
          _2437_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_2440_tpe))), _2437_params);
        }
      }
      Dafny.ISequence<RAST._IType> _2441_retTypeArgs;
      _2441_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2442_typeI;
      _2442_typeI = BigInteger.Zero;
      while ((_2442_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2443_typeExpr;
        RAST._IType _out77;
        _out77 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_2442_typeI), false, false);
        _2443_typeExpr = _out77;
        _2441_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2441_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2443_typeExpr));
        _2442_typeI = (_2442_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2444_visibility;
      _2444_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _2445_fnName;
      _2445_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _2446_typeParamsFiltered;
      _2446_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _2447_typeParamI;
      _2447_typeParamI = BigInteger.Zero;
      while ((_2447_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _2448_typeParam;
        _2448_typeParam = ((m).dtor_typeParams).Select(_2447_typeParamI);
        if (!((enclosingTypeParams).Contains(_2448_typeParam))) {
          _2446_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_2446_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_2448_typeParam));
        }
        _2447_typeParamI = (_2447_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2449_whereClauses;
      _2449_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _2450_typeParams;
      _2450_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_2446_typeParamsFiltered).Count)).Sign == 1) {
        _2449_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_2449_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _2451_i;
        _2451_i = BigInteger.Zero;
        while ((_2451_i) < (new BigInteger((_2446_typeParamsFiltered).Count))) {
          RAST._IType _2452_typeExpr;
          RAST._IType _out78;
          _out78 = DCOMP.COMP.GenType((_2446_typeParamsFiltered).Select(_2451_i), false, false);
          _2452_typeExpr = _out78;
          _2450_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_2450_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2452_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _2451_i = (_2451_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2453_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2454_earlyReturn;
        _2454_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source77 = (m).dtor_outVars;
        if (_source77.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2455___mcc_h0 = _source77.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2456_outVars = _2455___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _2457_tupleArgs;
            _2457_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _2458_outI;
            _2458_outI = BigInteger.Zero;
            while ((_2458_outI) < (new BigInteger((_2456_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2459_outVar;
              _2459_outVar = (_2456_outVars).Select(_2458_outI);
              _2457_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2457_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2459_outVar)))));
              _2458_outI = (_2458_outI) + (BigInteger.One);
            }
            _2454_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2457_tupleArgs)));
          }
        }
        RAST._IExpr _2460_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2461___v44;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _2438_paramNames, true, _2454_earlyReturn, out _out79, out _out80);
        _2460_body = _out79;
        _2461___v44 = _out80;
        _2453_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2460_body);
      } else {
        _2453_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2444_visibility, RAST.Fn.create(_2445_fnName, _2450_typeParams, _2437_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2441_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2441_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2441_retTypeArgs)))), _2449_whereClauses, _2453_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2462_declarations;
      _2462_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2463_i;
      _2463_i = BigInteger.Zero;
      while ((_2463_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2464_stmt;
        _2464_stmt = (stmts).Select(_2463_i);
        RAST._IExpr _2465_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        DCOMP.COMP.GenStmt(_2464_stmt, selfIdent, @params, (isLast) && ((_2463_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2465_stmtExpr = _out81;
        _2466_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2466_recIdents, _2462_declarations));
        DAST._IStatement _source78 = _2464_stmt;
        if (_source78.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2467___mcc_h0 = _source78.dtor_name;
          DAST._IType _2468___mcc_h1 = _source78.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2469___mcc_h2 = _source78.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2470_name = _2467___mcc_h0;
          {
            _2462_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2462_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2470_name));
          }
        } else if (_source78.is_Assign) {
          DAST._IAssignLhs _2471___mcc_h6 = _source78.dtor_lhs;
          DAST._IExpression _2472___mcc_h7 = _source78.dtor_value;
        } else if (_source78.is_If) {
          DAST._IExpression _2473___mcc_h10 = _source78.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2474___mcc_h11 = _source78.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2475___mcc_h12 = _source78.dtor_els;
        } else if (_source78.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2476___mcc_h16 = _source78.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2477___mcc_h17 = _source78.dtor_body;
        } else if (_source78.is_While) {
          DAST._IExpression _2478___mcc_h20 = _source78.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2479___mcc_h21 = _source78.dtor_body;
        } else if (_source78.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2480___mcc_h24 = _source78.dtor_boundName;
          DAST._IType _2481___mcc_h25 = _source78.dtor_boundType;
          DAST._IExpression _2482___mcc_h26 = _source78.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2483___mcc_h27 = _source78.dtor_body;
        } else if (_source78.is_Call) {
          DAST._IExpression _2484___mcc_h32 = _source78.dtor_on;
          DAST._ICallName _2485___mcc_h33 = _source78.dtor_callName;
          Dafny.ISequence<DAST._IType> _2486___mcc_h34 = _source78.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2487___mcc_h35 = _source78.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2488___mcc_h36 = _source78.dtor_outs;
        } else if (_source78.is_Return) {
          DAST._IExpression _2489___mcc_h42 = _source78.dtor_expr;
        } else if (_source78.is_EarlyReturn) {
        } else if (_source78.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2490___mcc_h44 = _source78.dtor_toLabel;
        } else if (_source78.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2491___mcc_h46 = _source78.dtor_body;
        } else if (_source78.is_JumpTailCallStart) {
        } else if (_source78.is_Halt) {
        } else {
          DAST._IExpression _2492___mcc_h48 = _source78.dtor_Print_a0;
        }
        generated = (generated).Then(_2465_stmtExpr);
        _2463_i = (_2463_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source79 = lhs;
      if (_source79.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2493___mcc_h0 = _source79.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source80 = _2493___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2494___mcc_h1 = _source80;
        Dafny.ISequence<Dafny.Rune> _2495_id = _2494___mcc_h1;
        {
          if ((@params).Contains(_2495_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2495_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2495_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2495_id);
          needsIIFE = false;
        }
      } else if (_source79.is_Select) {
        DAST._IExpression _2496___mcc_h2 = _source79.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2497___mcc_h3 = _source79.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2498_field = _2497___mcc_h3;
        DAST._IExpression _2499_on = _2496___mcc_h2;
        {
          RAST._IExpr _2500_onExpr;
          DCOMP._IOwnership _2501_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2502_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_2499_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2500_onExpr = _out83;
          _2501_onOwned = _out84;
          _2502_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2500_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2498_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2502_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2503___mcc_h4 = _source79.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2504___mcc_h5 = _source79.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2505_indices = _2504___mcc_h5;
        DAST._IExpression _2506_on = _2503___mcc_h4;
        {
          RAST._IExpr _2507_onExpr;
          DCOMP._IOwnership _2508_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2509_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          DCOMP.COMP.GenExpr(_2506_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2507_onExpr = _out86;
          _2508_onOwned = _out87;
          _2509_recIdents = _out88;
          readIdents = _2509_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2510_i;
          _2510_i = BigInteger.Zero;
          while ((_2510_i) < (new BigInteger((_2505_indices).Count))) {
            RAST._IExpr _2511_idx;
            DCOMP._IOwnership _2512___v48;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2513_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            DCOMP.COMP.GenExpr((_2505_indices).Select(_2510_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2511_idx = _out89;
            _2512___v48 = _out90;
            _2513_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2510_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2511_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2513_recIdentsIdx);
            _2510_i = (_2510_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2507_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2510_i = BigInteger.Zero;
          while ((_2510_i) < (new BigInteger((_2505_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2510_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2510_i = (_2510_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source81 = stmt;
      if (_source81.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2514___mcc_h0 = _source81.dtor_name;
        DAST._IType _2515___mcc_h1 = _source81.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2516___mcc_h2 = _source81.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source82 = _2516___mcc_h2;
        if (_source82.is_None) {
          DAST._IType _2517_typ = _2515___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2518_name = _2514___mcc_h0;
          {
            RAST._IType _2519_typeString;
            RAST._IType _out92;
            _out92 = DCOMP.COMP.GenType(_2517_typ, true, false);
            _2519_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2518_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2519_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2520___mcc_h3 = _source82.dtor_value;
          DAST._IExpression _2521_expression = _2520___mcc_h3;
          DAST._IType _2522_typ = _2515___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2523_name = _2514___mcc_h0;
          {
            RAST._IType _2524_typeString;
            RAST._IType _out93;
            _out93 = DCOMP.COMP.GenType(_2522_typ, true, false);
            _2524_typeString = _out93;
            RAST._IExpr _2525_expr;
            DCOMP._IOwnership _2526___v49;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2527_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            DCOMP.COMP.GenExpr(_2521_expression, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2525_expr = _out94;
            _2526___v49 = _out95;
            _2527_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2523_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2524_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2525_expr));
            readIdents = _2527_recIdents;
          }
        }
      } else if (_source81.is_Assign) {
        DAST._IAssignLhs _2528___mcc_h4 = _source81.dtor_lhs;
        DAST._IExpression _2529___mcc_h5 = _source81.dtor_value;
        DAST._IExpression _2530_expression = _2529___mcc_h5;
        DAST._IAssignLhs _2531_lhs = _2528___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _2532_lhsGen;
          bool _2533_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2534_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenAssignLhs(_2531_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out97, out _out98, out _out99);
          _2532_lhsGen = _out97;
          _2533_needsIIFE = _out98;
          _2534_recIdents = _out99;
          RAST._IExpr _2535_exprGen;
          DCOMP._IOwnership _2536___v50;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2537_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_2530_expression, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _2535_exprGen = _out100;
          _2536___v50 = _out101;
          _2537_exprIdents = _out102;
          if (_2533_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2535_exprGen)), RAST.Expr.create_RawExpr(_2532_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_2532_lhsGen, _2535_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2534_recIdents, _2537_exprIdents);
        }
      } else if (_source81.is_If) {
        DAST._IExpression _2538___mcc_h6 = _source81.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2539___mcc_h7 = _source81.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _2540___mcc_h8 = _source81.dtor_els;
        Dafny.ISequence<DAST._IStatement> _2541_els = _2540___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _2542_thn = _2539___mcc_h7;
        DAST._IExpression _2543_cond = _2538___mcc_h6;
        {
          RAST._IExpr _2544_cond;
          DCOMP._IOwnership _2545___v51;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          DCOMP.COMP.GenExpr(_2543_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _2544_cond = _out103;
          _2545___v51 = _out104;
          _2546_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _2547_condString;
          _2547_condString = (_2544_cond)._ToString(DCOMP.__default.IND);
          readIdents = _2546_recIdents;
          RAST._IExpr _2548_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenStmts(_2542_thn, selfIdent, @params, isLast, earlyReturn, out _out106, out _out107);
          _2548_thn = _out106;
          _2549_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2549_thnIdents);
          RAST._IExpr _2550_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2551_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          DCOMP.COMP.GenStmts(_2541_els, selfIdent, @params, isLast, earlyReturn, out _out108, out _out109);
          _2550_els = _out108;
          _2551_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2551_elsIdents);
          generated = RAST.Expr.create_IfExpr(_2544_cond, _2548_thn, _2550_els);
        }
      } else if (_source81.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _2552___mcc_h9 = _source81.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _2553___mcc_h10 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2554_body = _2553___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _2555_lbl = _2552___mcc_h9;
        {
          RAST._IExpr _2556_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenStmts(_2554_body, selfIdent, @params, isLast, earlyReturn, out _out110, out _out111);
          _2556_body = _out110;
          _2557_bodyIdents = _out111;
          readIdents = _2557_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2555_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_2556_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source81.is_While) {
        DAST._IExpression _2558___mcc_h11 = _source81.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2559___mcc_h12 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2560_body = _2559___mcc_h12;
        DAST._IExpression _2561_cond = _2558___mcc_h11;
        {
          RAST._IExpr _2562_cond;
          DCOMP._IOwnership _2563___v52;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2564_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_2561_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _2562_cond = _out112;
          _2563___v52 = _out113;
          _2564_recIdents = _out114;
          readIdents = _2564_recIdents;
          RAST._IExpr _2565_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_2560_body, selfIdent, @params, false, earlyReturn, out _out115, out _out116);
          _2565_body = _out115;
          _2566_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2566_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2562_cond), _2565_body);
        }
      } else if (_source81.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _2567___mcc_h13 = _source81.dtor_boundName;
        DAST._IType _2568___mcc_h14 = _source81.dtor_boundType;
        DAST._IExpression _2569___mcc_h15 = _source81.dtor_over;
        Dafny.ISequence<DAST._IStatement> _2570___mcc_h16 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2571_body = _2570___mcc_h16;
        DAST._IExpression _2572_over = _2569___mcc_h15;
        DAST._IType _2573_boundType = _2568___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _2574_boundName = _2567___mcc_h13;
        {
          RAST._IExpr _2575_over;
          DCOMP._IOwnership _2576___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_2572_over, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _2575_over = _out117;
          _2576___v53 = _out118;
          _2577_recIdents = _out119;
          RAST._IType _2578_boundTypeStr;
          RAST._IType _out120;
          _out120 = DCOMP.COMP.GenType(_2573_boundType, false, false);
          _2578_boundTypeStr = _out120;
          readIdents = _2577_recIdents;
          RAST._IExpr _2579_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2580_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenStmts(_2571_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2574_boundName)), false, earlyReturn, out _out121, out _out122);
          _2579_body = _out121;
          _2580_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2580_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2574_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_2574_boundName), _2575_over, _2579_body);
        }
      } else if (_source81.is_Call) {
        DAST._IExpression _2581___mcc_h17 = _source81.dtor_on;
        DAST._ICallName _2582___mcc_h18 = _source81.dtor_callName;
        Dafny.ISequence<DAST._IType> _2583___mcc_h19 = _source81.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2584___mcc_h20 = _source81.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2585___mcc_h21 = _source81.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2586_maybeOutVars = _2585___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _2587_args = _2584___mcc_h20;
        Dafny.ISequence<DAST._IType> _2588_typeArgs = _2583___mcc_h19;
        DAST._ICallName _2589_name = _2582___mcc_h18;
        DAST._IExpression _2590_on = _2581___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2591_typeArgString;
          _2591_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2588_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2592_typeI;
            _2592_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2593_typeArgsR;
            _2593_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2592_typeI) < (new BigInteger((_2588_typeArgs).Count))) {
              RAST._IType _2594_tpe;
              RAST._IType _out123;
              _out123 = DCOMP.COMP.GenType((_2588_typeArgs).Select(_2592_typeI), false, false);
              _2594_tpe = _out123;
              _2593_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_2593_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_2594_tpe));
              _2592_typeI = (_2592_typeI) + (BigInteger.One);
            }
            _2591_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2593_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _2595_argString;
          _2595_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2596_i;
          _2596_i = BigInteger.Zero;
          while ((_2596_i) < (new BigInteger((_2587_args).Count))) {
            if ((_2596_i).Sign == 1) {
              _2595_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2595_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2597_argExpr;
            DCOMP._IOwnership _2598_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_2587_args).Select(_2596_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _2597_argExpr = _out124;
            _2598_ownership = _out125;
            _2599_argIdents = _out126;
            Dafny.ISequence<Dafny.Rune> _2600_argExprString;
            _2600_argExprString = (_2597_argExpr)._ToString(DCOMP.__default.IND);
            _2595_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2595_argString, _2600_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2599_argIdents);
            _2596_i = (_2596_i) + (BigInteger.One);
          }
          RAST._IExpr _2601_onExpr;
          DCOMP._IOwnership _2602___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2603_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_2590_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out127, out _out128, out _out129);
          _2601_onExpr = _out127;
          _2602___v54 = _out128;
          _2603_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2603_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _2604_enclosingString;
          _2604_enclosingString = (_2601_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source83 = _2590_on;
          if (_source83.is_Literal) {
            DAST._ILiteral _2605___mcc_h26 = _source83.dtor_Literal_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2606___mcc_h28 = _source83.dtor_Ident_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2607___mcc_h30 = _source83.dtor_Companion_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_2604_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source83.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2608___mcc_h32 = _source83.dtor_Tuple_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2609___mcc_h34 = _source83.dtor_path;
            Dafny.ISequence<DAST._IType> _2610___mcc_h35 = _source83.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2611___mcc_h36 = _source83.dtor_args;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2612___mcc_h40 = _source83.dtor_dims;
            DAST._IType _2613___mcc_h41 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2614___mcc_h44 = _source83.dtor_path;
            Dafny.ISequence<DAST._IType> _2615___mcc_h45 = _source83.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2616___mcc_h46 = _source83.dtor_variant;
            bool _2617___mcc_h47 = _source83.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2618___mcc_h48 = _source83.dtor_contents;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Convert) {
            DAST._IExpression _2619___mcc_h54 = _source83.dtor_value;
            DAST._IType _2620___mcc_h55 = _source83.dtor_from;
            DAST._IType _2621___mcc_h56 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqConstruct) {
            DAST._IExpression _2622___mcc_h60 = _source83.dtor_length;
            DAST._IExpression _2623___mcc_h61 = _source83.dtor_elem;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2624___mcc_h64 = _source83.dtor_elements;
            DAST._IType _2625___mcc_h65 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2626___mcc_h68 = _source83.dtor_elements;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _2627___mcc_h70 = _source83.dtor_elements;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2628___mcc_h72 = _source83.dtor_mapElems;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapBuilder) {
            DAST._IType _2629___mcc_h74 = _source83.dtor_keyType;
            DAST._IType _2630___mcc_h75 = _source83.dtor_valueType;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqUpdate) {
            DAST._IExpression _2631___mcc_h78 = _source83.dtor_expr;
            DAST._IExpression _2632___mcc_h79 = _source83.dtor_indexExpr;
            DAST._IExpression _2633___mcc_h80 = _source83.dtor_value;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapUpdate) {
            DAST._IExpression _2634___mcc_h84 = _source83.dtor_expr;
            DAST._IExpression _2635___mcc_h85 = _source83.dtor_indexExpr;
            DAST._IExpression _2636___mcc_h86 = _source83.dtor_value;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SetBuilder) {
            DAST._IType _2637___mcc_h90 = _source83.dtor_elemType;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_ToMultiset) {
            DAST._IExpression _2638___mcc_h92 = _source83.dtor_ToMultiset_a0;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_This) {
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Ite) {
            DAST._IExpression _2639___mcc_h94 = _source83.dtor_cond;
            DAST._IExpression _2640___mcc_h95 = _source83.dtor_thn;
            DAST._IExpression _2641___mcc_h96 = _source83.dtor_els;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_UnOp) {
            DAST._IUnaryOp _2642___mcc_h100 = _source83.dtor_unOp;
            DAST._IExpression _2643___mcc_h101 = _source83.dtor_expr;
            DAST.Format._IUnaryOpFormat _2644___mcc_h102 = _source83.dtor_format1;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_BinOp) {
            DAST._IBinOp _2645___mcc_h106 = _source83.dtor_op;
            DAST._IExpression _2646___mcc_h107 = _source83.dtor_left;
            DAST._IExpression _2647___mcc_h108 = _source83.dtor_right;
            DAST.Format._IBinaryOpFormat _2648___mcc_h109 = _source83.dtor_format2;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_ArrayLen) {
            DAST._IExpression _2649___mcc_h114 = _source83.dtor_expr;
            BigInteger _2650___mcc_h115 = _source83.dtor_dim;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapKeys) {
            DAST._IExpression _2651___mcc_h118 = _source83.dtor_expr;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_MapValues) {
            DAST._IExpression _2652___mcc_h120 = _source83.dtor_expr;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Select) {
            DAST._IExpression _2653___mcc_h122 = _source83.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2654___mcc_h123 = _source83.dtor_field;
            bool _2655___mcc_h124 = _source83.dtor_isConstant;
            bool _2656___mcc_h125 = _source83.dtor_onDatatype;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SelectFn) {
            DAST._IExpression _2657___mcc_h130 = _source83.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2658___mcc_h131 = _source83.dtor_field;
            bool _2659___mcc_h132 = _source83.dtor_onDatatype;
            bool _2660___mcc_h133 = _source83.dtor_isStatic;
            BigInteger _2661___mcc_h134 = _source83.dtor_arity;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Index) {
            DAST._IExpression _2662___mcc_h140 = _source83.dtor_expr;
            DAST._ICollKind _2663___mcc_h141 = _source83.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2664___mcc_h142 = _source83.dtor_indices;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_IndexRange) {
            DAST._IExpression _2665___mcc_h146 = _source83.dtor_expr;
            bool _2666___mcc_h147 = _source83.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2667___mcc_h148 = _source83.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2668___mcc_h149 = _source83.dtor_high;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_TupleSelect) {
            DAST._IExpression _2669___mcc_h154 = _source83.dtor_expr;
            BigInteger _2670___mcc_h155 = _source83.dtor_index;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Call) {
            DAST._IExpression _2671___mcc_h158 = _source83.dtor_on;
            DAST._ICallName _2672___mcc_h159 = _source83.dtor_callName;
            Dafny.ISequence<DAST._IType> _2673___mcc_h160 = _source83.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2674___mcc_h161 = _source83.dtor_args;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2675___mcc_h166 = _source83.dtor_params;
            DAST._IType _2676___mcc_h167 = _source83.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2677___mcc_h168 = _source83.dtor_body;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2678___mcc_h172 = _source83.dtor_values;
            DAST._IType _2679___mcc_h173 = _source83.dtor_retType;
            DAST._IExpression _2680___mcc_h174 = _source83.dtor_expr;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2681___mcc_h178 = _source83.dtor_name;
            DAST._IType _2682___mcc_h179 = _source83.dtor_typ;
            DAST._IExpression _2683___mcc_h180 = _source83.dtor_value;
            DAST._IExpression _2684___mcc_h181 = _source83.dtor_iifeBody;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_Apply) {
            DAST._IExpression _2685___mcc_h186 = _source83.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2686___mcc_h187 = _source83.dtor_args;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_TypeTest) {
            DAST._IExpression _2687___mcc_h190 = _source83.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2688___mcc_h191 = _source83.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2689___mcc_h192 = _source83.dtor_variant;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_InitializationValue) {
            DAST._IType _2690___mcc_h196 = _source83.dtor_typ;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_BoolBoundedPool) {
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SetBoundedPool) {
            DAST._IExpression _2691___mcc_h198 = _source83.dtor_of;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source83.is_SeqBoundedPool) {
            DAST._IExpression _2692___mcc_h200 = _source83.dtor_of;
            bool _2693___mcc_h201 = _source83.dtor_includeDuplicates;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2694___mcc_h204 = _source83.dtor_lo;
            DAST._IExpression _2695___mcc_h205 = _source83.dtor_hi;
            {
              _2604_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2696_receiver;
          _2696_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source84 = _2586_maybeOutVars;
          if (_source84.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2697___mcc_h208 = _source84.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2698_outVars = _2697___mcc_h208;
            {
              if ((new BigInteger((_2698_outVars).Count)) > (BigInteger.One)) {
                _2696_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2699_outI;
              _2699_outI = BigInteger.Zero;
              while ((_2699_outI) < (new BigInteger((_2698_outVars).Count))) {
                if ((_2699_outI).Sign == 1) {
                  _2696_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2700_outVar;
                _2700_outVar = (_2698_outVars).Select(_2699_outI);
                _2696_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, (_2700_outVar));
                _2699_outI = (_2699_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2698_outVars).Count)) > (BigInteger.One)) {
                _2696_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _2701_renderedName;
          _2701_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source85) => {
            if (_source85.is_Name) {
              Dafny.ISequence<Dafny.Rune> _2702___mcc_h209 = _source85.dtor_name;
              Dafny.ISequence<Dafny.Rune> _2703_name = _2702___mcc_h209;
              return DCOMP.__default.escapeIdent(_2703_name);
            } else if (_source85.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source85.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source85.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_2589_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2696_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2696_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _2604_enclosingString), _2701_renderedName), _2591_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2595_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source81.is_Return) {
        DAST._IExpression _2704___mcc_h22 = _source81.dtor_expr;
        DAST._IExpression _2705_expr = _2704___mcc_h22;
        {
          RAST._IExpr _2706_expr;
          DCOMP._IOwnership _2707___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_2705_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _2706_expr = _out130;
          _2707___v57 = _out131;
          _2708_recIdents = _out132;
          readIdents = _2708_recIdents;
          if (isLast) {
            generated = _2706_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2706_expr));
          }
        }
      } else if (_source81.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source81.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2709___mcc_h23 = _source81.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2710_toLabel = _2709___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source86 = _2710_toLabel;
          if (_source86.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2711___mcc_h210 = _source86.dtor_value;
            Dafny.ISequence<Dafny.Rune> _2712_lbl = _2711___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2712_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source81.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2713___mcc_h24 = _source81.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2714_body = _2713___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _2715_paramI;
          _2715_paramI = BigInteger.Zero;
          while ((_2715_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _2716_param;
            _2716_param = (@params).Select(_2715_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2716_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_2716_param))))));
            _2715_paramI = (_2715_paramI) + (BigInteger.One);
          }
          RAST._IExpr _2717_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_2714_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out133, out _out134);
          _2717_body = _out133;
          _2718_bodyIdents = _out134;
          readIdents = _2718_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _2717_body)));
        }
      } else if (_source81.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source81.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2719___mcc_h25 = _source81.dtor_Print_a0;
        DAST._IExpression _2720_e = _2719___mcc_h25;
        {
          RAST._IExpr _2721_printedExpr;
          DCOMP._IOwnership _2722_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2723_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_2720_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _2721_printedExpr = _out135;
          _2722_recOwnership = _out136;
          _2723_recIdents = _out137;
          Dafny.ISequence<Dafny.Rune> _2724_printedExprString;
          _2724_printedExprString = (_2721_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2724_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _2723_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source87 = range;
      if (_source87.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source87.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source87.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source87.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source87.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source87.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source87.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source87.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source87.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source87.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source87.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out138;
        DCOMP._IOwnership _out139;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out138, out _out139);
        @out = _out138;
        resultingOwnership = _out139;
        return ;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static bool OwnershipGuarantee(DCOMP._IOwnership expectedOwnership, DCOMP._IOwnership resultingOwnership)
    {
      return (!(!object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) || (object.Equals(resultingOwnership, expectedOwnership))) && (!object.Equals(resultingOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()));
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source88 = e;
      DAST._ILiteral _2725___mcc_h0 = _source88.dtor_Literal_a0;
      DAST._ILiteral _source89 = _2725___mcc_h0;
      if (_source89.is_BoolLiteral) {
        bool _2726___mcc_h1 = _source89.dtor_BoolLiteral_a0;
        if ((_2726___mcc_h1) == (false)) {
          {
            RAST._IExpr _out140;
            DCOMP._IOwnership _out141;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out140, out _out141);
            r = _out140;
            resultingOwnership = _out141;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out142;
            DCOMP._IOwnership _out143;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out142, out _out143);
            r = _out142;
            resultingOwnership = _out143;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source89.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _2727___mcc_h2 = _source89.dtor_IntLiteral_a0;
        DAST._IType _2728___mcc_h3 = _source89.dtor_IntLiteral_a1;
        DAST._IType _2729_t = _2728___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _2730_i = _2727___mcc_h2;
        {
          DAST._IType _source90 = _2729_t;
          if (_source90.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2731___mcc_h100 = _source90.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2732___mcc_h101 = _source90.dtor_typeArgs;
            DAST._IResolvedType _2733___mcc_h102 = _source90.dtor_resolved;
            DAST._IType _2734_o = _2729_t;
            {
              RAST._IType _2735_genType;
              RAST._IType _out144;
              _out144 = DCOMP.COMP.GenType(_2734_o, false, false);
              _2735_genType = _out144;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2735_genType);
            }
          } else if (_source90.is_Nullable) {
            DAST._IType _2736___mcc_h106 = _source90.dtor_Nullable_a0;
            DAST._IType _2737_o = _2729_t;
            {
              RAST._IType _2738_genType;
              RAST._IType _out145;
              _out145 = DCOMP.COMP.GenType(_2737_o, false, false);
              _2738_genType = _out145;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2738_genType);
            }
          } else if (_source90.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2739___mcc_h108 = _source90.dtor_Tuple_a0;
            DAST._IType _2740_o = _2729_t;
            {
              RAST._IType _2741_genType;
              RAST._IType _out146;
              _out146 = DCOMP.COMP.GenType(_2740_o, false, false);
              _2741_genType = _out146;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2741_genType);
            }
          } else if (_source90.is_Array) {
            DAST._IType _2742___mcc_h110 = _source90.dtor_element;
            BigInteger _2743___mcc_h111 = _source90.dtor_dims;
            DAST._IType _2744_o = _2729_t;
            {
              RAST._IType _2745_genType;
              RAST._IType _out147;
              _out147 = DCOMP.COMP.GenType(_2744_o, false, false);
              _2745_genType = _out147;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2745_genType);
            }
          } else if (_source90.is_Seq) {
            DAST._IType _2746___mcc_h114 = _source90.dtor_element;
            DAST._IType _2747_o = _2729_t;
            {
              RAST._IType _2748_genType;
              RAST._IType _out148;
              _out148 = DCOMP.COMP.GenType(_2747_o, false, false);
              _2748_genType = _out148;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2748_genType);
            }
          } else if (_source90.is_Set) {
            DAST._IType _2749___mcc_h116 = _source90.dtor_element;
            DAST._IType _2750_o = _2729_t;
            {
              RAST._IType _2751_genType;
              RAST._IType _out149;
              _out149 = DCOMP.COMP.GenType(_2750_o, false, false);
              _2751_genType = _out149;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2751_genType);
            }
          } else if (_source90.is_Multiset) {
            DAST._IType _2752___mcc_h118 = _source90.dtor_element;
            DAST._IType _2753_o = _2729_t;
            {
              RAST._IType _2754_genType;
              RAST._IType _out150;
              _out150 = DCOMP.COMP.GenType(_2753_o, false, false);
              _2754_genType = _out150;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2754_genType);
            }
          } else if (_source90.is_Map) {
            DAST._IType _2755___mcc_h120 = _source90.dtor_key;
            DAST._IType _2756___mcc_h121 = _source90.dtor_value;
            DAST._IType _2757_o = _2729_t;
            {
              RAST._IType _2758_genType;
              RAST._IType _out151;
              _out151 = DCOMP.COMP.GenType(_2757_o, false, false);
              _2758_genType = _out151;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2758_genType);
            }
          } else if (_source90.is_SetBuilder) {
            DAST._IType _2759___mcc_h124 = _source90.dtor_element;
            DAST._IType _2760_o = _2729_t;
            {
              RAST._IType _2761_genType;
              RAST._IType _out152;
              _out152 = DCOMP.COMP.GenType(_2760_o, false, false);
              _2761_genType = _out152;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2761_genType);
            }
          } else if (_source90.is_MapBuilder) {
            DAST._IType _2762___mcc_h126 = _source90.dtor_key;
            DAST._IType _2763___mcc_h127 = _source90.dtor_value;
            DAST._IType _2764_o = _2729_t;
            {
              RAST._IType _2765_genType;
              RAST._IType _out153;
              _out153 = DCOMP.COMP.GenType(_2764_o, false, false);
              _2765_genType = _out153;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2765_genType);
            }
          } else if (_source90.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2766___mcc_h130 = _source90.dtor_args;
            DAST._IType _2767___mcc_h131 = _source90.dtor_result;
            DAST._IType _2768_o = _2729_t;
            {
              RAST._IType _2769_genType;
              RAST._IType _out154;
              _out154 = DCOMP.COMP.GenType(_2768_o, false, false);
              _2769_genType = _out154;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2769_genType);
            }
          } else if (_source90.is_Primitive) {
            DAST._IPrimitive _2770___mcc_h134 = _source90.dtor_Primitive_a0;
            DAST._IPrimitive _source91 = _2770___mcc_h134;
            if (_source91.is_Int) {
              {
                if ((new BigInteger((_2730_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_2730_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_2730_i, true));
                }
              }
            } else if (_source91.is_Real) {
              DAST._IType _2771_o = _2729_t;
              {
                RAST._IType _2772_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_2771_o, false, false);
                _2772_genType = _out155;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2772_genType);
              }
            } else if (_source91.is_String) {
              DAST._IType _2773_o = _2729_t;
              {
                RAST._IType _2774_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_2773_o, false, false);
                _2774_genType = _out156;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2774_genType);
              }
            } else if (_source91.is_Bool) {
              DAST._IType _2775_o = _2729_t;
              {
                RAST._IType _2776_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_2775_o, false, false);
                _2776_genType = _out157;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2776_genType);
              }
            } else {
              DAST._IType _2777_o = _2729_t;
              {
                RAST._IType _2778_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_2777_o, false, false);
                _2778_genType = _out158;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2778_genType);
              }
            }
          } else if (_source90.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2779___mcc_h136 = _source90.dtor_Passthrough_a0;
            DAST._IType _2780_o = _2729_t;
            {
              RAST._IType _2781_genType;
              RAST._IType _out159;
              _out159 = DCOMP.COMP.GenType(_2780_o, false, false);
              _2781_genType = _out159;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2781_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2782___mcc_h138 = _source90.dtor_TypeArg_a0;
            DAST._IType _2783_o = _2729_t;
            {
              RAST._IType _2784_genType;
              RAST._IType _out160;
              _out160 = DCOMP.COMP.GenType(_2783_o, false, false);
              _2784_genType = _out160;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2730_i), _2784_genType);
            }
          }
          RAST._IExpr _out161;
          DCOMP._IOwnership _out162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out161, out _out162);
          r = _out161;
          resultingOwnership = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source89.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _2785___mcc_h4 = _source89.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _2786___mcc_h5 = _source89.dtor_DecLiteral_a1;
        DAST._IType _2787___mcc_h6 = _source89.dtor_DecLiteral_a2;
        DAST._IType _2788_t = _2787___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _2789_d = _2786___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _2790_n = _2785___mcc_h4;
        {
          DAST._IType _source92 = _2788_t;
          if (_source92.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2791___mcc_h140 = _source92.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2792___mcc_h141 = _source92.dtor_typeArgs;
            DAST._IResolvedType _2793___mcc_h142 = _source92.dtor_resolved;
            DAST._IType _2794_o = _2788_t;
            {
              RAST._IType _2795_genType;
              RAST._IType _out163;
              _out163 = DCOMP.COMP.GenType(_2794_o, false, false);
              _2795_genType = _out163;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2795_genType);
            }
          } else if (_source92.is_Nullable) {
            DAST._IType _2796___mcc_h146 = _source92.dtor_Nullable_a0;
            DAST._IType _2797_o = _2788_t;
            {
              RAST._IType _2798_genType;
              RAST._IType _out164;
              _out164 = DCOMP.COMP.GenType(_2797_o, false, false);
              _2798_genType = _out164;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2798_genType);
            }
          } else if (_source92.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2799___mcc_h148 = _source92.dtor_Tuple_a0;
            DAST._IType _2800_o = _2788_t;
            {
              RAST._IType _2801_genType;
              RAST._IType _out165;
              _out165 = DCOMP.COMP.GenType(_2800_o, false, false);
              _2801_genType = _out165;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2801_genType);
            }
          } else if (_source92.is_Array) {
            DAST._IType _2802___mcc_h150 = _source92.dtor_element;
            BigInteger _2803___mcc_h151 = _source92.dtor_dims;
            DAST._IType _2804_o = _2788_t;
            {
              RAST._IType _2805_genType;
              RAST._IType _out166;
              _out166 = DCOMP.COMP.GenType(_2804_o, false, false);
              _2805_genType = _out166;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2805_genType);
            }
          } else if (_source92.is_Seq) {
            DAST._IType _2806___mcc_h154 = _source92.dtor_element;
            DAST._IType _2807_o = _2788_t;
            {
              RAST._IType _2808_genType;
              RAST._IType _out167;
              _out167 = DCOMP.COMP.GenType(_2807_o, false, false);
              _2808_genType = _out167;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2808_genType);
            }
          } else if (_source92.is_Set) {
            DAST._IType _2809___mcc_h156 = _source92.dtor_element;
            DAST._IType _2810_o = _2788_t;
            {
              RAST._IType _2811_genType;
              RAST._IType _out168;
              _out168 = DCOMP.COMP.GenType(_2810_o, false, false);
              _2811_genType = _out168;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2811_genType);
            }
          } else if (_source92.is_Multiset) {
            DAST._IType _2812___mcc_h158 = _source92.dtor_element;
            DAST._IType _2813_o = _2788_t;
            {
              RAST._IType _2814_genType;
              RAST._IType _out169;
              _out169 = DCOMP.COMP.GenType(_2813_o, false, false);
              _2814_genType = _out169;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2814_genType);
            }
          } else if (_source92.is_Map) {
            DAST._IType _2815___mcc_h160 = _source92.dtor_key;
            DAST._IType _2816___mcc_h161 = _source92.dtor_value;
            DAST._IType _2817_o = _2788_t;
            {
              RAST._IType _2818_genType;
              RAST._IType _out170;
              _out170 = DCOMP.COMP.GenType(_2817_o, false, false);
              _2818_genType = _out170;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2818_genType);
            }
          } else if (_source92.is_SetBuilder) {
            DAST._IType _2819___mcc_h164 = _source92.dtor_element;
            DAST._IType _2820_o = _2788_t;
            {
              RAST._IType _2821_genType;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType(_2820_o, false, false);
              _2821_genType = _out171;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2821_genType);
            }
          } else if (_source92.is_MapBuilder) {
            DAST._IType _2822___mcc_h166 = _source92.dtor_key;
            DAST._IType _2823___mcc_h167 = _source92.dtor_value;
            DAST._IType _2824_o = _2788_t;
            {
              RAST._IType _2825_genType;
              RAST._IType _out172;
              _out172 = DCOMP.COMP.GenType(_2824_o, false, false);
              _2825_genType = _out172;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2825_genType);
            }
          } else if (_source92.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2826___mcc_h170 = _source92.dtor_args;
            DAST._IType _2827___mcc_h171 = _source92.dtor_result;
            DAST._IType _2828_o = _2788_t;
            {
              RAST._IType _2829_genType;
              RAST._IType _out173;
              _out173 = DCOMP.COMP.GenType(_2828_o, false, false);
              _2829_genType = _out173;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2829_genType);
            }
          } else if (_source92.is_Primitive) {
            DAST._IPrimitive _2830___mcc_h174 = _source92.dtor_Primitive_a0;
            DAST._IPrimitive _source93 = _2830___mcc_h174;
            if (_source93.is_Int) {
              DAST._IType _2831_o = _2788_t;
              {
                RAST._IType _2832_genType;
                RAST._IType _out174;
                _out174 = DCOMP.COMP.GenType(_2831_o, false, false);
                _2832_genType = _out174;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2832_genType);
              }
            } else if (_source93.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source93.is_String) {
              DAST._IType _2833_o = _2788_t;
              {
                RAST._IType _2834_genType;
                RAST._IType _out175;
                _out175 = DCOMP.COMP.GenType(_2833_o, false, false);
                _2834_genType = _out175;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2834_genType);
              }
            } else if (_source93.is_Bool) {
              DAST._IType _2835_o = _2788_t;
              {
                RAST._IType _2836_genType;
                RAST._IType _out176;
                _out176 = DCOMP.COMP.GenType(_2835_o, false, false);
                _2836_genType = _out176;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2836_genType);
              }
            } else {
              DAST._IType _2837_o = _2788_t;
              {
                RAST._IType _2838_genType;
                RAST._IType _out177;
                _out177 = DCOMP.COMP.GenType(_2837_o, false, false);
                _2838_genType = _out177;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2838_genType);
              }
            }
          } else if (_source92.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2839___mcc_h176 = _source92.dtor_Passthrough_a0;
            DAST._IType _2840_o = _2788_t;
            {
              RAST._IType _2841_genType;
              RAST._IType _out178;
              _out178 = DCOMP.COMP.GenType(_2840_o, false, false);
              _2841_genType = _out178;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2841_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2842___mcc_h178 = _source92.dtor_TypeArg_a0;
            DAST._IType _2843_o = _2788_t;
            {
              RAST._IType _2844_genType;
              RAST._IType _out179;
              _out179 = DCOMP.COMP.GenType(_2843_o, false, false);
              _2844_genType = _out179;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2789_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2844_genType);
            }
          }
          RAST._IExpr _out180;
          DCOMP._IOwnership _out181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out180, out _out181);
          r = _out180;
          resultingOwnership = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source89.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _2845___mcc_h7 = _source89.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _2846_l = _2845___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_2846_l, false));
          RAST._IExpr _out182;
          DCOMP._IOwnership _out183;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out182, out _out183);
          r = _out182;
          resultingOwnership = _out183;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source89.is_CharLiteral) {
        Dafny.Rune _2847___mcc_h8 = _source89.dtor_CharLiteral_a0;
        Dafny.Rune _2848_c = _2847___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_2848_c).Value)));
          if (!(DCOMP.__default.UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out184;
          DCOMP._IOwnership _out185;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out184, out _out185);
          r = _out184;
          resultingOwnership = _out185;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _2849___mcc_h9 = _source89.dtor_Null_a0;
        DAST._IType _2850_tpe = _2849___mcc_h9;
        {
          RAST._IType _2851_tpeGen;
          RAST._IType _out186;
          _out186 = DCOMP.COMP.GenType(_2850_tpe, false, false);
          _2851_tpeGen = _out186;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _2851_tpeGen);
          RAST._IExpr _out187;
          DCOMP._IOwnership _out188;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out187, out _out188);
          r = _out187;
          resultingOwnership = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs49 = e;
      DAST._IBinOp _2852_op = _let_tmp_rhs49.dtor_op;
      DAST._IExpression _2853_lExpr = _let_tmp_rhs49.dtor_left;
      DAST._IExpression _2854_rExpr = _let_tmp_rhs49.dtor_right;
      DAST.Format._IBinaryOpFormat _2855_format = _let_tmp_rhs49.dtor_format2;
      bool _2856_becomesLeftCallsRight;
      _2856_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source94) => {
        if (_source94.is_Eq) {
          bool _2857___mcc_h0 = _source94.dtor_referential;
          bool _2858___mcc_h1 = _source94.dtor_nullable;
          return false;
        } else if (_source94.is_Div) {
          return false;
        } else if (_source94.is_EuclidianDiv) {
          return false;
        } else if (_source94.is_Mod) {
          return false;
        } else if (_source94.is_EuclidianMod) {
          return false;
        } else if (_source94.is_Lt) {
          return false;
        } else if (_source94.is_LtChar) {
          return false;
        } else if (_source94.is_Plus) {
          return false;
        } else if (_source94.is_Minus) {
          return false;
        } else if (_source94.is_Times) {
          return false;
        } else if (_source94.is_BitwiseAnd) {
          return false;
        } else if (_source94.is_BitwiseOr) {
          return false;
        } else if (_source94.is_BitwiseXor) {
          return false;
        } else if (_source94.is_BitwiseShiftRight) {
          return false;
        } else if (_source94.is_BitwiseShiftLeft) {
          return false;
        } else if (_source94.is_And) {
          return false;
        } else if (_source94.is_Or) {
          return false;
        } else if (_source94.is_In) {
          return false;
        } else if (_source94.is_SeqProperPrefix) {
          return false;
        } else if (_source94.is_SeqPrefix) {
          return false;
        } else if (_source94.is_SetMerge) {
          return true;
        } else if (_source94.is_SetSubtraction) {
          return true;
        } else if (_source94.is_SetIntersection) {
          return true;
        } else if (_source94.is_Subset) {
          return false;
        } else if (_source94.is_ProperSubset) {
          return false;
        } else if (_source94.is_SetDisjoint) {
          return true;
        } else if (_source94.is_MapMerge) {
          return true;
        } else if (_source94.is_MapSubtraction) {
          return true;
        } else if (_source94.is_MultisetMerge) {
          return true;
        } else if (_source94.is_MultisetSubtraction) {
          return true;
        } else if (_source94.is_MultisetIntersection) {
          return true;
        } else if (_source94.is_Submultiset) {
          return false;
        } else if (_source94.is_ProperSubmultiset) {
          return false;
        } else if (_source94.is_MultisetDisjoint) {
          return true;
        } else if (_source94.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _2859___mcc_h4 = _source94.dtor_Passthrough_a0;
          return false;
        }
      }))(_2852_op);
      bool _2860_becomesRightCallsLeft;
      _2860_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source95) => {
        if (_source95.is_Eq) {
          bool _2861___mcc_h6 = _source95.dtor_referential;
          bool _2862___mcc_h7 = _source95.dtor_nullable;
          return false;
        } else if (_source95.is_Div) {
          return false;
        } else if (_source95.is_EuclidianDiv) {
          return false;
        } else if (_source95.is_Mod) {
          return false;
        } else if (_source95.is_EuclidianMod) {
          return false;
        } else if (_source95.is_Lt) {
          return false;
        } else if (_source95.is_LtChar) {
          return false;
        } else if (_source95.is_Plus) {
          return false;
        } else if (_source95.is_Minus) {
          return false;
        } else if (_source95.is_Times) {
          return false;
        } else if (_source95.is_BitwiseAnd) {
          return false;
        } else if (_source95.is_BitwiseOr) {
          return false;
        } else if (_source95.is_BitwiseXor) {
          return false;
        } else if (_source95.is_BitwiseShiftRight) {
          return false;
        } else if (_source95.is_BitwiseShiftLeft) {
          return false;
        } else if (_source95.is_And) {
          return false;
        } else if (_source95.is_Or) {
          return false;
        } else if (_source95.is_In) {
          return true;
        } else if (_source95.is_SeqProperPrefix) {
          return false;
        } else if (_source95.is_SeqPrefix) {
          return false;
        } else if (_source95.is_SetMerge) {
          return false;
        } else if (_source95.is_SetSubtraction) {
          return false;
        } else if (_source95.is_SetIntersection) {
          return false;
        } else if (_source95.is_Subset) {
          return false;
        } else if (_source95.is_ProperSubset) {
          return false;
        } else if (_source95.is_SetDisjoint) {
          return false;
        } else if (_source95.is_MapMerge) {
          return false;
        } else if (_source95.is_MapSubtraction) {
          return false;
        } else if (_source95.is_MultisetMerge) {
          return false;
        } else if (_source95.is_MultisetSubtraction) {
          return false;
        } else if (_source95.is_MultisetIntersection) {
          return false;
        } else if (_source95.is_Submultiset) {
          return false;
        } else if (_source95.is_ProperSubmultiset) {
          return false;
        } else if (_source95.is_MultisetDisjoint) {
          return false;
        } else if (_source95.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _2863___mcc_h10 = _source95.dtor_Passthrough_a0;
          return false;
        }
      }))(_2852_op);
      bool _2864_becomesCallLeftRight;
      _2864_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source96) => {
        if (_source96.is_Eq) {
          bool _2865___mcc_h12 = _source96.dtor_referential;
          bool _2866___mcc_h13 = _source96.dtor_nullable;
          if ((_2865___mcc_h12) == (true)) {
            if ((_2866___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source96.is_Div) {
          return false;
        } else if (_source96.is_EuclidianDiv) {
          return false;
        } else if (_source96.is_Mod) {
          return false;
        } else if (_source96.is_EuclidianMod) {
          return false;
        } else if (_source96.is_Lt) {
          return false;
        } else if (_source96.is_LtChar) {
          return false;
        } else if (_source96.is_Plus) {
          return false;
        } else if (_source96.is_Minus) {
          return false;
        } else if (_source96.is_Times) {
          return false;
        } else if (_source96.is_BitwiseAnd) {
          return false;
        } else if (_source96.is_BitwiseOr) {
          return false;
        } else if (_source96.is_BitwiseXor) {
          return false;
        } else if (_source96.is_BitwiseShiftRight) {
          return false;
        } else if (_source96.is_BitwiseShiftLeft) {
          return false;
        } else if (_source96.is_And) {
          return false;
        } else if (_source96.is_Or) {
          return false;
        } else if (_source96.is_In) {
          return false;
        } else if (_source96.is_SeqProperPrefix) {
          return false;
        } else if (_source96.is_SeqPrefix) {
          return false;
        } else if (_source96.is_SetMerge) {
          return false;
        } else if (_source96.is_SetSubtraction) {
          return false;
        } else if (_source96.is_SetIntersection) {
          return false;
        } else if (_source96.is_Subset) {
          return false;
        } else if (_source96.is_ProperSubset) {
          return false;
        } else if (_source96.is_SetDisjoint) {
          return false;
        } else if (_source96.is_MapMerge) {
          return false;
        } else if (_source96.is_MapSubtraction) {
          return false;
        } else if (_source96.is_MultisetMerge) {
          return false;
        } else if (_source96.is_MultisetSubtraction) {
          return false;
        } else if (_source96.is_MultisetIntersection) {
          return false;
        } else if (_source96.is_Submultiset) {
          return false;
        } else if (_source96.is_ProperSubmultiset) {
          return false;
        } else if (_source96.is_MultisetDisjoint) {
          return false;
        } else if (_source96.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _2867___mcc_h16 = _source96.dtor_Passthrough_a0;
          return false;
        }
      }))(_2852_op);
      DCOMP._IOwnership _2868_expectedLeftOwnership;
      _2868_expectedLeftOwnership = ((_2856_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_2860_becomesRightCallsLeft) || (_2864_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _2869_expectedRightOwnership;
      _2869_expectedRightOwnership = (((_2856_becomesLeftCallsRight) || (_2864_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_2860_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _2870_left;
      DCOMP._IOwnership _2871___v62;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdentsL;
      RAST._IExpr _out189;
      DCOMP._IOwnership _out190;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
      DCOMP.COMP.GenExpr(_2853_lExpr, selfIdent, @params, _2868_expectedLeftOwnership, out _out189, out _out190, out _out191);
      _2870_left = _out189;
      _2871___v62 = _out190;
      _2872_recIdentsL = _out191;
      RAST._IExpr _2873_right;
      DCOMP._IOwnership _2874___v63;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdentsR;
      RAST._IExpr _out192;
      DCOMP._IOwnership _out193;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
      DCOMP.COMP.GenExpr(_2854_rExpr, selfIdent, @params, _2869_expectedRightOwnership, out _out192, out _out193, out _out194);
      _2873_right = _out192;
      _2874___v63 = _out193;
      _2875_recIdentsR = _out194;
      DAST._IBinOp _source97 = _2852_op;
      if (_source97.is_Eq) {
        bool _2876___mcc_h18 = _source97.dtor_referential;
        bool _2877___mcc_h19 = _source97.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source98 = _2852_op;
            if (_source98.is_Eq) {
              bool _2878___mcc_h24 = _source98.dtor_referential;
              bool _2879___mcc_h25 = _source98.dtor_nullable;
              bool _2880_nullable = _2879___mcc_h25;
              bool _2881_referential = _2878___mcc_h24;
              {
                if (_2881_referential) {
                  if (_2880_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source98.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source98.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2882___mcc_h26 = _source98.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2883_op = _2882___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_2883_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source99 = _2852_op;
            if (_source99.is_Eq) {
              bool _2884___mcc_h27 = _source99.dtor_referential;
              bool _2885___mcc_h28 = _source99.dtor_nullable;
              bool _2886_nullable = _2885___mcc_h28;
              bool _2887_referential = _2884___mcc_h27;
              {
                if (_2887_referential) {
                  if (_2886_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source99.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source99.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2888___mcc_h29 = _source99.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2889_op = _2888___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_2889_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source100 = _2852_op;
            if (_source100.is_Eq) {
              bool _2890___mcc_h30 = _source100.dtor_referential;
              bool _2891___mcc_h31 = _source100.dtor_nullable;
              bool _2892_nullable = _2891___mcc_h31;
              bool _2893_referential = _2890___mcc_h30;
              {
                if (_2893_referential) {
                  if (_2892_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source100.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source100.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2894___mcc_h32 = _source100.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2895_op = _2894___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_2895_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source101 = _2852_op;
            if (_source101.is_Eq) {
              bool _2896___mcc_h33 = _source101.dtor_referential;
              bool _2897___mcc_h34 = _source101.dtor_nullable;
              bool _2898_nullable = _2897___mcc_h34;
              bool _2899_referential = _2896___mcc_h33;
              {
                if (_2899_referential) {
                  if (_2898_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source101.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source101.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2900___mcc_h35 = _source101.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2901_op = _2900___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_2901_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source102 = _2852_op;
            if (_source102.is_Eq) {
              bool _2902___mcc_h36 = _source102.dtor_referential;
              bool _2903___mcc_h37 = _source102.dtor_nullable;
              bool _2904_nullable = _2903___mcc_h37;
              bool _2905_referential = _2902___mcc_h36;
              {
                if (_2905_referential) {
                  if (_2904_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source102.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source102.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2906___mcc_h38 = _source102.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2907_op = _2906___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_2907_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source103 = _2852_op;
            if (_source103.is_Eq) {
              bool _2908___mcc_h39 = _source103.dtor_referential;
              bool _2909___mcc_h40 = _source103.dtor_nullable;
              bool _2910_nullable = _2909___mcc_h40;
              bool _2911_referential = _2908___mcc_h39;
              {
                if (_2911_referential) {
                  if (_2910_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source103.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source103.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2912___mcc_h41 = _source103.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2913_op = _2912___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_2913_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source104 = _2852_op;
            if (_source104.is_Eq) {
              bool _2914___mcc_h42 = _source104.dtor_referential;
              bool _2915___mcc_h43 = _source104.dtor_nullable;
              bool _2916_nullable = _2915___mcc_h43;
              bool _2917_referential = _2914___mcc_h42;
              {
                if (_2917_referential) {
                  if (_2916_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source104.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source104.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2918___mcc_h44 = _source104.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2919_op = _2918___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_2919_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source105 = _2852_op;
            if (_source105.is_Eq) {
              bool _2920___mcc_h45 = _source105.dtor_referential;
              bool _2921___mcc_h46 = _source105.dtor_nullable;
              bool _2922_nullable = _2921___mcc_h46;
              bool _2923_referential = _2920___mcc_h45;
              {
                if (_2923_referential) {
                  if (_2922_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source105.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source105.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2924___mcc_h47 = _source105.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2925_op = _2924___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_2925_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source106 = _2852_op;
            if (_source106.is_Eq) {
              bool _2926___mcc_h48 = _source106.dtor_referential;
              bool _2927___mcc_h49 = _source106.dtor_nullable;
              bool _2928_nullable = _2927___mcc_h49;
              bool _2929_referential = _2926___mcc_h48;
              {
                if (_2929_referential) {
                  if (_2928_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source106.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source106.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2930___mcc_h50 = _source106.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2931_op = _2930___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_2931_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source107 = _2852_op;
            if (_source107.is_Eq) {
              bool _2932___mcc_h51 = _source107.dtor_referential;
              bool _2933___mcc_h52 = _source107.dtor_nullable;
              bool _2934_nullable = _2933___mcc_h52;
              bool _2935_referential = _2932___mcc_h51;
              {
                if (_2935_referential) {
                  if (_2934_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source107.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source107.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2936___mcc_h53 = _source107.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2937_op = _2936___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_2937_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source108 = _2852_op;
            if (_source108.is_Eq) {
              bool _2938___mcc_h54 = _source108.dtor_referential;
              bool _2939___mcc_h55 = _source108.dtor_nullable;
              bool _2940_nullable = _2939___mcc_h55;
              bool _2941_referential = _2938___mcc_h54;
              {
                if (_2941_referential) {
                  if (_2940_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source108.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source108.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2942___mcc_h56 = _source108.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2943_op = _2942___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_2943_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source109 = _2852_op;
            if (_source109.is_Eq) {
              bool _2944___mcc_h57 = _source109.dtor_referential;
              bool _2945___mcc_h58 = _source109.dtor_nullable;
              bool _2946_nullable = _2945___mcc_h58;
              bool _2947_referential = _2944___mcc_h57;
              {
                if (_2947_referential) {
                  if (_2946_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source109.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source109.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2948___mcc_h59 = _source109.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2949_op = _2948___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_2949_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source110 = _2852_op;
            if (_source110.is_Eq) {
              bool _2950___mcc_h60 = _source110.dtor_referential;
              bool _2951___mcc_h61 = _source110.dtor_nullable;
              bool _2952_nullable = _2951___mcc_h61;
              bool _2953_referential = _2950___mcc_h60;
              {
                if (_2953_referential) {
                  if (_2952_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source110.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source110.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2954___mcc_h62 = _source110.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2955_op = _2954___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_2955_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source111 = _2852_op;
            if (_source111.is_Eq) {
              bool _2956___mcc_h63 = _source111.dtor_referential;
              bool _2957___mcc_h64 = _source111.dtor_nullable;
              bool _2958_nullable = _2957___mcc_h64;
              bool _2959_referential = _2956___mcc_h63;
              {
                if (_2959_referential) {
                  if (_2958_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source111.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source111.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2960___mcc_h65 = _source111.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2961_op = _2960___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_2961_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source112 = _2852_op;
            if (_source112.is_Eq) {
              bool _2962___mcc_h66 = _source112.dtor_referential;
              bool _2963___mcc_h67 = _source112.dtor_nullable;
              bool _2964_nullable = _2963___mcc_h67;
              bool _2965_referential = _2962___mcc_h66;
              {
                if (_2965_referential) {
                  if (_2964_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source112.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source112.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2966___mcc_h68 = _source112.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2967_op = _2966___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_2967_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source113 = _2852_op;
            if (_source113.is_Eq) {
              bool _2968___mcc_h69 = _source113.dtor_referential;
              bool _2969___mcc_h70 = _source113.dtor_nullable;
              bool _2970_nullable = _2969___mcc_h70;
              bool _2971_referential = _2968___mcc_h69;
              {
                if (_2971_referential) {
                  if (_2970_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source113.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source113.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2972___mcc_h71 = _source113.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2973_op = _2972___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_2973_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source114 = _2852_op;
            if (_source114.is_Eq) {
              bool _2974___mcc_h72 = _source114.dtor_referential;
              bool _2975___mcc_h73 = _source114.dtor_nullable;
              bool _2976_nullable = _2975___mcc_h73;
              bool _2977_referential = _2974___mcc_h72;
              {
                if (_2977_referential) {
                  if (_2976_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source114.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source114.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2978___mcc_h74 = _source114.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2979_op = _2978___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_2979_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      } else if (_source97.is_In) {
        {
          r = ((_2873_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_2870_left);
        }
      } else if (_source97.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2870_left, _2873_right, _2855_format);
      } else if (_source97.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2870_left, _2873_right, _2855_format);
      } else if (_source97.is_SetMerge) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2873_right);
        }
      } else if (_source97.is_SetSubtraction) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2873_right);
        }
      } else if (_source97.is_SetIntersection) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_2873_right);
        }
      } else if (_source97.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_SetDisjoint) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MapMerge) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MapSubtraction) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MultisetMerge) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MultisetSubtraction) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2873_right);
        }
      } else if (_source97.is_MultisetIntersection) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_2873_right);
        }
      } else if (_source97.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2870_left, _2873_right, _2855_format);
        }
      } else if (_source97.is_MultisetDisjoint) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_2873_right);
        }
      } else if (_source97.is_Concat) {
        {
          r = ((_2870_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_2873_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _2980___mcc_h22 = _source97.dtor_Passthrough_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_2852_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2852_op), _2870_left, _2873_right, _2855_format);
          } else {
            DAST._IBinOp _source115 = _2852_op;
            if (_source115.is_Eq) {
              bool _2981___mcc_h75 = _source115.dtor_referential;
              bool _2982___mcc_h76 = _source115.dtor_nullable;
              bool _2983_nullable = _2982___mcc_h76;
              bool _2984_referential = _2981___mcc_h75;
              {
                if (_2984_referential) {
                  if (_2983_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2870_left, _2873_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source115.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else if (_source115.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_2870_left, _2873_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2985___mcc_h77 = _source115.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2986_op = _2985___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_2986_op, _2870_left, _2873_right, _2855_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out195;
      DCOMP._IOwnership _out196;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out195, out _out196);
      r = _out195;
      resultingOwnership = _out196;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2872_recIdentsL, _2875_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs50 = e;
      DAST._IExpression _2987_expr = _let_tmp_rhs50.dtor_value;
      DAST._IType _2988_fromTpe = _let_tmp_rhs50.dtor_from;
      DAST._IType _2989_toTpe = _let_tmp_rhs50.dtor_typ;
      if (object.Equals(_2988_fromTpe, _2989_toTpe)) {
        RAST._IExpr _2990_recursiveGen;
        DCOMP._IOwnership _2991_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2992_recIdents;
        RAST._IExpr _out197;
        DCOMP._IOwnership _out198;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
        DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out197, out _out198, out _out199);
        _2990_recursiveGen = _out197;
        _2991_recOwned = _out198;
        _2992_recIdents = _out199;
        r = _2990_recursiveGen;
        RAST._IExpr _out200;
        DCOMP._IOwnership _out201;
        DCOMP.COMP.FromOwnership(r, _2991_recOwned, expectedOwnership, out _out200, out _out201);
        r = _out200;
        resultingOwnership = _out201;
        readIdents = _2992_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source116 = _System.Tuple2<DAST._IType, DAST._IType>.create(_2988_fromTpe, _2989_toTpe);
        DAST._IType _2993___mcc_h0 = _source116.dtor__0;
        DAST._IType _2994___mcc_h1 = _source116.dtor__1;
        DAST._IType _source117 = _2993___mcc_h0;
        if (_source117.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2995___mcc_h4 = _source117.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _2996___mcc_h5 = _source117.dtor_typeArgs;
          DAST._IResolvedType _2997___mcc_h6 = _source117.dtor_resolved;
          DAST._IResolvedType _source118 = _2997___mcc_h6;
          if (_source118.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2998___mcc_h16 = _source118.dtor_path;
            DAST._IType _source119 = _2994___mcc_h1;
            if (_source119.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2999___mcc_h20 = _source119.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3000___mcc_h21 = _source119.dtor_typeArgs;
              DAST._IResolvedType _3001___mcc_h22 = _source119.dtor_resolved;
              DAST._IResolvedType _source120 = _3001___mcc_h22;
              if (_source120.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3002___mcc_h26 = _source120.dtor_path;
                {
                  RAST._IExpr _3003_recursiveGen;
                  DCOMP._IOwnership _3004_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3005_recIdents;
                  RAST._IExpr _out202;
                  DCOMP._IOwnership _out203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out202, out _out203, out _out204);
                  _3003_recursiveGen = _out202;
                  _3004_recOwned = _out203;
                  _3005_recIdents = _out204;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3003_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out205;
                  DCOMP._IOwnership _out206;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out205, out _out206);
                  r = _out205;
                  resultingOwnership = _out206;
                  readIdents = _3005_recIdents;
                }
              } else if (_source120.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3006___mcc_h28 = _source120.dtor_path;
                {
                  RAST._IExpr _3007_recursiveGen;
                  DCOMP._IOwnership _3008_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3009_recIdents;
                  RAST._IExpr _out207;
                  DCOMP._IOwnership _out208;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out207, out _out208, out _out209);
                  _3007_recursiveGen = _out207;
                  _3008_recOwned = _out208;
                  _3009_recIdents = _out209;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3007_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out210;
                  DCOMP._IOwnership _out211;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out210, out _out211);
                  r = _out210;
                  resultingOwnership = _out211;
                  readIdents = _3009_recIdents;
                }
              } else {
                DAST._IType _3010___mcc_h30 = _source120.dtor_baseType;
                DAST._INewtypeRange _3011___mcc_h31 = _source120.dtor_range;
                bool _3012___mcc_h32 = _source120.dtor_erase;
                bool _3013_erase = _3012___mcc_h32;
                DAST._INewtypeRange _3014_range = _3011___mcc_h31;
                DAST._IType _3015_b = _3010___mcc_h30;
                {
                  if (object.Equals(_2988_fromTpe, _3015_b)) {
                    RAST._IExpr _3016_recursiveGen;
                    DCOMP._IOwnership _3017_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3018_recIdents;
                    RAST._IExpr _out212;
                    DCOMP._IOwnership _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out212, out _out213, out _out214);
                    _3016_recursiveGen = _out212;
                    _3017_recOwned = _out213;
                    _3018_recIdents = _out214;
                    Std.Wrappers._IOption<RAST._IType> _3019_potentialRhsType;
                    _3019_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3015_b, _3014_range);
                    Std.Wrappers._IOption<RAST._IType> _source121 = _3019_potentialRhsType;
                    if (_source121.is_None) {
                      if (_3013_erase) {
                        r = _3016_recursiveGen;
                      } else {
                        RAST._IType _3020_rhsType;
                        RAST._IType _out215;
                        _out215 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _3020_rhsType = _out215;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3020_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3016_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out216;
                      DCOMP._IOwnership _out217;
                      DCOMP.COMP.FromOwnership(r, _3017_recOwned, expectedOwnership, out _out216, out _out217);
                      r = _out216;
                      resultingOwnership = _out217;
                    } else {
                      RAST._IType _3021___mcc_h1154 = _source121.dtor_value;
                      RAST._IType _3022_v = _3021___mcc_h1154;
                      r = RAST.Expr.create_ConversionNum(_3022_v, _3016_recursiveGen);
                      RAST._IExpr _out218;
                      DCOMP._IOwnership _out219;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out218, out _out219);
                      r = _out218;
                      resultingOwnership = _out219;
                    }
                    readIdents = _3018_recIdents;
                  } else {
                    RAST._IExpr _out220;
                    DCOMP._IOwnership _out221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3015_b), _3015_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out220, out _out221, out _out222);
                    r = _out220;
                    resultingOwnership = _out221;
                    readIdents = _out222;
                  }
                }
              }
            } else if (_source119.is_Nullable) {
              DAST._IType _3023___mcc_h36 = _source119.dtor_Nullable_a0;
              {
                RAST._IExpr _3024_recursiveGen;
                DCOMP._IOwnership _3025_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3026_recIdents;
                RAST._IExpr _out223;
                DCOMP._IOwnership _out224;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out225;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out223, out _out224, out _out225);
                _3024_recursiveGen = _out223;
                _3025_recOwned = _out224;
                _3026_recIdents = _out225;
                Dafny.ISequence<Dafny.Rune> _3027_s;
                _3027_s = (_3024_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3025_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3027_s = Dafny.Sequence<Dafny.Rune>.Concat(_3027_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _3027_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3027_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_3027_s);
                RAST._IExpr _out226;
                DCOMP._IOwnership _out227;
                DCOMP.COMP.FromOwnership(r, _3025_recOwned, expectedOwnership, out _out226, out _out227);
                r = _out226;
                resultingOwnership = _out227;
                readIdents = _3026_recIdents;
              }
            } else if (_source119.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3028___mcc_h38 = _source119.dtor_Tuple_a0;
              {
                RAST._IExpr _3029_recursiveGen;
                DCOMP._IOwnership _3030_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3031_recIdents;
                RAST._IExpr _out228;
                DCOMP._IOwnership _out229;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out228, out _out229, out _out230);
                _3029_recursiveGen = _out228;
                _3030_recOwned = _out229;
                _3031_recIdents = _out230;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3029_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out231;
                DCOMP._IOwnership _out232;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out231, out _out232);
                r = _out231;
                resultingOwnership = _out232;
                readIdents = _3031_recIdents;
              }
            } else if (_source119.is_Array) {
              DAST._IType _3032___mcc_h40 = _source119.dtor_element;
              BigInteger _3033___mcc_h41 = _source119.dtor_dims;
              {
                RAST._IExpr _3034_recursiveGen;
                DCOMP._IOwnership _3035_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdents;
                RAST._IExpr _out233;
                DCOMP._IOwnership _out234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out233, out _out234, out _out235);
                _3034_recursiveGen = _out233;
                _3035_recOwned = _out234;
                _3036_recIdents = _out235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3034_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out236;
                DCOMP._IOwnership _out237;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out236, out _out237);
                r = _out236;
                resultingOwnership = _out237;
                readIdents = _3036_recIdents;
              }
            } else if (_source119.is_Seq) {
              DAST._IType _3037___mcc_h44 = _source119.dtor_element;
              {
                RAST._IExpr _3038_recursiveGen;
                DCOMP._IOwnership _3039_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3040_recIdents;
                RAST._IExpr _out238;
                DCOMP._IOwnership _out239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out238, out _out239, out _out240);
                _3038_recursiveGen = _out238;
                _3039_recOwned = _out239;
                _3040_recIdents = _out240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3038_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out241;
                DCOMP._IOwnership _out242;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out241, out _out242);
                r = _out241;
                resultingOwnership = _out242;
                readIdents = _3040_recIdents;
              }
            } else if (_source119.is_Set) {
              DAST._IType _3041___mcc_h46 = _source119.dtor_element;
              {
                RAST._IExpr _3042_recursiveGen;
                DCOMP._IOwnership _3043_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3044_recIdents;
                RAST._IExpr _out243;
                DCOMP._IOwnership _out244;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out243, out _out244, out _out245);
                _3042_recursiveGen = _out243;
                _3043_recOwned = _out244;
                _3044_recIdents = _out245;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3042_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out246;
                DCOMP._IOwnership _out247;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out246, out _out247);
                r = _out246;
                resultingOwnership = _out247;
                readIdents = _3044_recIdents;
              }
            } else if (_source119.is_Multiset) {
              DAST._IType _3045___mcc_h48 = _source119.dtor_element;
              {
                RAST._IExpr _3046_recursiveGen;
                DCOMP._IOwnership _3047_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3048_recIdents;
                RAST._IExpr _out248;
                DCOMP._IOwnership _out249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out248, out _out249, out _out250);
                _3046_recursiveGen = _out248;
                _3047_recOwned = _out249;
                _3048_recIdents = _out250;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3046_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out251;
                DCOMP._IOwnership _out252;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out251, out _out252);
                r = _out251;
                resultingOwnership = _out252;
                readIdents = _3048_recIdents;
              }
            } else if (_source119.is_Map) {
              DAST._IType _3049___mcc_h50 = _source119.dtor_key;
              DAST._IType _3050___mcc_h51 = _source119.dtor_value;
              {
                RAST._IExpr _3051_recursiveGen;
                DCOMP._IOwnership _3052_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3053_recIdents;
                RAST._IExpr _out253;
                DCOMP._IOwnership _out254;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out253, out _out254, out _out255);
                _3051_recursiveGen = _out253;
                _3052_recOwned = _out254;
                _3053_recIdents = _out255;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3051_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out256;
                DCOMP._IOwnership _out257;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out256, out _out257);
                r = _out256;
                resultingOwnership = _out257;
                readIdents = _3053_recIdents;
              }
            } else if (_source119.is_SetBuilder) {
              DAST._IType _3054___mcc_h54 = _source119.dtor_element;
              {
                RAST._IExpr _3055_recursiveGen;
                DCOMP._IOwnership _3056_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3057_recIdents;
                RAST._IExpr _out258;
                DCOMP._IOwnership _out259;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out258, out _out259, out _out260);
                _3055_recursiveGen = _out258;
                _3056_recOwned = _out259;
                _3057_recIdents = _out260;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3055_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out261;
                DCOMP._IOwnership _out262;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out261, out _out262);
                r = _out261;
                resultingOwnership = _out262;
                readIdents = _3057_recIdents;
              }
            } else if (_source119.is_MapBuilder) {
              DAST._IType _3058___mcc_h56 = _source119.dtor_key;
              DAST._IType _3059___mcc_h57 = _source119.dtor_value;
              {
                RAST._IExpr _3060_recursiveGen;
                DCOMP._IOwnership _3061_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3062_recIdents;
                RAST._IExpr _out263;
                DCOMP._IOwnership _out264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out263, out _out264, out _out265);
                _3060_recursiveGen = _out263;
                _3061_recOwned = _out264;
                _3062_recIdents = _out265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3060_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out266;
                DCOMP._IOwnership _out267;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out266, out _out267);
                r = _out266;
                resultingOwnership = _out267;
                readIdents = _3062_recIdents;
              }
            } else if (_source119.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3063___mcc_h60 = _source119.dtor_args;
              DAST._IType _3064___mcc_h61 = _source119.dtor_result;
              {
                RAST._IExpr _3065_recursiveGen;
                DCOMP._IOwnership _3066_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3067_recIdents;
                RAST._IExpr _out268;
                DCOMP._IOwnership _out269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out268, out _out269, out _out270);
                _3065_recursiveGen = _out268;
                _3066_recOwned = _out269;
                _3067_recIdents = _out270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3065_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out271;
                DCOMP._IOwnership _out272;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out271, out _out272);
                r = _out271;
                resultingOwnership = _out272;
                readIdents = _3067_recIdents;
              }
            } else if (_source119.is_Primitive) {
              DAST._IPrimitive _3068___mcc_h64 = _source119.dtor_Primitive_a0;
              {
                RAST._IExpr _3069_recursiveGen;
                DCOMP._IOwnership _3070_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3071_recIdents;
                RAST._IExpr _out273;
                DCOMP._IOwnership _out274;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out273, out _out274, out _out275);
                _3069_recursiveGen = _out273;
                _3070_recOwned = _out274;
                _3071_recIdents = _out275;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3069_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out276;
                DCOMP._IOwnership _out277;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out276, out _out277);
                r = _out276;
                resultingOwnership = _out277;
                readIdents = _3071_recIdents;
              }
            } else if (_source119.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3072___mcc_h66 = _source119.dtor_Passthrough_a0;
              {
                RAST._IExpr _3073_recursiveGen;
                DCOMP._IOwnership _3074_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3075_recIdents;
                RAST._IExpr _out278;
                DCOMP._IOwnership _out279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out278, out _out279, out _out280);
                _3073_recursiveGen = _out278;
                _3074_recOwned = _out279;
                _3075_recIdents = _out280;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3073_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out281;
                DCOMP._IOwnership _out282;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out281, out _out282);
                r = _out281;
                resultingOwnership = _out282;
                readIdents = _3075_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3076___mcc_h68 = _source119.dtor_TypeArg_a0;
              {
                RAST._IExpr _3077_recursiveGen;
                DCOMP._IOwnership _3078_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3079_recIdents;
                RAST._IExpr _out283;
                DCOMP._IOwnership _out284;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out283, out _out284, out _out285);
                _3077_recursiveGen = _out283;
                _3078_recOwned = _out284;
                _3079_recIdents = _out285;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3077_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out286;
                DCOMP._IOwnership _out287;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out286, out _out287);
                r = _out286;
                resultingOwnership = _out287;
                readIdents = _3079_recIdents;
              }
            }
          } else if (_source118.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3080___mcc_h70 = _source118.dtor_path;
            DAST._IType _source122 = _2994___mcc_h1;
            if (_source122.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3081___mcc_h74 = _source122.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3082___mcc_h75 = _source122.dtor_typeArgs;
              DAST._IResolvedType _3083___mcc_h76 = _source122.dtor_resolved;
              DAST._IResolvedType _source123 = _3083___mcc_h76;
              if (_source123.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3084___mcc_h80 = _source123.dtor_path;
                {
                  RAST._IExpr _3085_recursiveGen;
                  DCOMP._IOwnership _3086_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3087_recIdents;
                  RAST._IExpr _out288;
                  DCOMP._IOwnership _out289;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out288, out _out289, out _out290);
                  _3085_recursiveGen = _out288;
                  _3086_recOwned = _out289;
                  _3087_recIdents = _out290;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3085_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out291;
                  DCOMP._IOwnership _out292;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out291, out _out292);
                  r = _out291;
                  resultingOwnership = _out292;
                  readIdents = _3087_recIdents;
                }
              } else if (_source123.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3088___mcc_h82 = _source123.dtor_path;
                {
                  RAST._IExpr _3089_recursiveGen;
                  DCOMP._IOwnership _3090_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3091_recIdents;
                  RAST._IExpr _out293;
                  DCOMP._IOwnership _out294;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out293, out _out294, out _out295);
                  _3089_recursiveGen = _out293;
                  _3090_recOwned = _out294;
                  _3091_recIdents = _out295;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3089_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out296;
                  DCOMP._IOwnership _out297;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out296, out _out297);
                  r = _out296;
                  resultingOwnership = _out297;
                  readIdents = _3091_recIdents;
                }
              } else {
                DAST._IType _3092___mcc_h84 = _source123.dtor_baseType;
                DAST._INewtypeRange _3093___mcc_h85 = _source123.dtor_range;
                bool _3094___mcc_h86 = _source123.dtor_erase;
                bool _3095_erase = _3094___mcc_h86;
                DAST._INewtypeRange _3096_range = _3093___mcc_h85;
                DAST._IType _3097_b = _3092___mcc_h84;
                {
                  if (object.Equals(_2988_fromTpe, _3097_b)) {
                    RAST._IExpr _3098_recursiveGen;
                    DCOMP._IOwnership _3099_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3100_recIdents;
                    RAST._IExpr _out298;
                    DCOMP._IOwnership _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out298, out _out299, out _out300);
                    _3098_recursiveGen = _out298;
                    _3099_recOwned = _out299;
                    _3100_recIdents = _out300;
                    Std.Wrappers._IOption<RAST._IType> _3101_potentialRhsType;
                    _3101_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3097_b, _3096_range);
                    Std.Wrappers._IOption<RAST._IType> _source124 = _3101_potentialRhsType;
                    if (_source124.is_None) {
                      if (_3095_erase) {
                        r = _3098_recursiveGen;
                      } else {
                        RAST._IType _3102_rhsType;
                        RAST._IType _out301;
                        _out301 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _3102_rhsType = _out301;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3102_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3098_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out302;
                      DCOMP._IOwnership _out303;
                      DCOMP.COMP.FromOwnership(r, _3099_recOwned, expectedOwnership, out _out302, out _out303);
                      r = _out302;
                      resultingOwnership = _out303;
                    } else {
                      RAST._IType _3103___mcc_h1155 = _source124.dtor_value;
                      RAST._IType _3104_v = _3103___mcc_h1155;
                      r = RAST.Expr.create_ConversionNum(_3104_v, _3098_recursiveGen);
                      RAST._IExpr _out304;
                      DCOMP._IOwnership _out305;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out304, out _out305);
                      r = _out304;
                      resultingOwnership = _out305;
                    }
                    readIdents = _3100_recIdents;
                  } else {
                    RAST._IExpr _out306;
                    DCOMP._IOwnership _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3097_b), _3097_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out306, out _out307, out _out308);
                    r = _out306;
                    resultingOwnership = _out307;
                    readIdents = _out308;
                  }
                }
              }
            } else if (_source122.is_Nullable) {
              DAST._IType _3105___mcc_h90 = _source122.dtor_Nullable_a0;
              {
                RAST._IExpr _3106_recursiveGen;
                DCOMP._IOwnership _3107_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3108_recIdents;
                RAST._IExpr _out309;
                DCOMP._IOwnership _out310;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out309, out _out310, out _out311);
                _3106_recursiveGen = _out309;
                _3107_recOwned = _out310;
                _3108_recIdents = _out311;
                Dafny.ISequence<Dafny.Rune> _3109_s;
                _3109_s = (_3106_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3107_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3109_s = Dafny.Sequence<Dafny.Rune>.Concat(_3109_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _3109_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3109_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_3109_s);
                RAST._IExpr _out312;
                DCOMP._IOwnership _out313;
                DCOMP.COMP.FromOwnership(r, _3107_recOwned, expectedOwnership, out _out312, out _out313);
                r = _out312;
                resultingOwnership = _out313;
                readIdents = _3108_recIdents;
              }
            } else if (_source122.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3110___mcc_h92 = _source122.dtor_Tuple_a0;
              {
                RAST._IExpr _3111_recursiveGen;
                DCOMP._IOwnership _3112_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3113_recIdents;
                RAST._IExpr _out314;
                DCOMP._IOwnership _out315;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out314, out _out315, out _out316);
                _3111_recursiveGen = _out314;
                _3112_recOwned = _out315;
                _3113_recIdents = _out316;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3111_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out317;
                DCOMP._IOwnership _out318;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out317, out _out318);
                r = _out317;
                resultingOwnership = _out318;
                readIdents = _3113_recIdents;
              }
            } else if (_source122.is_Array) {
              DAST._IType _3114___mcc_h94 = _source122.dtor_element;
              BigInteger _3115___mcc_h95 = _source122.dtor_dims;
              {
                RAST._IExpr _3116_recursiveGen;
                DCOMP._IOwnership _3117_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3118_recIdents;
                RAST._IExpr _out319;
                DCOMP._IOwnership _out320;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out319, out _out320, out _out321);
                _3116_recursiveGen = _out319;
                _3117_recOwned = _out320;
                _3118_recIdents = _out321;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3116_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out322;
                DCOMP._IOwnership _out323;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out322, out _out323);
                r = _out322;
                resultingOwnership = _out323;
                readIdents = _3118_recIdents;
              }
            } else if (_source122.is_Seq) {
              DAST._IType _3119___mcc_h98 = _source122.dtor_element;
              {
                RAST._IExpr _3120_recursiveGen;
                DCOMP._IOwnership _3121_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3122_recIdents;
                RAST._IExpr _out324;
                DCOMP._IOwnership _out325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out326;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out324, out _out325, out _out326);
                _3120_recursiveGen = _out324;
                _3121_recOwned = _out325;
                _3122_recIdents = _out326;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3120_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out327;
                DCOMP._IOwnership _out328;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out327, out _out328);
                r = _out327;
                resultingOwnership = _out328;
                readIdents = _3122_recIdents;
              }
            } else if (_source122.is_Set) {
              DAST._IType _3123___mcc_h100 = _source122.dtor_element;
              {
                RAST._IExpr _3124_recursiveGen;
                DCOMP._IOwnership _3125_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3126_recIdents;
                RAST._IExpr _out329;
                DCOMP._IOwnership _out330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out329, out _out330, out _out331);
                _3124_recursiveGen = _out329;
                _3125_recOwned = _out330;
                _3126_recIdents = _out331;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3124_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out332;
                DCOMP._IOwnership _out333;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out332, out _out333);
                r = _out332;
                resultingOwnership = _out333;
                readIdents = _3126_recIdents;
              }
            } else if (_source122.is_Multiset) {
              DAST._IType _3127___mcc_h102 = _source122.dtor_element;
              {
                RAST._IExpr _3128_recursiveGen;
                DCOMP._IOwnership _3129_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3130_recIdents;
                RAST._IExpr _out334;
                DCOMP._IOwnership _out335;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out334, out _out335, out _out336);
                _3128_recursiveGen = _out334;
                _3129_recOwned = _out335;
                _3130_recIdents = _out336;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3128_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out337;
                DCOMP._IOwnership _out338;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out337, out _out338);
                r = _out337;
                resultingOwnership = _out338;
                readIdents = _3130_recIdents;
              }
            } else if (_source122.is_Map) {
              DAST._IType _3131___mcc_h104 = _source122.dtor_key;
              DAST._IType _3132___mcc_h105 = _source122.dtor_value;
              {
                RAST._IExpr _3133_recursiveGen;
                DCOMP._IOwnership _3134_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3135_recIdents;
                RAST._IExpr _out339;
                DCOMP._IOwnership _out340;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out339, out _out340, out _out341);
                _3133_recursiveGen = _out339;
                _3134_recOwned = _out340;
                _3135_recIdents = _out341;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3133_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out342;
                DCOMP._IOwnership _out343;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out342, out _out343);
                r = _out342;
                resultingOwnership = _out343;
                readIdents = _3135_recIdents;
              }
            } else if (_source122.is_SetBuilder) {
              DAST._IType _3136___mcc_h108 = _source122.dtor_element;
              {
                RAST._IExpr _3137_recursiveGen;
                DCOMP._IOwnership _3138_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3139_recIdents;
                RAST._IExpr _out344;
                DCOMP._IOwnership _out345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out344, out _out345, out _out346);
                _3137_recursiveGen = _out344;
                _3138_recOwned = _out345;
                _3139_recIdents = _out346;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3137_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out347;
                DCOMP._IOwnership _out348;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out347, out _out348);
                r = _out347;
                resultingOwnership = _out348;
                readIdents = _3139_recIdents;
              }
            } else if (_source122.is_MapBuilder) {
              DAST._IType _3140___mcc_h110 = _source122.dtor_key;
              DAST._IType _3141___mcc_h111 = _source122.dtor_value;
              {
                RAST._IExpr _3142_recursiveGen;
                DCOMP._IOwnership _3143_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3144_recIdents;
                RAST._IExpr _out349;
                DCOMP._IOwnership _out350;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out349, out _out350, out _out351);
                _3142_recursiveGen = _out349;
                _3143_recOwned = _out350;
                _3144_recIdents = _out351;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3142_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out352;
                DCOMP._IOwnership _out353;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out352, out _out353);
                r = _out352;
                resultingOwnership = _out353;
                readIdents = _3144_recIdents;
              }
            } else if (_source122.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3145___mcc_h114 = _source122.dtor_args;
              DAST._IType _3146___mcc_h115 = _source122.dtor_result;
              {
                RAST._IExpr _3147_recursiveGen;
                DCOMP._IOwnership _3148_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3149_recIdents;
                RAST._IExpr _out354;
                DCOMP._IOwnership _out355;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out354, out _out355, out _out356);
                _3147_recursiveGen = _out354;
                _3148_recOwned = _out355;
                _3149_recIdents = _out356;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3147_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out357;
                DCOMP._IOwnership _out358;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out357, out _out358);
                r = _out357;
                resultingOwnership = _out358;
                readIdents = _3149_recIdents;
              }
            } else if (_source122.is_Primitive) {
              DAST._IPrimitive _3150___mcc_h118 = _source122.dtor_Primitive_a0;
              {
                RAST._IExpr _3151_recursiveGen;
                DCOMP._IOwnership _3152_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3153_recIdents;
                RAST._IExpr _out359;
                DCOMP._IOwnership _out360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out359, out _out360, out _out361);
                _3151_recursiveGen = _out359;
                _3152_recOwned = _out360;
                _3153_recIdents = _out361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3151_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out362;
                DCOMP._IOwnership _out363;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out362, out _out363);
                r = _out362;
                resultingOwnership = _out363;
                readIdents = _3153_recIdents;
              }
            } else if (_source122.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3154___mcc_h120 = _source122.dtor_Passthrough_a0;
              {
                RAST._IExpr _3155_recursiveGen;
                DCOMP._IOwnership _3156_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3157_recIdents;
                RAST._IExpr _out364;
                DCOMP._IOwnership _out365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out364, out _out365, out _out366);
                _3155_recursiveGen = _out364;
                _3156_recOwned = _out365;
                _3157_recIdents = _out366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3155_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out367;
                DCOMP._IOwnership _out368;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out367, out _out368);
                r = _out367;
                resultingOwnership = _out368;
                readIdents = _3157_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3158___mcc_h122 = _source122.dtor_TypeArg_a0;
              {
                RAST._IExpr _3159_recursiveGen;
                DCOMP._IOwnership _3160_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3161_recIdents;
                RAST._IExpr _out369;
                DCOMP._IOwnership _out370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out369, out _out370, out _out371);
                _3159_recursiveGen = _out369;
                _3160_recOwned = _out370;
                _3161_recIdents = _out371;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3159_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out372;
                DCOMP._IOwnership _out373;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out372, out _out373);
                r = _out372;
                resultingOwnership = _out373;
                readIdents = _3161_recIdents;
              }
            }
          } else {
            DAST._IType _3162___mcc_h124 = _source118.dtor_baseType;
            DAST._INewtypeRange _3163___mcc_h125 = _source118.dtor_range;
            bool _3164___mcc_h126 = _source118.dtor_erase;
            DAST._IType _source125 = _2994___mcc_h1;
            if (_source125.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3165___mcc_h136 = _source125.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3166___mcc_h137 = _source125.dtor_typeArgs;
              DAST._IResolvedType _3167___mcc_h138 = _source125.dtor_resolved;
              DAST._IResolvedType _source126 = _3167___mcc_h138;
              if (_source126.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3168___mcc_h145 = _source126.dtor_path;
                bool _3169_erase = _3164___mcc_h126;
                DAST._INewtypeRange _3170_range = _3163___mcc_h125;
                DAST._IType _3171_b = _3162___mcc_h124;
                {
                  if (object.Equals(_3171_b, _2989_toTpe)) {
                    RAST._IExpr _3172_recursiveGen;
                    DCOMP._IOwnership _3173_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3174_recIdents;
                    RAST._IExpr _out374;
                    DCOMP._IOwnership _out375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out374, out _out375, out _out376);
                    _3172_recursiveGen = _out374;
                    _3173_recOwned = _out375;
                    _3174_recIdents = _out376;
                    if (_3169_erase) {
                      r = _3172_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3172_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out377;
                    DCOMP._IOwnership _out378;
                    DCOMP.COMP.FromOwnership(r, _3173_recOwned, expectedOwnership, out _out377, out _out378);
                    r = _out377;
                    resultingOwnership = _out378;
                    readIdents = _3174_recIdents;
                  } else {
                    RAST._IExpr _out379;
                    DCOMP._IOwnership _out380;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3171_b), _3171_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out379, out _out380, out _out381);
                    r = _out379;
                    resultingOwnership = _out380;
                    readIdents = _out381;
                  }
                }
              } else if (_source126.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3175___mcc_h148 = _source126.dtor_path;
                bool _3176_erase = _3164___mcc_h126;
                DAST._INewtypeRange _3177_range = _3163___mcc_h125;
                DAST._IType _3178_b = _3162___mcc_h124;
                {
                  if (object.Equals(_3178_b, _2989_toTpe)) {
                    RAST._IExpr _3179_recursiveGen;
                    DCOMP._IOwnership _3180_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3181_recIdents;
                    RAST._IExpr _out382;
                    DCOMP._IOwnership _out383;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out382, out _out383, out _out384);
                    _3179_recursiveGen = _out382;
                    _3180_recOwned = _out383;
                    _3181_recIdents = _out384;
                    if (_3176_erase) {
                      r = _3179_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3179_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out385;
                    DCOMP._IOwnership _out386;
                    DCOMP.COMP.FromOwnership(r, _3180_recOwned, expectedOwnership, out _out385, out _out386);
                    r = _out385;
                    resultingOwnership = _out386;
                    readIdents = _3181_recIdents;
                  } else {
                    RAST._IExpr _out387;
                    DCOMP._IOwnership _out388;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3178_b), _3178_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out387, out _out388, out _out389);
                    r = _out387;
                    resultingOwnership = _out388;
                    readIdents = _out389;
                  }
                }
              } else {
                DAST._IType _3182___mcc_h151 = _source126.dtor_baseType;
                DAST._INewtypeRange _3183___mcc_h152 = _source126.dtor_range;
                bool _3184___mcc_h153 = _source126.dtor_erase;
                bool _3185_erase = _3184___mcc_h153;
                DAST._INewtypeRange _3186_range = _3183___mcc_h152;
                DAST._IType _3187_b = _3182___mcc_h151;
                {
                  if (object.Equals(_2988_fromTpe, _3187_b)) {
                    RAST._IExpr _3188_recursiveGen;
                    DCOMP._IOwnership _3189_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3190_recIdents;
                    RAST._IExpr _out390;
                    DCOMP._IOwnership _out391;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out390, out _out391, out _out392);
                    _3188_recursiveGen = _out390;
                    _3189_recOwned = _out391;
                    _3190_recIdents = _out392;
                    Std.Wrappers._IOption<RAST._IType> _3191_potentialRhsType;
                    _3191_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3187_b, _3186_range);
                    Std.Wrappers._IOption<RAST._IType> _source127 = _3191_potentialRhsType;
                    if (_source127.is_None) {
                      if (_3185_erase) {
                        r = _3188_recursiveGen;
                      } else {
                        RAST._IType _3192_rhsType;
                        RAST._IType _out393;
                        _out393 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _3192_rhsType = _out393;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3192_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3188_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out394;
                      DCOMP._IOwnership _out395;
                      DCOMP.COMP.FromOwnership(r, _3189_recOwned, expectedOwnership, out _out394, out _out395);
                      r = _out394;
                      resultingOwnership = _out395;
                    } else {
                      RAST._IType _3193___mcc_h1156 = _source127.dtor_value;
                      RAST._IType _3194_v = _3193___mcc_h1156;
                      r = RAST.Expr.create_ConversionNum(_3194_v, _3188_recursiveGen);
                      RAST._IExpr _out396;
                      DCOMP._IOwnership _out397;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out396, out _out397);
                      r = _out396;
                      resultingOwnership = _out397;
                    }
                    readIdents = _3190_recIdents;
                  } else {
                    RAST._IExpr _out398;
                    DCOMP._IOwnership _out399;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3187_b), _3187_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out398, out _out399, out _out400);
                    r = _out398;
                    resultingOwnership = _out399;
                    readIdents = _out400;
                  }
                }
              }
            } else if (_source125.is_Nullable) {
              DAST._IType _3195___mcc_h160 = _source125.dtor_Nullable_a0;
              {
                RAST._IExpr _3196_recursiveGen;
                DCOMP._IOwnership _3197_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3198_recIdents;
                RAST._IExpr _out401;
                DCOMP._IOwnership _out402;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out401, out _out402, out _out403);
                _3196_recursiveGen = _out401;
                _3197_recOwned = _out402;
                _3198_recIdents = _out403;
                Dafny.ISequence<Dafny.Rune> _3199_s;
                _3199_s = (_3196_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3197_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3199_s = Dafny.Sequence<Dafny.Rune>.Concat(_3199_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _3199_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3199_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_3199_s);
                RAST._IExpr _out404;
                DCOMP._IOwnership _out405;
                DCOMP.COMP.FromOwnership(r, _3197_recOwned, expectedOwnership, out _out404, out _out405);
                r = _out404;
                resultingOwnership = _out405;
                readIdents = _3198_recIdents;
              }
            } else if (_source125.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3200___mcc_h163 = _source125.dtor_Tuple_a0;
              bool _3201_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3202_range = _3163___mcc_h125;
              DAST._IType _3203_b = _3162___mcc_h124;
              {
                if (object.Equals(_3203_b, _2989_toTpe)) {
                  RAST._IExpr _3204_recursiveGen;
                  DCOMP._IOwnership _3205_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3206_recIdents;
                  RAST._IExpr _out406;
                  DCOMP._IOwnership _out407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out406, out _out407, out _out408);
                  _3204_recursiveGen = _out406;
                  _3205_recOwned = _out407;
                  _3206_recIdents = _out408;
                  if (_3201_erase) {
                    r = _3204_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3204_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out409;
                  DCOMP._IOwnership _out410;
                  DCOMP.COMP.FromOwnership(r, _3205_recOwned, expectedOwnership, out _out409, out _out410);
                  r = _out409;
                  resultingOwnership = _out410;
                  readIdents = _3206_recIdents;
                } else {
                  RAST._IExpr _out411;
                  DCOMP._IOwnership _out412;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3203_b), _3203_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out411, out _out412, out _out413);
                  r = _out411;
                  resultingOwnership = _out412;
                  readIdents = _out413;
                }
              }
            } else if (_source125.is_Array) {
              DAST._IType _3207___mcc_h166 = _source125.dtor_element;
              BigInteger _3208___mcc_h167 = _source125.dtor_dims;
              bool _3209_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3210_range = _3163___mcc_h125;
              DAST._IType _3211_b = _3162___mcc_h124;
              {
                if (object.Equals(_3211_b, _2989_toTpe)) {
                  RAST._IExpr _3212_recursiveGen;
                  DCOMP._IOwnership _3213_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3214_recIdents;
                  RAST._IExpr _out414;
                  DCOMP._IOwnership _out415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out414, out _out415, out _out416);
                  _3212_recursiveGen = _out414;
                  _3213_recOwned = _out415;
                  _3214_recIdents = _out416;
                  if (_3209_erase) {
                    r = _3212_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3212_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out417;
                  DCOMP._IOwnership _out418;
                  DCOMP.COMP.FromOwnership(r, _3213_recOwned, expectedOwnership, out _out417, out _out418);
                  r = _out417;
                  resultingOwnership = _out418;
                  readIdents = _3214_recIdents;
                } else {
                  RAST._IExpr _out419;
                  DCOMP._IOwnership _out420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3211_b), _3211_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out419, out _out420, out _out421);
                  r = _out419;
                  resultingOwnership = _out420;
                  readIdents = _out421;
                }
              }
            } else if (_source125.is_Seq) {
              DAST._IType _3215___mcc_h172 = _source125.dtor_element;
              bool _3216_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3217_range = _3163___mcc_h125;
              DAST._IType _3218_b = _3162___mcc_h124;
              {
                if (object.Equals(_3218_b, _2989_toTpe)) {
                  RAST._IExpr _3219_recursiveGen;
                  DCOMP._IOwnership _3220_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3221_recIdents;
                  RAST._IExpr _out422;
                  DCOMP._IOwnership _out423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out422, out _out423, out _out424);
                  _3219_recursiveGen = _out422;
                  _3220_recOwned = _out423;
                  _3221_recIdents = _out424;
                  if (_3216_erase) {
                    r = _3219_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3219_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out425;
                  DCOMP._IOwnership _out426;
                  DCOMP.COMP.FromOwnership(r, _3220_recOwned, expectedOwnership, out _out425, out _out426);
                  r = _out425;
                  resultingOwnership = _out426;
                  readIdents = _3221_recIdents;
                } else {
                  RAST._IExpr _out427;
                  DCOMP._IOwnership _out428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3218_b), _3218_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out427, out _out428, out _out429);
                  r = _out427;
                  resultingOwnership = _out428;
                  readIdents = _out429;
                }
              }
            } else if (_source125.is_Set) {
              DAST._IType _3222___mcc_h175 = _source125.dtor_element;
              bool _3223_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3224_range = _3163___mcc_h125;
              DAST._IType _3225_b = _3162___mcc_h124;
              {
                if (object.Equals(_3225_b, _2989_toTpe)) {
                  RAST._IExpr _3226_recursiveGen;
                  DCOMP._IOwnership _3227_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3228_recIdents;
                  RAST._IExpr _out430;
                  DCOMP._IOwnership _out431;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out430, out _out431, out _out432);
                  _3226_recursiveGen = _out430;
                  _3227_recOwned = _out431;
                  _3228_recIdents = _out432;
                  if (_3223_erase) {
                    r = _3226_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3226_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out433;
                  DCOMP._IOwnership _out434;
                  DCOMP.COMP.FromOwnership(r, _3227_recOwned, expectedOwnership, out _out433, out _out434);
                  r = _out433;
                  resultingOwnership = _out434;
                  readIdents = _3228_recIdents;
                } else {
                  RAST._IExpr _out435;
                  DCOMP._IOwnership _out436;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3225_b), _3225_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out435, out _out436, out _out437);
                  r = _out435;
                  resultingOwnership = _out436;
                  readIdents = _out437;
                }
              }
            } else if (_source125.is_Multiset) {
              DAST._IType _3229___mcc_h178 = _source125.dtor_element;
              bool _3230_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3231_range = _3163___mcc_h125;
              DAST._IType _3232_b = _3162___mcc_h124;
              {
                if (object.Equals(_3232_b, _2989_toTpe)) {
                  RAST._IExpr _3233_recursiveGen;
                  DCOMP._IOwnership _3234_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3235_recIdents;
                  RAST._IExpr _out438;
                  DCOMP._IOwnership _out439;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out438, out _out439, out _out440);
                  _3233_recursiveGen = _out438;
                  _3234_recOwned = _out439;
                  _3235_recIdents = _out440;
                  if (_3230_erase) {
                    r = _3233_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3233_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out441;
                  DCOMP._IOwnership _out442;
                  DCOMP.COMP.FromOwnership(r, _3234_recOwned, expectedOwnership, out _out441, out _out442);
                  r = _out441;
                  resultingOwnership = _out442;
                  readIdents = _3235_recIdents;
                } else {
                  RAST._IExpr _out443;
                  DCOMP._IOwnership _out444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3232_b), _3232_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out443, out _out444, out _out445);
                  r = _out443;
                  resultingOwnership = _out444;
                  readIdents = _out445;
                }
              }
            } else if (_source125.is_Map) {
              DAST._IType _3236___mcc_h181 = _source125.dtor_key;
              DAST._IType _3237___mcc_h182 = _source125.dtor_value;
              bool _3238_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3239_range = _3163___mcc_h125;
              DAST._IType _3240_b = _3162___mcc_h124;
              {
                if (object.Equals(_3240_b, _2989_toTpe)) {
                  RAST._IExpr _3241_recursiveGen;
                  DCOMP._IOwnership _3242_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3243_recIdents;
                  RAST._IExpr _out446;
                  DCOMP._IOwnership _out447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out446, out _out447, out _out448);
                  _3241_recursiveGen = _out446;
                  _3242_recOwned = _out447;
                  _3243_recIdents = _out448;
                  if (_3238_erase) {
                    r = _3241_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3241_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out449;
                  DCOMP._IOwnership _out450;
                  DCOMP.COMP.FromOwnership(r, _3242_recOwned, expectedOwnership, out _out449, out _out450);
                  r = _out449;
                  resultingOwnership = _out450;
                  readIdents = _3243_recIdents;
                } else {
                  RAST._IExpr _out451;
                  DCOMP._IOwnership _out452;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3240_b), _3240_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out451, out _out452, out _out453);
                  r = _out451;
                  resultingOwnership = _out452;
                  readIdents = _out453;
                }
              }
            } else if (_source125.is_SetBuilder) {
              DAST._IType _3244___mcc_h187 = _source125.dtor_element;
              bool _3245_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3246_range = _3163___mcc_h125;
              DAST._IType _3247_b = _3162___mcc_h124;
              {
                if (object.Equals(_3247_b, _2989_toTpe)) {
                  RAST._IExpr _3248_recursiveGen;
                  DCOMP._IOwnership _3249_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3250_recIdents;
                  RAST._IExpr _out454;
                  DCOMP._IOwnership _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out454, out _out455, out _out456);
                  _3248_recursiveGen = _out454;
                  _3249_recOwned = _out455;
                  _3250_recIdents = _out456;
                  if (_3245_erase) {
                    r = _3248_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3248_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out457;
                  DCOMP._IOwnership _out458;
                  DCOMP.COMP.FromOwnership(r, _3249_recOwned, expectedOwnership, out _out457, out _out458);
                  r = _out457;
                  resultingOwnership = _out458;
                  readIdents = _3250_recIdents;
                } else {
                  RAST._IExpr _out459;
                  DCOMP._IOwnership _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3247_b), _3247_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out459, out _out460, out _out461);
                  r = _out459;
                  resultingOwnership = _out460;
                  readIdents = _out461;
                }
              }
            } else if (_source125.is_MapBuilder) {
              DAST._IType _3251___mcc_h190 = _source125.dtor_key;
              DAST._IType _3252___mcc_h191 = _source125.dtor_value;
              bool _3253_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3254_range = _3163___mcc_h125;
              DAST._IType _3255_b = _3162___mcc_h124;
              {
                if (object.Equals(_3255_b, _2989_toTpe)) {
                  RAST._IExpr _3256_recursiveGen;
                  DCOMP._IOwnership _3257_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3258_recIdents;
                  RAST._IExpr _out462;
                  DCOMP._IOwnership _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out462, out _out463, out _out464);
                  _3256_recursiveGen = _out462;
                  _3257_recOwned = _out463;
                  _3258_recIdents = _out464;
                  if (_3253_erase) {
                    r = _3256_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3256_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  DCOMP.COMP.FromOwnership(r, _3257_recOwned, expectedOwnership, out _out465, out _out466);
                  r = _out465;
                  resultingOwnership = _out466;
                  readIdents = _3258_recIdents;
                } else {
                  RAST._IExpr _out467;
                  DCOMP._IOwnership _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3255_b), _3255_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out467, out _out468, out _out469);
                  r = _out467;
                  resultingOwnership = _out468;
                  readIdents = _out469;
                }
              }
            } else if (_source125.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3259___mcc_h196 = _source125.dtor_args;
              DAST._IType _3260___mcc_h197 = _source125.dtor_result;
              bool _3261_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3262_range = _3163___mcc_h125;
              DAST._IType _3263_b = _3162___mcc_h124;
              {
                if (object.Equals(_3263_b, _2989_toTpe)) {
                  RAST._IExpr _3264_recursiveGen;
                  DCOMP._IOwnership _3265_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3266_recIdents;
                  RAST._IExpr _out470;
                  DCOMP._IOwnership _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out470, out _out471, out _out472);
                  _3264_recursiveGen = _out470;
                  _3265_recOwned = _out471;
                  _3266_recIdents = _out472;
                  if (_3261_erase) {
                    r = _3264_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3264_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out473;
                  DCOMP._IOwnership _out474;
                  DCOMP.COMP.FromOwnership(r, _3265_recOwned, expectedOwnership, out _out473, out _out474);
                  r = _out473;
                  resultingOwnership = _out474;
                  readIdents = _3266_recIdents;
                } else {
                  RAST._IExpr _out475;
                  DCOMP._IOwnership _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3263_b), _3263_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out475, out _out476, out _out477);
                  r = _out475;
                  resultingOwnership = _out476;
                  readIdents = _out477;
                }
              }
            } else if (_source125.is_Primitive) {
              DAST._IPrimitive _3267___mcc_h202 = _source125.dtor_Primitive_a0;
              bool _3268_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3269_range = _3163___mcc_h125;
              DAST._IType _3270_b = _3162___mcc_h124;
              {
                if (object.Equals(_3270_b, _2989_toTpe)) {
                  RAST._IExpr _3271_recursiveGen;
                  DCOMP._IOwnership _3272_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3273_recIdents;
                  RAST._IExpr _out478;
                  DCOMP._IOwnership _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out478, out _out479, out _out480);
                  _3271_recursiveGen = _out478;
                  _3272_recOwned = _out479;
                  _3273_recIdents = _out480;
                  if (_3268_erase) {
                    r = _3271_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3271_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out481;
                  DCOMP._IOwnership _out482;
                  DCOMP.COMP.FromOwnership(r, _3272_recOwned, expectedOwnership, out _out481, out _out482);
                  r = _out481;
                  resultingOwnership = _out482;
                  readIdents = _3273_recIdents;
                } else {
                  RAST._IExpr _out483;
                  DCOMP._IOwnership _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3270_b), _3270_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out483, out _out484, out _out485);
                  r = _out483;
                  resultingOwnership = _out484;
                  readIdents = _out485;
                }
              }
            } else if (_source125.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3274___mcc_h205 = _source125.dtor_Passthrough_a0;
              bool _3275_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3276_range = _3163___mcc_h125;
              DAST._IType _3277_b = _3162___mcc_h124;
              {
                if (object.Equals(_3277_b, _2989_toTpe)) {
                  RAST._IExpr _3278_recursiveGen;
                  DCOMP._IOwnership _3279_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3280_recIdents;
                  RAST._IExpr _out486;
                  DCOMP._IOwnership _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out486, out _out487, out _out488);
                  _3278_recursiveGen = _out486;
                  _3279_recOwned = _out487;
                  _3280_recIdents = _out488;
                  if (_3275_erase) {
                    r = _3278_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3278_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out489;
                  DCOMP._IOwnership _out490;
                  DCOMP.COMP.FromOwnership(r, _3279_recOwned, expectedOwnership, out _out489, out _out490);
                  r = _out489;
                  resultingOwnership = _out490;
                  readIdents = _3280_recIdents;
                } else {
                  RAST._IExpr _out491;
                  DCOMP._IOwnership _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3277_b), _3277_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out491, out _out492, out _out493);
                  r = _out491;
                  resultingOwnership = _out492;
                  readIdents = _out493;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3281___mcc_h208 = _source125.dtor_TypeArg_a0;
              bool _3282_erase = _3164___mcc_h126;
              DAST._INewtypeRange _3283_range = _3163___mcc_h125;
              DAST._IType _3284_b = _3162___mcc_h124;
              {
                if (object.Equals(_3284_b, _2989_toTpe)) {
                  RAST._IExpr _3285_recursiveGen;
                  DCOMP._IOwnership _3286_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3287_recIdents;
                  RAST._IExpr _out494;
                  DCOMP._IOwnership _out495;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out494, out _out495, out _out496);
                  _3285_recursiveGen = _out494;
                  _3286_recOwned = _out495;
                  _3287_recIdents = _out496;
                  if (_3282_erase) {
                    r = _3285_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3285_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out497;
                  DCOMP._IOwnership _out498;
                  DCOMP.COMP.FromOwnership(r, _3286_recOwned, expectedOwnership, out _out497, out _out498);
                  r = _out497;
                  resultingOwnership = _out498;
                  readIdents = _3287_recIdents;
                } else {
                  RAST._IExpr _out499;
                  DCOMP._IOwnership _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3284_b), _3284_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out499, out _out500, out _out501);
                  r = _out499;
                  resultingOwnership = _out500;
                  readIdents = _out501;
                }
              }
            }
          }
        } else if (_source117.is_Nullable) {
          DAST._IType _3288___mcc_h211 = _source117.dtor_Nullable_a0;
          DAST._IType _source128 = _2994___mcc_h1;
          if (_source128.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3289___mcc_h215 = _source128.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3290___mcc_h216 = _source128.dtor_typeArgs;
            DAST._IResolvedType _3291___mcc_h217 = _source128.dtor_resolved;
            DAST._IResolvedType _source129 = _3291___mcc_h217;
            if (_source129.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3292___mcc_h224 = _source129.dtor_path;
              {
                RAST._IExpr _3293_recursiveGen;
                DCOMP._IOwnership _3294_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3295_recIdents;
                RAST._IExpr _out502;
                DCOMP._IOwnership _out503;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out502, out _out503, out _out504);
                _3293_recursiveGen = _out502;
                _3294_recOwned = _out503;
                _3295_recIdents = _out504;
                Dafny.ISequence<Dafny.Rune> _3296_s;
                _3296_s = (_3293_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3294_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3296_s = Dafny.Sequence<Dafny.Rune>.Concat(_3296_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _3296_s = Dafny.Sequence<Dafny.Rune>.Concat(_3296_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_3296_s);
                RAST._IExpr _out505;
                DCOMP._IOwnership _out506;
                DCOMP.COMP.FromOwnership(r, _3294_recOwned, expectedOwnership, out _out505, out _out506);
                r = _out505;
                resultingOwnership = _out506;
                readIdents = _3295_recIdents;
              }
            } else if (_source129.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3297___mcc_h227 = _source129.dtor_path;
              {
                RAST._IExpr _3298_recursiveGen;
                DCOMP._IOwnership _3299_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3300_recIdents;
                RAST._IExpr _out507;
                DCOMP._IOwnership _out508;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out507, out _out508, out _out509);
                _3298_recursiveGen = _out507;
                _3299_recOwned = _out508;
                _3300_recIdents = _out509;
                Dafny.ISequence<Dafny.Rune> _3301_s;
                _3301_s = (_3298_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3299_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3301_s = Dafny.Sequence<Dafny.Rune>.Concat(_3301_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _3301_s = Dafny.Sequence<Dafny.Rune>.Concat(_3301_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_3301_s);
                RAST._IExpr _out510;
                DCOMP._IOwnership _out511;
                DCOMP.COMP.FromOwnership(r, _3299_recOwned, expectedOwnership, out _out510, out _out511);
                r = _out510;
                resultingOwnership = _out511;
                readIdents = _3300_recIdents;
              }
            } else {
              DAST._IType _3302___mcc_h230 = _source129.dtor_baseType;
              DAST._INewtypeRange _3303___mcc_h231 = _source129.dtor_range;
              bool _3304___mcc_h232 = _source129.dtor_erase;
              {
                RAST._IExpr _3305_recursiveGen;
                DCOMP._IOwnership _3306_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3307_recIdents;
                RAST._IExpr _out512;
                DCOMP._IOwnership _out513;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out512, out _out513, out _out514);
                _3305_recursiveGen = _out512;
                _3306_recOwned = _out513;
                _3307_recIdents = _out514;
                Dafny.ISequence<Dafny.Rune> _3308_s;
                _3308_s = (_3305_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3306_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3308_s = Dafny.Sequence<Dafny.Rune>.Concat(_3308_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _3308_s = Dafny.Sequence<Dafny.Rune>.Concat(_3308_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_3308_s);
                RAST._IExpr _out515;
                DCOMP._IOwnership _out516;
                DCOMP.COMP.FromOwnership(r, _3306_recOwned, expectedOwnership, out _out515, out _out516);
                r = _out515;
                resultingOwnership = _out516;
                readIdents = _3307_recIdents;
              }
            }
          } else if (_source128.is_Nullable) {
            DAST._IType _3309___mcc_h239 = _source128.dtor_Nullable_a0;
            {
              RAST._IExpr _3310_recursiveGen;
              DCOMP._IOwnership _3311_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3312_recIdents;
              RAST._IExpr _out517;
              DCOMP._IOwnership _out518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out517, out _out518, out _out519);
              _3310_recursiveGen = _out517;
              _3311_recOwned = _out518;
              _3312_recIdents = _out519;
              Dafny.ISequence<Dafny.Rune> _3313_s;
              _3313_s = (_3310_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3311_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3313_s = Dafny.Sequence<Dafny.Rune>.Concat(_3313_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3313_s = Dafny.Sequence<Dafny.Rune>.Concat(_3313_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3313_s);
              RAST._IExpr _out520;
              DCOMP._IOwnership _out521;
              DCOMP.COMP.FromOwnership(r, _3311_recOwned, expectedOwnership, out _out520, out _out521);
              r = _out520;
              resultingOwnership = _out521;
              readIdents = _3312_recIdents;
            }
          } else if (_source128.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3314___mcc_h242 = _source128.dtor_Tuple_a0;
            {
              RAST._IExpr _3315_recursiveGen;
              DCOMP._IOwnership _3316_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3317_recIdents;
              RAST._IExpr _out522;
              DCOMP._IOwnership _out523;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out522, out _out523, out _out524);
              _3315_recursiveGen = _out522;
              _3316_recOwned = _out523;
              _3317_recIdents = _out524;
              Dafny.ISequence<Dafny.Rune> _3318_s;
              _3318_s = (_3315_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3316_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3318_s = Dafny.Sequence<Dafny.Rune>.Concat(_3318_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3318_s = Dafny.Sequence<Dafny.Rune>.Concat(_3318_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3318_s);
              RAST._IExpr _out525;
              DCOMP._IOwnership _out526;
              DCOMP.COMP.FromOwnership(r, _3316_recOwned, expectedOwnership, out _out525, out _out526);
              r = _out525;
              resultingOwnership = _out526;
              readIdents = _3317_recIdents;
            }
          } else if (_source128.is_Array) {
            DAST._IType _3319___mcc_h245 = _source128.dtor_element;
            BigInteger _3320___mcc_h246 = _source128.dtor_dims;
            {
              RAST._IExpr _3321_recursiveGen;
              DCOMP._IOwnership _3322_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3323_recIdents;
              RAST._IExpr _out527;
              DCOMP._IOwnership _out528;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out527, out _out528, out _out529);
              _3321_recursiveGen = _out527;
              _3322_recOwned = _out528;
              _3323_recIdents = _out529;
              Dafny.ISequence<Dafny.Rune> _3324_s;
              _3324_s = (_3321_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3322_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3324_s = Dafny.Sequence<Dafny.Rune>.Concat(_3324_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3324_s = Dafny.Sequence<Dafny.Rune>.Concat(_3324_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3324_s);
              RAST._IExpr _out530;
              DCOMP._IOwnership _out531;
              DCOMP.COMP.FromOwnership(r, _3322_recOwned, expectedOwnership, out _out530, out _out531);
              r = _out530;
              resultingOwnership = _out531;
              readIdents = _3323_recIdents;
            }
          } else if (_source128.is_Seq) {
            DAST._IType _3325___mcc_h251 = _source128.dtor_element;
            {
              RAST._IExpr _3326_recursiveGen;
              DCOMP._IOwnership _3327_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3328_recIdents;
              RAST._IExpr _out532;
              DCOMP._IOwnership _out533;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out532, out _out533, out _out534);
              _3326_recursiveGen = _out532;
              _3327_recOwned = _out533;
              _3328_recIdents = _out534;
              Dafny.ISequence<Dafny.Rune> _3329_s;
              _3329_s = (_3326_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3327_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3329_s = Dafny.Sequence<Dafny.Rune>.Concat(_3329_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3329_s = Dafny.Sequence<Dafny.Rune>.Concat(_3329_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3329_s);
              RAST._IExpr _out535;
              DCOMP._IOwnership _out536;
              DCOMP.COMP.FromOwnership(r, _3327_recOwned, expectedOwnership, out _out535, out _out536);
              r = _out535;
              resultingOwnership = _out536;
              readIdents = _3328_recIdents;
            }
          } else if (_source128.is_Set) {
            DAST._IType _3330___mcc_h254 = _source128.dtor_element;
            {
              RAST._IExpr _3331_recursiveGen;
              DCOMP._IOwnership _3332_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3333_recIdents;
              RAST._IExpr _out537;
              DCOMP._IOwnership _out538;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out539;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out537, out _out538, out _out539);
              _3331_recursiveGen = _out537;
              _3332_recOwned = _out538;
              _3333_recIdents = _out539;
              Dafny.ISequence<Dafny.Rune> _3334_s;
              _3334_s = (_3331_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3332_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3334_s = Dafny.Sequence<Dafny.Rune>.Concat(_3334_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3334_s = Dafny.Sequence<Dafny.Rune>.Concat(_3334_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3334_s);
              RAST._IExpr _out540;
              DCOMP._IOwnership _out541;
              DCOMP.COMP.FromOwnership(r, _3332_recOwned, expectedOwnership, out _out540, out _out541);
              r = _out540;
              resultingOwnership = _out541;
              readIdents = _3333_recIdents;
            }
          } else if (_source128.is_Multiset) {
            DAST._IType _3335___mcc_h257 = _source128.dtor_element;
            {
              RAST._IExpr _3336_recursiveGen;
              DCOMP._IOwnership _3337_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3338_recIdents;
              RAST._IExpr _out542;
              DCOMP._IOwnership _out543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out542, out _out543, out _out544);
              _3336_recursiveGen = _out542;
              _3337_recOwned = _out543;
              _3338_recIdents = _out544;
              Dafny.ISequence<Dafny.Rune> _3339_s;
              _3339_s = (_3336_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3337_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3339_s = Dafny.Sequence<Dafny.Rune>.Concat(_3339_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3339_s = Dafny.Sequence<Dafny.Rune>.Concat(_3339_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3339_s);
              RAST._IExpr _out545;
              DCOMP._IOwnership _out546;
              DCOMP.COMP.FromOwnership(r, _3337_recOwned, expectedOwnership, out _out545, out _out546);
              r = _out545;
              resultingOwnership = _out546;
              readIdents = _3338_recIdents;
            }
          } else if (_source128.is_Map) {
            DAST._IType _3340___mcc_h260 = _source128.dtor_key;
            DAST._IType _3341___mcc_h261 = _source128.dtor_value;
            {
              RAST._IExpr _3342_recursiveGen;
              DCOMP._IOwnership _3343_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3344_recIdents;
              RAST._IExpr _out547;
              DCOMP._IOwnership _out548;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out547, out _out548, out _out549);
              _3342_recursiveGen = _out547;
              _3343_recOwned = _out548;
              _3344_recIdents = _out549;
              Dafny.ISequence<Dafny.Rune> _3345_s;
              _3345_s = (_3342_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3343_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3345_s = Dafny.Sequence<Dafny.Rune>.Concat(_3345_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3345_s = Dafny.Sequence<Dafny.Rune>.Concat(_3345_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3345_s);
              RAST._IExpr _out550;
              DCOMP._IOwnership _out551;
              DCOMP.COMP.FromOwnership(r, _3343_recOwned, expectedOwnership, out _out550, out _out551);
              r = _out550;
              resultingOwnership = _out551;
              readIdents = _3344_recIdents;
            }
          } else if (_source128.is_SetBuilder) {
            DAST._IType _3346___mcc_h266 = _source128.dtor_element;
            {
              RAST._IExpr _3347_recursiveGen;
              DCOMP._IOwnership _3348_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3349_recIdents;
              RAST._IExpr _out552;
              DCOMP._IOwnership _out553;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out552, out _out553, out _out554);
              _3347_recursiveGen = _out552;
              _3348_recOwned = _out553;
              _3349_recIdents = _out554;
              Dafny.ISequence<Dafny.Rune> _3350_s;
              _3350_s = (_3347_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3348_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3350_s = Dafny.Sequence<Dafny.Rune>.Concat(_3350_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3350_s = Dafny.Sequence<Dafny.Rune>.Concat(_3350_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3350_s);
              RAST._IExpr _out555;
              DCOMP._IOwnership _out556;
              DCOMP.COMP.FromOwnership(r, _3348_recOwned, expectedOwnership, out _out555, out _out556);
              r = _out555;
              resultingOwnership = _out556;
              readIdents = _3349_recIdents;
            }
          } else if (_source128.is_MapBuilder) {
            DAST._IType _3351___mcc_h269 = _source128.dtor_key;
            DAST._IType _3352___mcc_h270 = _source128.dtor_value;
            {
              RAST._IExpr _3353_recursiveGen;
              DCOMP._IOwnership _3354_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3355_recIdents;
              RAST._IExpr _out557;
              DCOMP._IOwnership _out558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out557, out _out558, out _out559);
              _3353_recursiveGen = _out557;
              _3354_recOwned = _out558;
              _3355_recIdents = _out559;
              Dafny.ISequence<Dafny.Rune> _3356_s;
              _3356_s = (_3353_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3354_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3356_s = Dafny.Sequence<Dafny.Rune>.Concat(_3356_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3356_s = Dafny.Sequence<Dafny.Rune>.Concat(_3356_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3356_s);
              RAST._IExpr _out560;
              DCOMP._IOwnership _out561;
              DCOMP.COMP.FromOwnership(r, _3354_recOwned, expectedOwnership, out _out560, out _out561);
              r = _out560;
              resultingOwnership = _out561;
              readIdents = _3355_recIdents;
            }
          } else if (_source128.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3357___mcc_h275 = _source128.dtor_args;
            DAST._IType _3358___mcc_h276 = _source128.dtor_result;
            {
              RAST._IExpr _3359_recursiveGen;
              DCOMP._IOwnership _3360_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3361_recIdents;
              RAST._IExpr _out562;
              DCOMP._IOwnership _out563;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out564;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out562, out _out563, out _out564);
              _3359_recursiveGen = _out562;
              _3360_recOwned = _out563;
              _3361_recIdents = _out564;
              Dafny.ISequence<Dafny.Rune> _3362_s;
              _3362_s = (_3359_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3360_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3362_s = Dafny.Sequence<Dafny.Rune>.Concat(_3362_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3362_s = Dafny.Sequence<Dafny.Rune>.Concat(_3362_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3362_s);
              RAST._IExpr _out565;
              DCOMP._IOwnership _out566;
              DCOMP.COMP.FromOwnership(r, _3360_recOwned, expectedOwnership, out _out565, out _out566);
              r = _out565;
              resultingOwnership = _out566;
              readIdents = _3361_recIdents;
            }
          } else if (_source128.is_Primitive) {
            DAST._IPrimitive _3363___mcc_h281 = _source128.dtor_Primitive_a0;
            {
              RAST._IExpr _3364_recursiveGen;
              DCOMP._IOwnership _3365_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3366_recIdents;
              RAST._IExpr _out567;
              DCOMP._IOwnership _out568;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out567, out _out568, out _out569);
              _3364_recursiveGen = _out567;
              _3365_recOwned = _out568;
              _3366_recIdents = _out569;
              Dafny.ISequence<Dafny.Rune> _3367_s;
              _3367_s = (_3364_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3365_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3367_s = Dafny.Sequence<Dafny.Rune>.Concat(_3367_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3367_s = Dafny.Sequence<Dafny.Rune>.Concat(_3367_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3367_s);
              RAST._IExpr _out570;
              DCOMP._IOwnership _out571;
              DCOMP.COMP.FromOwnership(r, _3365_recOwned, expectedOwnership, out _out570, out _out571);
              r = _out570;
              resultingOwnership = _out571;
              readIdents = _3366_recIdents;
            }
          } else if (_source128.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3368___mcc_h284 = _source128.dtor_Passthrough_a0;
            {
              RAST._IExpr _3369_recursiveGen;
              DCOMP._IOwnership _3370_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3371_recIdents;
              RAST._IExpr _out572;
              DCOMP._IOwnership _out573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out572, out _out573, out _out574);
              _3369_recursiveGen = _out572;
              _3370_recOwned = _out573;
              _3371_recIdents = _out574;
              Dafny.ISequence<Dafny.Rune> _3372_s;
              _3372_s = (_3369_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3370_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3372_s = Dafny.Sequence<Dafny.Rune>.Concat(_3372_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3372_s = Dafny.Sequence<Dafny.Rune>.Concat(_3372_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3372_s);
              RAST._IExpr _out575;
              DCOMP._IOwnership _out576;
              DCOMP.COMP.FromOwnership(r, _3370_recOwned, expectedOwnership, out _out575, out _out576);
              r = _out575;
              resultingOwnership = _out576;
              readIdents = _3371_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3373___mcc_h287 = _source128.dtor_TypeArg_a0;
            {
              RAST._IExpr _3374_recursiveGen;
              DCOMP._IOwnership _3375_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3376_recIdents;
              RAST._IExpr _out577;
              DCOMP._IOwnership _out578;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out577, out _out578, out _out579);
              _3374_recursiveGen = _out577;
              _3375_recOwned = _out578;
              _3376_recIdents = _out579;
              Dafny.ISequence<Dafny.Rune> _3377_s;
              _3377_s = (_3374_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3375_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3377_s = Dafny.Sequence<Dafny.Rune>.Concat(_3377_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3377_s = Dafny.Sequence<Dafny.Rune>.Concat(_3377_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3377_s);
              RAST._IExpr _out580;
              DCOMP._IOwnership _out581;
              DCOMP.COMP.FromOwnership(r, _3375_recOwned, expectedOwnership, out _out580, out _out581);
              r = _out580;
              resultingOwnership = _out581;
              readIdents = _3376_recIdents;
            }
          }
        } else if (_source117.is_Tuple) {
          Dafny.ISequence<DAST._IType> _3378___mcc_h290 = _source117.dtor_Tuple_a0;
          DAST._IType _source130 = _2994___mcc_h1;
          if (_source130.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3379___mcc_h294 = _source130.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3380___mcc_h295 = _source130.dtor_typeArgs;
            DAST._IResolvedType _3381___mcc_h296 = _source130.dtor_resolved;
            DAST._IResolvedType _source131 = _3381___mcc_h296;
            if (_source131.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3382___mcc_h300 = _source131.dtor_path;
              {
                RAST._IExpr _3383_recursiveGen;
                DCOMP._IOwnership _3384_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
                RAST._IExpr _out582;
                DCOMP._IOwnership _out583;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out584;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out582, out _out583, out _out584);
                _3383_recursiveGen = _out582;
                _3384_recOwned = _out583;
                _3385_recIdents = _out584;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3383_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out585;
                DCOMP._IOwnership _out586;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out585, out _out586);
                r = _out585;
                resultingOwnership = _out586;
                readIdents = _3385_recIdents;
              }
            } else if (_source131.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3386___mcc_h302 = _source131.dtor_path;
              {
                RAST._IExpr _3387_recursiveGen;
                DCOMP._IOwnership _3388_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3389_recIdents;
                RAST._IExpr _out587;
                DCOMP._IOwnership _out588;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out587, out _out588, out _out589);
                _3387_recursiveGen = _out587;
                _3388_recOwned = _out588;
                _3389_recIdents = _out589;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out590;
                DCOMP._IOwnership _out591;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out590, out _out591);
                r = _out590;
                resultingOwnership = _out591;
                readIdents = _3389_recIdents;
              }
            } else {
              DAST._IType _3390___mcc_h304 = _source131.dtor_baseType;
              DAST._INewtypeRange _3391___mcc_h305 = _source131.dtor_range;
              bool _3392___mcc_h306 = _source131.dtor_erase;
              bool _3393_erase = _3392___mcc_h306;
              DAST._INewtypeRange _3394_range = _3391___mcc_h305;
              DAST._IType _3395_b = _3390___mcc_h304;
              {
                if (object.Equals(_2988_fromTpe, _3395_b)) {
                  RAST._IExpr _3396_recursiveGen;
                  DCOMP._IOwnership _3397_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3398_recIdents;
                  RAST._IExpr _out592;
                  DCOMP._IOwnership _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out592, out _out593, out _out594);
                  _3396_recursiveGen = _out592;
                  _3397_recOwned = _out593;
                  _3398_recIdents = _out594;
                  Std.Wrappers._IOption<RAST._IType> _3399_potentialRhsType;
                  _3399_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3395_b, _3394_range);
                  Std.Wrappers._IOption<RAST._IType> _source132 = _3399_potentialRhsType;
                  if (_source132.is_None) {
                    if (_3393_erase) {
                      r = _3396_recursiveGen;
                    } else {
                      RAST._IType _3400_rhsType;
                      RAST._IType _out595;
                      _out595 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3400_rhsType = _out595;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3400_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3396_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out596;
                    DCOMP._IOwnership _out597;
                    DCOMP.COMP.FromOwnership(r, _3397_recOwned, expectedOwnership, out _out596, out _out597);
                    r = _out596;
                    resultingOwnership = _out597;
                  } else {
                    RAST._IType _3401___mcc_h1157 = _source132.dtor_value;
                    RAST._IType _3402_v = _3401___mcc_h1157;
                    r = RAST.Expr.create_ConversionNum(_3402_v, _3396_recursiveGen);
                    RAST._IExpr _out598;
                    DCOMP._IOwnership _out599;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out598, out _out599);
                    r = _out598;
                    resultingOwnership = _out599;
                  }
                  readIdents = _3398_recIdents;
                } else {
                  RAST._IExpr _out600;
                  DCOMP._IOwnership _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3395_b), _3395_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out600, out _out601, out _out602);
                  r = _out600;
                  resultingOwnership = _out601;
                  readIdents = _out602;
                }
              }
            }
          } else if (_source130.is_Nullable) {
            DAST._IType _3403___mcc_h310 = _source130.dtor_Nullable_a0;
            {
              RAST._IExpr _3404_recursiveGen;
              DCOMP._IOwnership _3405_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3406_recIdents;
              RAST._IExpr _out603;
              DCOMP._IOwnership _out604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out603, out _out604, out _out605);
              _3404_recursiveGen = _out603;
              _3405_recOwned = _out604;
              _3406_recIdents = _out605;
              Dafny.ISequence<Dafny.Rune> _3407_s;
              _3407_s = (_3404_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3405_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3407_s = Dafny.Sequence<Dafny.Rune>.Concat(_3407_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3407_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3407_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3407_s);
              RAST._IExpr _out606;
              DCOMP._IOwnership _out607;
              DCOMP.COMP.FromOwnership(r, _3405_recOwned, expectedOwnership, out _out606, out _out607);
              r = _out606;
              resultingOwnership = _out607;
              readIdents = _3406_recIdents;
            }
          } else if (_source130.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3408___mcc_h312 = _source130.dtor_Tuple_a0;
            {
              RAST._IExpr _3409_recursiveGen;
              DCOMP._IOwnership _3410_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3411_recIdents;
              RAST._IExpr _out608;
              DCOMP._IOwnership _out609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out608, out _out609, out _out610);
              _3409_recursiveGen = _out608;
              _3410_recOwned = _out609;
              _3411_recIdents = _out610;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3409_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out611;
              DCOMP._IOwnership _out612;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out611, out _out612);
              r = _out611;
              resultingOwnership = _out612;
              readIdents = _3411_recIdents;
            }
          } else if (_source130.is_Array) {
            DAST._IType _3412___mcc_h314 = _source130.dtor_element;
            BigInteger _3413___mcc_h315 = _source130.dtor_dims;
            {
              RAST._IExpr _3414_recursiveGen;
              DCOMP._IOwnership _3415_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3416_recIdents;
              RAST._IExpr _out613;
              DCOMP._IOwnership _out614;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out613, out _out614, out _out615);
              _3414_recursiveGen = _out613;
              _3415_recOwned = _out614;
              _3416_recIdents = _out615;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3414_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out616;
              DCOMP._IOwnership _out617;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out616, out _out617);
              r = _out616;
              resultingOwnership = _out617;
              readIdents = _3416_recIdents;
            }
          } else if (_source130.is_Seq) {
            DAST._IType _3417___mcc_h318 = _source130.dtor_element;
            {
              RAST._IExpr _3418_recursiveGen;
              DCOMP._IOwnership _3419_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3420_recIdents;
              RAST._IExpr _out618;
              DCOMP._IOwnership _out619;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out618, out _out619, out _out620);
              _3418_recursiveGen = _out618;
              _3419_recOwned = _out619;
              _3420_recIdents = _out620;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3418_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out621;
              DCOMP._IOwnership _out622;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out621, out _out622);
              r = _out621;
              resultingOwnership = _out622;
              readIdents = _3420_recIdents;
            }
          } else if (_source130.is_Set) {
            DAST._IType _3421___mcc_h320 = _source130.dtor_element;
            {
              RAST._IExpr _3422_recursiveGen;
              DCOMP._IOwnership _3423_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3424_recIdents;
              RAST._IExpr _out623;
              DCOMP._IOwnership _out624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out625;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out623, out _out624, out _out625);
              _3422_recursiveGen = _out623;
              _3423_recOwned = _out624;
              _3424_recIdents = _out625;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3422_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out626;
              DCOMP._IOwnership _out627;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out626, out _out627);
              r = _out626;
              resultingOwnership = _out627;
              readIdents = _3424_recIdents;
            }
          } else if (_source130.is_Multiset) {
            DAST._IType _3425___mcc_h322 = _source130.dtor_element;
            {
              RAST._IExpr _3426_recursiveGen;
              DCOMP._IOwnership _3427_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3428_recIdents;
              RAST._IExpr _out628;
              DCOMP._IOwnership _out629;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out628, out _out629, out _out630);
              _3426_recursiveGen = _out628;
              _3427_recOwned = _out629;
              _3428_recIdents = _out630;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3426_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out631;
              DCOMP._IOwnership _out632;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out631, out _out632);
              r = _out631;
              resultingOwnership = _out632;
              readIdents = _3428_recIdents;
            }
          } else if (_source130.is_Map) {
            DAST._IType _3429___mcc_h324 = _source130.dtor_key;
            DAST._IType _3430___mcc_h325 = _source130.dtor_value;
            {
              RAST._IExpr _3431_recursiveGen;
              DCOMP._IOwnership _3432_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3433_recIdents;
              RAST._IExpr _out633;
              DCOMP._IOwnership _out634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out633, out _out634, out _out635);
              _3431_recursiveGen = _out633;
              _3432_recOwned = _out634;
              _3433_recIdents = _out635;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3431_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out636;
              DCOMP._IOwnership _out637;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out636, out _out637);
              r = _out636;
              resultingOwnership = _out637;
              readIdents = _3433_recIdents;
            }
          } else if (_source130.is_SetBuilder) {
            DAST._IType _3434___mcc_h328 = _source130.dtor_element;
            {
              RAST._IExpr _3435_recursiveGen;
              DCOMP._IOwnership _3436_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3437_recIdents;
              RAST._IExpr _out638;
              DCOMP._IOwnership _out639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out638, out _out639, out _out640);
              _3435_recursiveGen = _out638;
              _3436_recOwned = _out639;
              _3437_recIdents = _out640;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3435_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out641;
              DCOMP._IOwnership _out642;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out641, out _out642);
              r = _out641;
              resultingOwnership = _out642;
              readIdents = _3437_recIdents;
            }
          } else if (_source130.is_MapBuilder) {
            DAST._IType _3438___mcc_h330 = _source130.dtor_key;
            DAST._IType _3439___mcc_h331 = _source130.dtor_value;
            {
              RAST._IExpr _3440_recursiveGen;
              DCOMP._IOwnership _3441_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3442_recIdents;
              RAST._IExpr _out643;
              DCOMP._IOwnership _out644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out645;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out643, out _out644, out _out645);
              _3440_recursiveGen = _out643;
              _3441_recOwned = _out644;
              _3442_recIdents = _out645;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3440_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out646;
              DCOMP._IOwnership _out647;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out646, out _out647);
              r = _out646;
              resultingOwnership = _out647;
              readIdents = _3442_recIdents;
            }
          } else if (_source130.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3443___mcc_h334 = _source130.dtor_args;
            DAST._IType _3444___mcc_h335 = _source130.dtor_result;
            {
              RAST._IExpr _3445_recursiveGen;
              DCOMP._IOwnership _3446_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3447_recIdents;
              RAST._IExpr _out648;
              DCOMP._IOwnership _out649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out648, out _out649, out _out650);
              _3445_recursiveGen = _out648;
              _3446_recOwned = _out649;
              _3447_recIdents = _out650;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3445_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out651;
              DCOMP._IOwnership _out652;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out651, out _out652);
              r = _out651;
              resultingOwnership = _out652;
              readIdents = _3447_recIdents;
            }
          } else if (_source130.is_Primitive) {
            DAST._IPrimitive _3448___mcc_h338 = _source130.dtor_Primitive_a0;
            {
              RAST._IExpr _3449_recursiveGen;
              DCOMP._IOwnership _3450_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3451_recIdents;
              RAST._IExpr _out653;
              DCOMP._IOwnership _out654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out653, out _out654, out _out655);
              _3449_recursiveGen = _out653;
              _3450_recOwned = _out654;
              _3451_recIdents = _out655;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3449_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out656;
              DCOMP._IOwnership _out657;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out656, out _out657);
              r = _out656;
              resultingOwnership = _out657;
              readIdents = _3451_recIdents;
            }
          } else if (_source130.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3452___mcc_h340 = _source130.dtor_Passthrough_a0;
            {
              RAST._IExpr _3453_recursiveGen;
              DCOMP._IOwnership _3454_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3455_recIdents;
              RAST._IExpr _out658;
              DCOMP._IOwnership _out659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out658, out _out659, out _out660);
              _3453_recursiveGen = _out658;
              _3454_recOwned = _out659;
              _3455_recIdents = _out660;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3453_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out661;
              DCOMP._IOwnership _out662;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out661, out _out662);
              r = _out661;
              resultingOwnership = _out662;
              readIdents = _3455_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3456___mcc_h342 = _source130.dtor_TypeArg_a0;
            {
              RAST._IExpr _3457_recursiveGen;
              DCOMP._IOwnership _3458_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3459_recIdents;
              RAST._IExpr _out663;
              DCOMP._IOwnership _out664;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out665;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out663, out _out664, out _out665);
              _3457_recursiveGen = _out663;
              _3458_recOwned = _out664;
              _3459_recIdents = _out665;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3457_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out666;
              DCOMP._IOwnership _out667;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out666, out _out667);
              r = _out666;
              resultingOwnership = _out667;
              readIdents = _3459_recIdents;
            }
          }
        } else if (_source117.is_Array) {
          DAST._IType _3460___mcc_h344 = _source117.dtor_element;
          BigInteger _3461___mcc_h345 = _source117.dtor_dims;
          DAST._IType _source133 = _2994___mcc_h1;
          if (_source133.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3462___mcc_h352 = _source133.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3463___mcc_h353 = _source133.dtor_typeArgs;
            DAST._IResolvedType _3464___mcc_h354 = _source133.dtor_resolved;
            DAST._IResolvedType _source134 = _3464___mcc_h354;
            if (_source134.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3465___mcc_h358 = _source134.dtor_path;
              {
                RAST._IExpr _3466_recursiveGen;
                DCOMP._IOwnership _3467_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3468_recIdents;
                RAST._IExpr _out668;
                DCOMP._IOwnership _out669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out668, out _out669, out _out670);
                _3466_recursiveGen = _out668;
                _3467_recOwned = _out669;
                _3468_recIdents = _out670;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3466_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out671;
                DCOMP._IOwnership _out672;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out671, out _out672);
                r = _out671;
                resultingOwnership = _out672;
                readIdents = _3468_recIdents;
              }
            } else if (_source134.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3469___mcc_h360 = _source134.dtor_path;
              {
                RAST._IExpr _3470_recursiveGen;
                DCOMP._IOwnership _3471_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3472_recIdents;
                RAST._IExpr _out673;
                DCOMP._IOwnership _out674;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out673, out _out674, out _out675);
                _3470_recursiveGen = _out673;
                _3471_recOwned = _out674;
                _3472_recIdents = _out675;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3470_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out676;
                DCOMP._IOwnership _out677;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out676, out _out677);
                r = _out676;
                resultingOwnership = _out677;
                readIdents = _3472_recIdents;
              }
            } else {
              DAST._IType _3473___mcc_h362 = _source134.dtor_baseType;
              DAST._INewtypeRange _3474___mcc_h363 = _source134.dtor_range;
              bool _3475___mcc_h364 = _source134.dtor_erase;
              bool _3476_erase = _3475___mcc_h364;
              DAST._INewtypeRange _3477_range = _3474___mcc_h363;
              DAST._IType _3478_b = _3473___mcc_h362;
              {
                if (object.Equals(_2988_fromTpe, _3478_b)) {
                  RAST._IExpr _3479_recursiveGen;
                  DCOMP._IOwnership _3480_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3481_recIdents;
                  RAST._IExpr _out678;
                  DCOMP._IOwnership _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out678, out _out679, out _out680);
                  _3479_recursiveGen = _out678;
                  _3480_recOwned = _out679;
                  _3481_recIdents = _out680;
                  Std.Wrappers._IOption<RAST._IType> _3482_potentialRhsType;
                  _3482_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3478_b, _3477_range);
                  Std.Wrappers._IOption<RAST._IType> _source135 = _3482_potentialRhsType;
                  if (_source135.is_None) {
                    if (_3476_erase) {
                      r = _3479_recursiveGen;
                    } else {
                      RAST._IType _3483_rhsType;
                      RAST._IType _out681;
                      _out681 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3483_rhsType = _out681;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3483_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3479_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out682;
                    DCOMP._IOwnership _out683;
                    DCOMP.COMP.FromOwnership(r, _3480_recOwned, expectedOwnership, out _out682, out _out683);
                    r = _out682;
                    resultingOwnership = _out683;
                  } else {
                    RAST._IType _3484___mcc_h1158 = _source135.dtor_value;
                    RAST._IType _3485_v = _3484___mcc_h1158;
                    r = RAST.Expr.create_ConversionNum(_3485_v, _3479_recursiveGen);
                    RAST._IExpr _out684;
                    DCOMP._IOwnership _out685;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out684, out _out685);
                    r = _out684;
                    resultingOwnership = _out685;
                  }
                  readIdents = _3481_recIdents;
                } else {
                  RAST._IExpr _out686;
                  DCOMP._IOwnership _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3478_b), _3478_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out686, out _out687, out _out688);
                  r = _out686;
                  resultingOwnership = _out687;
                  readIdents = _out688;
                }
              }
            }
          } else if (_source133.is_Nullable) {
            DAST._IType _3486___mcc_h368 = _source133.dtor_Nullable_a0;
            {
              RAST._IExpr _3487_recursiveGen;
              DCOMP._IOwnership _3488_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3489_recIdents;
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out689, out _out690, out _out691);
              _3487_recursiveGen = _out689;
              _3488_recOwned = _out690;
              _3489_recIdents = _out691;
              Dafny.ISequence<Dafny.Rune> _3490_s;
              _3490_s = (_3487_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3488_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3490_s = Dafny.Sequence<Dafny.Rune>.Concat(_3490_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3490_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3490_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3490_s);
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              DCOMP.COMP.FromOwnership(r, _3488_recOwned, expectedOwnership, out _out692, out _out693);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _3489_recIdents;
            }
          } else if (_source133.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3491___mcc_h370 = _source133.dtor_Tuple_a0;
            {
              RAST._IExpr _3492_recursiveGen;
              DCOMP._IOwnership _3493_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3494_recIdents;
              RAST._IExpr _out694;
              DCOMP._IOwnership _out695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out694, out _out695, out _out696);
              _3492_recursiveGen = _out694;
              _3493_recOwned = _out695;
              _3494_recIdents = _out696;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3492_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out697;
              DCOMP._IOwnership _out698;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out697, out _out698);
              r = _out697;
              resultingOwnership = _out698;
              readIdents = _3494_recIdents;
            }
          } else if (_source133.is_Array) {
            DAST._IType _3495___mcc_h372 = _source133.dtor_element;
            BigInteger _3496___mcc_h373 = _source133.dtor_dims;
            {
              RAST._IExpr _3497_recursiveGen;
              DCOMP._IOwnership _3498_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3499_recIdents;
              RAST._IExpr _out699;
              DCOMP._IOwnership _out700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out699, out _out700, out _out701);
              _3497_recursiveGen = _out699;
              _3498_recOwned = _out700;
              _3499_recIdents = _out701;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3497_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out702;
              DCOMP._IOwnership _out703;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out702, out _out703);
              r = _out702;
              resultingOwnership = _out703;
              readIdents = _3499_recIdents;
            }
          } else if (_source133.is_Seq) {
            DAST._IType _3500___mcc_h376 = _source133.dtor_element;
            {
              RAST._IExpr _3501_recursiveGen;
              DCOMP._IOwnership _3502_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3503_recIdents;
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out704, out _out705, out _out706);
              _3501_recursiveGen = _out704;
              _3502_recOwned = _out705;
              _3503_recIdents = _out706;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3501_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out707, out _out708);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _3503_recIdents;
            }
          } else if (_source133.is_Set) {
            DAST._IType _3504___mcc_h378 = _source133.dtor_element;
            {
              RAST._IExpr _3505_recursiveGen;
              DCOMP._IOwnership _3506_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3507_recIdents;
              RAST._IExpr _out709;
              DCOMP._IOwnership _out710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out709, out _out710, out _out711);
              _3505_recursiveGen = _out709;
              _3506_recOwned = _out710;
              _3507_recIdents = _out711;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3505_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out712;
              DCOMP._IOwnership _out713;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out712, out _out713);
              r = _out712;
              resultingOwnership = _out713;
              readIdents = _3507_recIdents;
            }
          } else if (_source133.is_Multiset) {
            DAST._IType _3508___mcc_h380 = _source133.dtor_element;
            {
              RAST._IExpr _3509_recursiveGen;
              DCOMP._IOwnership _3510_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3511_recIdents;
              RAST._IExpr _out714;
              DCOMP._IOwnership _out715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out714, out _out715, out _out716);
              _3509_recursiveGen = _out714;
              _3510_recOwned = _out715;
              _3511_recIdents = _out716;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3509_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out717;
              DCOMP._IOwnership _out718;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out717, out _out718);
              r = _out717;
              resultingOwnership = _out718;
              readIdents = _3511_recIdents;
            }
          } else if (_source133.is_Map) {
            DAST._IType _3512___mcc_h382 = _source133.dtor_key;
            DAST._IType _3513___mcc_h383 = _source133.dtor_value;
            {
              RAST._IExpr _3514_recursiveGen;
              DCOMP._IOwnership _3515_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3516_recIdents;
              RAST._IExpr _out719;
              DCOMP._IOwnership _out720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out719, out _out720, out _out721);
              _3514_recursiveGen = _out719;
              _3515_recOwned = _out720;
              _3516_recIdents = _out721;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3514_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out722;
              DCOMP._IOwnership _out723;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out722, out _out723);
              r = _out722;
              resultingOwnership = _out723;
              readIdents = _3516_recIdents;
            }
          } else if (_source133.is_SetBuilder) {
            DAST._IType _3517___mcc_h386 = _source133.dtor_element;
            {
              RAST._IExpr _3518_recursiveGen;
              DCOMP._IOwnership _3519_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3520_recIdents;
              RAST._IExpr _out724;
              DCOMP._IOwnership _out725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out726;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out724, out _out725, out _out726);
              _3518_recursiveGen = _out724;
              _3519_recOwned = _out725;
              _3520_recIdents = _out726;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3518_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out727;
              DCOMP._IOwnership _out728;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out727, out _out728);
              r = _out727;
              resultingOwnership = _out728;
              readIdents = _3520_recIdents;
            }
          } else if (_source133.is_MapBuilder) {
            DAST._IType _3521___mcc_h388 = _source133.dtor_key;
            DAST._IType _3522___mcc_h389 = _source133.dtor_value;
            {
              RAST._IExpr _3523_recursiveGen;
              DCOMP._IOwnership _3524_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3525_recIdents;
              RAST._IExpr _out729;
              DCOMP._IOwnership _out730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out729, out _out730, out _out731);
              _3523_recursiveGen = _out729;
              _3524_recOwned = _out730;
              _3525_recIdents = _out731;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3523_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out732;
              DCOMP._IOwnership _out733;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out732, out _out733);
              r = _out732;
              resultingOwnership = _out733;
              readIdents = _3525_recIdents;
            }
          } else if (_source133.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3526___mcc_h392 = _source133.dtor_args;
            DAST._IType _3527___mcc_h393 = _source133.dtor_result;
            {
              RAST._IExpr _3528_recursiveGen;
              DCOMP._IOwnership _3529_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3530_recIdents;
              RAST._IExpr _out734;
              DCOMP._IOwnership _out735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out734, out _out735, out _out736);
              _3528_recursiveGen = _out734;
              _3529_recOwned = _out735;
              _3530_recIdents = _out736;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3528_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out737;
              DCOMP._IOwnership _out738;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out737, out _out738);
              r = _out737;
              resultingOwnership = _out738;
              readIdents = _3530_recIdents;
            }
          } else if (_source133.is_Primitive) {
            DAST._IPrimitive _3531___mcc_h396 = _source133.dtor_Primitive_a0;
            {
              RAST._IExpr _3532_recursiveGen;
              DCOMP._IOwnership _3533_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3534_recIdents;
              RAST._IExpr _out739;
              DCOMP._IOwnership _out740;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out739, out _out740, out _out741);
              _3532_recursiveGen = _out739;
              _3533_recOwned = _out740;
              _3534_recIdents = _out741;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3532_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out742;
              DCOMP._IOwnership _out743;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out742, out _out743);
              r = _out742;
              resultingOwnership = _out743;
              readIdents = _3534_recIdents;
            }
          } else if (_source133.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3535___mcc_h398 = _source133.dtor_Passthrough_a0;
            {
              RAST._IExpr _3536_recursiveGen;
              DCOMP._IOwnership _3537_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3538_recIdents;
              RAST._IExpr _out744;
              DCOMP._IOwnership _out745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out744, out _out745, out _out746);
              _3536_recursiveGen = _out744;
              _3537_recOwned = _out745;
              _3538_recIdents = _out746;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3536_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out747;
              DCOMP._IOwnership _out748;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out747, out _out748);
              r = _out747;
              resultingOwnership = _out748;
              readIdents = _3538_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3539___mcc_h400 = _source133.dtor_TypeArg_a0;
            {
              RAST._IExpr _3540_recursiveGen;
              DCOMP._IOwnership _3541_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
              RAST._IExpr _out749;
              DCOMP._IOwnership _out750;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out749, out _out750, out _out751);
              _3540_recursiveGen = _out749;
              _3541_recOwned = _out750;
              _3542_recIdents = _out751;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out752;
              DCOMP._IOwnership _out753;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out752, out _out753);
              r = _out752;
              resultingOwnership = _out753;
              readIdents = _3542_recIdents;
            }
          }
        } else if (_source117.is_Seq) {
          DAST._IType _3543___mcc_h402 = _source117.dtor_element;
          DAST._IType _source136 = _2994___mcc_h1;
          if (_source136.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3544___mcc_h406 = _source136.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3545___mcc_h407 = _source136.dtor_typeArgs;
            DAST._IResolvedType _3546___mcc_h408 = _source136.dtor_resolved;
            DAST._IResolvedType _source137 = _3546___mcc_h408;
            if (_source137.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3547___mcc_h412 = _source137.dtor_path;
              {
                RAST._IExpr _3548_recursiveGen;
                DCOMP._IOwnership _3549_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3550_recIdents;
                RAST._IExpr _out754;
                DCOMP._IOwnership _out755;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out754, out _out755, out _out756);
                _3548_recursiveGen = _out754;
                _3549_recOwned = _out755;
                _3550_recIdents = _out756;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3548_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out757;
                DCOMP._IOwnership _out758;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out757, out _out758);
                r = _out757;
                resultingOwnership = _out758;
                readIdents = _3550_recIdents;
              }
            } else if (_source137.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3551___mcc_h414 = _source137.dtor_path;
              {
                RAST._IExpr _3552_recursiveGen;
                DCOMP._IOwnership _3553_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3554_recIdents;
                RAST._IExpr _out759;
                DCOMP._IOwnership _out760;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out759, out _out760, out _out761);
                _3552_recursiveGen = _out759;
                _3553_recOwned = _out760;
                _3554_recIdents = _out761;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3552_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out762;
                DCOMP._IOwnership _out763;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out762, out _out763);
                r = _out762;
                resultingOwnership = _out763;
                readIdents = _3554_recIdents;
              }
            } else {
              DAST._IType _3555___mcc_h416 = _source137.dtor_baseType;
              DAST._INewtypeRange _3556___mcc_h417 = _source137.dtor_range;
              bool _3557___mcc_h418 = _source137.dtor_erase;
              bool _3558_erase = _3557___mcc_h418;
              DAST._INewtypeRange _3559_range = _3556___mcc_h417;
              DAST._IType _3560_b = _3555___mcc_h416;
              {
                if (object.Equals(_2988_fromTpe, _3560_b)) {
                  RAST._IExpr _3561_recursiveGen;
                  DCOMP._IOwnership _3562_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3563_recIdents;
                  RAST._IExpr _out764;
                  DCOMP._IOwnership _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out764, out _out765, out _out766);
                  _3561_recursiveGen = _out764;
                  _3562_recOwned = _out765;
                  _3563_recIdents = _out766;
                  Std.Wrappers._IOption<RAST._IType> _3564_potentialRhsType;
                  _3564_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3560_b, _3559_range);
                  Std.Wrappers._IOption<RAST._IType> _source138 = _3564_potentialRhsType;
                  if (_source138.is_None) {
                    if (_3558_erase) {
                      r = _3561_recursiveGen;
                    } else {
                      RAST._IType _3565_rhsType;
                      RAST._IType _out767;
                      _out767 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3565_rhsType = _out767;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3565_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3561_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out768;
                    DCOMP._IOwnership _out769;
                    DCOMP.COMP.FromOwnership(r, _3562_recOwned, expectedOwnership, out _out768, out _out769);
                    r = _out768;
                    resultingOwnership = _out769;
                  } else {
                    RAST._IType _3566___mcc_h1159 = _source138.dtor_value;
                    RAST._IType _3567_v = _3566___mcc_h1159;
                    r = RAST.Expr.create_ConversionNum(_3567_v, _3561_recursiveGen);
                    RAST._IExpr _out770;
                    DCOMP._IOwnership _out771;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out770, out _out771);
                    r = _out770;
                    resultingOwnership = _out771;
                  }
                  readIdents = _3563_recIdents;
                } else {
                  RAST._IExpr _out772;
                  DCOMP._IOwnership _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3560_b), _3560_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out772, out _out773, out _out774);
                  r = _out772;
                  resultingOwnership = _out773;
                  readIdents = _out774;
                }
              }
            }
          } else if (_source136.is_Nullable) {
            DAST._IType _3568___mcc_h422 = _source136.dtor_Nullable_a0;
            {
              RAST._IExpr _3569_recursiveGen;
              DCOMP._IOwnership _3570_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3571_recIdents;
              RAST._IExpr _out775;
              DCOMP._IOwnership _out776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out775, out _out776, out _out777);
              _3569_recursiveGen = _out775;
              _3570_recOwned = _out776;
              _3571_recIdents = _out777;
              Dafny.ISequence<Dafny.Rune> _3572_s;
              _3572_s = (_3569_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3570_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3572_s = Dafny.Sequence<Dafny.Rune>.Concat(_3572_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3572_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3572_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3572_s);
              RAST._IExpr _out778;
              DCOMP._IOwnership _out779;
              DCOMP.COMP.FromOwnership(r, _3570_recOwned, expectedOwnership, out _out778, out _out779);
              r = _out778;
              resultingOwnership = _out779;
              readIdents = _3571_recIdents;
            }
          } else if (_source136.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3573___mcc_h424 = _source136.dtor_Tuple_a0;
            {
              RAST._IExpr _3574_recursiveGen;
              DCOMP._IOwnership _3575_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3576_recIdents;
              RAST._IExpr _out780;
              DCOMP._IOwnership _out781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out780, out _out781, out _out782);
              _3574_recursiveGen = _out780;
              _3575_recOwned = _out781;
              _3576_recIdents = _out782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3574_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out783;
              DCOMP._IOwnership _out784;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out783, out _out784);
              r = _out783;
              resultingOwnership = _out784;
              readIdents = _3576_recIdents;
            }
          } else if (_source136.is_Array) {
            DAST._IType _3577___mcc_h426 = _source136.dtor_element;
            BigInteger _3578___mcc_h427 = _source136.dtor_dims;
            {
              RAST._IExpr _3579_recursiveGen;
              DCOMP._IOwnership _3580_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3581_recIdents;
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out785, out _out786, out _out787);
              _3579_recursiveGen = _out785;
              _3580_recOwned = _out786;
              _3581_recIdents = _out787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3579_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out788, out _out789);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _3581_recIdents;
            }
          } else if (_source136.is_Seq) {
            DAST._IType _3582___mcc_h430 = _source136.dtor_element;
            {
              RAST._IExpr _3583_recursiveGen;
              DCOMP._IOwnership _3584_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3585_recIdents;
              RAST._IExpr _out790;
              DCOMP._IOwnership _out791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out790, out _out791, out _out792);
              _3583_recursiveGen = _out790;
              _3584_recOwned = _out791;
              _3585_recIdents = _out792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3583_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out793;
              DCOMP._IOwnership _out794;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out793, out _out794);
              r = _out793;
              resultingOwnership = _out794;
              readIdents = _3585_recIdents;
            }
          } else if (_source136.is_Set) {
            DAST._IType _3586___mcc_h432 = _source136.dtor_element;
            {
              RAST._IExpr _3587_recursiveGen;
              DCOMP._IOwnership _3588_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3589_recIdents;
              RAST._IExpr _out795;
              DCOMP._IOwnership _out796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out795, out _out796, out _out797);
              _3587_recursiveGen = _out795;
              _3588_recOwned = _out796;
              _3589_recIdents = _out797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3587_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out798;
              DCOMP._IOwnership _out799;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out798, out _out799);
              r = _out798;
              resultingOwnership = _out799;
              readIdents = _3589_recIdents;
            }
          } else if (_source136.is_Multiset) {
            DAST._IType _3590___mcc_h434 = _source136.dtor_element;
            {
              RAST._IExpr _3591_recursiveGen;
              DCOMP._IOwnership _3592_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3593_recIdents;
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out800, out _out801, out _out802);
              _3591_recursiveGen = _out800;
              _3592_recOwned = _out801;
              _3593_recIdents = _out802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3591_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out803, out _out804);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _3593_recIdents;
            }
          } else if (_source136.is_Map) {
            DAST._IType _3594___mcc_h436 = _source136.dtor_key;
            DAST._IType _3595___mcc_h437 = _source136.dtor_value;
            {
              RAST._IExpr _3596_recursiveGen;
              DCOMP._IOwnership _3597_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3598_recIdents;
              RAST._IExpr _out805;
              DCOMP._IOwnership _out806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out805, out _out806, out _out807);
              _3596_recursiveGen = _out805;
              _3597_recOwned = _out806;
              _3598_recIdents = _out807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3596_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out808;
              DCOMP._IOwnership _out809;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out808, out _out809);
              r = _out808;
              resultingOwnership = _out809;
              readIdents = _3598_recIdents;
            }
          } else if (_source136.is_SetBuilder) {
            DAST._IType _3599___mcc_h440 = _source136.dtor_element;
            {
              RAST._IExpr _3600_recursiveGen;
              DCOMP._IOwnership _3601_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3602_recIdents;
              RAST._IExpr _out810;
              DCOMP._IOwnership _out811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out810, out _out811, out _out812);
              _3600_recursiveGen = _out810;
              _3601_recOwned = _out811;
              _3602_recIdents = _out812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3600_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out813;
              DCOMP._IOwnership _out814;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out813, out _out814);
              r = _out813;
              resultingOwnership = _out814;
              readIdents = _3602_recIdents;
            }
          } else if (_source136.is_MapBuilder) {
            DAST._IType _3603___mcc_h442 = _source136.dtor_key;
            DAST._IType _3604___mcc_h443 = _source136.dtor_value;
            {
              RAST._IExpr _3605_recursiveGen;
              DCOMP._IOwnership _3606_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3607_recIdents;
              RAST._IExpr _out815;
              DCOMP._IOwnership _out816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out815, out _out816, out _out817);
              _3605_recursiveGen = _out815;
              _3606_recOwned = _out816;
              _3607_recIdents = _out817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3605_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out818;
              DCOMP._IOwnership _out819;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out818, out _out819);
              r = _out818;
              resultingOwnership = _out819;
              readIdents = _3607_recIdents;
            }
          } else if (_source136.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3608___mcc_h446 = _source136.dtor_args;
            DAST._IType _3609___mcc_h447 = _source136.dtor_result;
            {
              RAST._IExpr _3610_recursiveGen;
              DCOMP._IOwnership _3611_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3612_recIdents;
              RAST._IExpr _out820;
              DCOMP._IOwnership _out821;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out820, out _out821, out _out822);
              _3610_recursiveGen = _out820;
              _3611_recOwned = _out821;
              _3612_recIdents = _out822;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3610_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out823;
              DCOMP._IOwnership _out824;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out823, out _out824);
              r = _out823;
              resultingOwnership = _out824;
              readIdents = _3612_recIdents;
            }
          } else if (_source136.is_Primitive) {
            DAST._IPrimitive _3613___mcc_h450 = _source136.dtor_Primitive_a0;
            {
              RAST._IExpr _3614_recursiveGen;
              DCOMP._IOwnership _3615_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3616_recIdents;
              RAST._IExpr _out825;
              DCOMP._IOwnership _out826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out825, out _out826, out _out827);
              _3614_recursiveGen = _out825;
              _3615_recOwned = _out826;
              _3616_recIdents = _out827;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3614_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out828;
              DCOMP._IOwnership _out829;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out828, out _out829);
              r = _out828;
              resultingOwnership = _out829;
              readIdents = _3616_recIdents;
            }
          } else if (_source136.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3617___mcc_h452 = _source136.dtor_Passthrough_a0;
            {
              RAST._IExpr _3618_recursiveGen;
              DCOMP._IOwnership _3619_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3620_recIdents;
              RAST._IExpr _out830;
              DCOMP._IOwnership _out831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out830, out _out831, out _out832);
              _3618_recursiveGen = _out830;
              _3619_recOwned = _out831;
              _3620_recIdents = _out832;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3618_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out833;
              DCOMP._IOwnership _out834;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out833, out _out834);
              r = _out833;
              resultingOwnership = _out834;
              readIdents = _3620_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3621___mcc_h454 = _source136.dtor_TypeArg_a0;
            {
              RAST._IExpr _3622_recursiveGen;
              DCOMP._IOwnership _3623_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3624_recIdents;
              RAST._IExpr _out835;
              DCOMP._IOwnership _out836;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out835, out _out836, out _out837);
              _3622_recursiveGen = _out835;
              _3623_recOwned = _out836;
              _3624_recIdents = _out837;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3622_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out838;
              DCOMP._IOwnership _out839;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out838, out _out839);
              r = _out838;
              resultingOwnership = _out839;
              readIdents = _3624_recIdents;
            }
          }
        } else if (_source117.is_Set) {
          DAST._IType _3625___mcc_h456 = _source117.dtor_element;
          DAST._IType _source139 = _2994___mcc_h1;
          if (_source139.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3626___mcc_h460 = _source139.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3627___mcc_h461 = _source139.dtor_typeArgs;
            DAST._IResolvedType _3628___mcc_h462 = _source139.dtor_resolved;
            DAST._IResolvedType _source140 = _3628___mcc_h462;
            if (_source140.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3629___mcc_h466 = _source140.dtor_path;
              {
                RAST._IExpr _3630_recursiveGen;
                DCOMP._IOwnership _3631_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3632_recIdents;
                RAST._IExpr _out840;
                DCOMP._IOwnership _out841;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out840, out _out841, out _out842);
                _3630_recursiveGen = _out840;
                _3631_recOwned = _out841;
                _3632_recIdents = _out842;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3630_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out843;
                DCOMP._IOwnership _out844;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out843, out _out844);
                r = _out843;
                resultingOwnership = _out844;
                readIdents = _3632_recIdents;
              }
            } else if (_source140.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3633___mcc_h468 = _source140.dtor_path;
              {
                RAST._IExpr _3634_recursiveGen;
                DCOMP._IOwnership _3635_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3636_recIdents;
                RAST._IExpr _out845;
                DCOMP._IOwnership _out846;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out845, out _out846, out _out847);
                _3634_recursiveGen = _out845;
                _3635_recOwned = _out846;
                _3636_recIdents = _out847;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3634_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out848;
                DCOMP._IOwnership _out849;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out848, out _out849);
                r = _out848;
                resultingOwnership = _out849;
                readIdents = _3636_recIdents;
              }
            } else {
              DAST._IType _3637___mcc_h470 = _source140.dtor_baseType;
              DAST._INewtypeRange _3638___mcc_h471 = _source140.dtor_range;
              bool _3639___mcc_h472 = _source140.dtor_erase;
              bool _3640_erase = _3639___mcc_h472;
              DAST._INewtypeRange _3641_range = _3638___mcc_h471;
              DAST._IType _3642_b = _3637___mcc_h470;
              {
                if (object.Equals(_2988_fromTpe, _3642_b)) {
                  RAST._IExpr _3643_recursiveGen;
                  DCOMP._IOwnership _3644_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3645_recIdents;
                  RAST._IExpr _out850;
                  DCOMP._IOwnership _out851;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out852;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out850, out _out851, out _out852);
                  _3643_recursiveGen = _out850;
                  _3644_recOwned = _out851;
                  _3645_recIdents = _out852;
                  Std.Wrappers._IOption<RAST._IType> _3646_potentialRhsType;
                  _3646_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3642_b, _3641_range);
                  Std.Wrappers._IOption<RAST._IType> _source141 = _3646_potentialRhsType;
                  if (_source141.is_None) {
                    if (_3640_erase) {
                      r = _3643_recursiveGen;
                    } else {
                      RAST._IType _3647_rhsType;
                      RAST._IType _out853;
                      _out853 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3647_rhsType = _out853;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3647_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3643_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out854;
                    DCOMP._IOwnership _out855;
                    DCOMP.COMP.FromOwnership(r, _3644_recOwned, expectedOwnership, out _out854, out _out855);
                    r = _out854;
                    resultingOwnership = _out855;
                  } else {
                    RAST._IType _3648___mcc_h1160 = _source141.dtor_value;
                    RAST._IType _3649_v = _3648___mcc_h1160;
                    r = RAST.Expr.create_ConversionNum(_3649_v, _3643_recursiveGen);
                    RAST._IExpr _out856;
                    DCOMP._IOwnership _out857;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out856, out _out857);
                    r = _out856;
                    resultingOwnership = _out857;
                  }
                  readIdents = _3645_recIdents;
                } else {
                  RAST._IExpr _out858;
                  DCOMP._IOwnership _out859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out860;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3642_b), _3642_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out858, out _out859, out _out860);
                  r = _out858;
                  resultingOwnership = _out859;
                  readIdents = _out860;
                }
              }
            }
          } else if (_source139.is_Nullable) {
            DAST._IType _3650___mcc_h476 = _source139.dtor_Nullable_a0;
            {
              RAST._IExpr _3651_recursiveGen;
              DCOMP._IOwnership _3652_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3653_recIdents;
              RAST._IExpr _out861;
              DCOMP._IOwnership _out862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out861, out _out862, out _out863);
              _3651_recursiveGen = _out861;
              _3652_recOwned = _out862;
              _3653_recIdents = _out863;
              Dafny.ISequence<Dafny.Rune> _3654_s;
              _3654_s = (_3651_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3652_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3654_s = Dafny.Sequence<Dafny.Rune>.Concat(_3654_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3654_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3654_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3654_s);
              RAST._IExpr _out864;
              DCOMP._IOwnership _out865;
              DCOMP.COMP.FromOwnership(r, _3652_recOwned, expectedOwnership, out _out864, out _out865);
              r = _out864;
              resultingOwnership = _out865;
              readIdents = _3653_recIdents;
            }
          } else if (_source139.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3655___mcc_h478 = _source139.dtor_Tuple_a0;
            {
              RAST._IExpr _3656_recursiveGen;
              DCOMP._IOwnership _3657_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3658_recIdents;
              RAST._IExpr _out866;
              DCOMP._IOwnership _out867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out866, out _out867, out _out868);
              _3656_recursiveGen = _out866;
              _3657_recOwned = _out867;
              _3658_recIdents = _out868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3656_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out869;
              DCOMP._IOwnership _out870;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out869, out _out870);
              r = _out869;
              resultingOwnership = _out870;
              readIdents = _3658_recIdents;
            }
          } else if (_source139.is_Array) {
            DAST._IType _3659___mcc_h480 = _source139.dtor_element;
            BigInteger _3660___mcc_h481 = _source139.dtor_dims;
            {
              RAST._IExpr _3661_recursiveGen;
              DCOMP._IOwnership _3662_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3663_recIdents;
              RAST._IExpr _out871;
              DCOMP._IOwnership _out872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out871, out _out872, out _out873);
              _3661_recursiveGen = _out871;
              _3662_recOwned = _out872;
              _3663_recIdents = _out873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3661_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out874;
              DCOMP._IOwnership _out875;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out874, out _out875);
              r = _out874;
              resultingOwnership = _out875;
              readIdents = _3663_recIdents;
            }
          } else if (_source139.is_Seq) {
            DAST._IType _3664___mcc_h484 = _source139.dtor_element;
            {
              RAST._IExpr _3665_recursiveGen;
              DCOMP._IOwnership _3666_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3667_recIdents;
              RAST._IExpr _out876;
              DCOMP._IOwnership _out877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out876, out _out877, out _out878);
              _3665_recursiveGen = _out876;
              _3666_recOwned = _out877;
              _3667_recIdents = _out878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3665_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out879;
              DCOMP._IOwnership _out880;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out879, out _out880);
              r = _out879;
              resultingOwnership = _out880;
              readIdents = _3667_recIdents;
            }
          } else if (_source139.is_Set) {
            DAST._IType _3668___mcc_h486 = _source139.dtor_element;
            {
              RAST._IExpr _3669_recursiveGen;
              DCOMP._IOwnership _3670_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3671_recIdents;
              RAST._IExpr _out881;
              DCOMP._IOwnership _out882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out881, out _out882, out _out883);
              _3669_recursiveGen = _out881;
              _3670_recOwned = _out882;
              _3671_recIdents = _out883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3669_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out884;
              DCOMP._IOwnership _out885;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out884, out _out885);
              r = _out884;
              resultingOwnership = _out885;
              readIdents = _3671_recIdents;
            }
          } else if (_source139.is_Multiset) {
            DAST._IType _3672___mcc_h488 = _source139.dtor_element;
            {
              RAST._IExpr _3673_recursiveGen;
              DCOMP._IOwnership _3674_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3675_recIdents;
              RAST._IExpr _out886;
              DCOMP._IOwnership _out887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out886, out _out887, out _out888);
              _3673_recursiveGen = _out886;
              _3674_recOwned = _out887;
              _3675_recIdents = _out888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3673_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out889;
              DCOMP._IOwnership _out890;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out889, out _out890);
              r = _out889;
              resultingOwnership = _out890;
              readIdents = _3675_recIdents;
            }
          } else if (_source139.is_Map) {
            DAST._IType _3676___mcc_h490 = _source139.dtor_key;
            DAST._IType _3677___mcc_h491 = _source139.dtor_value;
            {
              RAST._IExpr _3678_recursiveGen;
              DCOMP._IOwnership _3679_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3680_recIdents;
              RAST._IExpr _out891;
              DCOMP._IOwnership _out892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out891, out _out892, out _out893);
              _3678_recursiveGen = _out891;
              _3679_recOwned = _out892;
              _3680_recIdents = _out893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3678_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out894;
              DCOMP._IOwnership _out895;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out894, out _out895);
              r = _out894;
              resultingOwnership = _out895;
              readIdents = _3680_recIdents;
            }
          } else if (_source139.is_SetBuilder) {
            DAST._IType _3681___mcc_h494 = _source139.dtor_element;
            {
              RAST._IExpr _3682_recursiveGen;
              DCOMP._IOwnership _3683_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3684_recIdents;
              RAST._IExpr _out896;
              DCOMP._IOwnership _out897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out896, out _out897, out _out898);
              _3682_recursiveGen = _out896;
              _3683_recOwned = _out897;
              _3684_recIdents = _out898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3682_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out899;
              DCOMP._IOwnership _out900;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out899, out _out900);
              r = _out899;
              resultingOwnership = _out900;
              readIdents = _3684_recIdents;
            }
          } else if (_source139.is_MapBuilder) {
            DAST._IType _3685___mcc_h496 = _source139.dtor_key;
            DAST._IType _3686___mcc_h497 = _source139.dtor_value;
            {
              RAST._IExpr _3687_recursiveGen;
              DCOMP._IOwnership _3688_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3689_recIdents;
              RAST._IExpr _out901;
              DCOMP._IOwnership _out902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out901, out _out902, out _out903);
              _3687_recursiveGen = _out901;
              _3688_recOwned = _out902;
              _3689_recIdents = _out903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3687_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out904;
              DCOMP._IOwnership _out905;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out904, out _out905);
              r = _out904;
              resultingOwnership = _out905;
              readIdents = _3689_recIdents;
            }
          } else if (_source139.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3690___mcc_h500 = _source139.dtor_args;
            DAST._IType _3691___mcc_h501 = _source139.dtor_result;
            {
              RAST._IExpr _3692_recursiveGen;
              DCOMP._IOwnership _3693_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3694_recIdents;
              RAST._IExpr _out906;
              DCOMP._IOwnership _out907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out906, out _out907, out _out908);
              _3692_recursiveGen = _out906;
              _3693_recOwned = _out907;
              _3694_recIdents = _out908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3692_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out909;
              DCOMP._IOwnership _out910;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out909, out _out910);
              r = _out909;
              resultingOwnership = _out910;
              readIdents = _3694_recIdents;
            }
          } else if (_source139.is_Primitive) {
            DAST._IPrimitive _3695___mcc_h504 = _source139.dtor_Primitive_a0;
            {
              RAST._IExpr _3696_recursiveGen;
              DCOMP._IOwnership _3697_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3698_recIdents;
              RAST._IExpr _out911;
              DCOMP._IOwnership _out912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out911, out _out912, out _out913);
              _3696_recursiveGen = _out911;
              _3697_recOwned = _out912;
              _3698_recIdents = _out913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3696_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out914;
              DCOMP._IOwnership _out915;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out914, out _out915);
              r = _out914;
              resultingOwnership = _out915;
              readIdents = _3698_recIdents;
            }
          } else if (_source139.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3699___mcc_h506 = _source139.dtor_Passthrough_a0;
            {
              RAST._IExpr _3700_recursiveGen;
              DCOMP._IOwnership _3701_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3702_recIdents;
              RAST._IExpr _out916;
              DCOMP._IOwnership _out917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out916, out _out917, out _out918);
              _3700_recursiveGen = _out916;
              _3701_recOwned = _out917;
              _3702_recIdents = _out918;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3700_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out919;
              DCOMP._IOwnership _out920;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out919, out _out920);
              r = _out919;
              resultingOwnership = _out920;
              readIdents = _3702_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3703___mcc_h508 = _source139.dtor_TypeArg_a0;
            {
              RAST._IExpr _3704_recursiveGen;
              DCOMP._IOwnership _3705_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3706_recIdents;
              RAST._IExpr _out921;
              DCOMP._IOwnership _out922;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out921, out _out922, out _out923);
              _3704_recursiveGen = _out921;
              _3705_recOwned = _out922;
              _3706_recIdents = _out923;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3704_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out924;
              DCOMP._IOwnership _out925;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out924, out _out925);
              r = _out924;
              resultingOwnership = _out925;
              readIdents = _3706_recIdents;
            }
          }
        } else if (_source117.is_Multiset) {
          DAST._IType _3707___mcc_h510 = _source117.dtor_element;
          DAST._IType _source142 = _2994___mcc_h1;
          if (_source142.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3708___mcc_h514 = _source142.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3709___mcc_h515 = _source142.dtor_typeArgs;
            DAST._IResolvedType _3710___mcc_h516 = _source142.dtor_resolved;
            DAST._IResolvedType _source143 = _3710___mcc_h516;
            if (_source143.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3711___mcc_h520 = _source143.dtor_path;
              {
                RAST._IExpr _3712_recursiveGen;
                DCOMP._IOwnership _3713_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3714_recIdents;
                RAST._IExpr _out926;
                DCOMP._IOwnership _out927;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out926, out _out927, out _out928);
                _3712_recursiveGen = _out926;
                _3713_recOwned = _out927;
                _3714_recIdents = _out928;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3712_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out929;
                DCOMP._IOwnership _out930;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out929, out _out930);
                r = _out929;
                resultingOwnership = _out930;
                readIdents = _3714_recIdents;
              }
            } else if (_source143.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3715___mcc_h522 = _source143.dtor_path;
              {
                RAST._IExpr _3716_recursiveGen;
                DCOMP._IOwnership _3717_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3718_recIdents;
                RAST._IExpr _out931;
                DCOMP._IOwnership _out932;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out933;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out931, out _out932, out _out933);
                _3716_recursiveGen = _out931;
                _3717_recOwned = _out932;
                _3718_recIdents = _out933;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3716_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out934;
                DCOMP._IOwnership _out935;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out934, out _out935);
                r = _out934;
                resultingOwnership = _out935;
                readIdents = _3718_recIdents;
              }
            } else {
              DAST._IType _3719___mcc_h524 = _source143.dtor_baseType;
              DAST._INewtypeRange _3720___mcc_h525 = _source143.dtor_range;
              bool _3721___mcc_h526 = _source143.dtor_erase;
              bool _3722_erase = _3721___mcc_h526;
              DAST._INewtypeRange _3723_range = _3720___mcc_h525;
              DAST._IType _3724_b = _3719___mcc_h524;
              {
                if (object.Equals(_2988_fromTpe, _3724_b)) {
                  RAST._IExpr _3725_recursiveGen;
                  DCOMP._IOwnership _3726_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3727_recIdents;
                  RAST._IExpr _out936;
                  DCOMP._IOwnership _out937;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out938;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out936, out _out937, out _out938);
                  _3725_recursiveGen = _out936;
                  _3726_recOwned = _out937;
                  _3727_recIdents = _out938;
                  Std.Wrappers._IOption<RAST._IType> _3728_potentialRhsType;
                  _3728_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3724_b, _3723_range);
                  Std.Wrappers._IOption<RAST._IType> _source144 = _3728_potentialRhsType;
                  if (_source144.is_None) {
                    if (_3722_erase) {
                      r = _3725_recursiveGen;
                    } else {
                      RAST._IType _3729_rhsType;
                      RAST._IType _out939;
                      _out939 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3729_rhsType = _out939;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3729_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3725_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out940;
                    DCOMP._IOwnership _out941;
                    DCOMP.COMP.FromOwnership(r, _3726_recOwned, expectedOwnership, out _out940, out _out941);
                    r = _out940;
                    resultingOwnership = _out941;
                  } else {
                    RAST._IType _3730___mcc_h1161 = _source144.dtor_value;
                    RAST._IType _3731_v = _3730___mcc_h1161;
                    r = RAST.Expr.create_ConversionNum(_3731_v, _3725_recursiveGen);
                    RAST._IExpr _out942;
                    DCOMP._IOwnership _out943;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out942, out _out943);
                    r = _out942;
                    resultingOwnership = _out943;
                  }
                  readIdents = _3727_recIdents;
                } else {
                  RAST._IExpr _out944;
                  DCOMP._IOwnership _out945;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3724_b), _3724_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out944, out _out945, out _out946);
                  r = _out944;
                  resultingOwnership = _out945;
                  readIdents = _out946;
                }
              }
            }
          } else if (_source142.is_Nullable) {
            DAST._IType _3732___mcc_h530 = _source142.dtor_Nullable_a0;
            {
              RAST._IExpr _3733_recursiveGen;
              DCOMP._IOwnership _3734_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3735_recIdents;
              RAST._IExpr _out947;
              DCOMP._IOwnership _out948;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out947, out _out948, out _out949);
              _3733_recursiveGen = _out947;
              _3734_recOwned = _out948;
              _3735_recIdents = _out949;
              Dafny.ISequence<Dafny.Rune> _3736_s;
              _3736_s = (_3733_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3734_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3736_s = Dafny.Sequence<Dafny.Rune>.Concat(_3736_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3736_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3736_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3736_s);
              RAST._IExpr _out950;
              DCOMP._IOwnership _out951;
              DCOMP.COMP.FromOwnership(r, _3734_recOwned, expectedOwnership, out _out950, out _out951);
              r = _out950;
              resultingOwnership = _out951;
              readIdents = _3735_recIdents;
            }
          } else if (_source142.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3737___mcc_h532 = _source142.dtor_Tuple_a0;
            {
              RAST._IExpr _3738_recursiveGen;
              DCOMP._IOwnership _3739_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3740_recIdents;
              RAST._IExpr _out952;
              DCOMP._IOwnership _out953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out952, out _out953, out _out954);
              _3738_recursiveGen = _out952;
              _3739_recOwned = _out953;
              _3740_recIdents = _out954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3738_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out955;
              DCOMP._IOwnership _out956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out955, out _out956);
              r = _out955;
              resultingOwnership = _out956;
              readIdents = _3740_recIdents;
            }
          } else if (_source142.is_Array) {
            DAST._IType _3741___mcc_h534 = _source142.dtor_element;
            BigInteger _3742___mcc_h535 = _source142.dtor_dims;
            {
              RAST._IExpr _3743_recursiveGen;
              DCOMP._IOwnership _3744_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3745_recIdents;
              RAST._IExpr _out957;
              DCOMP._IOwnership _out958;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out957, out _out958, out _out959);
              _3743_recursiveGen = _out957;
              _3744_recOwned = _out958;
              _3745_recIdents = _out959;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3743_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out960;
              DCOMP._IOwnership _out961;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out960, out _out961);
              r = _out960;
              resultingOwnership = _out961;
              readIdents = _3745_recIdents;
            }
          } else if (_source142.is_Seq) {
            DAST._IType _3746___mcc_h538 = _source142.dtor_element;
            {
              RAST._IExpr _3747_recursiveGen;
              DCOMP._IOwnership _3748_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3749_recIdents;
              RAST._IExpr _out962;
              DCOMP._IOwnership _out963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out962, out _out963, out _out964);
              _3747_recursiveGen = _out962;
              _3748_recOwned = _out963;
              _3749_recIdents = _out964;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3747_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out965;
              DCOMP._IOwnership _out966;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out965, out _out966);
              r = _out965;
              resultingOwnership = _out966;
              readIdents = _3749_recIdents;
            }
          } else if (_source142.is_Set) {
            DAST._IType _3750___mcc_h540 = _source142.dtor_element;
            {
              RAST._IExpr _3751_recursiveGen;
              DCOMP._IOwnership _3752_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3753_recIdents;
              RAST._IExpr _out967;
              DCOMP._IOwnership _out968;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out967, out _out968, out _out969);
              _3751_recursiveGen = _out967;
              _3752_recOwned = _out968;
              _3753_recIdents = _out969;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3751_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out970;
              DCOMP._IOwnership _out971;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out970, out _out971);
              r = _out970;
              resultingOwnership = _out971;
              readIdents = _3753_recIdents;
            }
          } else if (_source142.is_Multiset) {
            DAST._IType _3754___mcc_h542 = _source142.dtor_element;
            {
              RAST._IExpr _3755_recursiveGen;
              DCOMP._IOwnership _3756_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3757_recIdents;
              RAST._IExpr _out972;
              DCOMP._IOwnership _out973;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out972, out _out973, out _out974);
              _3755_recursiveGen = _out972;
              _3756_recOwned = _out973;
              _3757_recIdents = _out974;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3755_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out975;
              DCOMP._IOwnership _out976;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out975, out _out976);
              r = _out975;
              resultingOwnership = _out976;
              readIdents = _3757_recIdents;
            }
          } else if (_source142.is_Map) {
            DAST._IType _3758___mcc_h544 = _source142.dtor_key;
            DAST._IType _3759___mcc_h545 = _source142.dtor_value;
            {
              RAST._IExpr _3760_recursiveGen;
              DCOMP._IOwnership _3761_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3762_recIdents;
              RAST._IExpr _out977;
              DCOMP._IOwnership _out978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out977, out _out978, out _out979);
              _3760_recursiveGen = _out977;
              _3761_recOwned = _out978;
              _3762_recIdents = _out979;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3760_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out980;
              DCOMP._IOwnership _out981;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out980, out _out981);
              r = _out980;
              resultingOwnership = _out981;
              readIdents = _3762_recIdents;
            }
          } else if (_source142.is_SetBuilder) {
            DAST._IType _3763___mcc_h548 = _source142.dtor_element;
            {
              RAST._IExpr _3764_recursiveGen;
              DCOMP._IOwnership _3765_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3766_recIdents;
              RAST._IExpr _out982;
              DCOMP._IOwnership _out983;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out982, out _out983, out _out984);
              _3764_recursiveGen = _out982;
              _3765_recOwned = _out983;
              _3766_recIdents = _out984;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3764_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out985;
              DCOMP._IOwnership _out986;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out985, out _out986);
              r = _out985;
              resultingOwnership = _out986;
              readIdents = _3766_recIdents;
            }
          } else if (_source142.is_MapBuilder) {
            DAST._IType _3767___mcc_h550 = _source142.dtor_key;
            DAST._IType _3768___mcc_h551 = _source142.dtor_value;
            {
              RAST._IExpr _3769_recursiveGen;
              DCOMP._IOwnership _3770_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3771_recIdents;
              RAST._IExpr _out987;
              DCOMP._IOwnership _out988;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out987, out _out988, out _out989);
              _3769_recursiveGen = _out987;
              _3770_recOwned = _out988;
              _3771_recIdents = _out989;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3769_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out990;
              DCOMP._IOwnership _out991;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out990, out _out991);
              r = _out990;
              resultingOwnership = _out991;
              readIdents = _3771_recIdents;
            }
          } else if (_source142.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3772___mcc_h554 = _source142.dtor_args;
            DAST._IType _3773___mcc_h555 = _source142.dtor_result;
            {
              RAST._IExpr _3774_recursiveGen;
              DCOMP._IOwnership _3775_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3776_recIdents;
              RAST._IExpr _out992;
              DCOMP._IOwnership _out993;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out992, out _out993, out _out994);
              _3774_recursiveGen = _out992;
              _3775_recOwned = _out993;
              _3776_recIdents = _out994;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3774_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out995;
              DCOMP._IOwnership _out996;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out995, out _out996);
              r = _out995;
              resultingOwnership = _out996;
              readIdents = _3776_recIdents;
            }
          } else if (_source142.is_Primitive) {
            DAST._IPrimitive _3777___mcc_h558 = _source142.dtor_Primitive_a0;
            {
              RAST._IExpr _3778_recursiveGen;
              DCOMP._IOwnership _3779_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3780_recIdents;
              RAST._IExpr _out997;
              DCOMP._IOwnership _out998;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out997, out _out998, out _out999);
              _3778_recursiveGen = _out997;
              _3779_recOwned = _out998;
              _3780_recIdents = _out999;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3778_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1000;
              DCOMP._IOwnership _out1001;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1000, out _out1001);
              r = _out1000;
              resultingOwnership = _out1001;
              readIdents = _3780_recIdents;
            }
          } else if (_source142.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3781___mcc_h560 = _source142.dtor_Passthrough_a0;
            {
              RAST._IExpr _3782_recursiveGen;
              DCOMP._IOwnership _3783_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3784_recIdents;
              RAST._IExpr _out1002;
              DCOMP._IOwnership _out1003;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1002, out _out1003, out _out1004);
              _3782_recursiveGen = _out1002;
              _3783_recOwned = _out1003;
              _3784_recIdents = _out1004;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3782_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1005;
              DCOMP._IOwnership _out1006;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1005, out _out1006);
              r = _out1005;
              resultingOwnership = _out1006;
              readIdents = _3784_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3785___mcc_h562 = _source142.dtor_TypeArg_a0;
            {
              RAST._IExpr _3786_recursiveGen;
              DCOMP._IOwnership _3787_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3788_recIdents;
              RAST._IExpr _out1007;
              DCOMP._IOwnership _out1008;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1007, out _out1008, out _out1009);
              _3786_recursiveGen = _out1007;
              _3787_recOwned = _out1008;
              _3788_recIdents = _out1009;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3786_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1010;
              DCOMP._IOwnership _out1011;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1010, out _out1011);
              r = _out1010;
              resultingOwnership = _out1011;
              readIdents = _3788_recIdents;
            }
          }
        } else if (_source117.is_Map) {
          DAST._IType _3789___mcc_h564 = _source117.dtor_key;
          DAST._IType _3790___mcc_h565 = _source117.dtor_value;
          DAST._IType _source145 = _2994___mcc_h1;
          if (_source145.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3791___mcc_h572 = _source145.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3792___mcc_h573 = _source145.dtor_typeArgs;
            DAST._IResolvedType _3793___mcc_h574 = _source145.dtor_resolved;
            DAST._IResolvedType _source146 = _3793___mcc_h574;
            if (_source146.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3794___mcc_h578 = _source146.dtor_path;
              {
                RAST._IExpr _3795_recursiveGen;
                DCOMP._IOwnership _3796_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3797_recIdents;
                RAST._IExpr _out1012;
                DCOMP._IOwnership _out1013;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1012, out _out1013, out _out1014);
                _3795_recursiveGen = _out1012;
                _3796_recOwned = _out1013;
                _3797_recIdents = _out1014;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3795_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1015;
                DCOMP._IOwnership _out1016;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1015, out _out1016);
                r = _out1015;
                resultingOwnership = _out1016;
                readIdents = _3797_recIdents;
              }
            } else if (_source146.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3798___mcc_h580 = _source146.dtor_path;
              {
                RAST._IExpr _3799_recursiveGen;
                DCOMP._IOwnership _3800_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3801_recIdents;
                RAST._IExpr _out1017;
                DCOMP._IOwnership _out1018;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1017, out _out1018, out _out1019);
                _3799_recursiveGen = _out1017;
                _3800_recOwned = _out1018;
                _3801_recIdents = _out1019;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3799_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1020;
                DCOMP._IOwnership _out1021;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1020, out _out1021);
                r = _out1020;
                resultingOwnership = _out1021;
                readIdents = _3801_recIdents;
              }
            } else {
              DAST._IType _3802___mcc_h582 = _source146.dtor_baseType;
              DAST._INewtypeRange _3803___mcc_h583 = _source146.dtor_range;
              bool _3804___mcc_h584 = _source146.dtor_erase;
              bool _3805_erase = _3804___mcc_h584;
              DAST._INewtypeRange _3806_range = _3803___mcc_h583;
              DAST._IType _3807_b = _3802___mcc_h582;
              {
                if (object.Equals(_2988_fromTpe, _3807_b)) {
                  RAST._IExpr _3808_recursiveGen;
                  DCOMP._IOwnership _3809_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3810_recIdents;
                  RAST._IExpr _out1022;
                  DCOMP._IOwnership _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1022, out _out1023, out _out1024);
                  _3808_recursiveGen = _out1022;
                  _3809_recOwned = _out1023;
                  _3810_recIdents = _out1024;
                  Std.Wrappers._IOption<RAST._IType> _3811_potentialRhsType;
                  _3811_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3807_b, _3806_range);
                  Std.Wrappers._IOption<RAST._IType> _source147 = _3811_potentialRhsType;
                  if (_source147.is_None) {
                    if (_3805_erase) {
                      r = _3808_recursiveGen;
                    } else {
                      RAST._IType _3812_rhsType;
                      RAST._IType _out1025;
                      _out1025 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3812_rhsType = _out1025;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3812_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3808_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1026;
                    DCOMP._IOwnership _out1027;
                    DCOMP.COMP.FromOwnership(r, _3809_recOwned, expectedOwnership, out _out1026, out _out1027);
                    r = _out1026;
                    resultingOwnership = _out1027;
                  } else {
                    RAST._IType _3813___mcc_h1162 = _source147.dtor_value;
                    RAST._IType _3814_v = _3813___mcc_h1162;
                    r = RAST.Expr.create_ConversionNum(_3814_v, _3808_recursiveGen);
                    RAST._IExpr _out1028;
                    DCOMP._IOwnership _out1029;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1028, out _out1029);
                    r = _out1028;
                    resultingOwnership = _out1029;
                  }
                  readIdents = _3810_recIdents;
                } else {
                  RAST._IExpr _out1030;
                  DCOMP._IOwnership _out1031;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3807_b), _3807_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1030, out _out1031, out _out1032);
                  r = _out1030;
                  resultingOwnership = _out1031;
                  readIdents = _out1032;
                }
              }
            }
          } else if (_source145.is_Nullable) {
            DAST._IType _3815___mcc_h588 = _source145.dtor_Nullable_a0;
            {
              RAST._IExpr _3816_recursiveGen;
              DCOMP._IOwnership _3817_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3818_recIdents;
              RAST._IExpr _out1033;
              DCOMP._IOwnership _out1034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1033, out _out1034, out _out1035);
              _3816_recursiveGen = _out1033;
              _3817_recOwned = _out1034;
              _3818_recIdents = _out1035;
              Dafny.ISequence<Dafny.Rune> _3819_s;
              _3819_s = (_3816_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3817_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3819_s = Dafny.Sequence<Dafny.Rune>.Concat(_3819_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3819_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3819_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3819_s);
              RAST._IExpr _out1036;
              DCOMP._IOwnership _out1037;
              DCOMP.COMP.FromOwnership(r, _3817_recOwned, expectedOwnership, out _out1036, out _out1037);
              r = _out1036;
              resultingOwnership = _out1037;
              readIdents = _3818_recIdents;
            }
          } else if (_source145.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3820___mcc_h590 = _source145.dtor_Tuple_a0;
            {
              RAST._IExpr _3821_recursiveGen;
              DCOMP._IOwnership _3822_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3823_recIdents;
              RAST._IExpr _out1038;
              DCOMP._IOwnership _out1039;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1038, out _out1039, out _out1040);
              _3821_recursiveGen = _out1038;
              _3822_recOwned = _out1039;
              _3823_recIdents = _out1040;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3821_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1041;
              DCOMP._IOwnership _out1042;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1041, out _out1042);
              r = _out1041;
              resultingOwnership = _out1042;
              readIdents = _3823_recIdents;
            }
          } else if (_source145.is_Array) {
            DAST._IType _3824___mcc_h592 = _source145.dtor_element;
            BigInteger _3825___mcc_h593 = _source145.dtor_dims;
            {
              RAST._IExpr _3826_recursiveGen;
              DCOMP._IOwnership _3827_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3828_recIdents;
              RAST._IExpr _out1043;
              DCOMP._IOwnership _out1044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1043, out _out1044, out _out1045);
              _3826_recursiveGen = _out1043;
              _3827_recOwned = _out1044;
              _3828_recIdents = _out1045;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3826_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1046;
              DCOMP._IOwnership _out1047;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1046, out _out1047);
              r = _out1046;
              resultingOwnership = _out1047;
              readIdents = _3828_recIdents;
            }
          } else if (_source145.is_Seq) {
            DAST._IType _3829___mcc_h596 = _source145.dtor_element;
            {
              RAST._IExpr _3830_recursiveGen;
              DCOMP._IOwnership _3831_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3832_recIdents;
              RAST._IExpr _out1048;
              DCOMP._IOwnership _out1049;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1048, out _out1049, out _out1050);
              _3830_recursiveGen = _out1048;
              _3831_recOwned = _out1049;
              _3832_recIdents = _out1050;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3830_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1051;
              DCOMP._IOwnership _out1052;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1051, out _out1052);
              r = _out1051;
              resultingOwnership = _out1052;
              readIdents = _3832_recIdents;
            }
          } else if (_source145.is_Set) {
            DAST._IType _3833___mcc_h598 = _source145.dtor_element;
            {
              RAST._IExpr _3834_recursiveGen;
              DCOMP._IOwnership _3835_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3836_recIdents;
              RAST._IExpr _out1053;
              DCOMP._IOwnership _out1054;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1053, out _out1054, out _out1055);
              _3834_recursiveGen = _out1053;
              _3835_recOwned = _out1054;
              _3836_recIdents = _out1055;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3834_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1056;
              DCOMP._IOwnership _out1057;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1056, out _out1057);
              r = _out1056;
              resultingOwnership = _out1057;
              readIdents = _3836_recIdents;
            }
          } else if (_source145.is_Multiset) {
            DAST._IType _3837___mcc_h600 = _source145.dtor_element;
            {
              RAST._IExpr _3838_recursiveGen;
              DCOMP._IOwnership _3839_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3840_recIdents;
              RAST._IExpr _out1058;
              DCOMP._IOwnership _out1059;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1058, out _out1059, out _out1060);
              _3838_recursiveGen = _out1058;
              _3839_recOwned = _out1059;
              _3840_recIdents = _out1060;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3838_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1061;
              DCOMP._IOwnership _out1062;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1061, out _out1062);
              r = _out1061;
              resultingOwnership = _out1062;
              readIdents = _3840_recIdents;
            }
          } else if (_source145.is_Map) {
            DAST._IType _3841___mcc_h602 = _source145.dtor_key;
            DAST._IType _3842___mcc_h603 = _source145.dtor_value;
            {
              RAST._IExpr _3843_recursiveGen;
              DCOMP._IOwnership _3844_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3845_recIdents;
              RAST._IExpr _out1063;
              DCOMP._IOwnership _out1064;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1063, out _out1064, out _out1065);
              _3843_recursiveGen = _out1063;
              _3844_recOwned = _out1064;
              _3845_recIdents = _out1065;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3843_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1066;
              DCOMP._IOwnership _out1067;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1066, out _out1067);
              r = _out1066;
              resultingOwnership = _out1067;
              readIdents = _3845_recIdents;
            }
          } else if (_source145.is_SetBuilder) {
            DAST._IType _3846___mcc_h606 = _source145.dtor_element;
            {
              RAST._IExpr _3847_recursiveGen;
              DCOMP._IOwnership _3848_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3849_recIdents;
              RAST._IExpr _out1068;
              DCOMP._IOwnership _out1069;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1070;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1068, out _out1069, out _out1070);
              _3847_recursiveGen = _out1068;
              _3848_recOwned = _out1069;
              _3849_recIdents = _out1070;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3847_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1071;
              DCOMP._IOwnership _out1072;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1071, out _out1072);
              r = _out1071;
              resultingOwnership = _out1072;
              readIdents = _3849_recIdents;
            }
          } else if (_source145.is_MapBuilder) {
            DAST._IType _3850___mcc_h608 = _source145.dtor_key;
            DAST._IType _3851___mcc_h609 = _source145.dtor_value;
            {
              RAST._IExpr _3852_recursiveGen;
              DCOMP._IOwnership _3853_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3854_recIdents;
              RAST._IExpr _out1073;
              DCOMP._IOwnership _out1074;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1073, out _out1074, out _out1075);
              _3852_recursiveGen = _out1073;
              _3853_recOwned = _out1074;
              _3854_recIdents = _out1075;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3852_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1076;
              DCOMP._IOwnership _out1077;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1076, out _out1077);
              r = _out1076;
              resultingOwnership = _out1077;
              readIdents = _3854_recIdents;
            }
          } else if (_source145.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3855___mcc_h612 = _source145.dtor_args;
            DAST._IType _3856___mcc_h613 = _source145.dtor_result;
            {
              RAST._IExpr _3857_recursiveGen;
              DCOMP._IOwnership _3858_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3859_recIdents;
              RAST._IExpr _out1078;
              DCOMP._IOwnership _out1079;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1078, out _out1079, out _out1080);
              _3857_recursiveGen = _out1078;
              _3858_recOwned = _out1079;
              _3859_recIdents = _out1080;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3857_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1081;
              DCOMP._IOwnership _out1082;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1081, out _out1082);
              r = _out1081;
              resultingOwnership = _out1082;
              readIdents = _3859_recIdents;
            }
          } else if (_source145.is_Primitive) {
            DAST._IPrimitive _3860___mcc_h616 = _source145.dtor_Primitive_a0;
            {
              RAST._IExpr _3861_recursiveGen;
              DCOMP._IOwnership _3862_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3863_recIdents;
              RAST._IExpr _out1083;
              DCOMP._IOwnership _out1084;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1083, out _out1084, out _out1085);
              _3861_recursiveGen = _out1083;
              _3862_recOwned = _out1084;
              _3863_recIdents = _out1085;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3861_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1086;
              DCOMP._IOwnership _out1087;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1086, out _out1087);
              r = _out1086;
              resultingOwnership = _out1087;
              readIdents = _3863_recIdents;
            }
          } else if (_source145.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3864___mcc_h618 = _source145.dtor_Passthrough_a0;
            {
              RAST._IExpr _3865_recursiveGen;
              DCOMP._IOwnership _3866_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3867_recIdents;
              RAST._IExpr _out1088;
              DCOMP._IOwnership _out1089;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1088, out _out1089, out _out1090);
              _3865_recursiveGen = _out1088;
              _3866_recOwned = _out1089;
              _3867_recIdents = _out1090;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3865_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1091;
              DCOMP._IOwnership _out1092;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1091, out _out1092);
              r = _out1091;
              resultingOwnership = _out1092;
              readIdents = _3867_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3868___mcc_h620 = _source145.dtor_TypeArg_a0;
            {
              RAST._IExpr _3869_recursiveGen;
              DCOMP._IOwnership _3870_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3871_recIdents;
              RAST._IExpr _out1093;
              DCOMP._IOwnership _out1094;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1093, out _out1094, out _out1095);
              _3869_recursiveGen = _out1093;
              _3870_recOwned = _out1094;
              _3871_recIdents = _out1095;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3869_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1096;
              DCOMP._IOwnership _out1097;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1096, out _out1097);
              r = _out1096;
              resultingOwnership = _out1097;
              readIdents = _3871_recIdents;
            }
          }
        } else if (_source117.is_SetBuilder) {
          DAST._IType _3872___mcc_h622 = _source117.dtor_element;
          DAST._IType _source148 = _2994___mcc_h1;
          if (_source148.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3873___mcc_h626 = _source148.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3874___mcc_h627 = _source148.dtor_typeArgs;
            DAST._IResolvedType _3875___mcc_h628 = _source148.dtor_resolved;
            DAST._IResolvedType _source149 = _3875___mcc_h628;
            if (_source149.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3876___mcc_h632 = _source149.dtor_path;
              {
                RAST._IExpr _3877_recursiveGen;
                DCOMP._IOwnership _3878_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3879_recIdents;
                RAST._IExpr _out1098;
                DCOMP._IOwnership _out1099;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1098, out _out1099, out _out1100);
                _3877_recursiveGen = _out1098;
                _3878_recOwned = _out1099;
                _3879_recIdents = _out1100;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3877_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1101;
                DCOMP._IOwnership _out1102;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1101, out _out1102);
                r = _out1101;
                resultingOwnership = _out1102;
                readIdents = _3879_recIdents;
              }
            } else if (_source149.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3880___mcc_h634 = _source149.dtor_path;
              {
                RAST._IExpr _3881_recursiveGen;
                DCOMP._IOwnership _3882_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3883_recIdents;
                RAST._IExpr _out1103;
                DCOMP._IOwnership _out1104;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1103, out _out1104, out _out1105);
                _3881_recursiveGen = _out1103;
                _3882_recOwned = _out1104;
                _3883_recIdents = _out1105;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3881_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1106;
                DCOMP._IOwnership _out1107;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1106, out _out1107);
                r = _out1106;
                resultingOwnership = _out1107;
                readIdents = _3883_recIdents;
              }
            } else {
              DAST._IType _3884___mcc_h636 = _source149.dtor_baseType;
              DAST._INewtypeRange _3885___mcc_h637 = _source149.dtor_range;
              bool _3886___mcc_h638 = _source149.dtor_erase;
              bool _3887_erase = _3886___mcc_h638;
              DAST._INewtypeRange _3888_range = _3885___mcc_h637;
              DAST._IType _3889_b = _3884___mcc_h636;
              {
                if (object.Equals(_2988_fromTpe, _3889_b)) {
                  RAST._IExpr _3890_recursiveGen;
                  DCOMP._IOwnership _3891_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3892_recIdents;
                  RAST._IExpr _out1108;
                  DCOMP._IOwnership _out1109;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1110;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1108, out _out1109, out _out1110);
                  _3890_recursiveGen = _out1108;
                  _3891_recOwned = _out1109;
                  _3892_recIdents = _out1110;
                  Std.Wrappers._IOption<RAST._IType> _3893_potentialRhsType;
                  _3893_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3889_b, _3888_range);
                  Std.Wrappers._IOption<RAST._IType> _source150 = _3893_potentialRhsType;
                  if (_source150.is_None) {
                    if (_3887_erase) {
                      r = _3890_recursiveGen;
                    } else {
                      RAST._IType _3894_rhsType;
                      RAST._IType _out1111;
                      _out1111 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3894_rhsType = _out1111;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3894_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3890_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1112;
                    DCOMP._IOwnership _out1113;
                    DCOMP.COMP.FromOwnership(r, _3891_recOwned, expectedOwnership, out _out1112, out _out1113);
                    r = _out1112;
                    resultingOwnership = _out1113;
                  } else {
                    RAST._IType _3895___mcc_h1163 = _source150.dtor_value;
                    RAST._IType _3896_v = _3895___mcc_h1163;
                    r = RAST.Expr.create_ConversionNum(_3896_v, _3890_recursiveGen);
                    RAST._IExpr _out1114;
                    DCOMP._IOwnership _out1115;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1114, out _out1115);
                    r = _out1114;
                    resultingOwnership = _out1115;
                  }
                  readIdents = _3892_recIdents;
                } else {
                  RAST._IExpr _out1116;
                  DCOMP._IOwnership _out1117;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3889_b), _3889_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1116, out _out1117, out _out1118);
                  r = _out1116;
                  resultingOwnership = _out1117;
                  readIdents = _out1118;
                }
              }
            }
          } else if (_source148.is_Nullable) {
            DAST._IType _3897___mcc_h642 = _source148.dtor_Nullable_a0;
            {
              RAST._IExpr _3898_recursiveGen;
              DCOMP._IOwnership _3899_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3900_recIdents;
              RAST._IExpr _out1119;
              DCOMP._IOwnership _out1120;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1119, out _out1120, out _out1121);
              _3898_recursiveGen = _out1119;
              _3899_recOwned = _out1120;
              _3900_recIdents = _out1121;
              Dafny.ISequence<Dafny.Rune> _3901_s;
              _3901_s = (_3898_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3899_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3901_s = Dafny.Sequence<Dafny.Rune>.Concat(_3901_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3901_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3901_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3901_s);
              RAST._IExpr _out1122;
              DCOMP._IOwnership _out1123;
              DCOMP.COMP.FromOwnership(r, _3899_recOwned, expectedOwnership, out _out1122, out _out1123);
              r = _out1122;
              resultingOwnership = _out1123;
              readIdents = _3900_recIdents;
            }
          } else if (_source148.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3902___mcc_h644 = _source148.dtor_Tuple_a0;
            {
              RAST._IExpr _3903_recursiveGen;
              DCOMP._IOwnership _3904_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3905_recIdents;
              RAST._IExpr _out1124;
              DCOMP._IOwnership _out1125;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1124, out _out1125, out _out1126);
              _3903_recursiveGen = _out1124;
              _3904_recOwned = _out1125;
              _3905_recIdents = _out1126;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3903_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1127;
              DCOMP._IOwnership _out1128;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1127, out _out1128);
              r = _out1127;
              resultingOwnership = _out1128;
              readIdents = _3905_recIdents;
            }
          } else if (_source148.is_Array) {
            DAST._IType _3906___mcc_h646 = _source148.dtor_element;
            BigInteger _3907___mcc_h647 = _source148.dtor_dims;
            {
              RAST._IExpr _3908_recursiveGen;
              DCOMP._IOwnership _3909_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3910_recIdents;
              RAST._IExpr _out1129;
              DCOMP._IOwnership _out1130;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1131;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1129, out _out1130, out _out1131);
              _3908_recursiveGen = _out1129;
              _3909_recOwned = _out1130;
              _3910_recIdents = _out1131;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3908_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1132;
              DCOMP._IOwnership _out1133;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1132, out _out1133);
              r = _out1132;
              resultingOwnership = _out1133;
              readIdents = _3910_recIdents;
            }
          } else if (_source148.is_Seq) {
            DAST._IType _3911___mcc_h650 = _source148.dtor_element;
            {
              RAST._IExpr _3912_recursiveGen;
              DCOMP._IOwnership _3913_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3914_recIdents;
              RAST._IExpr _out1134;
              DCOMP._IOwnership _out1135;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1134, out _out1135, out _out1136);
              _3912_recursiveGen = _out1134;
              _3913_recOwned = _out1135;
              _3914_recIdents = _out1136;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3912_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1137;
              DCOMP._IOwnership _out1138;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1137, out _out1138);
              r = _out1137;
              resultingOwnership = _out1138;
              readIdents = _3914_recIdents;
            }
          } else if (_source148.is_Set) {
            DAST._IType _3915___mcc_h652 = _source148.dtor_element;
            {
              RAST._IExpr _3916_recursiveGen;
              DCOMP._IOwnership _3917_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3918_recIdents;
              RAST._IExpr _out1139;
              DCOMP._IOwnership _out1140;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1139, out _out1140, out _out1141);
              _3916_recursiveGen = _out1139;
              _3917_recOwned = _out1140;
              _3918_recIdents = _out1141;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3916_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1142;
              DCOMP._IOwnership _out1143;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1142, out _out1143);
              r = _out1142;
              resultingOwnership = _out1143;
              readIdents = _3918_recIdents;
            }
          } else if (_source148.is_Multiset) {
            DAST._IType _3919___mcc_h654 = _source148.dtor_element;
            {
              RAST._IExpr _3920_recursiveGen;
              DCOMP._IOwnership _3921_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3922_recIdents;
              RAST._IExpr _out1144;
              DCOMP._IOwnership _out1145;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1144, out _out1145, out _out1146);
              _3920_recursiveGen = _out1144;
              _3921_recOwned = _out1145;
              _3922_recIdents = _out1146;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3920_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1147;
              DCOMP._IOwnership _out1148;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1147, out _out1148);
              r = _out1147;
              resultingOwnership = _out1148;
              readIdents = _3922_recIdents;
            }
          } else if (_source148.is_Map) {
            DAST._IType _3923___mcc_h656 = _source148.dtor_key;
            DAST._IType _3924___mcc_h657 = _source148.dtor_value;
            {
              RAST._IExpr _3925_recursiveGen;
              DCOMP._IOwnership _3926_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3927_recIdents;
              RAST._IExpr _out1149;
              DCOMP._IOwnership _out1150;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1149, out _out1150, out _out1151);
              _3925_recursiveGen = _out1149;
              _3926_recOwned = _out1150;
              _3927_recIdents = _out1151;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3925_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1152;
              DCOMP._IOwnership _out1153;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1152, out _out1153);
              r = _out1152;
              resultingOwnership = _out1153;
              readIdents = _3927_recIdents;
            }
          } else if (_source148.is_SetBuilder) {
            DAST._IType _3928___mcc_h660 = _source148.dtor_element;
            {
              RAST._IExpr _3929_recursiveGen;
              DCOMP._IOwnership _3930_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3931_recIdents;
              RAST._IExpr _out1154;
              DCOMP._IOwnership _out1155;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1154, out _out1155, out _out1156);
              _3929_recursiveGen = _out1154;
              _3930_recOwned = _out1155;
              _3931_recIdents = _out1156;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3929_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1157;
              DCOMP._IOwnership _out1158;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1157, out _out1158);
              r = _out1157;
              resultingOwnership = _out1158;
              readIdents = _3931_recIdents;
            }
          } else if (_source148.is_MapBuilder) {
            DAST._IType _3932___mcc_h662 = _source148.dtor_key;
            DAST._IType _3933___mcc_h663 = _source148.dtor_value;
            {
              RAST._IExpr _3934_recursiveGen;
              DCOMP._IOwnership _3935_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3936_recIdents;
              RAST._IExpr _out1159;
              DCOMP._IOwnership _out1160;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1159, out _out1160, out _out1161);
              _3934_recursiveGen = _out1159;
              _3935_recOwned = _out1160;
              _3936_recIdents = _out1161;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3934_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1162;
              DCOMP._IOwnership _out1163;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1162, out _out1163);
              r = _out1162;
              resultingOwnership = _out1163;
              readIdents = _3936_recIdents;
            }
          } else if (_source148.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3937___mcc_h666 = _source148.dtor_args;
            DAST._IType _3938___mcc_h667 = _source148.dtor_result;
            {
              RAST._IExpr _3939_recursiveGen;
              DCOMP._IOwnership _3940_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3941_recIdents;
              RAST._IExpr _out1164;
              DCOMP._IOwnership _out1165;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1164, out _out1165, out _out1166);
              _3939_recursiveGen = _out1164;
              _3940_recOwned = _out1165;
              _3941_recIdents = _out1166;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3939_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1167;
              DCOMP._IOwnership _out1168;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1167, out _out1168);
              r = _out1167;
              resultingOwnership = _out1168;
              readIdents = _3941_recIdents;
            }
          } else if (_source148.is_Primitive) {
            DAST._IPrimitive _3942___mcc_h670 = _source148.dtor_Primitive_a0;
            {
              RAST._IExpr _3943_recursiveGen;
              DCOMP._IOwnership _3944_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3945_recIdents;
              RAST._IExpr _out1169;
              DCOMP._IOwnership _out1170;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1171;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1169, out _out1170, out _out1171);
              _3943_recursiveGen = _out1169;
              _3944_recOwned = _out1170;
              _3945_recIdents = _out1171;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3943_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1172;
              DCOMP._IOwnership _out1173;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1172, out _out1173);
              r = _out1172;
              resultingOwnership = _out1173;
              readIdents = _3945_recIdents;
            }
          } else if (_source148.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3946___mcc_h672 = _source148.dtor_Passthrough_a0;
            {
              RAST._IExpr _3947_recursiveGen;
              DCOMP._IOwnership _3948_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3949_recIdents;
              RAST._IExpr _out1174;
              DCOMP._IOwnership _out1175;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1174, out _out1175, out _out1176);
              _3947_recursiveGen = _out1174;
              _3948_recOwned = _out1175;
              _3949_recIdents = _out1176;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3947_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1177;
              DCOMP._IOwnership _out1178;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1177, out _out1178);
              r = _out1177;
              resultingOwnership = _out1178;
              readIdents = _3949_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3950___mcc_h674 = _source148.dtor_TypeArg_a0;
            {
              RAST._IExpr _3951_recursiveGen;
              DCOMP._IOwnership _3952_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3953_recIdents;
              RAST._IExpr _out1179;
              DCOMP._IOwnership _out1180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1179, out _out1180, out _out1181);
              _3951_recursiveGen = _out1179;
              _3952_recOwned = _out1180;
              _3953_recIdents = _out1181;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3951_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1182;
              DCOMP._IOwnership _out1183;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1182, out _out1183);
              r = _out1182;
              resultingOwnership = _out1183;
              readIdents = _3953_recIdents;
            }
          }
        } else if (_source117.is_MapBuilder) {
          DAST._IType _3954___mcc_h676 = _source117.dtor_key;
          DAST._IType _3955___mcc_h677 = _source117.dtor_value;
          DAST._IType _source151 = _2994___mcc_h1;
          if (_source151.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3956___mcc_h684 = _source151.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3957___mcc_h685 = _source151.dtor_typeArgs;
            DAST._IResolvedType _3958___mcc_h686 = _source151.dtor_resolved;
            DAST._IResolvedType _source152 = _3958___mcc_h686;
            if (_source152.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3959___mcc_h690 = _source152.dtor_path;
              {
                RAST._IExpr _3960_recursiveGen;
                DCOMP._IOwnership _3961_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3962_recIdents;
                RAST._IExpr _out1184;
                DCOMP._IOwnership _out1185;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1184, out _out1185, out _out1186);
                _3960_recursiveGen = _out1184;
                _3961_recOwned = _out1185;
                _3962_recIdents = _out1186;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3960_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1187;
                DCOMP._IOwnership _out1188;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1187, out _out1188);
                r = _out1187;
                resultingOwnership = _out1188;
                readIdents = _3962_recIdents;
              }
            } else if (_source152.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3963___mcc_h692 = _source152.dtor_path;
              {
                RAST._IExpr _3964_recursiveGen;
                DCOMP._IOwnership _3965_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3966_recIdents;
                RAST._IExpr _out1189;
                DCOMP._IOwnership _out1190;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1189, out _out1190, out _out1191);
                _3964_recursiveGen = _out1189;
                _3965_recOwned = _out1190;
                _3966_recIdents = _out1191;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3964_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1192;
                DCOMP._IOwnership _out1193;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1192, out _out1193);
                r = _out1192;
                resultingOwnership = _out1193;
                readIdents = _3966_recIdents;
              }
            } else {
              DAST._IType _3967___mcc_h694 = _source152.dtor_baseType;
              DAST._INewtypeRange _3968___mcc_h695 = _source152.dtor_range;
              bool _3969___mcc_h696 = _source152.dtor_erase;
              bool _3970_erase = _3969___mcc_h696;
              DAST._INewtypeRange _3971_range = _3968___mcc_h695;
              DAST._IType _3972_b = _3967___mcc_h694;
              {
                if (object.Equals(_2988_fromTpe, _3972_b)) {
                  RAST._IExpr _3973_recursiveGen;
                  DCOMP._IOwnership _3974_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3975_recIdents;
                  RAST._IExpr _out1194;
                  DCOMP._IOwnership _out1195;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1194, out _out1195, out _out1196);
                  _3973_recursiveGen = _out1194;
                  _3974_recOwned = _out1195;
                  _3975_recIdents = _out1196;
                  Std.Wrappers._IOption<RAST._IType> _3976_potentialRhsType;
                  _3976_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3972_b, _3971_range);
                  Std.Wrappers._IOption<RAST._IType> _source153 = _3976_potentialRhsType;
                  if (_source153.is_None) {
                    if (_3970_erase) {
                      r = _3973_recursiveGen;
                    } else {
                      RAST._IType _3977_rhsType;
                      RAST._IType _out1197;
                      _out1197 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _3977_rhsType = _out1197;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3977_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3973_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1198;
                    DCOMP._IOwnership _out1199;
                    DCOMP.COMP.FromOwnership(r, _3974_recOwned, expectedOwnership, out _out1198, out _out1199);
                    r = _out1198;
                    resultingOwnership = _out1199;
                  } else {
                    RAST._IType _3978___mcc_h1164 = _source153.dtor_value;
                    RAST._IType _3979_v = _3978___mcc_h1164;
                    r = RAST.Expr.create_ConversionNum(_3979_v, _3973_recursiveGen);
                    RAST._IExpr _out1200;
                    DCOMP._IOwnership _out1201;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1200, out _out1201);
                    r = _out1200;
                    resultingOwnership = _out1201;
                  }
                  readIdents = _3975_recIdents;
                } else {
                  RAST._IExpr _out1202;
                  DCOMP._IOwnership _out1203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1204;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _3972_b), _3972_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1202, out _out1203, out _out1204);
                  r = _out1202;
                  resultingOwnership = _out1203;
                  readIdents = _out1204;
                }
              }
            }
          } else if (_source151.is_Nullable) {
            DAST._IType _3980___mcc_h700 = _source151.dtor_Nullable_a0;
            {
              RAST._IExpr _3981_recursiveGen;
              DCOMP._IOwnership _3982_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3983_recIdents;
              RAST._IExpr _out1205;
              DCOMP._IOwnership _out1206;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1207;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1205, out _out1206, out _out1207);
              _3981_recursiveGen = _out1205;
              _3982_recOwned = _out1206;
              _3983_recIdents = _out1207;
              Dafny.ISequence<Dafny.Rune> _3984_s;
              _3984_s = (_3981_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3982_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3984_s = Dafny.Sequence<Dafny.Rune>.Concat(_3984_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3984_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3984_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3984_s);
              RAST._IExpr _out1208;
              DCOMP._IOwnership _out1209;
              DCOMP.COMP.FromOwnership(r, _3982_recOwned, expectedOwnership, out _out1208, out _out1209);
              r = _out1208;
              resultingOwnership = _out1209;
              readIdents = _3983_recIdents;
            }
          } else if (_source151.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3985___mcc_h702 = _source151.dtor_Tuple_a0;
            {
              RAST._IExpr _3986_recursiveGen;
              DCOMP._IOwnership _3987_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3988_recIdents;
              RAST._IExpr _out1210;
              DCOMP._IOwnership _out1211;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1212;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1210, out _out1211, out _out1212);
              _3986_recursiveGen = _out1210;
              _3987_recOwned = _out1211;
              _3988_recIdents = _out1212;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3986_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1213;
              DCOMP._IOwnership _out1214;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1213, out _out1214);
              r = _out1213;
              resultingOwnership = _out1214;
              readIdents = _3988_recIdents;
            }
          } else if (_source151.is_Array) {
            DAST._IType _3989___mcc_h704 = _source151.dtor_element;
            BigInteger _3990___mcc_h705 = _source151.dtor_dims;
            {
              RAST._IExpr _3991_recursiveGen;
              DCOMP._IOwnership _3992_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3993_recIdents;
              RAST._IExpr _out1215;
              DCOMP._IOwnership _out1216;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1215, out _out1216, out _out1217);
              _3991_recursiveGen = _out1215;
              _3992_recOwned = _out1216;
              _3993_recIdents = _out1217;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3991_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1218;
              DCOMP._IOwnership _out1219;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1218, out _out1219);
              r = _out1218;
              resultingOwnership = _out1219;
              readIdents = _3993_recIdents;
            }
          } else if (_source151.is_Seq) {
            DAST._IType _3994___mcc_h708 = _source151.dtor_element;
            {
              RAST._IExpr _3995_recursiveGen;
              DCOMP._IOwnership _3996_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3997_recIdents;
              RAST._IExpr _out1220;
              DCOMP._IOwnership _out1221;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1220, out _out1221, out _out1222);
              _3995_recursiveGen = _out1220;
              _3996_recOwned = _out1221;
              _3997_recIdents = _out1222;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3995_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1223;
              DCOMP._IOwnership _out1224;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1223, out _out1224);
              r = _out1223;
              resultingOwnership = _out1224;
              readIdents = _3997_recIdents;
            }
          } else if (_source151.is_Set) {
            DAST._IType _3998___mcc_h710 = _source151.dtor_element;
            {
              RAST._IExpr _3999_recursiveGen;
              DCOMP._IOwnership _4000_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4001_recIdents;
              RAST._IExpr _out1225;
              DCOMP._IOwnership _out1226;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1225, out _out1226, out _out1227);
              _3999_recursiveGen = _out1225;
              _4000_recOwned = _out1226;
              _4001_recIdents = _out1227;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3999_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1228;
              DCOMP._IOwnership _out1229;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1228, out _out1229);
              r = _out1228;
              resultingOwnership = _out1229;
              readIdents = _4001_recIdents;
            }
          } else if (_source151.is_Multiset) {
            DAST._IType _4002___mcc_h712 = _source151.dtor_element;
            {
              RAST._IExpr _4003_recursiveGen;
              DCOMP._IOwnership _4004_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4005_recIdents;
              RAST._IExpr _out1230;
              DCOMP._IOwnership _out1231;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1230, out _out1231, out _out1232);
              _4003_recursiveGen = _out1230;
              _4004_recOwned = _out1231;
              _4005_recIdents = _out1232;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4003_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1233;
              DCOMP._IOwnership _out1234;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1233, out _out1234);
              r = _out1233;
              resultingOwnership = _out1234;
              readIdents = _4005_recIdents;
            }
          } else if (_source151.is_Map) {
            DAST._IType _4006___mcc_h714 = _source151.dtor_key;
            DAST._IType _4007___mcc_h715 = _source151.dtor_value;
            {
              RAST._IExpr _4008_recursiveGen;
              DCOMP._IOwnership _4009_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4010_recIdents;
              RAST._IExpr _out1235;
              DCOMP._IOwnership _out1236;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1235, out _out1236, out _out1237);
              _4008_recursiveGen = _out1235;
              _4009_recOwned = _out1236;
              _4010_recIdents = _out1237;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4008_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1238;
              DCOMP._IOwnership _out1239;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1238, out _out1239);
              r = _out1238;
              resultingOwnership = _out1239;
              readIdents = _4010_recIdents;
            }
          } else if (_source151.is_SetBuilder) {
            DAST._IType _4011___mcc_h718 = _source151.dtor_element;
            {
              RAST._IExpr _4012_recursiveGen;
              DCOMP._IOwnership _4013_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4014_recIdents;
              RAST._IExpr _out1240;
              DCOMP._IOwnership _out1241;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1240, out _out1241, out _out1242);
              _4012_recursiveGen = _out1240;
              _4013_recOwned = _out1241;
              _4014_recIdents = _out1242;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4012_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1243;
              DCOMP._IOwnership _out1244;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1243, out _out1244);
              r = _out1243;
              resultingOwnership = _out1244;
              readIdents = _4014_recIdents;
            }
          } else if (_source151.is_MapBuilder) {
            DAST._IType _4015___mcc_h720 = _source151.dtor_key;
            DAST._IType _4016___mcc_h721 = _source151.dtor_value;
            {
              RAST._IExpr _4017_recursiveGen;
              DCOMP._IOwnership _4018_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4019_recIdents;
              RAST._IExpr _out1245;
              DCOMP._IOwnership _out1246;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1245, out _out1246, out _out1247);
              _4017_recursiveGen = _out1245;
              _4018_recOwned = _out1246;
              _4019_recIdents = _out1247;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4017_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1248;
              DCOMP._IOwnership _out1249;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1248, out _out1249);
              r = _out1248;
              resultingOwnership = _out1249;
              readIdents = _4019_recIdents;
            }
          } else if (_source151.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4020___mcc_h724 = _source151.dtor_args;
            DAST._IType _4021___mcc_h725 = _source151.dtor_result;
            {
              RAST._IExpr _4022_recursiveGen;
              DCOMP._IOwnership _4023_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4024_recIdents;
              RAST._IExpr _out1250;
              DCOMP._IOwnership _out1251;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1250, out _out1251, out _out1252);
              _4022_recursiveGen = _out1250;
              _4023_recOwned = _out1251;
              _4024_recIdents = _out1252;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4022_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1253;
              DCOMP._IOwnership _out1254;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1253, out _out1254);
              r = _out1253;
              resultingOwnership = _out1254;
              readIdents = _4024_recIdents;
            }
          } else if (_source151.is_Primitive) {
            DAST._IPrimitive _4025___mcc_h728 = _source151.dtor_Primitive_a0;
            {
              RAST._IExpr _4026_recursiveGen;
              DCOMP._IOwnership _4027_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4028_recIdents;
              RAST._IExpr _out1255;
              DCOMP._IOwnership _out1256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1255, out _out1256, out _out1257);
              _4026_recursiveGen = _out1255;
              _4027_recOwned = _out1256;
              _4028_recIdents = _out1257;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4026_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1258;
              DCOMP._IOwnership _out1259;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1258, out _out1259);
              r = _out1258;
              resultingOwnership = _out1259;
              readIdents = _4028_recIdents;
            }
          } else if (_source151.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4029___mcc_h730 = _source151.dtor_Passthrough_a0;
            {
              RAST._IExpr _4030_recursiveGen;
              DCOMP._IOwnership _4031_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4032_recIdents;
              RAST._IExpr _out1260;
              DCOMP._IOwnership _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1260, out _out1261, out _out1262);
              _4030_recursiveGen = _out1260;
              _4031_recOwned = _out1261;
              _4032_recIdents = _out1262;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4030_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1263;
              DCOMP._IOwnership _out1264;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1263, out _out1264);
              r = _out1263;
              resultingOwnership = _out1264;
              readIdents = _4032_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4033___mcc_h732 = _source151.dtor_TypeArg_a0;
            {
              RAST._IExpr _4034_recursiveGen;
              DCOMP._IOwnership _4035_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4036_recIdents;
              RAST._IExpr _out1265;
              DCOMP._IOwnership _out1266;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1265, out _out1266, out _out1267);
              _4034_recursiveGen = _out1265;
              _4035_recOwned = _out1266;
              _4036_recIdents = _out1267;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4034_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1268;
              DCOMP._IOwnership _out1269;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1268, out _out1269);
              r = _out1268;
              resultingOwnership = _out1269;
              readIdents = _4036_recIdents;
            }
          }
        } else if (_source117.is_Arrow) {
          Dafny.ISequence<DAST._IType> _4037___mcc_h734 = _source117.dtor_args;
          DAST._IType _4038___mcc_h735 = _source117.dtor_result;
          DAST._IType _source154 = _2994___mcc_h1;
          if (_source154.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4039___mcc_h742 = _source154.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4040___mcc_h743 = _source154.dtor_typeArgs;
            DAST._IResolvedType _4041___mcc_h744 = _source154.dtor_resolved;
            DAST._IResolvedType _source155 = _4041___mcc_h744;
            if (_source155.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4042___mcc_h748 = _source155.dtor_path;
              {
                RAST._IExpr _4043_recursiveGen;
                DCOMP._IOwnership _4044_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4045_recIdents;
                RAST._IExpr _out1270;
                DCOMP._IOwnership _out1271;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1270, out _out1271, out _out1272);
                _4043_recursiveGen = _out1270;
                _4044_recOwned = _out1271;
                _4045_recIdents = _out1272;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4043_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1273;
                DCOMP._IOwnership _out1274;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1273, out _out1274);
                r = _out1273;
                resultingOwnership = _out1274;
                readIdents = _4045_recIdents;
              }
            } else if (_source155.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4046___mcc_h750 = _source155.dtor_path;
              {
                RAST._IExpr _4047_recursiveGen;
                DCOMP._IOwnership _4048_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4049_recIdents;
                RAST._IExpr _out1275;
                DCOMP._IOwnership _out1276;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1275, out _out1276, out _out1277);
                _4047_recursiveGen = _out1275;
                _4048_recOwned = _out1276;
                _4049_recIdents = _out1277;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4047_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1278;
                DCOMP._IOwnership _out1279;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1278, out _out1279);
                r = _out1278;
                resultingOwnership = _out1279;
                readIdents = _4049_recIdents;
              }
            } else {
              DAST._IType _4050___mcc_h752 = _source155.dtor_baseType;
              DAST._INewtypeRange _4051___mcc_h753 = _source155.dtor_range;
              bool _4052___mcc_h754 = _source155.dtor_erase;
              bool _4053_erase = _4052___mcc_h754;
              DAST._INewtypeRange _4054_range = _4051___mcc_h753;
              DAST._IType _4055_b = _4050___mcc_h752;
              {
                if (object.Equals(_2988_fromTpe, _4055_b)) {
                  RAST._IExpr _4056_recursiveGen;
                  DCOMP._IOwnership _4057_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4058_recIdents;
                  RAST._IExpr _out1280;
                  DCOMP._IOwnership _out1281;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1280, out _out1281, out _out1282);
                  _4056_recursiveGen = _out1280;
                  _4057_recOwned = _out1281;
                  _4058_recIdents = _out1282;
                  Std.Wrappers._IOption<RAST._IType> _4059_potentialRhsType;
                  _4059_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4055_b, _4054_range);
                  Std.Wrappers._IOption<RAST._IType> _source156 = _4059_potentialRhsType;
                  if (_source156.is_None) {
                    if (_4053_erase) {
                      r = _4056_recursiveGen;
                    } else {
                      RAST._IType _4060_rhsType;
                      RAST._IType _out1283;
                      _out1283 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _4060_rhsType = _out1283;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4060_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4056_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1284;
                    DCOMP._IOwnership _out1285;
                    DCOMP.COMP.FromOwnership(r, _4057_recOwned, expectedOwnership, out _out1284, out _out1285);
                    r = _out1284;
                    resultingOwnership = _out1285;
                  } else {
                    RAST._IType _4061___mcc_h1165 = _source156.dtor_value;
                    RAST._IType _4062_v = _4061___mcc_h1165;
                    r = RAST.Expr.create_ConversionNum(_4062_v, _4056_recursiveGen);
                    RAST._IExpr _out1286;
                    DCOMP._IOwnership _out1287;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1286, out _out1287);
                    r = _out1286;
                    resultingOwnership = _out1287;
                  }
                  readIdents = _4058_recIdents;
                } else {
                  RAST._IExpr _out1288;
                  DCOMP._IOwnership _out1289;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4055_b), _4055_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1288, out _out1289, out _out1290);
                  r = _out1288;
                  resultingOwnership = _out1289;
                  readIdents = _out1290;
                }
              }
            }
          } else if (_source154.is_Nullable) {
            DAST._IType _4063___mcc_h758 = _source154.dtor_Nullable_a0;
            {
              RAST._IExpr _4064_recursiveGen;
              DCOMP._IOwnership _4065_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4066_recIdents;
              RAST._IExpr _out1291;
              DCOMP._IOwnership _out1292;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1293;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1291, out _out1292, out _out1293);
              _4064_recursiveGen = _out1291;
              _4065_recOwned = _out1292;
              _4066_recIdents = _out1293;
              Dafny.ISequence<Dafny.Rune> _4067_s;
              _4067_s = (_4064_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4065_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4067_s = Dafny.Sequence<Dafny.Rune>.Concat(_4067_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4067_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4067_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4067_s);
              RAST._IExpr _out1294;
              DCOMP._IOwnership _out1295;
              DCOMP.COMP.FromOwnership(r, _4065_recOwned, expectedOwnership, out _out1294, out _out1295);
              r = _out1294;
              resultingOwnership = _out1295;
              readIdents = _4066_recIdents;
            }
          } else if (_source154.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4068___mcc_h760 = _source154.dtor_Tuple_a0;
            {
              RAST._IExpr _4069_recursiveGen;
              DCOMP._IOwnership _4070_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4071_recIdents;
              RAST._IExpr _out1296;
              DCOMP._IOwnership _out1297;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1296, out _out1297, out _out1298);
              _4069_recursiveGen = _out1296;
              _4070_recOwned = _out1297;
              _4071_recIdents = _out1298;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4069_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1299;
              DCOMP._IOwnership _out1300;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1299, out _out1300);
              r = _out1299;
              resultingOwnership = _out1300;
              readIdents = _4071_recIdents;
            }
          } else if (_source154.is_Array) {
            DAST._IType _4072___mcc_h762 = _source154.dtor_element;
            BigInteger _4073___mcc_h763 = _source154.dtor_dims;
            {
              RAST._IExpr _4074_recursiveGen;
              DCOMP._IOwnership _4075_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4076_recIdents;
              RAST._IExpr _out1301;
              DCOMP._IOwnership _out1302;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1303;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1301, out _out1302, out _out1303);
              _4074_recursiveGen = _out1301;
              _4075_recOwned = _out1302;
              _4076_recIdents = _out1303;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4074_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1304;
              DCOMP._IOwnership _out1305;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1304, out _out1305);
              r = _out1304;
              resultingOwnership = _out1305;
              readIdents = _4076_recIdents;
            }
          } else if (_source154.is_Seq) {
            DAST._IType _4077___mcc_h766 = _source154.dtor_element;
            {
              RAST._IExpr _4078_recursiveGen;
              DCOMP._IOwnership _4079_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4080_recIdents;
              RAST._IExpr _out1306;
              DCOMP._IOwnership _out1307;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1306, out _out1307, out _out1308);
              _4078_recursiveGen = _out1306;
              _4079_recOwned = _out1307;
              _4080_recIdents = _out1308;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4078_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1309;
              DCOMP._IOwnership _out1310;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1309, out _out1310);
              r = _out1309;
              resultingOwnership = _out1310;
              readIdents = _4080_recIdents;
            }
          } else if (_source154.is_Set) {
            DAST._IType _4081___mcc_h768 = _source154.dtor_element;
            {
              RAST._IExpr _4082_recursiveGen;
              DCOMP._IOwnership _4083_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4084_recIdents;
              RAST._IExpr _out1311;
              DCOMP._IOwnership _out1312;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1311, out _out1312, out _out1313);
              _4082_recursiveGen = _out1311;
              _4083_recOwned = _out1312;
              _4084_recIdents = _out1313;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4082_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1314;
              DCOMP._IOwnership _out1315;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1314, out _out1315);
              r = _out1314;
              resultingOwnership = _out1315;
              readIdents = _4084_recIdents;
            }
          } else if (_source154.is_Multiset) {
            DAST._IType _4085___mcc_h770 = _source154.dtor_element;
            {
              RAST._IExpr _4086_recursiveGen;
              DCOMP._IOwnership _4087_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4088_recIdents;
              RAST._IExpr _out1316;
              DCOMP._IOwnership _out1317;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1318;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1316, out _out1317, out _out1318);
              _4086_recursiveGen = _out1316;
              _4087_recOwned = _out1317;
              _4088_recIdents = _out1318;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4086_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1319;
              DCOMP._IOwnership _out1320;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1319, out _out1320);
              r = _out1319;
              resultingOwnership = _out1320;
              readIdents = _4088_recIdents;
            }
          } else if (_source154.is_Map) {
            DAST._IType _4089___mcc_h772 = _source154.dtor_key;
            DAST._IType _4090___mcc_h773 = _source154.dtor_value;
            {
              RAST._IExpr _4091_recursiveGen;
              DCOMP._IOwnership _4092_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4093_recIdents;
              RAST._IExpr _out1321;
              DCOMP._IOwnership _out1322;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1321, out _out1322, out _out1323);
              _4091_recursiveGen = _out1321;
              _4092_recOwned = _out1322;
              _4093_recIdents = _out1323;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4091_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1324;
              DCOMP._IOwnership _out1325;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1324, out _out1325);
              r = _out1324;
              resultingOwnership = _out1325;
              readIdents = _4093_recIdents;
            }
          } else if (_source154.is_SetBuilder) {
            DAST._IType _4094___mcc_h776 = _source154.dtor_element;
            {
              RAST._IExpr _4095_recursiveGen;
              DCOMP._IOwnership _4096_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4097_recIdents;
              RAST._IExpr _out1326;
              DCOMP._IOwnership _out1327;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1328;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1326, out _out1327, out _out1328);
              _4095_recursiveGen = _out1326;
              _4096_recOwned = _out1327;
              _4097_recIdents = _out1328;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4095_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1329;
              DCOMP._IOwnership _out1330;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1329, out _out1330);
              r = _out1329;
              resultingOwnership = _out1330;
              readIdents = _4097_recIdents;
            }
          } else if (_source154.is_MapBuilder) {
            DAST._IType _4098___mcc_h778 = _source154.dtor_key;
            DAST._IType _4099___mcc_h779 = _source154.dtor_value;
            {
              RAST._IExpr _4100_recursiveGen;
              DCOMP._IOwnership _4101_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4102_recIdents;
              RAST._IExpr _out1331;
              DCOMP._IOwnership _out1332;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1331, out _out1332, out _out1333);
              _4100_recursiveGen = _out1331;
              _4101_recOwned = _out1332;
              _4102_recIdents = _out1333;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4100_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1334;
              DCOMP._IOwnership _out1335;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1334, out _out1335);
              r = _out1334;
              resultingOwnership = _out1335;
              readIdents = _4102_recIdents;
            }
          } else if (_source154.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4103___mcc_h782 = _source154.dtor_args;
            DAST._IType _4104___mcc_h783 = _source154.dtor_result;
            {
              RAST._IExpr _4105_recursiveGen;
              DCOMP._IOwnership _4106_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4107_recIdents;
              RAST._IExpr _out1336;
              DCOMP._IOwnership _out1337;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1336, out _out1337, out _out1338);
              _4105_recursiveGen = _out1336;
              _4106_recOwned = _out1337;
              _4107_recIdents = _out1338;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4105_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1339;
              DCOMP._IOwnership _out1340;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1339, out _out1340);
              r = _out1339;
              resultingOwnership = _out1340;
              readIdents = _4107_recIdents;
            }
          } else if (_source154.is_Primitive) {
            DAST._IPrimitive _4108___mcc_h786 = _source154.dtor_Primitive_a0;
            {
              RAST._IExpr _4109_recursiveGen;
              DCOMP._IOwnership _4110_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4111_recIdents;
              RAST._IExpr _out1341;
              DCOMP._IOwnership _out1342;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1341, out _out1342, out _out1343);
              _4109_recursiveGen = _out1341;
              _4110_recOwned = _out1342;
              _4111_recIdents = _out1343;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4109_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1344;
              DCOMP._IOwnership _out1345;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1344, out _out1345);
              r = _out1344;
              resultingOwnership = _out1345;
              readIdents = _4111_recIdents;
            }
          } else if (_source154.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4112___mcc_h788 = _source154.dtor_Passthrough_a0;
            {
              RAST._IExpr _4113_recursiveGen;
              DCOMP._IOwnership _4114_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4115_recIdents;
              RAST._IExpr _out1346;
              DCOMP._IOwnership _out1347;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1346, out _out1347, out _out1348);
              _4113_recursiveGen = _out1346;
              _4114_recOwned = _out1347;
              _4115_recIdents = _out1348;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4113_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1349;
              DCOMP._IOwnership _out1350;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1349, out _out1350);
              r = _out1349;
              resultingOwnership = _out1350;
              readIdents = _4115_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4116___mcc_h790 = _source154.dtor_TypeArg_a0;
            {
              RAST._IExpr _4117_recursiveGen;
              DCOMP._IOwnership _4118_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4119_recIdents;
              RAST._IExpr _out1351;
              DCOMP._IOwnership _out1352;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1351, out _out1352, out _out1353);
              _4117_recursiveGen = _out1351;
              _4118_recOwned = _out1352;
              _4119_recIdents = _out1353;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1354;
              DCOMP._IOwnership _out1355;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1354, out _out1355);
              r = _out1354;
              resultingOwnership = _out1355;
              readIdents = _4119_recIdents;
            }
          }
        } else if (_source117.is_Primitive) {
          DAST._IPrimitive _4120___mcc_h792 = _source117.dtor_Primitive_a0;
          DAST._IPrimitive _source157 = _4120___mcc_h792;
          if (_source157.is_Int) {
            DAST._IType _source158 = _2994___mcc_h1;
            if (_source158.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4121___mcc_h796 = _source158.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4122___mcc_h797 = _source158.dtor_typeArgs;
              DAST._IResolvedType _4123___mcc_h798 = _source158.dtor_resolved;
              DAST._IResolvedType _source159 = _4123___mcc_h798;
              if (_source159.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4124___mcc_h802 = _source159.dtor_path;
                {
                  RAST._IExpr _4125_recursiveGen;
                  DCOMP._IOwnership _4126_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4127_recIdents;
                  RAST._IExpr _out1356;
                  DCOMP._IOwnership _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1356, out _out1357, out _out1358);
                  _4125_recursiveGen = _out1356;
                  _4126_recOwned = _out1357;
                  _4127_recIdents = _out1358;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4125_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1359;
                  DCOMP._IOwnership _out1360;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1359, out _out1360);
                  r = _out1359;
                  resultingOwnership = _out1360;
                  readIdents = _4127_recIdents;
                }
              } else if (_source159.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4128___mcc_h804 = _source159.dtor_path;
                {
                  RAST._IExpr _4129_recursiveGen;
                  DCOMP._IOwnership _4130_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4131_recIdents;
                  RAST._IExpr _out1361;
                  DCOMP._IOwnership _out1362;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1361, out _out1362, out _out1363);
                  _4129_recursiveGen = _out1361;
                  _4130_recOwned = _out1362;
                  _4131_recIdents = _out1363;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4129_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1364;
                  DCOMP._IOwnership _out1365;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1364, out _out1365);
                  r = _out1364;
                  resultingOwnership = _out1365;
                  readIdents = _4131_recIdents;
                }
              } else {
                DAST._IType _4132___mcc_h806 = _source159.dtor_baseType;
                DAST._INewtypeRange _4133___mcc_h807 = _source159.dtor_range;
                bool _4134___mcc_h808 = _source159.dtor_erase;
                bool _4135_erase = _4134___mcc_h808;
                DAST._INewtypeRange _4136_range = _4133___mcc_h807;
                DAST._IType _4137_b = _4132___mcc_h806;
                {
                  if (object.Equals(_2988_fromTpe, _4137_b)) {
                    RAST._IExpr _4138_recursiveGen;
                    DCOMP._IOwnership _4139_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4140_recIdents;
                    RAST._IExpr _out1366;
                    DCOMP._IOwnership _out1367;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1366, out _out1367, out _out1368);
                    _4138_recursiveGen = _out1366;
                    _4139_recOwned = _out1367;
                    _4140_recIdents = _out1368;
                    Std.Wrappers._IOption<RAST._IType> _4141_potentialRhsType;
                    _4141_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4137_b, _4136_range);
                    Std.Wrappers._IOption<RAST._IType> _source160 = _4141_potentialRhsType;
                    if (_source160.is_None) {
                      if (_4135_erase) {
                        r = _4138_recursiveGen;
                      } else {
                        RAST._IType _4142_rhsType;
                        RAST._IType _out1369;
                        _out1369 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _4142_rhsType = _out1369;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4142_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4138_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1370;
                      DCOMP._IOwnership _out1371;
                      DCOMP.COMP.FromOwnership(r, _4139_recOwned, expectedOwnership, out _out1370, out _out1371);
                      r = _out1370;
                      resultingOwnership = _out1371;
                    } else {
                      RAST._IType _4143___mcc_h1166 = _source160.dtor_value;
                      RAST._IType _4144_v = _4143___mcc_h1166;
                      r = RAST.Expr.create_ConversionNum(_4144_v, _4138_recursiveGen);
                      RAST._IExpr _out1372;
                      DCOMP._IOwnership _out1373;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1372, out _out1373);
                      r = _out1372;
                      resultingOwnership = _out1373;
                    }
                    readIdents = _4140_recIdents;
                  } else {
                    RAST._IExpr _out1374;
                    DCOMP._IOwnership _out1375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4137_b), _4137_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1374, out _out1375, out _out1376);
                    r = _out1374;
                    resultingOwnership = _out1375;
                    readIdents = _out1376;
                  }
                }
              }
            } else if (_source158.is_Nullable) {
              DAST._IType _4145___mcc_h812 = _source158.dtor_Nullable_a0;
              {
                RAST._IExpr _4146_recursiveGen;
                DCOMP._IOwnership _4147_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4148_recIdents;
                RAST._IExpr _out1377;
                DCOMP._IOwnership _out1378;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1377, out _out1378, out _out1379);
                _4146_recursiveGen = _out1377;
                _4147_recOwned = _out1378;
                _4148_recIdents = _out1379;
                Dafny.ISequence<Dafny.Rune> _4149_s;
                _4149_s = (_4146_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4147_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4149_s = Dafny.Sequence<Dafny.Rune>.Concat(_4149_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4149_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4149_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4149_s);
                RAST._IExpr _out1380;
                DCOMP._IOwnership _out1381;
                DCOMP.COMP.FromOwnership(r, _4147_recOwned, expectedOwnership, out _out1380, out _out1381);
                r = _out1380;
                resultingOwnership = _out1381;
                readIdents = _4148_recIdents;
              }
            } else if (_source158.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4150___mcc_h814 = _source158.dtor_Tuple_a0;
              {
                RAST._IExpr _4151_recursiveGen;
                DCOMP._IOwnership _4152_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4153_recIdents;
                RAST._IExpr _out1382;
                DCOMP._IOwnership _out1383;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1382, out _out1383, out _out1384);
                _4151_recursiveGen = _out1382;
                _4152_recOwned = _out1383;
                _4153_recIdents = _out1384;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4151_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1385;
                DCOMP._IOwnership _out1386;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1385, out _out1386);
                r = _out1385;
                resultingOwnership = _out1386;
                readIdents = _4153_recIdents;
              }
            } else if (_source158.is_Array) {
              DAST._IType _4154___mcc_h816 = _source158.dtor_element;
              BigInteger _4155___mcc_h817 = _source158.dtor_dims;
              {
                RAST._IExpr _4156_recursiveGen;
                DCOMP._IOwnership _4157_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4158_recIdents;
                RAST._IExpr _out1387;
                DCOMP._IOwnership _out1388;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1387, out _out1388, out _out1389);
                _4156_recursiveGen = _out1387;
                _4157_recOwned = _out1388;
                _4158_recIdents = _out1389;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1390;
                DCOMP._IOwnership _out1391;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1390, out _out1391);
                r = _out1390;
                resultingOwnership = _out1391;
                readIdents = _4158_recIdents;
              }
            } else if (_source158.is_Seq) {
              DAST._IType _4159___mcc_h820 = _source158.dtor_element;
              {
                RAST._IExpr _4160_recursiveGen;
                DCOMP._IOwnership _4161_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4162_recIdents;
                RAST._IExpr _out1392;
                DCOMP._IOwnership _out1393;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1392, out _out1393, out _out1394);
                _4160_recursiveGen = _out1392;
                _4161_recOwned = _out1393;
                _4162_recIdents = _out1394;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4160_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1395;
                DCOMP._IOwnership _out1396;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1395, out _out1396);
                r = _out1395;
                resultingOwnership = _out1396;
                readIdents = _4162_recIdents;
              }
            } else if (_source158.is_Set) {
              DAST._IType _4163___mcc_h822 = _source158.dtor_element;
              {
                RAST._IExpr _4164_recursiveGen;
                DCOMP._IOwnership _4165_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4166_recIdents;
                RAST._IExpr _out1397;
                DCOMP._IOwnership _out1398;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1397, out _out1398, out _out1399);
                _4164_recursiveGen = _out1397;
                _4165_recOwned = _out1398;
                _4166_recIdents = _out1399;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4164_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1400;
                DCOMP._IOwnership _out1401;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1400, out _out1401);
                r = _out1400;
                resultingOwnership = _out1401;
                readIdents = _4166_recIdents;
              }
            } else if (_source158.is_Multiset) {
              DAST._IType _4167___mcc_h824 = _source158.dtor_element;
              {
                RAST._IExpr _4168_recursiveGen;
                DCOMP._IOwnership _4169_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4170_recIdents;
                RAST._IExpr _out1402;
                DCOMP._IOwnership _out1403;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1402, out _out1403, out _out1404);
                _4168_recursiveGen = _out1402;
                _4169_recOwned = _out1403;
                _4170_recIdents = _out1404;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4168_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1405;
                DCOMP._IOwnership _out1406;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1405, out _out1406);
                r = _out1405;
                resultingOwnership = _out1406;
                readIdents = _4170_recIdents;
              }
            } else if (_source158.is_Map) {
              DAST._IType _4171___mcc_h826 = _source158.dtor_key;
              DAST._IType _4172___mcc_h827 = _source158.dtor_value;
              {
                RAST._IExpr _4173_recursiveGen;
                DCOMP._IOwnership _4174_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4175_recIdents;
                RAST._IExpr _out1407;
                DCOMP._IOwnership _out1408;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1407, out _out1408, out _out1409);
                _4173_recursiveGen = _out1407;
                _4174_recOwned = _out1408;
                _4175_recIdents = _out1409;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4173_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1410;
                DCOMP._IOwnership _out1411;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1410, out _out1411);
                r = _out1410;
                resultingOwnership = _out1411;
                readIdents = _4175_recIdents;
              }
            } else if (_source158.is_SetBuilder) {
              DAST._IType _4176___mcc_h830 = _source158.dtor_element;
              {
                RAST._IExpr _4177_recursiveGen;
                DCOMP._IOwnership _4178_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4179_recIdents;
                RAST._IExpr _out1412;
                DCOMP._IOwnership _out1413;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1412, out _out1413, out _out1414);
                _4177_recursiveGen = _out1412;
                _4178_recOwned = _out1413;
                _4179_recIdents = _out1414;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4177_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1415;
                DCOMP._IOwnership _out1416;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1415, out _out1416);
                r = _out1415;
                resultingOwnership = _out1416;
                readIdents = _4179_recIdents;
              }
            } else if (_source158.is_MapBuilder) {
              DAST._IType _4180___mcc_h832 = _source158.dtor_key;
              DAST._IType _4181___mcc_h833 = _source158.dtor_value;
              {
                RAST._IExpr _4182_recursiveGen;
                DCOMP._IOwnership _4183_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4184_recIdents;
                RAST._IExpr _out1417;
                DCOMP._IOwnership _out1418;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1417, out _out1418, out _out1419);
                _4182_recursiveGen = _out1417;
                _4183_recOwned = _out1418;
                _4184_recIdents = _out1419;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4182_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1420;
                DCOMP._IOwnership _out1421;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1420, out _out1421);
                r = _out1420;
                resultingOwnership = _out1421;
                readIdents = _4184_recIdents;
              }
            } else if (_source158.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4185___mcc_h836 = _source158.dtor_args;
              DAST._IType _4186___mcc_h837 = _source158.dtor_result;
              {
                RAST._IExpr _4187_recursiveGen;
                DCOMP._IOwnership _4188_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4189_recIdents;
                RAST._IExpr _out1422;
                DCOMP._IOwnership _out1423;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1422, out _out1423, out _out1424);
                _4187_recursiveGen = _out1422;
                _4188_recOwned = _out1423;
                _4189_recIdents = _out1424;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4187_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1425;
                DCOMP._IOwnership _out1426;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1425, out _out1426);
                r = _out1425;
                resultingOwnership = _out1426;
                readIdents = _4189_recIdents;
              }
            } else if (_source158.is_Primitive) {
              DAST._IPrimitive _4190___mcc_h840 = _source158.dtor_Primitive_a0;
              DAST._IPrimitive _source161 = _4190___mcc_h840;
              if (_source161.is_Int) {
                {
                  RAST._IExpr _4191_recursiveGen;
                  DCOMP._IOwnership _4192_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4193_recIdents;
                  RAST._IExpr _out1427;
                  DCOMP._IOwnership _out1428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1427, out _out1428, out _out1429);
                  _4191_recursiveGen = _out1427;
                  _4192_recOwned = _out1428;
                  _4193_recIdents = _out1429;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4191_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1430;
                  DCOMP._IOwnership _out1431;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1430, out _out1431);
                  r = _out1430;
                  resultingOwnership = _out1431;
                  readIdents = _4193_recIdents;
                }
              } else if (_source161.is_Real) {
                {
                  RAST._IExpr _4194_recursiveGen;
                  DCOMP._IOwnership _4195___v75;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4196_recIdents;
                  RAST._IExpr _out1432;
                  DCOMP._IOwnership _out1433;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1432, out _out1433, out _out1434);
                  _4194_recursiveGen = _out1432;
                  _4195___v75 = _out1433;
                  _4196_recIdents = _out1434;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_4194_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1435;
                  DCOMP._IOwnership _out1436;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1435, out _out1436);
                  r = _out1435;
                  resultingOwnership = _out1436;
                  readIdents = _4196_recIdents;
                }
              } else if (_source161.is_String) {
                {
                  RAST._IExpr _4197_recursiveGen;
                  DCOMP._IOwnership _4198_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4199_recIdents;
                  RAST._IExpr _out1437;
                  DCOMP._IOwnership _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1437, out _out1438, out _out1439);
                  _4197_recursiveGen = _out1437;
                  _4198_recOwned = _out1438;
                  _4199_recIdents = _out1439;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4197_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1440;
                  DCOMP._IOwnership _out1441;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1440, out _out1441);
                  r = _out1440;
                  resultingOwnership = _out1441;
                  readIdents = _4199_recIdents;
                }
              } else if (_source161.is_Bool) {
                {
                  RAST._IExpr _4200_recursiveGen;
                  DCOMP._IOwnership _4201_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4202_recIdents;
                  RAST._IExpr _out1442;
                  DCOMP._IOwnership _out1443;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1442, out _out1443, out _out1444);
                  _4200_recursiveGen = _out1442;
                  _4201_recOwned = _out1443;
                  _4202_recIdents = _out1444;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4200_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1445;
                  DCOMP._IOwnership _out1446;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1445, out _out1446);
                  r = _out1445;
                  resultingOwnership = _out1446;
                  readIdents = _4202_recIdents;
                }
              } else {
                {
                  RAST._IType _4203_rhsType;
                  RAST._IType _out1447;
                  _out1447 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                  _4203_rhsType = _out1447;
                  RAST._IExpr _4204_recursiveGen;
                  DCOMP._IOwnership _4205___v81;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4206_recIdents;
                  RAST._IExpr _out1448;
                  DCOMP._IOwnership _out1449;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1450;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1448, out _out1449, out _out1450);
                  _4204_recursiveGen = _out1448;
                  _4205___v81 = _out1449;
                  _4206_recIdents = _out1450;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_4204_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1451;
                  DCOMP._IOwnership _out1452;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1451, out _out1452);
                  r = _out1451;
                  resultingOwnership = _out1452;
                  readIdents = _4206_recIdents;
                }
              }
            } else if (_source158.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4207___mcc_h842 = _source158.dtor_Passthrough_a0;
              {
                RAST._IType _4208_rhsType;
                RAST._IType _out1453;
                _out1453 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                _4208_rhsType = _out1453;
                RAST._IExpr _4209_recursiveGen;
                DCOMP._IOwnership _4210___v78;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4211_recIdents;
                RAST._IExpr _out1454;
                DCOMP._IOwnership _out1455;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1454, out _out1455, out _out1456);
                _4209_recursiveGen = _out1454;
                _4210___v78 = _out1455;
                _4211_recIdents = _out1456;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4208_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_4209_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1457;
                DCOMP._IOwnership _out1458;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1457, out _out1458);
                r = _out1457;
                resultingOwnership = _out1458;
                readIdents = _4211_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4212___mcc_h844 = _source158.dtor_TypeArg_a0;
              {
                RAST._IExpr _4213_recursiveGen;
                DCOMP._IOwnership _4214_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4215_recIdents;
                RAST._IExpr _out1459;
                DCOMP._IOwnership _out1460;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1459, out _out1460, out _out1461);
                _4213_recursiveGen = _out1459;
                _4214_recOwned = _out1460;
                _4215_recIdents = _out1461;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4213_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1462;
                DCOMP._IOwnership _out1463;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1462, out _out1463);
                r = _out1462;
                resultingOwnership = _out1463;
                readIdents = _4215_recIdents;
              }
            }
          } else if (_source157.is_Real) {
            DAST._IType _source162 = _2994___mcc_h1;
            if (_source162.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4216___mcc_h846 = _source162.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4217___mcc_h847 = _source162.dtor_typeArgs;
              DAST._IResolvedType _4218___mcc_h848 = _source162.dtor_resolved;
              DAST._IResolvedType _source163 = _4218___mcc_h848;
              if (_source163.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4219___mcc_h852 = _source163.dtor_path;
                {
                  RAST._IExpr _4220_recursiveGen;
                  DCOMP._IOwnership _4221_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4222_recIdents;
                  RAST._IExpr _out1464;
                  DCOMP._IOwnership _out1465;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1464, out _out1465, out _out1466);
                  _4220_recursiveGen = _out1464;
                  _4221_recOwned = _out1465;
                  _4222_recIdents = _out1466;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4220_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1467;
                  DCOMP._IOwnership _out1468;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1467, out _out1468);
                  r = _out1467;
                  resultingOwnership = _out1468;
                  readIdents = _4222_recIdents;
                }
              } else if (_source163.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4223___mcc_h854 = _source163.dtor_path;
                {
                  RAST._IExpr _4224_recursiveGen;
                  DCOMP._IOwnership _4225_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4226_recIdents;
                  RAST._IExpr _out1469;
                  DCOMP._IOwnership _out1470;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1469, out _out1470, out _out1471);
                  _4224_recursiveGen = _out1469;
                  _4225_recOwned = _out1470;
                  _4226_recIdents = _out1471;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4224_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1472;
                  DCOMP._IOwnership _out1473;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1472, out _out1473);
                  r = _out1472;
                  resultingOwnership = _out1473;
                  readIdents = _4226_recIdents;
                }
              } else {
                DAST._IType _4227___mcc_h856 = _source163.dtor_baseType;
                DAST._INewtypeRange _4228___mcc_h857 = _source163.dtor_range;
                bool _4229___mcc_h858 = _source163.dtor_erase;
                bool _4230_erase = _4229___mcc_h858;
                DAST._INewtypeRange _4231_range = _4228___mcc_h857;
                DAST._IType _4232_b = _4227___mcc_h856;
                {
                  if (object.Equals(_2988_fromTpe, _4232_b)) {
                    RAST._IExpr _4233_recursiveGen;
                    DCOMP._IOwnership _4234_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4235_recIdents;
                    RAST._IExpr _out1474;
                    DCOMP._IOwnership _out1475;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1474, out _out1475, out _out1476);
                    _4233_recursiveGen = _out1474;
                    _4234_recOwned = _out1475;
                    _4235_recIdents = _out1476;
                    Std.Wrappers._IOption<RAST._IType> _4236_potentialRhsType;
                    _4236_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4232_b, _4231_range);
                    Std.Wrappers._IOption<RAST._IType> _source164 = _4236_potentialRhsType;
                    if (_source164.is_None) {
                      if (_4230_erase) {
                        r = _4233_recursiveGen;
                      } else {
                        RAST._IType _4237_rhsType;
                        RAST._IType _out1477;
                        _out1477 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _4237_rhsType = _out1477;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4237_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4233_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1478;
                      DCOMP._IOwnership _out1479;
                      DCOMP.COMP.FromOwnership(r, _4234_recOwned, expectedOwnership, out _out1478, out _out1479);
                      r = _out1478;
                      resultingOwnership = _out1479;
                    } else {
                      RAST._IType _4238___mcc_h1167 = _source164.dtor_value;
                      RAST._IType _4239_v = _4238___mcc_h1167;
                      r = RAST.Expr.create_ConversionNum(_4239_v, _4233_recursiveGen);
                      RAST._IExpr _out1480;
                      DCOMP._IOwnership _out1481;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1480, out _out1481);
                      r = _out1480;
                      resultingOwnership = _out1481;
                    }
                    readIdents = _4235_recIdents;
                  } else {
                    RAST._IExpr _out1482;
                    DCOMP._IOwnership _out1483;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4232_b), _4232_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1482, out _out1483, out _out1484);
                    r = _out1482;
                    resultingOwnership = _out1483;
                    readIdents = _out1484;
                  }
                }
              }
            } else if (_source162.is_Nullable) {
              DAST._IType _4240___mcc_h862 = _source162.dtor_Nullable_a0;
              {
                RAST._IExpr _4241_recursiveGen;
                DCOMP._IOwnership _4242_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4243_recIdents;
                RAST._IExpr _out1485;
                DCOMP._IOwnership _out1486;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1487;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1485, out _out1486, out _out1487);
                _4241_recursiveGen = _out1485;
                _4242_recOwned = _out1486;
                _4243_recIdents = _out1487;
                Dafny.ISequence<Dafny.Rune> _4244_s;
                _4244_s = (_4241_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4242_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4244_s = Dafny.Sequence<Dafny.Rune>.Concat(_4244_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4244_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4244_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4244_s);
                RAST._IExpr _out1488;
                DCOMP._IOwnership _out1489;
                DCOMP.COMP.FromOwnership(r, _4242_recOwned, expectedOwnership, out _out1488, out _out1489);
                r = _out1488;
                resultingOwnership = _out1489;
                readIdents = _4243_recIdents;
              }
            } else if (_source162.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4245___mcc_h864 = _source162.dtor_Tuple_a0;
              {
                RAST._IExpr _4246_recursiveGen;
                DCOMP._IOwnership _4247_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4248_recIdents;
                RAST._IExpr _out1490;
                DCOMP._IOwnership _out1491;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1490, out _out1491, out _out1492);
                _4246_recursiveGen = _out1490;
                _4247_recOwned = _out1491;
                _4248_recIdents = _out1492;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4246_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1493;
                DCOMP._IOwnership _out1494;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1493, out _out1494);
                r = _out1493;
                resultingOwnership = _out1494;
                readIdents = _4248_recIdents;
              }
            } else if (_source162.is_Array) {
              DAST._IType _4249___mcc_h866 = _source162.dtor_element;
              BigInteger _4250___mcc_h867 = _source162.dtor_dims;
              {
                RAST._IExpr _4251_recursiveGen;
                DCOMP._IOwnership _4252_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4253_recIdents;
                RAST._IExpr _out1495;
                DCOMP._IOwnership _out1496;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1495, out _out1496, out _out1497);
                _4251_recursiveGen = _out1495;
                _4252_recOwned = _out1496;
                _4253_recIdents = _out1497;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4251_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1498;
                DCOMP._IOwnership _out1499;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1498, out _out1499);
                r = _out1498;
                resultingOwnership = _out1499;
                readIdents = _4253_recIdents;
              }
            } else if (_source162.is_Seq) {
              DAST._IType _4254___mcc_h870 = _source162.dtor_element;
              {
                RAST._IExpr _4255_recursiveGen;
                DCOMP._IOwnership _4256_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4257_recIdents;
                RAST._IExpr _out1500;
                DCOMP._IOwnership _out1501;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1500, out _out1501, out _out1502);
                _4255_recursiveGen = _out1500;
                _4256_recOwned = _out1501;
                _4257_recIdents = _out1502;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4255_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1503;
                DCOMP._IOwnership _out1504;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1503, out _out1504);
                r = _out1503;
                resultingOwnership = _out1504;
                readIdents = _4257_recIdents;
              }
            } else if (_source162.is_Set) {
              DAST._IType _4258___mcc_h872 = _source162.dtor_element;
              {
                RAST._IExpr _4259_recursiveGen;
                DCOMP._IOwnership _4260_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4261_recIdents;
                RAST._IExpr _out1505;
                DCOMP._IOwnership _out1506;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1507;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1505, out _out1506, out _out1507);
                _4259_recursiveGen = _out1505;
                _4260_recOwned = _out1506;
                _4261_recIdents = _out1507;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4259_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1508;
                DCOMP._IOwnership _out1509;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1508, out _out1509);
                r = _out1508;
                resultingOwnership = _out1509;
                readIdents = _4261_recIdents;
              }
            } else if (_source162.is_Multiset) {
              DAST._IType _4262___mcc_h874 = _source162.dtor_element;
              {
                RAST._IExpr _4263_recursiveGen;
                DCOMP._IOwnership _4264_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4265_recIdents;
                RAST._IExpr _out1510;
                DCOMP._IOwnership _out1511;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1510, out _out1511, out _out1512);
                _4263_recursiveGen = _out1510;
                _4264_recOwned = _out1511;
                _4265_recIdents = _out1512;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4263_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1513;
                DCOMP._IOwnership _out1514;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1513, out _out1514);
                r = _out1513;
                resultingOwnership = _out1514;
                readIdents = _4265_recIdents;
              }
            } else if (_source162.is_Map) {
              DAST._IType _4266___mcc_h876 = _source162.dtor_key;
              DAST._IType _4267___mcc_h877 = _source162.dtor_value;
              {
                RAST._IExpr _4268_recursiveGen;
                DCOMP._IOwnership _4269_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4270_recIdents;
                RAST._IExpr _out1515;
                DCOMP._IOwnership _out1516;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1515, out _out1516, out _out1517);
                _4268_recursiveGen = _out1515;
                _4269_recOwned = _out1516;
                _4270_recIdents = _out1517;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4268_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1518;
                DCOMP._IOwnership _out1519;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1518, out _out1519);
                r = _out1518;
                resultingOwnership = _out1519;
                readIdents = _4270_recIdents;
              }
            } else if (_source162.is_SetBuilder) {
              DAST._IType _4271___mcc_h880 = _source162.dtor_element;
              {
                RAST._IExpr _4272_recursiveGen;
                DCOMP._IOwnership _4273_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4274_recIdents;
                RAST._IExpr _out1520;
                DCOMP._IOwnership _out1521;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1520, out _out1521, out _out1522);
                _4272_recursiveGen = _out1520;
                _4273_recOwned = _out1521;
                _4274_recIdents = _out1522;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4272_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1523;
                DCOMP._IOwnership _out1524;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1523, out _out1524);
                r = _out1523;
                resultingOwnership = _out1524;
                readIdents = _4274_recIdents;
              }
            } else if (_source162.is_MapBuilder) {
              DAST._IType _4275___mcc_h882 = _source162.dtor_key;
              DAST._IType _4276___mcc_h883 = _source162.dtor_value;
              {
                RAST._IExpr _4277_recursiveGen;
                DCOMP._IOwnership _4278_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4279_recIdents;
                RAST._IExpr _out1525;
                DCOMP._IOwnership _out1526;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1527;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1525, out _out1526, out _out1527);
                _4277_recursiveGen = _out1525;
                _4278_recOwned = _out1526;
                _4279_recIdents = _out1527;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4277_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1528;
                DCOMP._IOwnership _out1529;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1528, out _out1529);
                r = _out1528;
                resultingOwnership = _out1529;
                readIdents = _4279_recIdents;
              }
            } else if (_source162.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4280___mcc_h886 = _source162.dtor_args;
              DAST._IType _4281___mcc_h887 = _source162.dtor_result;
              {
                RAST._IExpr _4282_recursiveGen;
                DCOMP._IOwnership _4283_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4284_recIdents;
                RAST._IExpr _out1530;
                DCOMP._IOwnership _out1531;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1530, out _out1531, out _out1532);
                _4282_recursiveGen = _out1530;
                _4283_recOwned = _out1531;
                _4284_recIdents = _out1532;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4282_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1533;
                DCOMP._IOwnership _out1534;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1533, out _out1534);
                r = _out1533;
                resultingOwnership = _out1534;
                readIdents = _4284_recIdents;
              }
            } else if (_source162.is_Primitive) {
              DAST._IPrimitive _4285___mcc_h890 = _source162.dtor_Primitive_a0;
              DAST._IPrimitive _source165 = _4285___mcc_h890;
              if (_source165.is_Int) {
                {
                  RAST._IExpr _4286_recursiveGen;
                  DCOMP._IOwnership _4287___v76;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4288_recIdents;
                  RAST._IExpr _out1535;
                  DCOMP._IOwnership _out1536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1535, out _out1536, out _out1537);
                  _4286_recursiveGen = _out1535;
                  _4287___v76 = _out1536;
                  _4288_recIdents = _out1537;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_4286_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1538;
                  DCOMP._IOwnership _out1539;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1538, out _out1539);
                  r = _out1538;
                  resultingOwnership = _out1539;
                  readIdents = _4288_recIdents;
                }
              } else if (_source165.is_Real) {
                {
                  RAST._IExpr _4289_recursiveGen;
                  DCOMP._IOwnership _4290_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4291_recIdents;
                  RAST._IExpr _out1540;
                  DCOMP._IOwnership _out1541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1542;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1540, out _out1541, out _out1542);
                  _4289_recursiveGen = _out1540;
                  _4290_recOwned = _out1541;
                  _4291_recIdents = _out1542;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4289_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1543;
                  DCOMP._IOwnership _out1544;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1543, out _out1544);
                  r = _out1543;
                  resultingOwnership = _out1544;
                  readIdents = _4291_recIdents;
                }
              } else if (_source165.is_String) {
                {
                  RAST._IExpr _4292_recursiveGen;
                  DCOMP._IOwnership _4293_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4294_recIdents;
                  RAST._IExpr _out1545;
                  DCOMP._IOwnership _out1546;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1547;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1545, out _out1546, out _out1547);
                  _4292_recursiveGen = _out1545;
                  _4293_recOwned = _out1546;
                  _4294_recIdents = _out1547;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4292_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1548;
                  DCOMP._IOwnership _out1549;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1548, out _out1549);
                  r = _out1548;
                  resultingOwnership = _out1549;
                  readIdents = _4294_recIdents;
                }
              } else if (_source165.is_Bool) {
                {
                  RAST._IExpr _4295_recursiveGen;
                  DCOMP._IOwnership _4296_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4297_recIdents;
                  RAST._IExpr _out1550;
                  DCOMP._IOwnership _out1551;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1550, out _out1551, out _out1552);
                  _4295_recursiveGen = _out1550;
                  _4296_recOwned = _out1551;
                  _4297_recIdents = _out1552;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4295_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1553;
                  DCOMP._IOwnership _out1554;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1553, out _out1554);
                  r = _out1553;
                  resultingOwnership = _out1554;
                  readIdents = _4297_recIdents;
                }
              } else {
                {
                  RAST._IExpr _4298_recursiveGen;
                  DCOMP._IOwnership _4299_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4300_recIdents;
                  RAST._IExpr _out1555;
                  DCOMP._IOwnership _out1556;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1555, out _out1556, out _out1557);
                  _4298_recursiveGen = _out1555;
                  _4299_recOwned = _out1556;
                  _4300_recIdents = _out1557;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4298_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1558;
                  DCOMP._IOwnership _out1559;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1558, out _out1559);
                  r = _out1558;
                  resultingOwnership = _out1559;
                  readIdents = _4300_recIdents;
                }
              }
            } else if (_source162.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4301___mcc_h892 = _source162.dtor_Passthrough_a0;
              {
                RAST._IExpr _4302_recursiveGen;
                DCOMP._IOwnership _4303_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4304_recIdents;
                RAST._IExpr _out1560;
                DCOMP._IOwnership _out1561;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1560, out _out1561, out _out1562);
                _4302_recursiveGen = _out1560;
                _4303_recOwned = _out1561;
                _4304_recIdents = _out1562;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4302_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1563;
                DCOMP._IOwnership _out1564;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1563, out _out1564);
                r = _out1563;
                resultingOwnership = _out1564;
                readIdents = _4304_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4305___mcc_h894 = _source162.dtor_TypeArg_a0;
              {
                RAST._IExpr _4306_recursiveGen;
                DCOMP._IOwnership _4307_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4308_recIdents;
                RAST._IExpr _out1565;
                DCOMP._IOwnership _out1566;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1567;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1565, out _out1566, out _out1567);
                _4306_recursiveGen = _out1565;
                _4307_recOwned = _out1566;
                _4308_recIdents = _out1567;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4306_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1568;
                DCOMP._IOwnership _out1569;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1568, out _out1569);
                r = _out1568;
                resultingOwnership = _out1569;
                readIdents = _4308_recIdents;
              }
            }
          } else if (_source157.is_String) {
            DAST._IType _source166 = _2994___mcc_h1;
            if (_source166.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4309___mcc_h896 = _source166.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4310___mcc_h897 = _source166.dtor_typeArgs;
              DAST._IResolvedType _4311___mcc_h898 = _source166.dtor_resolved;
              DAST._IResolvedType _source167 = _4311___mcc_h898;
              if (_source167.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4312___mcc_h902 = _source167.dtor_path;
                {
                  RAST._IExpr _4313_recursiveGen;
                  DCOMP._IOwnership _4314_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4315_recIdents;
                  RAST._IExpr _out1570;
                  DCOMP._IOwnership _out1571;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1570, out _out1571, out _out1572);
                  _4313_recursiveGen = _out1570;
                  _4314_recOwned = _out1571;
                  _4315_recIdents = _out1572;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4313_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1573;
                  DCOMP._IOwnership _out1574;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1573, out _out1574);
                  r = _out1573;
                  resultingOwnership = _out1574;
                  readIdents = _4315_recIdents;
                }
              } else if (_source167.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4316___mcc_h904 = _source167.dtor_path;
                {
                  RAST._IExpr _4317_recursiveGen;
                  DCOMP._IOwnership _4318_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4319_recIdents;
                  RAST._IExpr _out1575;
                  DCOMP._IOwnership _out1576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1575, out _out1576, out _out1577);
                  _4317_recursiveGen = _out1575;
                  _4318_recOwned = _out1576;
                  _4319_recIdents = _out1577;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4317_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1578;
                  DCOMP._IOwnership _out1579;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1578, out _out1579);
                  r = _out1578;
                  resultingOwnership = _out1579;
                  readIdents = _4319_recIdents;
                }
              } else {
                DAST._IType _4320___mcc_h906 = _source167.dtor_baseType;
                DAST._INewtypeRange _4321___mcc_h907 = _source167.dtor_range;
                bool _4322___mcc_h908 = _source167.dtor_erase;
                bool _4323_erase = _4322___mcc_h908;
                DAST._INewtypeRange _4324_range = _4321___mcc_h907;
                DAST._IType _4325_b = _4320___mcc_h906;
                {
                  if (object.Equals(_2988_fromTpe, _4325_b)) {
                    RAST._IExpr _4326_recursiveGen;
                    DCOMP._IOwnership _4327_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4328_recIdents;
                    RAST._IExpr _out1580;
                    DCOMP._IOwnership _out1581;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1582;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1580, out _out1581, out _out1582);
                    _4326_recursiveGen = _out1580;
                    _4327_recOwned = _out1581;
                    _4328_recIdents = _out1582;
                    Std.Wrappers._IOption<RAST._IType> _4329_potentialRhsType;
                    _4329_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4325_b, _4324_range);
                    Std.Wrappers._IOption<RAST._IType> _source168 = _4329_potentialRhsType;
                    if (_source168.is_None) {
                      if (_4323_erase) {
                        r = _4326_recursiveGen;
                      } else {
                        RAST._IType _4330_rhsType;
                        RAST._IType _out1583;
                        _out1583 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _4330_rhsType = _out1583;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4330_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4326_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1584;
                      DCOMP._IOwnership _out1585;
                      DCOMP.COMP.FromOwnership(r, _4327_recOwned, expectedOwnership, out _out1584, out _out1585);
                      r = _out1584;
                      resultingOwnership = _out1585;
                    } else {
                      RAST._IType _4331___mcc_h1168 = _source168.dtor_value;
                      RAST._IType _4332_v = _4331___mcc_h1168;
                      r = RAST.Expr.create_ConversionNum(_4332_v, _4326_recursiveGen);
                      RAST._IExpr _out1586;
                      DCOMP._IOwnership _out1587;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1586, out _out1587);
                      r = _out1586;
                      resultingOwnership = _out1587;
                    }
                    readIdents = _4328_recIdents;
                  } else {
                    RAST._IExpr _out1588;
                    DCOMP._IOwnership _out1589;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4325_b), _4325_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1588, out _out1589, out _out1590);
                    r = _out1588;
                    resultingOwnership = _out1589;
                    readIdents = _out1590;
                  }
                }
              }
            } else if (_source166.is_Nullable) {
              DAST._IType _4333___mcc_h912 = _source166.dtor_Nullable_a0;
              {
                RAST._IExpr _4334_recursiveGen;
                DCOMP._IOwnership _4335_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4336_recIdents;
                RAST._IExpr _out1591;
                DCOMP._IOwnership _out1592;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1591, out _out1592, out _out1593);
                _4334_recursiveGen = _out1591;
                _4335_recOwned = _out1592;
                _4336_recIdents = _out1593;
                Dafny.ISequence<Dafny.Rune> _4337_s;
                _4337_s = (_4334_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4335_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4337_s = Dafny.Sequence<Dafny.Rune>.Concat(_4337_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4337_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4337_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4337_s);
                RAST._IExpr _out1594;
                DCOMP._IOwnership _out1595;
                DCOMP.COMP.FromOwnership(r, _4335_recOwned, expectedOwnership, out _out1594, out _out1595);
                r = _out1594;
                resultingOwnership = _out1595;
                readIdents = _4336_recIdents;
              }
            } else if (_source166.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4338___mcc_h914 = _source166.dtor_Tuple_a0;
              {
                RAST._IExpr _4339_recursiveGen;
                DCOMP._IOwnership _4340_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4341_recIdents;
                RAST._IExpr _out1596;
                DCOMP._IOwnership _out1597;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1596, out _out1597, out _out1598);
                _4339_recursiveGen = _out1596;
                _4340_recOwned = _out1597;
                _4341_recIdents = _out1598;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4339_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1599;
                DCOMP._IOwnership _out1600;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1599, out _out1600);
                r = _out1599;
                resultingOwnership = _out1600;
                readIdents = _4341_recIdents;
              }
            } else if (_source166.is_Array) {
              DAST._IType _4342___mcc_h916 = _source166.dtor_element;
              BigInteger _4343___mcc_h917 = _source166.dtor_dims;
              {
                RAST._IExpr _4344_recursiveGen;
                DCOMP._IOwnership _4345_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4346_recIdents;
                RAST._IExpr _out1601;
                DCOMP._IOwnership _out1602;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1603;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1601, out _out1602, out _out1603);
                _4344_recursiveGen = _out1601;
                _4345_recOwned = _out1602;
                _4346_recIdents = _out1603;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4344_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1604;
                DCOMP._IOwnership _out1605;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1604, out _out1605);
                r = _out1604;
                resultingOwnership = _out1605;
                readIdents = _4346_recIdents;
              }
            } else if (_source166.is_Seq) {
              DAST._IType _4347___mcc_h920 = _source166.dtor_element;
              {
                RAST._IExpr _4348_recursiveGen;
                DCOMP._IOwnership _4349_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4350_recIdents;
                RAST._IExpr _out1606;
                DCOMP._IOwnership _out1607;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1606, out _out1607, out _out1608);
                _4348_recursiveGen = _out1606;
                _4349_recOwned = _out1607;
                _4350_recIdents = _out1608;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4348_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1609;
                DCOMP._IOwnership _out1610;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1609, out _out1610);
                r = _out1609;
                resultingOwnership = _out1610;
                readIdents = _4350_recIdents;
              }
            } else if (_source166.is_Set) {
              DAST._IType _4351___mcc_h922 = _source166.dtor_element;
              {
                RAST._IExpr _4352_recursiveGen;
                DCOMP._IOwnership _4353_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4354_recIdents;
                RAST._IExpr _out1611;
                DCOMP._IOwnership _out1612;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1611, out _out1612, out _out1613);
                _4352_recursiveGen = _out1611;
                _4353_recOwned = _out1612;
                _4354_recIdents = _out1613;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4352_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1614;
                DCOMP._IOwnership _out1615;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1614, out _out1615);
                r = _out1614;
                resultingOwnership = _out1615;
                readIdents = _4354_recIdents;
              }
            } else if (_source166.is_Multiset) {
              DAST._IType _4355___mcc_h924 = _source166.dtor_element;
              {
                RAST._IExpr _4356_recursiveGen;
                DCOMP._IOwnership _4357_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4358_recIdents;
                RAST._IExpr _out1616;
                DCOMP._IOwnership _out1617;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1616, out _out1617, out _out1618);
                _4356_recursiveGen = _out1616;
                _4357_recOwned = _out1617;
                _4358_recIdents = _out1618;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4356_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1619;
                DCOMP._IOwnership _out1620;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1619, out _out1620);
                r = _out1619;
                resultingOwnership = _out1620;
                readIdents = _4358_recIdents;
              }
            } else if (_source166.is_Map) {
              DAST._IType _4359___mcc_h926 = _source166.dtor_key;
              DAST._IType _4360___mcc_h927 = _source166.dtor_value;
              {
                RAST._IExpr _4361_recursiveGen;
                DCOMP._IOwnership _4362_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4363_recIdents;
                RAST._IExpr _out1621;
                DCOMP._IOwnership _out1622;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1623;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1621, out _out1622, out _out1623);
                _4361_recursiveGen = _out1621;
                _4362_recOwned = _out1622;
                _4363_recIdents = _out1623;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4361_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1624;
                DCOMP._IOwnership _out1625;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1624, out _out1625);
                r = _out1624;
                resultingOwnership = _out1625;
                readIdents = _4363_recIdents;
              }
            } else if (_source166.is_SetBuilder) {
              DAST._IType _4364___mcc_h930 = _source166.dtor_element;
              {
                RAST._IExpr _4365_recursiveGen;
                DCOMP._IOwnership _4366_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4367_recIdents;
                RAST._IExpr _out1626;
                DCOMP._IOwnership _out1627;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1626, out _out1627, out _out1628);
                _4365_recursiveGen = _out1626;
                _4366_recOwned = _out1627;
                _4367_recIdents = _out1628;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4365_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1629;
                DCOMP._IOwnership _out1630;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1629, out _out1630);
                r = _out1629;
                resultingOwnership = _out1630;
                readIdents = _4367_recIdents;
              }
            } else if (_source166.is_MapBuilder) {
              DAST._IType _4368___mcc_h932 = _source166.dtor_key;
              DAST._IType _4369___mcc_h933 = _source166.dtor_value;
              {
                RAST._IExpr _4370_recursiveGen;
                DCOMP._IOwnership _4371_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4372_recIdents;
                RAST._IExpr _out1631;
                DCOMP._IOwnership _out1632;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1631, out _out1632, out _out1633);
                _4370_recursiveGen = _out1631;
                _4371_recOwned = _out1632;
                _4372_recIdents = _out1633;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4370_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1634;
                DCOMP._IOwnership _out1635;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1634, out _out1635);
                r = _out1634;
                resultingOwnership = _out1635;
                readIdents = _4372_recIdents;
              }
            } else if (_source166.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4373___mcc_h936 = _source166.dtor_args;
              DAST._IType _4374___mcc_h937 = _source166.dtor_result;
              {
                RAST._IExpr _4375_recursiveGen;
                DCOMP._IOwnership _4376_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4377_recIdents;
                RAST._IExpr _out1636;
                DCOMP._IOwnership _out1637;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1636, out _out1637, out _out1638);
                _4375_recursiveGen = _out1636;
                _4376_recOwned = _out1637;
                _4377_recIdents = _out1638;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4375_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1639;
                DCOMP._IOwnership _out1640;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1639, out _out1640);
                r = _out1639;
                resultingOwnership = _out1640;
                readIdents = _4377_recIdents;
              }
            } else if (_source166.is_Primitive) {
              DAST._IPrimitive _4378___mcc_h940 = _source166.dtor_Primitive_a0;
              {
                RAST._IExpr _4379_recursiveGen;
                DCOMP._IOwnership _4380_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4381_recIdents;
                RAST._IExpr _out1641;
                DCOMP._IOwnership _out1642;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1643;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1641, out _out1642, out _out1643);
                _4379_recursiveGen = _out1641;
                _4380_recOwned = _out1642;
                _4381_recIdents = _out1643;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4379_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1644;
                DCOMP._IOwnership _out1645;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1644, out _out1645);
                r = _out1644;
                resultingOwnership = _out1645;
                readIdents = _4381_recIdents;
              }
            } else if (_source166.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4382___mcc_h942 = _source166.dtor_Passthrough_a0;
              {
                RAST._IExpr _4383_recursiveGen;
                DCOMP._IOwnership _4384_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4385_recIdents;
                RAST._IExpr _out1646;
                DCOMP._IOwnership _out1647;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1646, out _out1647, out _out1648);
                _4383_recursiveGen = _out1646;
                _4384_recOwned = _out1647;
                _4385_recIdents = _out1648;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4383_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1649;
                DCOMP._IOwnership _out1650;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1649, out _out1650);
                r = _out1649;
                resultingOwnership = _out1650;
                readIdents = _4385_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4386___mcc_h944 = _source166.dtor_TypeArg_a0;
              {
                RAST._IExpr _4387_recursiveGen;
                DCOMP._IOwnership _4388_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4389_recIdents;
                RAST._IExpr _out1651;
                DCOMP._IOwnership _out1652;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1651, out _out1652, out _out1653);
                _4387_recursiveGen = _out1651;
                _4388_recOwned = _out1652;
                _4389_recIdents = _out1653;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1654;
                DCOMP._IOwnership _out1655;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1654, out _out1655);
                r = _out1654;
                resultingOwnership = _out1655;
                readIdents = _4389_recIdents;
              }
            }
          } else if (_source157.is_Bool) {
            DAST._IType _source169 = _2994___mcc_h1;
            if (_source169.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4390___mcc_h946 = _source169.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4391___mcc_h947 = _source169.dtor_typeArgs;
              DAST._IResolvedType _4392___mcc_h948 = _source169.dtor_resolved;
              DAST._IResolvedType _source170 = _4392___mcc_h948;
              if (_source170.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4393___mcc_h952 = _source170.dtor_path;
                {
                  RAST._IExpr _4394_recursiveGen;
                  DCOMP._IOwnership _4395_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4396_recIdents;
                  RAST._IExpr _out1656;
                  DCOMP._IOwnership _out1657;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1656, out _out1657, out _out1658);
                  _4394_recursiveGen = _out1656;
                  _4395_recOwned = _out1657;
                  _4396_recIdents = _out1658;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4394_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1659;
                  DCOMP._IOwnership _out1660;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1659, out _out1660);
                  r = _out1659;
                  resultingOwnership = _out1660;
                  readIdents = _4396_recIdents;
                }
              } else if (_source170.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4397___mcc_h954 = _source170.dtor_path;
                {
                  RAST._IExpr _4398_recursiveGen;
                  DCOMP._IOwnership _4399_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4400_recIdents;
                  RAST._IExpr _out1661;
                  DCOMP._IOwnership _out1662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1663;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1661, out _out1662, out _out1663);
                  _4398_recursiveGen = _out1661;
                  _4399_recOwned = _out1662;
                  _4400_recIdents = _out1663;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4398_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1664;
                  DCOMP._IOwnership _out1665;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1664, out _out1665);
                  r = _out1664;
                  resultingOwnership = _out1665;
                  readIdents = _4400_recIdents;
                }
              } else {
                DAST._IType _4401___mcc_h956 = _source170.dtor_baseType;
                DAST._INewtypeRange _4402___mcc_h957 = _source170.dtor_range;
                bool _4403___mcc_h958 = _source170.dtor_erase;
                bool _4404_erase = _4403___mcc_h958;
                DAST._INewtypeRange _4405_range = _4402___mcc_h957;
                DAST._IType _4406_b = _4401___mcc_h956;
                {
                  if (object.Equals(_2988_fromTpe, _4406_b)) {
                    RAST._IExpr _4407_recursiveGen;
                    DCOMP._IOwnership _4408_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4409_recIdents;
                    RAST._IExpr _out1666;
                    DCOMP._IOwnership _out1667;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1666, out _out1667, out _out1668);
                    _4407_recursiveGen = _out1666;
                    _4408_recOwned = _out1667;
                    _4409_recIdents = _out1668;
                    Std.Wrappers._IOption<RAST._IType> _4410_potentialRhsType;
                    _4410_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4406_b, _4405_range);
                    Std.Wrappers._IOption<RAST._IType> _source171 = _4410_potentialRhsType;
                    if (_source171.is_None) {
                      if (_4404_erase) {
                        r = _4407_recursiveGen;
                      } else {
                        RAST._IType _4411_rhsType;
                        RAST._IType _out1669;
                        _out1669 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _4411_rhsType = _out1669;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4411_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4407_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1670;
                      DCOMP._IOwnership _out1671;
                      DCOMP.COMP.FromOwnership(r, _4408_recOwned, expectedOwnership, out _out1670, out _out1671);
                      r = _out1670;
                      resultingOwnership = _out1671;
                    } else {
                      RAST._IType _4412___mcc_h1169 = _source171.dtor_value;
                      RAST._IType _4413_v = _4412___mcc_h1169;
                      r = RAST.Expr.create_ConversionNum(_4413_v, _4407_recursiveGen);
                      RAST._IExpr _out1672;
                      DCOMP._IOwnership _out1673;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1672, out _out1673);
                      r = _out1672;
                      resultingOwnership = _out1673;
                    }
                    readIdents = _4409_recIdents;
                  } else {
                    RAST._IExpr _out1674;
                    DCOMP._IOwnership _out1675;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4406_b), _4406_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1674, out _out1675, out _out1676);
                    r = _out1674;
                    resultingOwnership = _out1675;
                    readIdents = _out1676;
                  }
                }
              }
            } else if (_source169.is_Nullable) {
              DAST._IType _4414___mcc_h962 = _source169.dtor_Nullable_a0;
              {
                RAST._IExpr _4415_recursiveGen;
                DCOMP._IOwnership _4416_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4417_recIdents;
                RAST._IExpr _out1677;
                DCOMP._IOwnership _out1678;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1677, out _out1678, out _out1679);
                _4415_recursiveGen = _out1677;
                _4416_recOwned = _out1678;
                _4417_recIdents = _out1679;
                Dafny.ISequence<Dafny.Rune> _4418_s;
                _4418_s = (_4415_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4416_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4418_s = Dafny.Sequence<Dafny.Rune>.Concat(_4418_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4418_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4418_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4418_s);
                RAST._IExpr _out1680;
                DCOMP._IOwnership _out1681;
                DCOMP.COMP.FromOwnership(r, _4416_recOwned, expectedOwnership, out _out1680, out _out1681);
                r = _out1680;
                resultingOwnership = _out1681;
                readIdents = _4417_recIdents;
              }
            } else if (_source169.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4419___mcc_h964 = _source169.dtor_Tuple_a0;
              {
                RAST._IExpr _4420_recursiveGen;
                DCOMP._IOwnership _4421_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4422_recIdents;
                RAST._IExpr _out1682;
                DCOMP._IOwnership _out1683;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1682, out _out1683, out _out1684);
                _4420_recursiveGen = _out1682;
                _4421_recOwned = _out1683;
                _4422_recIdents = _out1684;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4420_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1685;
                DCOMP._IOwnership _out1686;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1685, out _out1686);
                r = _out1685;
                resultingOwnership = _out1686;
                readIdents = _4422_recIdents;
              }
            } else if (_source169.is_Array) {
              DAST._IType _4423___mcc_h966 = _source169.dtor_element;
              BigInteger _4424___mcc_h967 = _source169.dtor_dims;
              {
                RAST._IExpr _4425_recursiveGen;
                DCOMP._IOwnership _4426_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4427_recIdents;
                RAST._IExpr _out1687;
                DCOMP._IOwnership _out1688;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1689;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1687, out _out1688, out _out1689);
                _4425_recursiveGen = _out1687;
                _4426_recOwned = _out1688;
                _4427_recIdents = _out1689;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4425_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1690;
                DCOMP._IOwnership _out1691;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1690, out _out1691);
                r = _out1690;
                resultingOwnership = _out1691;
                readIdents = _4427_recIdents;
              }
            } else if (_source169.is_Seq) {
              DAST._IType _4428___mcc_h970 = _source169.dtor_element;
              {
                RAST._IExpr _4429_recursiveGen;
                DCOMP._IOwnership _4430_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4431_recIdents;
                RAST._IExpr _out1692;
                DCOMP._IOwnership _out1693;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1694;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1692, out _out1693, out _out1694);
                _4429_recursiveGen = _out1692;
                _4430_recOwned = _out1693;
                _4431_recIdents = _out1694;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4429_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1695;
                DCOMP._IOwnership _out1696;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1695, out _out1696);
                r = _out1695;
                resultingOwnership = _out1696;
                readIdents = _4431_recIdents;
              }
            } else if (_source169.is_Set) {
              DAST._IType _4432___mcc_h972 = _source169.dtor_element;
              {
                RAST._IExpr _4433_recursiveGen;
                DCOMP._IOwnership _4434_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4435_recIdents;
                RAST._IExpr _out1697;
                DCOMP._IOwnership _out1698;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1699;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1697, out _out1698, out _out1699);
                _4433_recursiveGen = _out1697;
                _4434_recOwned = _out1698;
                _4435_recIdents = _out1699;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4433_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1700;
                DCOMP._IOwnership _out1701;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1700, out _out1701);
                r = _out1700;
                resultingOwnership = _out1701;
                readIdents = _4435_recIdents;
              }
            } else if (_source169.is_Multiset) {
              DAST._IType _4436___mcc_h974 = _source169.dtor_element;
              {
                RAST._IExpr _4437_recursiveGen;
                DCOMP._IOwnership _4438_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4439_recIdents;
                RAST._IExpr _out1702;
                DCOMP._IOwnership _out1703;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1704;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1702, out _out1703, out _out1704);
                _4437_recursiveGen = _out1702;
                _4438_recOwned = _out1703;
                _4439_recIdents = _out1704;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4437_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1705;
                DCOMP._IOwnership _out1706;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1705, out _out1706);
                r = _out1705;
                resultingOwnership = _out1706;
                readIdents = _4439_recIdents;
              }
            } else if (_source169.is_Map) {
              DAST._IType _4440___mcc_h976 = _source169.dtor_key;
              DAST._IType _4441___mcc_h977 = _source169.dtor_value;
              {
                RAST._IExpr _4442_recursiveGen;
                DCOMP._IOwnership _4443_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4444_recIdents;
                RAST._IExpr _out1707;
                DCOMP._IOwnership _out1708;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1707, out _out1708, out _out1709);
                _4442_recursiveGen = _out1707;
                _4443_recOwned = _out1708;
                _4444_recIdents = _out1709;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4442_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1710;
                DCOMP._IOwnership _out1711;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1710, out _out1711);
                r = _out1710;
                resultingOwnership = _out1711;
                readIdents = _4444_recIdents;
              }
            } else if (_source169.is_SetBuilder) {
              DAST._IType _4445___mcc_h980 = _source169.dtor_element;
              {
                RAST._IExpr _4446_recursiveGen;
                DCOMP._IOwnership _4447_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4448_recIdents;
                RAST._IExpr _out1712;
                DCOMP._IOwnership _out1713;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1712, out _out1713, out _out1714);
                _4446_recursiveGen = _out1712;
                _4447_recOwned = _out1713;
                _4448_recIdents = _out1714;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4446_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1715;
                DCOMP._IOwnership _out1716;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1715, out _out1716);
                r = _out1715;
                resultingOwnership = _out1716;
                readIdents = _4448_recIdents;
              }
            } else if (_source169.is_MapBuilder) {
              DAST._IType _4449___mcc_h982 = _source169.dtor_key;
              DAST._IType _4450___mcc_h983 = _source169.dtor_value;
              {
                RAST._IExpr _4451_recursiveGen;
                DCOMP._IOwnership _4452_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4453_recIdents;
                RAST._IExpr _out1717;
                DCOMP._IOwnership _out1718;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1719;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1717, out _out1718, out _out1719);
                _4451_recursiveGen = _out1717;
                _4452_recOwned = _out1718;
                _4453_recIdents = _out1719;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4451_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1720;
                DCOMP._IOwnership _out1721;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1720, out _out1721);
                r = _out1720;
                resultingOwnership = _out1721;
                readIdents = _4453_recIdents;
              }
            } else if (_source169.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4454___mcc_h986 = _source169.dtor_args;
              DAST._IType _4455___mcc_h987 = _source169.dtor_result;
              {
                RAST._IExpr _4456_recursiveGen;
                DCOMP._IOwnership _4457_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4458_recIdents;
                RAST._IExpr _out1722;
                DCOMP._IOwnership _out1723;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1722, out _out1723, out _out1724);
                _4456_recursiveGen = _out1722;
                _4457_recOwned = _out1723;
                _4458_recIdents = _out1724;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4456_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1725;
                DCOMP._IOwnership _out1726;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1725, out _out1726);
                r = _out1725;
                resultingOwnership = _out1726;
                readIdents = _4458_recIdents;
              }
            } else if (_source169.is_Primitive) {
              DAST._IPrimitive _4459___mcc_h990 = _source169.dtor_Primitive_a0;
              {
                RAST._IExpr _4460_recursiveGen;
                DCOMP._IOwnership _4461_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4462_recIdents;
                RAST._IExpr _out1727;
                DCOMP._IOwnership _out1728;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1729;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1727, out _out1728, out _out1729);
                _4460_recursiveGen = _out1727;
                _4461_recOwned = _out1728;
                _4462_recIdents = _out1729;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4460_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1730;
                DCOMP._IOwnership _out1731;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1730, out _out1731);
                r = _out1730;
                resultingOwnership = _out1731;
                readIdents = _4462_recIdents;
              }
            } else if (_source169.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4463___mcc_h992 = _source169.dtor_Passthrough_a0;
              {
                RAST._IExpr _4464_recursiveGen;
                DCOMP._IOwnership _4465_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4466_recIdents;
                RAST._IExpr _out1732;
                DCOMP._IOwnership _out1733;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1734;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1732, out _out1733, out _out1734);
                _4464_recursiveGen = _out1732;
                _4465_recOwned = _out1733;
                _4466_recIdents = _out1734;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4464_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1735;
                DCOMP._IOwnership _out1736;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1735, out _out1736);
                r = _out1735;
                resultingOwnership = _out1736;
                readIdents = _4466_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4467___mcc_h994 = _source169.dtor_TypeArg_a0;
              {
                RAST._IExpr _4468_recursiveGen;
                DCOMP._IOwnership _4469_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4470_recIdents;
                RAST._IExpr _out1737;
                DCOMP._IOwnership _out1738;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1737, out _out1738, out _out1739);
                _4468_recursiveGen = _out1737;
                _4469_recOwned = _out1738;
                _4470_recIdents = _out1739;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4468_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1740;
                DCOMP._IOwnership _out1741;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1740, out _out1741);
                r = _out1740;
                resultingOwnership = _out1741;
                readIdents = _4470_recIdents;
              }
            }
          } else {
            DAST._IType _source172 = _2994___mcc_h1;
            if (_source172.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4471___mcc_h996 = _source172.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4472___mcc_h997 = _source172.dtor_typeArgs;
              DAST._IResolvedType _4473___mcc_h998 = _source172.dtor_resolved;
              DAST._IResolvedType _source173 = _4473___mcc_h998;
              if (_source173.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4474___mcc_h1002 = _source173.dtor_path;
                {
                  RAST._IExpr _4475_recursiveGen;
                  DCOMP._IOwnership _4476_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4477_recIdents;
                  RAST._IExpr _out1742;
                  DCOMP._IOwnership _out1743;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1742, out _out1743, out _out1744);
                  _4475_recursiveGen = _out1742;
                  _4476_recOwned = _out1743;
                  _4477_recIdents = _out1744;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4475_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1745;
                  DCOMP._IOwnership _out1746;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1745, out _out1746);
                  r = _out1745;
                  resultingOwnership = _out1746;
                  readIdents = _4477_recIdents;
                }
              } else if (_source173.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4478___mcc_h1004 = _source173.dtor_path;
                {
                  RAST._IExpr _4479_recursiveGen;
                  DCOMP._IOwnership _4480_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4481_recIdents;
                  RAST._IExpr _out1747;
                  DCOMP._IOwnership _out1748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1747, out _out1748, out _out1749);
                  _4479_recursiveGen = _out1747;
                  _4480_recOwned = _out1748;
                  _4481_recIdents = _out1749;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4479_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1750;
                  DCOMP._IOwnership _out1751;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1750, out _out1751);
                  r = _out1750;
                  resultingOwnership = _out1751;
                  readIdents = _4481_recIdents;
                }
              } else {
                DAST._IType _4482___mcc_h1006 = _source173.dtor_baseType;
                DAST._INewtypeRange _4483___mcc_h1007 = _source173.dtor_range;
                bool _4484___mcc_h1008 = _source173.dtor_erase;
                bool _4485_erase = _4484___mcc_h1008;
                DAST._INewtypeRange _4486_range = _4483___mcc_h1007;
                DAST._IType _4487_b = _4482___mcc_h1006;
                {
                  if (object.Equals(_2988_fromTpe, _4487_b)) {
                    RAST._IExpr _4488_recursiveGen;
                    DCOMP._IOwnership _4489_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4490_recIdents;
                    RAST._IExpr _out1752;
                    DCOMP._IOwnership _out1753;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1754;
                    DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1752, out _out1753, out _out1754);
                    _4488_recursiveGen = _out1752;
                    _4489_recOwned = _out1753;
                    _4490_recIdents = _out1754;
                    Std.Wrappers._IOption<RAST._IType> _4491_potentialRhsType;
                    _4491_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4487_b, _4486_range);
                    Std.Wrappers._IOption<RAST._IType> _source174 = _4491_potentialRhsType;
                    if (_source174.is_None) {
                      if (_4485_erase) {
                        r = _4488_recursiveGen;
                      } else {
                        RAST._IType _4492_rhsType;
                        RAST._IType _out1755;
                        _out1755 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                        _4492_rhsType = _out1755;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4492_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4488_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1756;
                      DCOMP._IOwnership _out1757;
                      DCOMP.COMP.FromOwnership(r, _4489_recOwned, expectedOwnership, out _out1756, out _out1757);
                      r = _out1756;
                      resultingOwnership = _out1757;
                    } else {
                      RAST._IType _4493___mcc_h1170 = _source174.dtor_value;
                      RAST._IType _4494_v = _4493___mcc_h1170;
                      r = RAST.Expr.create_ConversionNum(_4494_v, _4488_recursiveGen);
                      RAST._IExpr _out1758;
                      DCOMP._IOwnership _out1759;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1758, out _out1759);
                      r = _out1758;
                      resultingOwnership = _out1759;
                    }
                    readIdents = _4490_recIdents;
                  } else {
                    RAST._IExpr _out1760;
                    DCOMP._IOwnership _out1761;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1762;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4487_b), _4487_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1760, out _out1761, out _out1762);
                    r = _out1760;
                    resultingOwnership = _out1761;
                    readIdents = _out1762;
                  }
                }
              }
            } else if (_source172.is_Nullable) {
              DAST._IType _4495___mcc_h1012 = _source172.dtor_Nullable_a0;
              {
                RAST._IExpr _4496_recursiveGen;
                DCOMP._IOwnership _4497_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4498_recIdents;
                RAST._IExpr _out1763;
                DCOMP._IOwnership _out1764;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1765;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1763, out _out1764, out _out1765);
                _4496_recursiveGen = _out1763;
                _4497_recOwned = _out1764;
                _4498_recIdents = _out1765;
                Dafny.ISequence<Dafny.Rune> _4499_s;
                _4499_s = (_4496_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4497_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4499_s = Dafny.Sequence<Dafny.Rune>.Concat(_4499_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4499_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4499_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4499_s);
                RAST._IExpr _out1766;
                DCOMP._IOwnership _out1767;
                DCOMP.COMP.FromOwnership(r, _4497_recOwned, expectedOwnership, out _out1766, out _out1767);
                r = _out1766;
                resultingOwnership = _out1767;
                readIdents = _4498_recIdents;
              }
            } else if (_source172.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4500___mcc_h1014 = _source172.dtor_Tuple_a0;
              {
                RAST._IExpr _4501_recursiveGen;
                DCOMP._IOwnership _4502_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4503_recIdents;
                RAST._IExpr _out1768;
                DCOMP._IOwnership _out1769;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1770;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1768, out _out1769, out _out1770);
                _4501_recursiveGen = _out1768;
                _4502_recOwned = _out1769;
                _4503_recIdents = _out1770;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4501_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1771;
                DCOMP._IOwnership _out1772;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1771, out _out1772);
                r = _out1771;
                resultingOwnership = _out1772;
                readIdents = _4503_recIdents;
              }
            } else if (_source172.is_Array) {
              DAST._IType _4504___mcc_h1016 = _source172.dtor_element;
              BigInteger _4505___mcc_h1017 = _source172.dtor_dims;
              {
                RAST._IExpr _4506_recursiveGen;
                DCOMP._IOwnership _4507_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4508_recIdents;
                RAST._IExpr _out1773;
                DCOMP._IOwnership _out1774;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1775;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1773, out _out1774, out _out1775);
                _4506_recursiveGen = _out1773;
                _4507_recOwned = _out1774;
                _4508_recIdents = _out1775;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4506_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1776;
                DCOMP._IOwnership _out1777;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1776, out _out1777);
                r = _out1776;
                resultingOwnership = _out1777;
                readIdents = _4508_recIdents;
              }
            } else if (_source172.is_Seq) {
              DAST._IType _4509___mcc_h1020 = _source172.dtor_element;
              {
                RAST._IExpr _4510_recursiveGen;
                DCOMP._IOwnership _4511_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4512_recIdents;
                RAST._IExpr _out1778;
                DCOMP._IOwnership _out1779;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1780;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1778, out _out1779, out _out1780);
                _4510_recursiveGen = _out1778;
                _4511_recOwned = _out1779;
                _4512_recIdents = _out1780;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4510_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1781;
                DCOMP._IOwnership _out1782;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1781, out _out1782);
                r = _out1781;
                resultingOwnership = _out1782;
                readIdents = _4512_recIdents;
              }
            } else if (_source172.is_Set) {
              DAST._IType _4513___mcc_h1022 = _source172.dtor_element;
              {
                RAST._IExpr _4514_recursiveGen;
                DCOMP._IOwnership _4515_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4516_recIdents;
                RAST._IExpr _out1783;
                DCOMP._IOwnership _out1784;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1785;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1783, out _out1784, out _out1785);
                _4514_recursiveGen = _out1783;
                _4515_recOwned = _out1784;
                _4516_recIdents = _out1785;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4514_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1786;
                DCOMP._IOwnership _out1787;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1786, out _out1787);
                r = _out1786;
                resultingOwnership = _out1787;
                readIdents = _4516_recIdents;
              }
            } else if (_source172.is_Multiset) {
              DAST._IType _4517___mcc_h1024 = _source172.dtor_element;
              {
                RAST._IExpr _4518_recursiveGen;
                DCOMP._IOwnership _4519_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4520_recIdents;
                RAST._IExpr _out1788;
                DCOMP._IOwnership _out1789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1790;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1788, out _out1789, out _out1790);
                _4518_recursiveGen = _out1788;
                _4519_recOwned = _out1789;
                _4520_recIdents = _out1790;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4518_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1791;
                DCOMP._IOwnership _out1792;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1791, out _out1792);
                r = _out1791;
                resultingOwnership = _out1792;
                readIdents = _4520_recIdents;
              }
            } else if (_source172.is_Map) {
              DAST._IType _4521___mcc_h1026 = _source172.dtor_key;
              DAST._IType _4522___mcc_h1027 = _source172.dtor_value;
              {
                RAST._IExpr _4523_recursiveGen;
                DCOMP._IOwnership _4524_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4525_recIdents;
                RAST._IExpr _out1793;
                DCOMP._IOwnership _out1794;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1795;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1793, out _out1794, out _out1795);
                _4523_recursiveGen = _out1793;
                _4524_recOwned = _out1794;
                _4525_recIdents = _out1795;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4523_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1796;
                DCOMP._IOwnership _out1797;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1796, out _out1797);
                r = _out1796;
                resultingOwnership = _out1797;
                readIdents = _4525_recIdents;
              }
            } else if (_source172.is_SetBuilder) {
              DAST._IType _4526___mcc_h1030 = _source172.dtor_element;
              {
                RAST._IExpr _4527_recursiveGen;
                DCOMP._IOwnership _4528_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4529_recIdents;
                RAST._IExpr _out1798;
                DCOMP._IOwnership _out1799;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1800;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1798, out _out1799, out _out1800);
                _4527_recursiveGen = _out1798;
                _4528_recOwned = _out1799;
                _4529_recIdents = _out1800;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4527_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1801;
                DCOMP._IOwnership _out1802;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1801, out _out1802);
                r = _out1801;
                resultingOwnership = _out1802;
                readIdents = _4529_recIdents;
              }
            } else if (_source172.is_MapBuilder) {
              DAST._IType _4530___mcc_h1032 = _source172.dtor_key;
              DAST._IType _4531___mcc_h1033 = _source172.dtor_value;
              {
                RAST._IExpr _4532_recursiveGen;
                DCOMP._IOwnership _4533_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4534_recIdents;
                RAST._IExpr _out1803;
                DCOMP._IOwnership _out1804;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1805;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1803, out _out1804, out _out1805);
                _4532_recursiveGen = _out1803;
                _4533_recOwned = _out1804;
                _4534_recIdents = _out1805;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4532_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1806;
                DCOMP._IOwnership _out1807;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1806, out _out1807);
                r = _out1806;
                resultingOwnership = _out1807;
                readIdents = _4534_recIdents;
              }
            } else if (_source172.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4535___mcc_h1036 = _source172.dtor_args;
              DAST._IType _4536___mcc_h1037 = _source172.dtor_result;
              {
                RAST._IExpr _4537_recursiveGen;
                DCOMP._IOwnership _4538_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4539_recIdents;
                RAST._IExpr _out1808;
                DCOMP._IOwnership _out1809;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1810;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1808, out _out1809, out _out1810);
                _4537_recursiveGen = _out1808;
                _4538_recOwned = _out1809;
                _4539_recIdents = _out1810;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4537_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1811;
                DCOMP._IOwnership _out1812;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1811, out _out1812);
                r = _out1811;
                resultingOwnership = _out1812;
                readIdents = _4539_recIdents;
              }
            } else if (_source172.is_Primitive) {
              DAST._IPrimitive _4540___mcc_h1040 = _source172.dtor_Primitive_a0;
              DAST._IPrimitive _source175 = _4540___mcc_h1040;
              if (_source175.is_Int) {
                {
                  RAST._IType _4541_rhsType;
                  RAST._IType _out1813;
                  _out1813 = DCOMP.COMP.GenType(_2988_fromTpe, true, false);
                  _4541_rhsType = _out1813;
                  RAST._IExpr _4542_recursiveGen;
                  DCOMP._IOwnership _4543___v82;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4544_recIdents;
                  RAST._IExpr _out1814;
                  DCOMP._IOwnership _out1815;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1816;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1814, out _out1815, out _out1816);
                  _4542_recursiveGen = _out1814;
                  _4543___v82 = _out1815;
                  _4544_recIdents = _out1816;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_4542_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out1817;
                  DCOMP._IOwnership _out1818;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1817, out _out1818);
                  r = _out1817;
                  resultingOwnership = _out1818;
                  readIdents = _4544_recIdents;
                }
              } else if (_source175.is_Real) {
                {
                  RAST._IExpr _4545_recursiveGen;
                  DCOMP._IOwnership _4546_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4547_recIdents;
                  RAST._IExpr _out1819;
                  DCOMP._IOwnership _out1820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1821;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1819, out _out1820, out _out1821);
                  _4545_recursiveGen = _out1819;
                  _4546_recOwned = _out1820;
                  _4547_recIdents = _out1821;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4545_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1822;
                  DCOMP._IOwnership _out1823;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1822, out _out1823);
                  r = _out1822;
                  resultingOwnership = _out1823;
                  readIdents = _4547_recIdents;
                }
              } else if (_source175.is_String) {
                {
                  RAST._IExpr _4548_recursiveGen;
                  DCOMP._IOwnership _4549_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4550_recIdents;
                  RAST._IExpr _out1824;
                  DCOMP._IOwnership _out1825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1826;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1824, out _out1825, out _out1826);
                  _4548_recursiveGen = _out1824;
                  _4549_recOwned = _out1825;
                  _4550_recIdents = _out1826;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4548_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1827;
                  DCOMP._IOwnership _out1828;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1827, out _out1828);
                  r = _out1827;
                  resultingOwnership = _out1828;
                  readIdents = _4550_recIdents;
                }
              } else if (_source175.is_Bool) {
                {
                  RAST._IExpr _4551_recursiveGen;
                  DCOMP._IOwnership _4552_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4553_recIdents;
                  RAST._IExpr _out1829;
                  DCOMP._IOwnership _out1830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1831;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1829, out _out1830, out _out1831);
                  _4551_recursiveGen = _out1829;
                  _4552_recOwned = _out1830;
                  _4553_recIdents = _out1831;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4551_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1832;
                  DCOMP._IOwnership _out1833;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1832, out _out1833);
                  r = _out1832;
                  resultingOwnership = _out1833;
                  readIdents = _4553_recIdents;
                }
              } else {
                {
                  RAST._IExpr _4554_recursiveGen;
                  DCOMP._IOwnership _4555_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4556_recIdents;
                  RAST._IExpr _out1834;
                  DCOMP._IOwnership _out1835;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1836;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1834, out _out1835, out _out1836);
                  _4554_recursiveGen = _out1834;
                  _4555_recOwned = _out1835;
                  _4556_recIdents = _out1836;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4554_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1837;
                  DCOMP._IOwnership _out1838;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1837, out _out1838);
                  r = _out1837;
                  resultingOwnership = _out1838;
                  readIdents = _4556_recIdents;
                }
              }
            } else if (_source172.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4557___mcc_h1042 = _source172.dtor_Passthrough_a0;
              {
                RAST._IExpr _4558_recursiveGen;
                DCOMP._IOwnership _4559_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4560_recIdents;
                RAST._IExpr _out1839;
                DCOMP._IOwnership _out1840;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1841;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1839, out _out1840, out _out1841);
                _4558_recursiveGen = _out1839;
                _4559_recOwned = _out1840;
                _4560_recIdents = _out1841;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4558_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1842;
                DCOMP._IOwnership _out1843;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1842, out _out1843);
                r = _out1842;
                resultingOwnership = _out1843;
                readIdents = _4560_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4561___mcc_h1044 = _source172.dtor_TypeArg_a0;
              {
                RAST._IExpr _4562_recursiveGen;
                DCOMP._IOwnership _4563_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4564_recIdents;
                RAST._IExpr _out1844;
                DCOMP._IOwnership _out1845;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1846;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1844, out _out1845, out _out1846);
                _4562_recursiveGen = _out1844;
                _4563_recOwned = _out1845;
                _4564_recIdents = _out1846;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4562_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1847;
                DCOMP._IOwnership _out1848;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1847, out _out1848);
                r = _out1847;
                resultingOwnership = _out1848;
                readIdents = _4564_recIdents;
              }
            }
          }
        } else if (_source117.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _4565___mcc_h1046 = _source117.dtor_Passthrough_a0;
          DAST._IType _source176 = _2994___mcc_h1;
          if (_source176.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4566___mcc_h1050 = _source176.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4567___mcc_h1051 = _source176.dtor_typeArgs;
            DAST._IResolvedType _4568___mcc_h1052 = _source176.dtor_resolved;
            DAST._IResolvedType _source177 = _4568___mcc_h1052;
            if (_source177.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4569___mcc_h1056 = _source177.dtor_path;
              {
                RAST._IExpr _4570_recursiveGen;
                DCOMP._IOwnership _4571_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4572_recIdents;
                RAST._IExpr _out1849;
                DCOMP._IOwnership _out1850;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1851;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1849, out _out1850, out _out1851);
                _4570_recursiveGen = _out1849;
                _4571_recOwned = _out1850;
                _4572_recIdents = _out1851;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4570_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1852;
                DCOMP._IOwnership _out1853;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1852, out _out1853);
                r = _out1852;
                resultingOwnership = _out1853;
                readIdents = _4572_recIdents;
              }
            } else if (_source177.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4573___mcc_h1058 = _source177.dtor_path;
              {
                RAST._IExpr _4574_recursiveGen;
                DCOMP._IOwnership _4575_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4576_recIdents;
                RAST._IExpr _out1854;
                DCOMP._IOwnership _out1855;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1856;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1854, out _out1855, out _out1856);
                _4574_recursiveGen = _out1854;
                _4575_recOwned = _out1855;
                _4576_recIdents = _out1856;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4574_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1857;
                DCOMP._IOwnership _out1858;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1857, out _out1858);
                r = _out1857;
                resultingOwnership = _out1858;
                readIdents = _4576_recIdents;
              }
            } else {
              DAST._IType _4577___mcc_h1060 = _source177.dtor_baseType;
              DAST._INewtypeRange _4578___mcc_h1061 = _source177.dtor_range;
              bool _4579___mcc_h1062 = _source177.dtor_erase;
              bool _4580_erase = _4579___mcc_h1062;
              DAST._INewtypeRange _4581_range = _4578___mcc_h1061;
              DAST._IType _4582_b = _4577___mcc_h1060;
              {
                if (object.Equals(_2988_fromTpe, _4582_b)) {
                  RAST._IExpr _4583_recursiveGen;
                  DCOMP._IOwnership _4584_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4585_recIdents;
                  RAST._IExpr _out1859;
                  DCOMP._IOwnership _out1860;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1861;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1859, out _out1860, out _out1861);
                  _4583_recursiveGen = _out1859;
                  _4584_recOwned = _out1860;
                  _4585_recIdents = _out1861;
                  Std.Wrappers._IOption<RAST._IType> _4586_potentialRhsType;
                  _4586_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4582_b, _4581_range);
                  Std.Wrappers._IOption<RAST._IType> _source178 = _4586_potentialRhsType;
                  if (_source178.is_None) {
                    if (_4580_erase) {
                      r = _4583_recursiveGen;
                    } else {
                      RAST._IType _4587_rhsType;
                      RAST._IType _out1862;
                      _out1862 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _4587_rhsType = _out1862;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4587_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4583_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1863;
                    DCOMP._IOwnership _out1864;
                    DCOMP.COMP.FromOwnership(r, _4584_recOwned, expectedOwnership, out _out1863, out _out1864);
                    r = _out1863;
                    resultingOwnership = _out1864;
                  } else {
                    RAST._IType _4588___mcc_h1171 = _source178.dtor_value;
                    RAST._IType _4589_v = _4588___mcc_h1171;
                    r = RAST.Expr.create_ConversionNum(_4589_v, _4583_recursiveGen);
                    RAST._IExpr _out1865;
                    DCOMP._IOwnership _out1866;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1865, out _out1866);
                    r = _out1865;
                    resultingOwnership = _out1866;
                  }
                  readIdents = _4585_recIdents;
                } else {
                  RAST._IExpr _out1867;
                  DCOMP._IOwnership _out1868;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1869;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4582_b), _4582_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1867, out _out1868, out _out1869);
                  r = _out1867;
                  resultingOwnership = _out1868;
                  readIdents = _out1869;
                }
              }
            }
          } else if (_source176.is_Nullable) {
            DAST._IType _4590___mcc_h1066 = _source176.dtor_Nullable_a0;
            {
              RAST._IExpr _4591_recursiveGen;
              DCOMP._IOwnership _4592_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4593_recIdents;
              RAST._IExpr _out1870;
              DCOMP._IOwnership _out1871;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1872;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1870, out _out1871, out _out1872);
              _4591_recursiveGen = _out1870;
              _4592_recOwned = _out1871;
              _4593_recIdents = _out1872;
              Dafny.ISequence<Dafny.Rune> _4594_s;
              _4594_s = (_4591_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4592_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4594_s = Dafny.Sequence<Dafny.Rune>.Concat(_4594_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4594_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4594_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4594_s);
              RAST._IExpr _out1873;
              DCOMP._IOwnership _out1874;
              DCOMP.COMP.FromOwnership(r, _4592_recOwned, expectedOwnership, out _out1873, out _out1874);
              r = _out1873;
              resultingOwnership = _out1874;
              readIdents = _4593_recIdents;
            }
          } else if (_source176.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4595___mcc_h1068 = _source176.dtor_Tuple_a0;
            {
              RAST._IExpr _4596_recursiveGen;
              DCOMP._IOwnership _4597_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4598_recIdents;
              RAST._IExpr _out1875;
              DCOMP._IOwnership _out1876;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1877;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1875, out _out1876, out _out1877);
              _4596_recursiveGen = _out1875;
              _4597_recOwned = _out1876;
              _4598_recIdents = _out1877;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4596_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1878;
              DCOMP._IOwnership _out1879;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1878, out _out1879);
              r = _out1878;
              resultingOwnership = _out1879;
              readIdents = _4598_recIdents;
            }
          } else if (_source176.is_Array) {
            DAST._IType _4599___mcc_h1070 = _source176.dtor_element;
            BigInteger _4600___mcc_h1071 = _source176.dtor_dims;
            {
              RAST._IExpr _4601_recursiveGen;
              DCOMP._IOwnership _4602_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4603_recIdents;
              RAST._IExpr _out1880;
              DCOMP._IOwnership _out1881;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1882;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1880, out _out1881, out _out1882);
              _4601_recursiveGen = _out1880;
              _4602_recOwned = _out1881;
              _4603_recIdents = _out1882;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4601_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1883;
              DCOMP._IOwnership _out1884;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1883, out _out1884);
              r = _out1883;
              resultingOwnership = _out1884;
              readIdents = _4603_recIdents;
            }
          } else if (_source176.is_Seq) {
            DAST._IType _4604___mcc_h1074 = _source176.dtor_element;
            {
              RAST._IExpr _4605_recursiveGen;
              DCOMP._IOwnership _4606_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4607_recIdents;
              RAST._IExpr _out1885;
              DCOMP._IOwnership _out1886;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1887;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1885, out _out1886, out _out1887);
              _4605_recursiveGen = _out1885;
              _4606_recOwned = _out1886;
              _4607_recIdents = _out1887;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4605_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1888;
              DCOMP._IOwnership _out1889;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1888, out _out1889);
              r = _out1888;
              resultingOwnership = _out1889;
              readIdents = _4607_recIdents;
            }
          } else if (_source176.is_Set) {
            DAST._IType _4608___mcc_h1076 = _source176.dtor_element;
            {
              RAST._IExpr _4609_recursiveGen;
              DCOMP._IOwnership _4610_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4611_recIdents;
              RAST._IExpr _out1890;
              DCOMP._IOwnership _out1891;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1892;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1890, out _out1891, out _out1892);
              _4609_recursiveGen = _out1890;
              _4610_recOwned = _out1891;
              _4611_recIdents = _out1892;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4609_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1893;
              DCOMP._IOwnership _out1894;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1893, out _out1894);
              r = _out1893;
              resultingOwnership = _out1894;
              readIdents = _4611_recIdents;
            }
          } else if (_source176.is_Multiset) {
            DAST._IType _4612___mcc_h1078 = _source176.dtor_element;
            {
              RAST._IExpr _4613_recursiveGen;
              DCOMP._IOwnership _4614_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4615_recIdents;
              RAST._IExpr _out1895;
              DCOMP._IOwnership _out1896;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1897;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1895, out _out1896, out _out1897);
              _4613_recursiveGen = _out1895;
              _4614_recOwned = _out1896;
              _4615_recIdents = _out1897;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4613_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1898;
              DCOMP._IOwnership _out1899;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1898, out _out1899);
              r = _out1898;
              resultingOwnership = _out1899;
              readIdents = _4615_recIdents;
            }
          } else if (_source176.is_Map) {
            DAST._IType _4616___mcc_h1080 = _source176.dtor_key;
            DAST._IType _4617___mcc_h1081 = _source176.dtor_value;
            {
              RAST._IExpr _4618_recursiveGen;
              DCOMP._IOwnership _4619_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4620_recIdents;
              RAST._IExpr _out1900;
              DCOMP._IOwnership _out1901;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1902;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1900, out _out1901, out _out1902);
              _4618_recursiveGen = _out1900;
              _4619_recOwned = _out1901;
              _4620_recIdents = _out1902;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4618_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1903;
              DCOMP._IOwnership _out1904;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1903, out _out1904);
              r = _out1903;
              resultingOwnership = _out1904;
              readIdents = _4620_recIdents;
            }
          } else if (_source176.is_SetBuilder) {
            DAST._IType _4621___mcc_h1084 = _source176.dtor_element;
            {
              RAST._IExpr _4622_recursiveGen;
              DCOMP._IOwnership _4623_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4624_recIdents;
              RAST._IExpr _out1905;
              DCOMP._IOwnership _out1906;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1907;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1905, out _out1906, out _out1907);
              _4622_recursiveGen = _out1905;
              _4623_recOwned = _out1906;
              _4624_recIdents = _out1907;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4622_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1908;
              DCOMP._IOwnership _out1909;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1908, out _out1909);
              r = _out1908;
              resultingOwnership = _out1909;
              readIdents = _4624_recIdents;
            }
          } else if (_source176.is_MapBuilder) {
            DAST._IType _4625___mcc_h1086 = _source176.dtor_key;
            DAST._IType _4626___mcc_h1087 = _source176.dtor_value;
            {
              RAST._IExpr _4627_recursiveGen;
              DCOMP._IOwnership _4628_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4629_recIdents;
              RAST._IExpr _out1910;
              DCOMP._IOwnership _out1911;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1912;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1910, out _out1911, out _out1912);
              _4627_recursiveGen = _out1910;
              _4628_recOwned = _out1911;
              _4629_recIdents = _out1912;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4627_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1913;
              DCOMP._IOwnership _out1914;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1913, out _out1914);
              r = _out1913;
              resultingOwnership = _out1914;
              readIdents = _4629_recIdents;
            }
          } else if (_source176.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4630___mcc_h1090 = _source176.dtor_args;
            DAST._IType _4631___mcc_h1091 = _source176.dtor_result;
            {
              RAST._IExpr _4632_recursiveGen;
              DCOMP._IOwnership _4633_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4634_recIdents;
              RAST._IExpr _out1915;
              DCOMP._IOwnership _out1916;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1917;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1915, out _out1916, out _out1917);
              _4632_recursiveGen = _out1915;
              _4633_recOwned = _out1916;
              _4634_recIdents = _out1917;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4632_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1918;
              DCOMP._IOwnership _out1919;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1918, out _out1919);
              r = _out1918;
              resultingOwnership = _out1919;
              readIdents = _4634_recIdents;
            }
          } else if (_source176.is_Primitive) {
            DAST._IPrimitive _4635___mcc_h1094 = _source176.dtor_Primitive_a0;
            DAST._IPrimitive _source179 = _4635___mcc_h1094;
            if (_source179.is_Int) {
              {
                RAST._IType _4636_rhsType;
                RAST._IType _out1920;
                _out1920 = DCOMP.COMP.GenType(_2988_fromTpe, true, false);
                _4636_rhsType = _out1920;
                RAST._IExpr _4637_recursiveGen;
                DCOMP._IOwnership _4638___v80;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4639_recIdents;
                RAST._IExpr _out1921;
                DCOMP._IOwnership _out1922;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1923;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1921, out _out1922, out _out1923);
                _4637_recursiveGen = _out1921;
                _4638___v80 = _out1922;
                _4639_recIdents = _out1923;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_4637_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out1924;
                DCOMP._IOwnership _out1925;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1924, out _out1925);
                r = _out1924;
                resultingOwnership = _out1925;
                readIdents = _4639_recIdents;
              }
            } else if (_source179.is_Real) {
              {
                RAST._IExpr _4640_recursiveGen;
                DCOMP._IOwnership _4641_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4642_recIdents;
                RAST._IExpr _out1926;
                DCOMP._IOwnership _out1927;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1928;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1926, out _out1927, out _out1928);
                _4640_recursiveGen = _out1926;
                _4641_recOwned = _out1927;
                _4642_recIdents = _out1928;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4640_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1929;
                DCOMP._IOwnership _out1930;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1929, out _out1930);
                r = _out1929;
                resultingOwnership = _out1930;
                readIdents = _4642_recIdents;
              }
            } else if (_source179.is_String) {
              {
                RAST._IExpr _4643_recursiveGen;
                DCOMP._IOwnership _4644_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4645_recIdents;
                RAST._IExpr _out1931;
                DCOMP._IOwnership _out1932;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1933;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1931, out _out1932, out _out1933);
                _4643_recursiveGen = _out1931;
                _4644_recOwned = _out1932;
                _4645_recIdents = _out1933;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4643_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1934;
                DCOMP._IOwnership _out1935;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1934, out _out1935);
                r = _out1934;
                resultingOwnership = _out1935;
                readIdents = _4645_recIdents;
              }
            } else if (_source179.is_Bool) {
              {
                RAST._IExpr _4646_recursiveGen;
                DCOMP._IOwnership _4647_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4648_recIdents;
                RAST._IExpr _out1936;
                DCOMP._IOwnership _out1937;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1938;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1936, out _out1937, out _out1938);
                _4646_recursiveGen = _out1936;
                _4647_recOwned = _out1937;
                _4648_recIdents = _out1938;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4646_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1939;
                DCOMP._IOwnership _out1940;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1939, out _out1940);
                r = _out1939;
                resultingOwnership = _out1940;
                readIdents = _4648_recIdents;
              }
            } else {
              {
                RAST._IExpr _4649_recursiveGen;
                DCOMP._IOwnership _4650_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4651_recIdents;
                RAST._IExpr _out1941;
                DCOMP._IOwnership _out1942;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1943;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1941, out _out1942, out _out1943);
                _4649_recursiveGen = _out1941;
                _4650_recOwned = _out1942;
                _4651_recIdents = _out1943;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4649_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1944;
                DCOMP._IOwnership _out1945;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1944, out _out1945);
                r = _out1944;
                resultingOwnership = _out1945;
                readIdents = _4651_recIdents;
              }
            }
          } else if (_source176.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4652___mcc_h1096 = _source176.dtor_Passthrough_a0;
            {
              RAST._IExpr _4653_recursiveGen;
              DCOMP._IOwnership _4654___v85;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4655_recIdents;
              RAST._IExpr _out1946;
              DCOMP._IOwnership _out1947;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1948;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1946, out _out1947, out _out1948);
              _4653_recursiveGen = _out1946;
              _4654___v85 = _out1947;
              _4655_recIdents = _out1948;
              RAST._IType _4656_toTpeGen;
              RAST._IType _out1949;
              _out1949 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
              _4656_toTpeGen = _out1949;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4653_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_4656_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out1950;
              DCOMP._IOwnership _out1951;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1950, out _out1951);
              r = _out1950;
              resultingOwnership = _out1951;
              readIdents = _4655_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4657___mcc_h1098 = _source176.dtor_TypeArg_a0;
            {
              RAST._IExpr _4658_recursiveGen;
              DCOMP._IOwnership _4659_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4660_recIdents;
              RAST._IExpr _out1952;
              DCOMP._IOwnership _out1953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1954;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1952, out _out1953, out _out1954);
              _4658_recursiveGen = _out1952;
              _4659_recOwned = _out1953;
              _4660_recIdents = _out1954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4658_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1955;
              DCOMP._IOwnership _out1956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1955, out _out1956);
              r = _out1955;
              resultingOwnership = _out1956;
              readIdents = _4660_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _4661___mcc_h1100 = _source117.dtor_TypeArg_a0;
          DAST._IType _source180 = _2994___mcc_h1;
          if (_source180.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4662___mcc_h1104 = _source180.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4663___mcc_h1105 = _source180.dtor_typeArgs;
            DAST._IResolvedType _4664___mcc_h1106 = _source180.dtor_resolved;
            DAST._IResolvedType _source181 = _4664___mcc_h1106;
            if (_source181.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4665___mcc_h1110 = _source181.dtor_path;
              {
                RAST._IExpr _4666_recursiveGen;
                DCOMP._IOwnership _4667_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4668_recIdents;
                RAST._IExpr _out1957;
                DCOMP._IOwnership _out1958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1959;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1957, out _out1958, out _out1959);
                _4666_recursiveGen = _out1957;
                _4667_recOwned = _out1958;
                _4668_recIdents = _out1959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4666_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1960;
                DCOMP._IOwnership _out1961;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1960, out _out1961);
                r = _out1960;
                resultingOwnership = _out1961;
                readIdents = _4668_recIdents;
              }
            } else if (_source181.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4669___mcc_h1112 = _source181.dtor_path;
              {
                RAST._IExpr _4670_recursiveGen;
                DCOMP._IOwnership _4671_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4672_recIdents;
                RAST._IExpr _out1962;
                DCOMP._IOwnership _out1963;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1964;
                DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1962, out _out1963, out _out1964);
                _4670_recursiveGen = _out1962;
                _4671_recOwned = _out1963;
                _4672_recIdents = _out1964;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4670_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1965;
                DCOMP._IOwnership _out1966;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1965, out _out1966);
                r = _out1965;
                resultingOwnership = _out1966;
                readIdents = _4672_recIdents;
              }
            } else {
              DAST._IType _4673___mcc_h1114 = _source181.dtor_baseType;
              DAST._INewtypeRange _4674___mcc_h1115 = _source181.dtor_range;
              bool _4675___mcc_h1116 = _source181.dtor_erase;
              bool _4676_erase = _4675___mcc_h1116;
              DAST._INewtypeRange _4677_range = _4674___mcc_h1115;
              DAST._IType _4678_b = _4673___mcc_h1114;
              {
                if (object.Equals(_2988_fromTpe, _4678_b)) {
                  RAST._IExpr _4679_recursiveGen;
                  DCOMP._IOwnership _4680_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4681_recIdents;
                  RAST._IExpr _out1967;
                  DCOMP._IOwnership _out1968;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1969;
                  DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1967, out _out1968, out _out1969);
                  _4679_recursiveGen = _out1967;
                  _4680_recOwned = _out1968;
                  _4681_recIdents = _out1969;
                  Std.Wrappers._IOption<RAST._IType> _4682_potentialRhsType;
                  _4682_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4678_b, _4677_range);
                  Std.Wrappers._IOption<RAST._IType> _source182 = _4682_potentialRhsType;
                  if (_source182.is_None) {
                    if (_4676_erase) {
                      r = _4679_recursiveGen;
                    } else {
                      RAST._IType _4683_rhsType;
                      RAST._IType _out1970;
                      _out1970 = DCOMP.COMP.GenType(_2989_toTpe, true, false);
                      _4683_rhsType = _out1970;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4683_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4679_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1971;
                    DCOMP._IOwnership _out1972;
                    DCOMP.COMP.FromOwnership(r, _4680_recOwned, expectedOwnership, out _out1971, out _out1972);
                    r = _out1971;
                    resultingOwnership = _out1972;
                  } else {
                    RAST._IType _4684___mcc_h1172 = _source182.dtor_value;
                    RAST._IType _4685_v = _4684___mcc_h1172;
                    r = RAST.Expr.create_ConversionNum(_4685_v, _4679_recursiveGen);
                    RAST._IExpr _out1973;
                    DCOMP._IOwnership _out1974;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1973, out _out1974);
                    r = _out1973;
                    resultingOwnership = _out1974;
                  }
                  readIdents = _4681_recIdents;
                } else {
                  RAST._IExpr _out1975;
                  DCOMP._IOwnership _out1976;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1977;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2987_expr, _2988_fromTpe, _4678_b), _4678_b, _2989_toTpe), selfIdent, @params, expectedOwnership, out _out1975, out _out1976, out _out1977);
                  r = _out1975;
                  resultingOwnership = _out1976;
                  readIdents = _out1977;
                }
              }
            }
          } else if (_source180.is_Nullable) {
            DAST._IType _4686___mcc_h1120 = _source180.dtor_Nullable_a0;
            {
              RAST._IExpr _4687_recursiveGen;
              DCOMP._IOwnership _4688_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4689_recIdents;
              RAST._IExpr _out1978;
              DCOMP._IOwnership _out1979;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1980;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1978, out _out1979, out _out1980);
              _4687_recursiveGen = _out1978;
              _4688_recOwned = _out1979;
              _4689_recIdents = _out1980;
              Dafny.ISequence<Dafny.Rune> _4690_s;
              _4690_s = (_4687_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4688_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4690_s = Dafny.Sequence<Dafny.Rune>.Concat(_4690_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4690_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4690_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4690_s);
              RAST._IExpr _out1981;
              DCOMP._IOwnership _out1982;
              DCOMP.COMP.FromOwnership(r, _4688_recOwned, expectedOwnership, out _out1981, out _out1982);
              r = _out1981;
              resultingOwnership = _out1982;
              readIdents = _4689_recIdents;
            }
          } else if (_source180.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4691___mcc_h1122 = _source180.dtor_Tuple_a0;
            {
              RAST._IExpr _4692_recursiveGen;
              DCOMP._IOwnership _4693_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4694_recIdents;
              RAST._IExpr _out1983;
              DCOMP._IOwnership _out1984;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1985;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1983, out _out1984, out _out1985);
              _4692_recursiveGen = _out1983;
              _4693_recOwned = _out1984;
              _4694_recIdents = _out1985;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4692_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1986;
              DCOMP._IOwnership _out1987;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1986, out _out1987);
              r = _out1986;
              resultingOwnership = _out1987;
              readIdents = _4694_recIdents;
            }
          } else if (_source180.is_Array) {
            DAST._IType _4695___mcc_h1124 = _source180.dtor_element;
            BigInteger _4696___mcc_h1125 = _source180.dtor_dims;
            {
              RAST._IExpr _4697_recursiveGen;
              DCOMP._IOwnership _4698_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4699_recIdents;
              RAST._IExpr _out1988;
              DCOMP._IOwnership _out1989;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1990;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1988, out _out1989, out _out1990);
              _4697_recursiveGen = _out1988;
              _4698_recOwned = _out1989;
              _4699_recIdents = _out1990;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4697_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1991;
              DCOMP._IOwnership _out1992;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1991, out _out1992);
              r = _out1991;
              resultingOwnership = _out1992;
              readIdents = _4699_recIdents;
            }
          } else if (_source180.is_Seq) {
            DAST._IType _4700___mcc_h1128 = _source180.dtor_element;
            {
              RAST._IExpr _4701_recursiveGen;
              DCOMP._IOwnership _4702_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4703_recIdents;
              RAST._IExpr _out1993;
              DCOMP._IOwnership _out1994;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1995;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1993, out _out1994, out _out1995);
              _4701_recursiveGen = _out1993;
              _4702_recOwned = _out1994;
              _4703_recIdents = _out1995;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4701_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1996;
              DCOMP._IOwnership _out1997;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1996, out _out1997);
              r = _out1996;
              resultingOwnership = _out1997;
              readIdents = _4703_recIdents;
            }
          } else if (_source180.is_Set) {
            DAST._IType _4704___mcc_h1130 = _source180.dtor_element;
            {
              RAST._IExpr _4705_recursiveGen;
              DCOMP._IOwnership _4706_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4707_recIdents;
              RAST._IExpr _out1998;
              DCOMP._IOwnership _out1999;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2000;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out1998, out _out1999, out _out2000);
              _4705_recursiveGen = _out1998;
              _4706_recOwned = _out1999;
              _4707_recIdents = _out2000;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4705_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2001;
              DCOMP._IOwnership _out2002;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2001, out _out2002);
              r = _out2001;
              resultingOwnership = _out2002;
              readIdents = _4707_recIdents;
            }
          } else if (_source180.is_Multiset) {
            DAST._IType _4708___mcc_h1132 = _source180.dtor_element;
            {
              RAST._IExpr _4709_recursiveGen;
              DCOMP._IOwnership _4710_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4711_recIdents;
              RAST._IExpr _out2003;
              DCOMP._IOwnership _out2004;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2005;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2003, out _out2004, out _out2005);
              _4709_recursiveGen = _out2003;
              _4710_recOwned = _out2004;
              _4711_recIdents = _out2005;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4709_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2006;
              DCOMP._IOwnership _out2007;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2006, out _out2007);
              r = _out2006;
              resultingOwnership = _out2007;
              readIdents = _4711_recIdents;
            }
          } else if (_source180.is_Map) {
            DAST._IType _4712___mcc_h1134 = _source180.dtor_key;
            DAST._IType _4713___mcc_h1135 = _source180.dtor_value;
            {
              RAST._IExpr _4714_recursiveGen;
              DCOMP._IOwnership _4715_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4716_recIdents;
              RAST._IExpr _out2008;
              DCOMP._IOwnership _out2009;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2010;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2008, out _out2009, out _out2010);
              _4714_recursiveGen = _out2008;
              _4715_recOwned = _out2009;
              _4716_recIdents = _out2010;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4714_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2011;
              DCOMP._IOwnership _out2012;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2011, out _out2012);
              r = _out2011;
              resultingOwnership = _out2012;
              readIdents = _4716_recIdents;
            }
          } else if (_source180.is_SetBuilder) {
            DAST._IType _4717___mcc_h1138 = _source180.dtor_element;
            {
              RAST._IExpr _4718_recursiveGen;
              DCOMP._IOwnership _4719_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4720_recIdents;
              RAST._IExpr _out2013;
              DCOMP._IOwnership _out2014;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2015;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2013, out _out2014, out _out2015);
              _4718_recursiveGen = _out2013;
              _4719_recOwned = _out2014;
              _4720_recIdents = _out2015;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4718_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2016;
              DCOMP._IOwnership _out2017;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2016, out _out2017);
              r = _out2016;
              resultingOwnership = _out2017;
              readIdents = _4720_recIdents;
            }
          } else if (_source180.is_MapBuilder) {
            DAST._IType _4721___mcc_h1140 = _source180.dtor_key;
            DAST._IType _4722___mcc_h1141 = _source180.dtor_value;
            {
              RAST._IExpr _4723_recursiveGen;
              DCOMP._IOwnership _4724_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4725_recIdents;
              RAST._IExpr _out2018;
              DCOMP._IOwnership _out2019;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2020;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2018, out _out2019, out _out2020);
              _4723_recursiveGen = _out2018;
              _4724_recOwned = _out2019;
              _4725_recIdents = _out2020;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4723_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2021;
              DCOMP._IOwnership _out2022;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2021, out _out2022);
              r = _out2021;
              resultingOwnership = _out2022;
              readIdents = _4725_recIdents;
            }
          } else if (_source180.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4726___mcc_h1144 = _source180.dtor_args;
            DAST._IType _4727___mcc_h1145 = _source180.dtor_result;
            {
              RAST._IExpr _4728_recursiveGen;
              DCOMP._IOwnership _4729_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4730_recIdents;
              RAST._IExpr _out2023;
              DCOMP._IOwnership _out2024;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2025;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2023, out _out2024, out _out2025);
              _4728_recursiveGen = _out2023;
              _4729_recOwned = _out2024;
              _4730_recIdents = _out2025;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4728_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2026;
              DCOMP._IOwnership _out2027;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2026, out _out2027);
              r = _out2026;
              resultingOwnership = _out2027;
              readIdents = _4730_recIdents;
            }
          } else if (_source180.is_Primitive) {
            DAST._IPrimitive _4731___mcc_h1148 = _source180.dtor_Primitive_a0;
            {
              RAST._IExpr _4732_recursiveGen;
              DCOMP._IOwnership _4733_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4734_recIdents;
              RAST._IExpr _out2028;
              DCOMP._IOwnership _out2029;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2030;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2028, out _out2029, out _out2030);
              _4732_recursiveGen = _out2028;
              _4733_recOwned = _out2029;
              _4734_recIdents = _out2030;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4732_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2031;
              DCOMP._IOwnership _out2032;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2031, out _out2032);
              r = _out2031;
              resultingOwnership = _out2032;
              readIdents = _4734_recIdents;
            }
          } else if (_source180.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4735___mcc_h1150 = _source180.dtor_Passthrough_a0;
            {
              RAST._IExpr _4736_recursiveGen;
              DCOMP._IOwnership _4737_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4738_recIdents;
              RAST._IExpr _out2033;
              DCOMP._IOwnership _out2034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2035;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2033, out _out2034, out _out2035);
              _4736_recursiveGen = _out2033;
              _4737_recOwned = _out2034;
              _4738_recIdents = _out2035;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4736_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2036;
              DCOMP._IOwnership _out2037;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2036, out _out2037);
              r = _out2036;
              resultingOwnership = _out2037;
              readIdents = _4738_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4739___mcc_h1152 = _source180.dtor_TypeArg_a0;
            {
              RAST._IExpr _4740_recursiveGen;
              DCOMP._IOwnership _4741_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4742_recIdents;
              RAST._IExpr _out2038;
              DCOMP._IOwnership _out2039;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2040;
              DCOMP.COMP.GenExpr(_2987_expr, selfIdent, @params, expectedOwnership, out _out2038, out _out2039, out _out2040);
              _4740_recursiveGen = _out2038;
              _4741_recOwned = _out2039;
              _4742_recIdents = _out2040;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4740_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2041;
              DCOMP._IOwnership _out2042;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2041, out _out2042);
              r = _out2041;
              resultingOwnership = _out2042;
              readIdents = _4742_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source183 = e;
      if (_source183.is_Literal) {
        DAST._ILiteral _4743___mcc_h0 = _source183.dtor_Literal_a0;
        RAST._IExpr _out2043;
        DCOMP._IOwnership _out2044;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2045;
        DCOMP.COMP.GenExprLiteral(e, selfIdent, @params, expectedOwnership, out _out2043, out _out2044, out _out2045);
        r = _out2043;
        resultingOwnership = _out2044;
        readIdents = _out2045;
      } else if (_source183.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _4744___mcc_h1 = _source183.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _4745_name = _4744___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_4745_name));
          bool _4746_currentlyBorrowed;
          _4746_currentlyBorrowed = (@params).Contains(_4745_name);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (_4746_currentlyBorrowed) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4745_name);
          return ;
        }
      } else if (_source183.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4747___mcc_h2 = _source183.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4748_path = _4747___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _4749_p;
          Dafny.ISequence<Dafny.Rune> _out2046;
          _out2046 = DCOMP.COMP.GenPath(_4748_path);
          _4749_p = _out2046;
          r = RAST.Expr.create_RawExpr(_4749_p);
          RAST._IExpr _out2047;
          DCOMP._IOwnership _out2048;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2047, out _out2048);
          r = _out2047;
          resultingOwnership = _out2048;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source183.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _4750___mcc_h3 = _source183.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _4751_values = _4750___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _4752_s;
          _4752_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4753_i;
          _4753_i = BigInteger.Zero;
          while ((_4753_i) < (new BigInteger((_4751_values).Count))) {
            if ((_4753_i).Sign == 1) {
              _4752_s = Dafny.Sequence<Dafny.Rune>.Concat(_4752_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _4754_recursiveGen;
            DCOMP._IOwnership _4755___v88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4756_recIdents;
            RAST._IExpr _out2049;
            DCOMP._IOwnership _out2050;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2051;
            DCOMP.COMP.GenExpr((_4751_values).Select(_4753_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2049, out _out2050, out _out2051);
            _4754_recursiveGen = _out2049;
            _4755___v88 = _out2050;
            _4756_recIdents = _out2051;
            _4752_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4752_s, (_4754_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4756_recIdents);
            _4753_i = (_4753_i) + (BigInteger.One);
          }
          _4752_s = Dafny.Sequence<Dafny.Rune>.Concat(_4752_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_4752_s);
          RAST._IExpr _out2052;
          DCOMP._IOwnership _out2053;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2052, out _out2053);
          r = _out2052;
          resultingOwnership = _out2053;
          return ;
        }
      } else if (_source183.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4757___mcc_h4 = _source183.dtor_path;
        Dafny.ISequence<DAST._IType> _4758___mcc_h5 = _source183.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4759___mcc_h6 = _source183.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4760_args = _4759___mcc_h6;
        Dafny.ISequence<DAST._IType> _4761_typeArgs = _4758___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4762_path = _4757___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _4763_path;
          Dafny.ISequence<Dafny.Rune> _out2054;
          _out2054 = DCOMP.COMP.GenPath(_4762_path);
          _4763_path = _out2054;
          Dafny.ISequence<Dafny.Rune> _4764_s;
          _4764_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _4763_path);
          if ((new BigInteger((_4761_typeArgs).Count)).Sign == 1) {
            BigInteger _4765_i;
            _4765_i = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _4766_typeExprs;
            _4766_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_4765_i) < (new BigInteger((_4761_typeArgs).Count))) {
              RAST._IType _4767_typeExpr;
              RAST._IType _out2055;
              _out2055 = DCOMP.COMP.GenType((_4761_typeArgs).Select(_4765_i), false, false);
              _4767_typeExpr = _out2055;
              _4766_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4766_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4767_typeExpr));
              _4765_i = (_4765_i) + (BigInteger.One);
            }
            _4764_s = Dafny.Sequence<Dafny.Rune>.Concat(_4764_s, (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _4766_typeExprs))._ToString(DCOMP.__default.IND));
          }
          _4764_s = Dafny.Sequence<Dafny.Rune>.Concat(_4764_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4768_i;
          _4768_i = BigInteger.Zero;
          while ((_4768_i) < (new BigInteger((_4760_args).Count))) {
            if ((_4768_i).Sign == 1) {
              _4764_s = Dafny.Sequence<Dafny.Rune>.Concat(_4764_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _4769_recursiveGen;
            DCOMP._IOwnership _4770___v89;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4771_recIdents;
            RAST._IExpr _out2056;
            DCOMP._IOwnership _out2057;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2058;
            DCOMP.COMP.GenExpr((_4760_args).Select(_4768_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2056, out _out2057, out _out2058);
            _4769_recursiveGen = _out2056;
            _4770___v89 = _out2057;
            _4771_recIdents = _out2058;
            _4764_s = Dafny.Sequence<Dafny.Rune>.Concat(_4764_s, (_4769_recursiveGen)._ToString(DCOMP.__default.IND));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4771_recIdents);
            _4768_i = (_4768_i) + (BigInteger.One);
          }
          _4764_s = Dafny.Sequence<Dafny.Rune>.Concat(_4764_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          r = RAST.Expr.create_RawExpr(_4764_s);
          RAST._IExpr _out2059;
          DCOMP._IOwnership _out2060;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2059, out _out2060);
          r = _out2059;
          resultingOwnership = _out2060;
          return ;
        }
      } else if (_source183.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _4772___mcc_h7 = _source183.dtor_dims;
        DAST._IType _4773___mcc_h8 = _source183.dtor_typ;
        DAST._IType _4774_typ = _4773___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _4775_dims = _4772___mcc_h7;
        {
          BigInteger _4776_i;
          _4776_i = (new BigInteger((_4775_dims).Count)) - (BigInteger.One);
          RAST._IType _4777_genTyp;
          RAST._IType _out2061;
          _out2061 = DCOMP.COMP.GenType(_4774_typ, false, false);
          _4777_genTyp = _out2061;
          Dafny.ISequence<Dafny.Rune> _4778_s;
          _4778_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4777_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_4776_i).Sign != -1) {
            RAST._IExpr _4779_recursiveGen;
            DCOMP._IOwnership _4780___v90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4781_recIdents;
            RAST._IExpr _out2062;
            DCOMP._IOwnership _out2063;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2064;
            DCOMP.COMP.GenExpr((_4775_dims).Select(_4776_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2062, out _out2063, out _out2064);
            _4779_recursiveGen = _out2062;
            _4780___v90 = _out2063;
            _4781_recIdents = _out2064;
            _4778_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _4778_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_4779_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4781_recIdents);
            _4776_i = (_4776_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_4778_s);
          RAST._IExpr _out2065;
          DCOMP._IOwnership _out2066;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2065, out _out2066);
          r = _out2065;
          resultingOwnership = _out2066;
          return ;
        }
      } else if (_source183.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4782___mcc_h9 = _source183.dtor_path;
        Dafny.ISequence<DAST._IType> _4783___mcc_h10 = _source183.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _4784___mcc_h11 = _source183.dtor_variant;
        bool _4785___mcc_h12 = _source183.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4786___mcc_h13 = _source183.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4787_values = _4786___mcc_h13;
        bool _4788_isCo = _4785___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _4789_variant = _4784___mcc_h11;
        Dafny.ISequence<DAST._IType> _4790_typeArgs = _4783___mcc_h10;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4791_path = _4782___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _4792_path;
          Dafny.ISequence<Dafny.Rune> _out2067;
          _out2067 = DCOMP.COMP.GenPath(_4791_path);
          _4792_path = _out2067;
          Dafny.ISequence<Dafny.Rune> _4793_s;
          _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _4792_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_4790_typeArgs).Count)).Sign == 1) {
            _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _4794_i;
            _4794_i = BigInteger.Zero;
            while ((_4794_i) < (new BigInteger((_4790_typeArgs).Count))) {
              if ((_4794_i).Sign == 1) {
                _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              RAST._IType _4795_typeExpr;
              RAST._IType _out2068;
              _out2068 = DCOMP.COMP.GenType((_4790_typeArgs).Select(_4794_i), false, false);
              _4795_typeExpr = _out2068;
              _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, (_4795_typeExpr)._ToString(DCOMP.__default.IND));
              _4794_i = (_4794_i) + (BigInteger.One);
            }
            _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, DCOMP.__default.escapeIdent(_4789_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4796_i;
          _4796_i = BigInteger.Zero;
          _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_4796_i) < (new BigInteger((_4787_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs51 = (_4787_values).Select(_4796_i);
            Dafny.ISequence<Dafny.Rune> _4797_name = _let_tmp_rhs51.dtor__0;
            DAST._IExpression _4798_value = _let_tmp_rhs51.dtor__1;
            if ((_4796_i).Sign == 1) {
              _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_4788_isCo) {
              RAST._IExpr _4799_recursiveGen;
              DCOMP._IOwnership _4800___v91;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4801_recIdents;
              RAST._IExpr _out2069;
              DCOMP._IOwnership _out2070;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2071;
              DCOMP.COMP.GenExpr(_4798_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out2069, out _out2070, out _out2071);
              _4799_recursiveGen = _out2069;
              _4800___v91 = _out2070;
              _4801_recIdents = _out2071;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4801_recIdents);
              Dafny.ISequence<Dafny.Rune> _4802_allReadCloned;
              _4802_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_4801_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _4803_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_4801_recIdents).Elements) {
                  _4803_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_4801_recIdents).Contains(_4803_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2765)");
              after__ASSIGN_SUCH_THAT_2: ;
                _4802_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4802_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_4803_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_4803_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _4801_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4801_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4803_next));
              }
              _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, DCOMP.__default.escapeIdent(_4797_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _4802_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_4799_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              RAST._IExpr _4804_recursiveGen;
              DCOMP._IOwnership _4805___v92;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4806_recIdents;
              RAST._IExpr _out2072;
              DCOMP._IOwnership _out2073;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2074;
              DCOMP.COMP.GenExpr(_4798_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2072, out _out2073, out _out2074);
              _4804_recursiveGen = _out2072;
              _4805___v92 = _out2073;
              _4806_recIdents = _out2074;
              _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, DCOMP.__default.escapeIdent(_4797_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4804_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4806_recIdents);
            }
            _4796_i = (_4796_i) + (BigInteger.One);
          }
          _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(_4793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          r = RAST.Expr.create_RawExpr(_4793_s);
          RAST._IExpr _out2075;
          DCOMP._IOwnership _out2076;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2075, out _out2076);
          r = _out2075;
          resultingOwnership = _out2076;
          return ;
        }
      } else if (_source183.is_Convert) {
        DAST._IExpression _4807___mcc_h14 = _source183.dtor_value;
        DAST._IType _4808___mcc_h15 = _source183.dtor_from;
        DAST._IType _4809___mcc_h16 = _source183.dtor_typ;
        {
          RAST._IExpr _out2077;
          DCOMP._IOwnership _out2078;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2079;
          DCOMP.COMP.GenExprConvert(e, selfIdent, @params, expectedOwnership, out _out2077, out _out2078, out _out2079);
          r = _out2077;
          resultingOwnership = _out2078;
          readIdents = _out2079;
        }
      } else if (_source183.is_SeqConstruct) {
        DAST._IExpression _4810___mcc_h17 = _source183.dtor_length;
        DAST._IExpression _4811___mcc_h18 = _source183.dtor_elem;
        DAST._IExpression _4812_expr = _4811___mcc_h18;
        DAST._IExpression _4813_length = _4810___mcc_h17;
        {
          RAST._IExpr _4814_recursiveGen;
          DCOMP._IOwnership _4815___v96;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4816_recIdents;
          RAST._IExpr _out2080;
          DCOMP._IOwnership _out2081;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2082;
          DCOMP.COMP.GenExpr(_4812_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2080, out _out2081, out _out2082);
          _4814_recursiveGen = _out2080;
          _4815___v96 = _out2081;
          _4816_recIdents = _out2082;
          RAST._IExpr _4817_lengthGen;
          DCOMP._IOwnership _4818___v97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4819_lengthIdents;
          RAST._IExpr _out2083;
          DCOMP._IOwnership _out2084;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2085;
          DCOMP.COMP.GenExpr(_4813_length, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2083, out _out2084, out _out2085);
          _4817_lengthGen = _out2083;
          _4818___v97 = _out2084;
          _4819_lengthIdents = _out2085;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_4814_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_4817_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4816_recIdents, _4819_lengthIdents);
          RAST._IExpr _out2086;
          DCOMP._IOwnership _out2087;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2086, out _out2087);
          r = _out2086;
          resultingOwnership = _out2087;
          return ;
        }
      } else if (_source183.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _4820___mcc_h19 = _source183.dtor_elements;
        DAST._IType _4821___mcc_h20 = _source183.dtor_typ;
        DAST._IType _4822_typ = _4821___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _4823_exprs = _4820___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _4824_genTpe;
          RAST._IType _out2088;
          _out2088 = DCOMP.COMP.GenType(_4822_typ, false, false);
          _4824_genTpe = _out2088;
          BigInteger _4825_i;
          _4825_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4826_args;
          _4826_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4825_i) < (new BigInteger((_4823_exprs).Count))) {
            RAST._IExpr _4827_recursiveGen;
            DCOMP._IOwnership _4828___v98;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4829_recIdents;
            RAST._IExpr _out2089;
            DCOMP._IOwnership _out2090;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2091;
            DCOMP.COMP.GenExpr((_4823_exprs).Select(_4825_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2089, out _out2090, out _out2091);
            _4827_recursiveGen = _out2089;
            _4828___v98 = _out2090;
            _4829_recIdents = _out2091;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4829_recIdents);
            _4826_args = Dafny.Sequence<RAST._IExpr>.Concat(_4826_args, Dafny.Sequence<RAST._IExpr>.FromElements(_4827_recursiveGen));
            _4825_i = (_4825_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _4826_args);
          if ((new BigInteger((_4826_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_4824_genTpe));
          }
          RAST._IExpr _out2092;
          DCOMP._IOwnership _out2093;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2092, out _out2093);
          r = _out2092;
          resultingOwnership = _out2093;
          return ;
        }
      } else if (_source183.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _4830___mcc_h21 = _source183.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4831_exprs = _4830___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _4832_generatedValues;
          _4832_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4833_i;
          _4833_i = BigInteger.Zero;
          while ((_4833_i) < (new BigInteger((_4831_exprs).Count))) {
            RAST._IExpr _4834_recursiveGen;
            DCOMP._IOwnership _4835___v99;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4836_recIdents;
            RAST._IExpr _out2094;
            DCOMP._IOwnership _out2095;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2096;
            DCOMP.COMP.GenExpr((_4831_exprs).Select(_4833_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2094, out _out2095, out _out2096);
            _4834_recursiveGen = _out2094;
            _4835___v99 = _out2095;
            _4836_recIdents = _out2096;
            _4832_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4832_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4834_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4836_recIdents);
            _4833_i = (_4833_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _4832_generatedValues);
          RAST._IExpr _out2097;
          DCOMP._IOwnership _out2098;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2097, out _out2098);
          r = _out2097;
          resultingOwnership = _out2098;
          return ;
        }
      } else if (_source183.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _4837___mcc_h22 = _source183.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4838_exprs = _4837___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _4839_generatedValues;
          _4839_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4840_i;
          _4840_i = BigInteger.Zero;
          while ((_4840_i) < (new BigInteger((_4838_exprs).Count))) {
            RAST._IExpr _4841_recursiveGen;
            DCOMP._IOwnership _4842___v100;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4843_recIdents;
            RAST._IExpr _out2099;
            DCOMP._IOwnership _out2100;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2101;
            DCOMP.COMP.GenExpr((_4838_exprs).Select(_4840_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2099, out _out2100, out _out2101);
            _4841_recursiveGen = _out2099;
            _4842___v100 = _out2100;
            _4843_recIdents = _out2101;
            _4839_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4839_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4841_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4843_recIdents);
            _4840_i = (_4840_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _4839_generatedValues);
          RAST._IExpr _out2102;
          DCOMP._IOwnership _out2103;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2102, out _out2103);
          r = _out2102;
          resultingOwnership = _out2103;
          return ;
        }
      } else if (_source183.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4844___mcc_h23 = _source183.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4845_mapElems = _4844___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _4846_generatedValues;
          _4846_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4847_i;
          _4847_i = BigInteger.Zero;
          while ((_4847_i) < (new BigInteger((_4845_mapElems).Count))) {
            RAST._IExpr _4848_recursiveGenKey;
            DCOMP._IOwnership _4849___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4850_recIdentsKey;
            RAST._IExpr _out2104;
            DCOMP._IOwnership _out2105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2106;
            DCOMP.COMP.GenExpr(((_4845_mapElems).Select(_4847_i)).dtor__0, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2104, out _out2105, out _out2106);
            _4848_recursiveGenKey = _out2104;
            _4849___v102 = _out2105;
            _4850_recIdentsKey = _out2106;
            RAST._IExpr _4851_recursiveGenValue;
            DCOMP._IOwnership _4852___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4853_recIdentsValue;
            RAST._IExpr _out2107;
            DCOMP._IOwnership _out2108;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2109;
            DCOMP.COMP.GenExpr(((_4845_mapElems).Select(_4847_i)).dtor__1, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2107, out _out2108, out _out2109);
            _4851_recursiveGenValue = _out2107;
            _4852___v103 = _out2108;
            _4853_recIdentsValue = _out2109;
            _4846_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_4846_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_4848_recursiveGenKey, _4851_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4850_recIdentsKey), _4853_recIdentsValue);
            _4847_i = (_4847_i) + (BigInteger.One);
          }
          _4847_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4854_arguments;
          _4854_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4847_i) < (new BigInteger((_4846_generatedValues).Count))) {
            RAST._IExpr _4855_genKey;
            _4855_genKey = ((_4846_generatedValues).Select(_4847_i)).dtor__0;
            RAST._IExpr _4856_genValue;
            _4856_genValue = ((_4846_generatedValues).Select(_4847_i)).dtor__1;
            _4854_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4854_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _4855_genKey, _4856_genValue, DAST.Format.BinaryOpFormat.create_NoFormat())));
            _4847_i = (_4847_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _4854_arguments);
          RAST._IExpr _out2110;
          DCOMP._IOwnership _out2111;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2110, out _out2111);
          r = _out2110;
          resultingOwnership = _out2111;
          return ;
        }
      } else if (_source183.is_MapBuilder) {
        DAST._IType _4857___mcc_h24 = _source183.dtor_keyType;
        DAST._IType _4858___mcc_h25 = _source183.dtor_valueType;
        DAST._IType _4859_valueType = _4858___mcc_h25;
        DAST._IType _4860_keyType = _4857___mcc_h24;
        {
          RAST._IType _4861_kType;
          RAST._IType _out2112;
          _out2112 = DCOMP.COMP.GenType(_4860_keyType, false, false);
          _4861_kType = _out2112;
          RAST._IType _4862_vType;
          RAST._IType _out2113;
          _out2113 = DCOMP.COMP.GenType(_4859_valueType, false, false);
          _4862_vType = _out2113;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_4861_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4862_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2114;
          DCOMP._IOwnership _out2115;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2114, out _out2115);
          r = _out2114;
          resultingOwnership = _out2115;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source183.is_SeqUpdate) {
        DAST._IExpression _4863___mcc_h26 = _source183.dtor_expr;
        DAST._IExpression _4864___mcc_h27 = _source183.dtor_indexExpr;
        DAST._IExpression _4865___mcc_h28 = _source183.dtor_value;
        DAST._IExpression _4866_value = _4865___mcc_h28;
        DAST._IExpression _4867_index = _4864___mcc_h27;
        DAST._IExpression _4868_expr = _4863___mcc_h26;
        {
          RAST._IExpr _4869_exprR;
          DCOMP._IOwnership _4870___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4871_exprIdents;
          RAST._IExpr _out2116;
          DCOMP._IOwnership _out2117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2118;
          DCOMP.COMP.GenExpr(_4868_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2116, out _out2117, out _out2118);
          _4869_exprR = _out2116;
          _4870___v104 = _out2117;
          _4871_exprIdents = _out2118;
          RAST._IExpr _4872_indexR;
          DCOMP._IOwnership _4873_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4874_indexIdents;
          RAST._IExpr _out2119;
          DCOMP._IOwnership _out2120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2121;
          DCOMP.COMP.GenExpr(_4867_index, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2119, out _out2120, out _out2121);
          _4872_indexR = _out2119;
          _4873_indexOwnership = _out2120;
          _4874_indexIdents = _out2121;
          RAST._IExpr _4875_valueR;
          DCOMP._IOwnership _4876_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4877_valueIdents;
          RAST._IExpr _out2122;
          DCOMP._IOwnership _out2123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2124;
          DCOMP.COMP.GenExpr(_4866_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2122, out _out2123, out _out2124);
          _4875_valueR = _out2122;
          _4876_valueOwnership = _out2123;
          _4877_valueIdents = _out2124;
          r = ((_4869_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4872_indexR, _4875_valueR));
          RAST._IExpr _out2125;
          DCOMP._IOwnership _out2126;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2125, out _out2126);
          r = _out2125;
          resultingOwnership = _out2126;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4871_exprIdents, _4874_indexIdents), _4877_valueIdents);
          return ;
        }
      } else if (_source183.is_MapUpdate) {
        DAST._IExpression _4878___mcc_h29 = _source183.dtor_expr;
        DAST._IExpression _4879___mcc_h30 = _source183.dtor_indexExpr;
        DAST._IExpression _4880___mcc_h31 = _source183.dtor_value;
        DAST._IExpression _4881_value = _4880___mcc_h31;
        DAST._IExpression _4882_index = _4879___mcc_h30;
        DAST._IExpression _4883_expr = _4878___mcc_h29;
        {
          RAST._IExpr _4884_exprR;
          DCOMP._IOwnership _4885___v105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4886_exprIdents;
          RAST._IExpr _out2127;
          DCOMP._IOwnership _out2128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2129;
          DCOMP.COMP.GenExpr(_4883_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2127, out _out2128, out _out2129);
          _4884_exprR = _out2127;
          _4885___v105 = _out2128;
          _4886_exprIdents = _out2129;
          RAST._IExpr _4887_indexR;
          DCOMP._IOwnership _4888_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4889_indexIdents;
          RAST._IExpr _out2130;
          DCOMP._IOwnership _out2131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2132;
          DCOMP.COMP.GenExpr(_4882_index, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2130, out _out2131, out _out2132);
          _4887_indexR = _out2130;
          _4888_indexOwnership = _out2131;
          _4889_indexIdents = _out2132;
          RAST._IExpr _4890_valueR;
          DCOMP._IOwnership _4891_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4892_valueIdents;
          RAST._IExpr _out2133;
          DCOMP._IOwnership _out2134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2135;
          DCOMP.COMP.GenExpr(_4881_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2133, out _out2134, out _out2135);
          _4890_valueR = _out2133;
          _4891_valueOwnership = _out2134;
          _4892_valueIdents = _out2135;
          r = ((_4884_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4887_indexR, _4890_valueR));
          RAST._IExpr _out2136;
          DCOMP._IOwnership _out2137;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2136, out _out2137);
          r = _out2136;
          resultingOwnership = _out2137;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4886_exprIdents, _4889_indexIdents), _4892_valueIdents);
          return ;
        }
      } else if (_source183.is_SetBuilder) {
        DAST._IType _4893___mcc_h32 = _source183.dtor_elemType;
        DAST._IType _4894_elemType = _4893___mcc_h32;
        {
          RAST._IType _4895_eType;
          RAST._IType _out2138;
          _out2138 = DCOMP.COMP.GenType(_4894_elemType, false, false);
          _4895_eType = _out2138;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_4895_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2139;
          DCOMP._IOwnership _out2140;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2139, out _out2140);
          r = _out2139;
          resultingOwnership = _out2140;
          return ;
        }
      } else if (_source183.is_ToMultiset) {
        DAST._IExpression _4896___mcc_h33 = _source183.dtor_ToMultiset_a0;
        DAST._IExpression _4897_expr = _4896___mcc_h33;
        {
          RAST._IExpr _4898_recursiveGen;
          DCOMP._IOwnership _4899___v101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4900_recIdents;
          RAST._IExpr _out2141;
          DCOMP._IOwnership _out2142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2143;
          DCOMP.COMP.GenExpr(_4897_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2141, out _out2142, out _out2143);
          _4898_recursiveGen = _out2141;
          _4899___v101 = _out2142;
          _4900_recIdents = _out2143;
          r = ((_4898_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _4900_recIdents;
          RAST._IExpr _out2144;
          DCOMP._IOwnership _out2145;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2144, out _out2145);
          r = _out2144;
          resultingOwnership = _out2145;
          return ;
        }
      } else if (_source183.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source184 = selfIdent;
          if (_source184.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out2146;
              DCOMP._IOwnership _out2147;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2146, out _out2147);
              r = _out2146;
              resultingOwnership = _out2147;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4901___mcc_h273 = _source184.dtor_value;
            Dafny.ISequence<Dafny.Rune> _4902_id = _4901___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_4902_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_4902_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_4902_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4902_id);
            }
          }
          return ;
        }
      } else if (_source183.is_Ite) {
        DAST._IExpression _4903___mcc_h34 = _source183.dtor_cond;
        DAST._IExpression _4904___mcc_h35 = _source183.dtor_thn;
        DAST._IExpression _4905___mcc_h36 = _source183.dtor_els;
        DAST._IExpression _4906_f = _4905___mcc_h36;
        DAST._IExpression _4907_t = _4904___mcc_h35;
        DAST._IExpression _4908_cond = _4903___mcc_h34;
        {
          RAST._IExpr _4909_cond;
          DCOMP._IOwnership _4910___v106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4911_recIdentsCond;
          RAST._IExpr _out2148;
          DCOMP._IOwnership _out2149;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2150;
          DCOMP.COMP.GenExpr(_4908_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2148, out _out2149, out _out2150);
          _4909_cond = _out2148;
          _4910___v106 = _out2149;
          _4911_recIdentsCond = _out2150;
          Dafny.ISequence<Dafny.Rune> _4912_condString;
          _4912_condString = (_4909_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4913___v107;
          DCOMP._IOwnership _4914_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4915___v108;
          RAST._IExpr _out2151;
          DCOMP._IOwnership _out2152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2153;
          DCOMP.COMP.GenExpr(_4907_t, selfIdent, @params, expectedOwnership, out _out2151, out _out2152, out _out2153);
          _4913___v107 = _out2151;
          _4914_tHasToBeOwned = _out2152;
          _4915___v108 = _out2153;
          RAST._IExpr _4916_fExpr;
          DCOMP._IOwnership _4917_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4918_recIdentsF;
          RAST._IExpr _out2154;
          DCOMP._IOwnership _out2155;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2156;
          DCOMP.COMP.GenExpr(_4906_f, selfIdent, @params, _4914_tHasToBeOwned, out _out2154, out _out2155, out _out2156);
          _4916_fExpr = _out2154;
          _4917_fOwned = _out2155;
          _4918_recIdentsF = _out2156;
          Dafny.ISequence<Dafny.Rune> _4919_fString;
          _4919_fString = (_4916_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4920_tExpr;
          DCOMP._IOwnership _4921___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4922_recIdentsT;
          RAST._IExpr _out2157;
          DCOMP._IOwnership _out2158;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2159;
          DCOMP.COMP.GenExpr(_4907_t, selfIdent, @params, _4917_fOwned, out _out2157, out _out2158, out _out2159);
          _4920_tExpr = _out2157;
          _4921___v109 = _out2158;
          _4922_recIdentsT = _out2159;
          Dafny.ISequence<Dafny.Rune> _4923_tString;
          _4923_tString = (_4920_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _4912_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _4923_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _4919_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out2160;
          DCOMP._IOwnership _out2161;
          DCOMP.COMP.FromOwnership(r, _4917_fOwned, expectedOwnership, out _out2160, out _out2161);
          r = _out2160;
          resultingOwnership = _out2161;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4911_recIdentsCond, _4922_recIdentsT), _4918_recIdentsF);
          return ;
        }
      } else if (_source183.is_UnOp) {
        DAST._IUnaryOp _4924___mcc_h37 = _source183.dtor_unOp;
        DAST._IExpression _4925___mcc_h38 = _source183.dtor_expr;
        DAST.Format._IUnaryOpFormat _4926___mcc_h39 = _source183.dtor_format1;
        DAST._IUnaryOp _source185 = _4924___mcc_h37;
        if (_source185.is_Not) {
          DAST.Format._IUnaryOpFormat _4927_format = _4926___mcc_h39;
          DAST._IExpression _4928_e = _4925___mcc_h38;
          {
            RAST._IExpr _4929_recursiveGen;
            DCOMP._IOwnership _4930___v110;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4931_recIdents;
            RAST._IExpr _out2162;
            DCOMP._IOwnership _out2163;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2164;
            DCOMP.COMP.GenExpr(_4928_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2162, out _out2163, out _out2164);
            _4929_recursiveGen = _out2162;
            _4930___v110 = _out2163;
            _4931_recIdents = _out2164;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _4929_recursiveGen, _4927_format);
            RAST._IExpr _out2165;
            DCOMP._IOwnership _out2166;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2165, out _out2166);
            r = _out2165;
            resultingOwnership = _out2166;
            readIdents = _4931_recIdents;
            return ;
          }
        } else if (_source185.is_BitwiseNot) {
          DAST.Format._IUnaryOpFormat _4932_format = _4926___mcc_h39;
          DAST._IExpression _4933_e = _4925___mcc_h38;
          {
            RAST._IExpr _4934_recursiveGen;
            DCOMP._IOwnership _4935___v111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4936_recIdents;
            RAST._IExpr _out2167;
            DCOMP._IOwnership _out2168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2169;
            DCOMP.COMP.GenExpr(_4933_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2167, out _out2168, out _out2169);
            _4934_recursiveGen = _out2167;
            _4935___v111 = _out2168;
            _4936_recIdents = _out2169;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _4934_recursiveGen, _4932_format);
            RAST._IExpr _out2170;
            DCOMP._IOwnership _out2171;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2170, out _out2171);
            r = _out2170;
            resultingOwnership = _out2171;
            readIdents = _4936_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnaryOpFormat _4937_format = _4926___mcc_h39;
          DAST._IExpression _4938_e = _4925___mcc_h38;
          {
            RAST._IExpr _4939_recursiveGen;
            DCOMP._IOwnership _4940_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4941_recIdents;
            RAST._IExpr _out2172;
            DCOMP._IOwnership _out2173;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2174;
            DCOMP.COMP.GenExpr(_4938_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2172, out _out2173, out _out2174);
            _4939_recursiveGen = _out2172;
            _4940_recOwned = _out2173;
            _4941_recIdents = _out2174;
            r = ((_4939_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out2175;
            DCOMP._IOwnership _out2176;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2175, out _out2176);
            r = _out2175;
            resultingOwnership = _out2176;
            readIdents = _4941_recIdents;
            return ;
          }
        }
      } else if (_source183.is_BinOp) {
        DAST._IBinOp _4942___mcc_h40 = _source183.dtor_op;
        DAST._IExpression _4943___mcc_h41 = _source183.dtor_left;
        DAST._IExpression _4944___mcc_h42 = _source183.dtor_right;
        DAST.Format._IBinaryOpFormat _4945___mcc_h43 = _source183.dtor_format2;
        RAST._IExpr _out2177;
        DCOMP._IOwnership _out2178;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2179;
        DCOMP.COMP.GenExprBinary(e, selfIdent, @params, expectedOwnership, out _out2177, out _out2178, out _out2179);
        r = _out2177;
        resultingOwnership = _out2178;
        readIdents = _out2179;
      } else if (_source183.is_ArrayLen) {
        DAST._IExpression _4946___mcc_h44 = _source183.dtor_expr;
        BigInteger _4947___mcc_h45 = _source183.dtor_dim;
        BigInteger _4948_dim = _4947___mcc_h45;
        DAST._IExpression _4949_expr = _4946___mcc_h44;
        {
          RAST._IExpr _4950_recursiveGen;
          DCOMP._IOwnership _4951___v116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4952_recIdents;
          RAST._IExpr _out2180;
          DCOMP._IOwnership _out2181;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2182;
          DCOMP.COMP.GenExpr(_4949_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2180, out _out2181, out _out2182);
          _4950_recursiveGen = _out2180;
          _4951___v116 = _out2181;
          _4952_recIdents = _out2182;
          if ((_4948_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_4950_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _4953_s;
            _4953_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _4954_i;
            _4954_i = BigInteger.One;
            while ((_4954_i) < (_4948_dim)) {
              _4953_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _4953_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _4954_i = (_4954_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4950_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _4953_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out2183;
          DCOMP._IOwnership _out2184;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2183, out _out2184);
          r = _out2183;
          resultingOwnership = _out2184;
          readIdents = _4952_recIdents;
          return ;
        }
      } else if (_source183.is_MapKeys) {
        DAST._IExpression _4955___mcc_h46 = _source183.dtor_expr;
        DAST._IExpression _4956_expr = _4955___mcc_h46;
        {
          RAST._IExpr _4957_recursiveGen;
          DCOMP._IOwnership _4958___v117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4959_recIdents;
          RAST._IExpr _out2185;
          DCOMP._IOwnership _out2186;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2187;
          DCOMP.COMP.GenExpr(_4956_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2185, out _out2186, out _out2187);
          _4957_recursiveGen = _out2185;
          _4958___v117 = _out2186;
          _4959_recIdents = _out2187;
          readIdents = _4959_recIdents;
          r = RAST.Expr.create_Call((_4957_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2188;
          DCOMP._IOwnership _out2189;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2188, out _out2189);
          r = _out2188;
          resultingOwnership = _out2189;
          return ;
        }
      } else if (_source183.is_MapValues) {
        DAST._IExpression _4960___mcc_h47 = _source183.dtor_expr;
        DAST._IExpression _4961_expr = _4960___mcc_h47;
        {
          RAST._IExpr _4962_recursiveGen;
          DCOMP._IOwnership _4963___v118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4964_recIdents;
          RAST._IExpr _out2190;
          DCOMP._IOwnership _out2191;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2192;
          DCOMP.COMP.GenExpr(_4961_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2190, out _out2191, out _out2192);
          _4962_recursiveGen = _out2190;
          _4963___v118 = _out2191;
          _4964_recIdents = _out2192;
          readIdents = _4964_recIdents;
          r = RAST.Expr.create_Call((_4962_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2193;
          DCOMP._IOwnership _out2194;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2193, out _out2194);
          r = _out2193;
          resultingOwnership = _out2194;
          return ;
        }
      } else if (_source183.is_Select) {
        DAST._IExpression _4965___mcc_h48 = _source183.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4966___mcc_h49 = _source183.dtor_field;
        bool _4967___mcc_h50 = _source183.dtor_isConstant;
        bool _4968___mcc_h51 = _source183.dtor_onDatatype;
        DAST._IExpression _source186 = _4965___mcc_h48;
        if (_source186.is_Literal) {
          DAST._ILiteral _4969___mcc_h52 = _source186.dtor_Literal_a0;
          bool _4970_isDatatype = _4968___mcc_h51;
          bool _4971_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4972_field = _4966___mcc_h49;
          DAST._IExpression _4973_on = _4965___mcc_h48;
          {
            RAST._IExpr _4974_onExpr;
            DCOMP._IOwnership _4975_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4976_recIdents;
            RAST._IExpr _out2195;
            DCOMP._IOwnership _out2196;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2197;
            DCOMP.COMP.GenExpr(_4973_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2195, out _out2196, out _out2197);
            _4974_onExpr = _out2195;
            _4975_onOwned = _out2196;
            _4976_recIdents = _out2197;
            if ((_4970_isDatatype) || (_4971_isConstant)) {
              r = RAST.Expr.create_Call((_4974_onExpr).Sel(DCOMP.__default.escapeIdent(_4972_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2198;
              DCOMP._IOwnership _out2199;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2198, out _out2199);
              r = _out2198;
              resultingOwnership = _out2199;
            } else {
              Dafny.ISequence<Dafny.Rune> _4977_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4977_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4974_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4972_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2200;
              DCOMP._IOwnership _out2201;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4977_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2200, out _out2201);
              r = _out2200;
              resultingOwnership = _out2201;
            }
            readIdents = _4976_recIdents;
            return ;
          }
        } else if (_source186.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _4978___mcc_h54 = _source186.dtor_Ident_a0;
          bool _4979_isDatatype = _4968___mcc_h51;
          bool _4980_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4981_field = _4966___mcc_h49;
          DAST._IExpression _4982_on = _4965___mcc_h48;
          {
            RAST._IExpr _4983_onExpr;
            DCOMP._IOwnership _4984_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4985_recIdents;
            RAST._IExpr _out2202;
            DCOMP._IOwnership _out2203;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2204;
            DCOMP.COMP.GenExpr(_4982_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2202, out _out2203, out _out2204);
            _4983_onExpr = _out2202;
            _4984_onOwned = _out2203;
            _4985_recIdents = _out2204;
            if ((_4979_isDatatype) || (_4980_isConstant)) {
              r = RAST.Expr.create_Call((_4983_onExpr).Sel(DCOMP.__default.escapeIdent(_4981_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2205;
              DCOMP._IOwnership _out2206;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2205, out _out2206);
              r = _out2205;
              resultingOwnership = _out2206;
            } else {
              Dafny.ISequence<Dafny.Rune> _4986_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4986_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4983_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4981_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2207;
              DCOMP._IOwnership _out2208;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_4986_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2207, out _out2208);
              r = _out2207;
              resultingOwnership = _out2208;
            }
            readIdents = _4985_recIdents;
            return ;
          }
        } else if (_source186.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4987___mcc_h56 = _source186.dtor_Companion_a0;
          bool _4988_isDatatype = _4968___mcc_h51;
          bool _4989_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4990_field = _4966___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4991_c = _4987___mcc_h56;
          {
            RAST._IExpr _4992_onExpr;
            DCOMP._IOwnership _4993_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4994_recIdents;
            RAST._IExpr _out2209;
            DCOMP._IOwnership _out2210;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2211;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_4991_c), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2209, out _out2210, out _out2211);
            _4992_onExpr = _out2209;
            _4993_onOwned = _out2210;
            _4994_recIdents = _out2211;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4992_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4990_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out2212;
            DCOMP._IOwnership _out2213;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2212, out _out2213);
            r = _out2212;
            resultingOwnership = _out2213;
            readIdents = _4994_recIdents;
            return ;
          }
        } else if (_source186.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _4995___mcc_h58 = _source186.dtor_Tuple_a0;
          bool _4996_isDatatype = _4968___mcc_h51;
          bool _4997_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _4998_field = _4966___mcc_h49;
          DAST._IExpression _4999_on = _4965___mcc_h48;
          {
            RAST._IExpr _5000_onExpr;
            DCOMP._IOwnership _5001_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5002_recIdents;
            RAST._IExpr _out2214;
            DCOMP._IOwnership _out2215;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2216;
            DCOMP.COMP.GenExpr(_4999_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2214, out _out2215, out _out2216);
            _5000_onExpr = _out2214;
            _5001_onOwned = _out2215;
            _5002_recIdents = _out2216;
            if ((_4996_isDatatype) || (_4997_isConstant)) {
              r = RAST.Expr.create_Call((_5000_onExpr).Sel(DCOMP.__default.escapeIdent(_4998_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2217;
              DCOMP._IOwnership _out2218;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2217, out _out2218);
              r = _out2217;
              resultingOwnership = _out2218;
            } else {
              Dafny.ISequence<Dafny.Rune> _5003_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5003_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5000_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4998_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2219;
              DCOMP._IOwnership _out2220;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5003_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2219, out _out2220);
              r = _out2219;
              resultingOwnership = _out2220;
            }
            readIdents = _5002_recIdents;
            return ;
          }
        } else if (_source186.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5004___mcc_h60 = _source186.dtor_path;
          Dafny.ISequence<DAST._IType> _5005___mcc_h61 = _source186.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5006___mcc_h62 = _source186.dtor_args;
          bool _5007_isDatatype = _4968___mcc_h51;
          bool _5008_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5009_field = _4966___mcc_h49;
          DAST._IExpression _5010_on = _4965___mcc_h48;
          {
            RAST._IExpr _5011_onExpr;
            DCOMP._IOwnership _5012_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5013_recIdents;
            RAST._IExpr _out2221;
            DCOMP._IOwnership _out2222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2223;
            DCOMP.COMP.GenExpr(_5010_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2221, out _out2222, out _out2223);
            _5011_onExpr = _out2221;
            _5012_onOwned = _out2222;
            _5013_recIdents = _out2223;
            if ((_5007_isDatatype) || (_5008_isConstant)) {
              r = RAST.Expr.create_Call((_5011_onExpr).Sel(DCOMP.__default.escapeIdent(_5009_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2224;
              DCOMP._IOwnership _out2225;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2224, out _out2225);
              r = _out2224;
              resultingOwnership = _out2225;
            } else {
              Dafny.ISequence<Dafny.Rune> _5014_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5011_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5009_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2226;
              DCOMP._IOwnership _out2227;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5014_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2226, out _out2227);
              r = _out2226;
              resultingOwnership = _out2227;
            }
            readIdents = _5013_recIdents;
            return ;
          }
        } else if (_source186.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _5015___mcc_h66 = _source186.dtor_dims;
          DAST._IType _5016___mcc_h67 = _source186.dtor_typ;
          bool _5017_isDatatype = _4968___mcc_h51;
          bool _5018_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5019_field = _4966___mcc_h49;
          DAST._IExpression _5020_on = _4965___mcc_h48;
          {
            RAST._IExpr _5021_onExpr;
            DCOMP._IOwnership _5022_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5023_recIdents;
            RAST._IExpr _out2228;
            DCOMP._IOwnership _out2229;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2230;
            DCOMP.COMP.GenExpr(_5020_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2228, out _out2229, out _out2230);
            _5021_onExpr = _out2228;
            _5022_onOwned = _out2229;
            _5023_recIdents = _out2230;
            if ((_5017_isDatatype) || (_5018_isConstant)) {
              r = RAST.Expr.create_Call((_5021_onExpr).Sel(DCOMP.__default.escapeIdent(_5019_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2231;
              DCOMP._IOwnership _out2232;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2231, out _out2232);
              r = _out2231;
              resultingOwnership = _out2232;
            } else {
              Dafny.ISequence<Dafny.Rune> _5024_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5024_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5021_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5019_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2233;
              DCOMP._IOwnership _out2234;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5024_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2233, out _out2234);
              r = _out2233;
              resultingOwnership = _out2234;
            }
            readIdents = _5023_recIdents;
            return ;
          }
        } else if (_source186.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5025___mcc_h70 = _source186.dtor_path;
          Dafny.ISequence<DAST._IType> _5026___mcc_h71 = _source186.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _5027___mcc_h72 = _source186.dtor_variant;
          bool _5028___mcc_h73 = _source186.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5029___mcc_h74 = _source186.dtor_contents;
          bool _5030_isDatatype = _4968___mcc_h51;
          bool _5031_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5032_field = _4966___mcc_h49;
          DAST._IExpression _5033_on = _4965___mcc_h48;
          {
            RAST._IExpr _5034_onExpr;
            DCOMP._IOwnership _5035_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5036_recIdents;
            RAST._IExpr _out2235;
            DCOMP._IOwnership _out2236;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2237;
            DCOMP.COMP.GenExpr(_5033_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2235, out _out2236, out _out2237);
            _5034_onExpr = _out2235;
            _5035_onOwned = _out2236;
            _5036_recIdents = _out2237;
            if ((_5030_isDatatype) || (_5031_isConstant)) {
              r = RAST.Expr.create_Call((_5034_onExpr).Sel(DCOMP.__default.escapeIdent(_5032_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2238;
              DCOMP._IOwnership _out2239;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2238, out _out2239);
              r = _out2238;
              resultingOwnership = _out2239;
            } else {
              Dafny.ISequence<Dafny.Rune> _5037_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5037_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5034_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5032_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2240;
              DCOMP._IOwnership _out2241;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5037_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2240, out _out2241);
              r = _out2240;
              resultingOwnership = _out2241;
            }
            readIdents = _5036_recIdents;
            return ;
          }
        } else if (_source186.is_Convert) {
          DAST._IExpression _5038___mcc_h80 = _source186.dtor_value;
          DAST._IType _5039___mcc_h81 = _source186.dtor_from;
          DAST._IType _5040___mcc_h82 = _source186.dtor_typ;
          bool _5041_isDatatype = _4968___mcc_h51;
          bool _5042_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5043_field = _4966___mcc_h49;
          DAST._IExpression _5044_on = _4965___mcc_h48;
          {
            RAST._IExpr _5045_onExpr;
            DCOMP._IOwnership _5046_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5047_recIdents;
            RAST._IExpr _out2242;
            DCOMP._IOwnership _out2243;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2244;
            DCOMP.COMP.GenExpr(_5044_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2242, out _out2243, out _out2244);
            _5045_onExpr = _out2242;
            _5046_onOwned = _out2243;
            _5047_recIdents = _out2244;
            if ((_5041_isDatatype) || (_5042_isConstant)) {
              r = RAST.Expr.create_Call((_5045_onExpr).Sel(DCOMP.__default.escapeIdent(_5043_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2245;
              DCOMP._IOwnership _out2246;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2245, out _out2246);
              r = _out2245;
              resultingOwnership = _out2246;
            } else {
              Dafny.ISequence<Dafny.Rune> _5048_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5048_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5045_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5043_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2247;
              DCOMP._IOwnership _out2248;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5048_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2247, out _out2248);
              r = _out2247;
              resultingOwnership = _out2248;
            }
            readIdents = _5047_recIdents;
            return ;
          }
        } else if (_source186.is_SeqConstruct) {
          DAST._IExpression _5049___mcc_h86 = _source186.dtor_length;
          DAST._IExpression _5050___mcc_h87 = _source186.dtor_elem;
          bool _5051_isDatatype = _4968___mcc_h51;
          bool _5052_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5053_field = _4966___mcc_h49;
          DAST._IExpression _5054_on = _4965___mcc_h48;
          {
            RAST._IExpr _5055_onExpr;
            DCOMP._IOwnership _5056_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5057_recIdents;
            RAST._IExpr _out2249;
            DCOMP._IOwnership _out2250;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2251;
            DCOMP.COMP.GenExpr(_5054_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2249, out _out2250, out _out2251);
            _5055_onExpr = _out2249;
            _5056_onOwned = _out2250;
            _5057_recIdents = _out2251;
            if ((_5051_isDatatype) || (_5052_isConstant)) {
              r = RAST.Expr.create_Call((_5055_onExpr).Sel(DCOMP.__default.escapeIdent(_5053_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2252;
              DCOMP._IOwnership _out2253;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2252, out _out2253);
              r = _out2252;
              resultingOwnership = _out2253;
            } else {
              Dafny.ISequence<Dafny.Rune> _5058_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5058_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5055_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5053_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2254;
              DCOMP._IOwnership _out2255;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5058_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2254, out _out2255);
              r = _out2254;
              resultingOwnership = _out2255;
            }
            readIdents = _5057_recIdents;
            return ;
          }
        } else if (_source186.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _5059___mcc_h90 = _source186.dtor_elements;
          DAST._IType _5060___mcc_h91 = _source186.dtor_typ;
          bool _5061_isDatatype = _4968___mcc_h51;
          bool _5062_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5063_field = _4966___mcc_h49;
          DAST._IExpression _5064_on = _4965___mcc_h48;
          {
            RAST._IExpr _5065_onExpr;
            DCOMP._IOwnership _5066_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5067_recIdents;
            RAST._IExpr _out2256;
            DCOMP._IOwnership _out2257;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2258;
            DCOMP.COMP.GenExpr(_5064_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2256, out _out2257, out _out2258);
            _5065_onExpr = _out2256;
            _5066_onOwned = _out2257;
            _5067_recIdents = _out2258;
            if ((_5061_isDatatype) || (_5062_isConstant)) {
              r = RAST.Expr.create_Call((_5065_onExpr).Sel(DCOMP.__default.escapeIdent(_5063_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2259;
              DCOMP._IOwnership _out2260;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2259, out _out2260);
              r = _out2259;
              resultingOwnership = _out2260;
            } else {
              Dafny.ISequence<Dafny.Rune> _5068_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5065_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5063_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2261;
              DCOMP._IOwnership _out2262;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5068_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2261, out _out2262);
              r = _out2261;
              resultingOwnership = _out2262;
            }
            readIdents = _5067_recIdents;
            return ;
          }
        } else if (_source186.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _5069___mcc_h94 = _source186.dtor_elements;
          bool _5070_isDatatype = _4968___mcc_h51;
          bool _5071_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5072_field = _4966___mcc_h49;
          DAST._IExpression _5073_on = _4965___mcc_h48;
          {
            RAST._IExpr _5074_onExpr;
            DCOMP._IOwnership _5075_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5076_recIdents;
            RAST._IExpr _out2263;
            DCOMP._IOwnership _out2264;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2265;
            DCOMP.COMP.GenExpr(_5073_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2263, out _out2264, out _out2265);
            _5074_onExpr = _out2263;
            _5075_onOwned = _out2264;
            _5076_recIdents = _out2265;
            if ((_5070_isDatatype) || (_5071_isConstant)) {
              r = RAST.Expr.create_Call((_5074_onExpr).Sel(DCOMP.__default.escapeIdent(_5072_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2266;
              DCOMP._IOwnership _out2267;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2266, out _out2267);
              r = _out2266;
              resultingOwnership = _out2267;
            } else {
              Dafny.ISequence<Dafny.Rune> _5077_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5077_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5074_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5072_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2268;
              DCOMP._IOwnership _out2269;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5077_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2268, out _out2269);
              r = _out2268;
              resultingOwnership = _out2269;
            }
            readIdents = _5076_recIdents;
            return ;
          }
        } else if (_source186.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _5078___mcc_h96 = _source186.dtor_elements;
          bool _5079_isDatatype = _4968___mcc_h51;
          bool _5080_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5081_field = _4966___mcc_h49;
          DAST._IExpression _5082_on = _4965___mcc_h48;
          {
            RAST._IExpr _5083_onExpr;
            DCOMP._IOwnership _5084_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5085_recIdents;
            RAST._IExpr _out2270;
            DCOMP._IOwnership _out2271;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2272;
            DCOMP.COMP.GenExpr(_5082_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2270, out _out2271, out _out2272);
            _5083_onExpr = _out2270;
            _5084_onOwned = _out2271;
            _5085_recIdents = _out2272;
            if ((_5079_isDatatype) || (_5080_isConstant)) {
              r = RAST.Expr.create_Call((_5083_onExpr).Sel(DCOMP.__default.escapeIdent(_5081_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2273;
              DCOMP._IOwnership _out2274;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2273, out _out2274);
              r = _out2273;
              resultingOwnership = _out2274;
            } else {
              Dafny.ISequence<Dafny.Rune> _5086_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5086_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5083_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5081_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2275;
              DCOMP._IOwnership _out2276;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5086_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2275, out _out2276);
              r = _out2275;
              resultingOwnership = _out2276;
            }
            readIdents = _5085_recIdents;
            return ;
          }
        } else if (_source186.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5087___mcc_h98 = _source186.dtor_mapElems;
          bool _5088_isDatatype = _4968___mcc_h51;
          bool _5089_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5090_field = _4966___mcc_h49;
          DAST._IExpression _5091_on = _4965___mcc_h48;
          {
            RAST._IExpr _5092_onExpr;
            DCOMP._IOwnership _5093_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5094_recIdents;
            RAST._IExpr _out2277;
            DCOMP._IOwnership _out2278;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2279;
            DCOMP.COMP.GenExpr(_5091_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2277, out _out2278, out _out2279);
            _5092_onExpr = _out2277;
            _5093_onOwned = _out2278;
            _5094_recIdents = _out2279;
            if ((_5088_isDatatype) || (_5089_isConstant)) {
              r = RAST.Expr.create_Call((_5092_onExpr).Sel(DCOMP.__default.escapeIdent(_5090_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2280;
              DCOMP._IOwnership _out2281;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2280, out _out2281);
              r = _out2280;
              resultingOwnership = _out2281;
            } else {
              Dafny.ISequence<Dafny.Rune> _5095_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5095_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5092_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5090_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2282;
              DCOMP._IOwnership _out2283;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5095_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2282, out _out2283);
              r = _out2282;
              resultingOwnership = _out2283;
            }
            readIdents = _5094_recIdents;
            return ;
          }
        } else if (_source186.is_MapBuilder) {
          DAST._IType _5096___mcc_h100 = _source186.dtor_keyType;
          DAST._IType _5097___mcc_h101 = _source186.dtor_valueType;
          bool _5098_isDatatype = _4968___mcc_h51;
          bool _5099_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5100_field = _4966___mcc_h49;
          DAST._IExpression _5101_on = _4965___mcc_h48;
          {
            RAST._IExpr _5102_onExpr;
            DCOMP._IOwnership _5103_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5104_recIdents;
            RAST._IExpr _out2284;
            DCOMP._IOwnership _out2285;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2286;
            DCOMP.COMP.GenExpr(_5101_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2284, out _out2285, out _out2286);
            _5102_onExpr = _out2284;
            _5103_onOwned = _out2285;
            _5104_recIdents = _out2286;
            if ((_5098_isDatatype) || (_5099_isConstant)) {
              r = RAST.Expr.create_Call((_5102_onExpr).Sel(DCOMP.__default.escapeIdent(_5100_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2287;
              DCOMP._IOwnership _out2288;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2287, out _out2288);
              r = _out2287;
              resultingOwnership = _out2288;
            } else {
              Dafny.ISequence<Dafny.Rune> _5105_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5105_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5102_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5100_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2289;
              DCOMP._IOwnership _out2290;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5105_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2289, out _out2290);
              r = _out2289;
              resultingOwnership = _out2290;
            }
            readIdents = _5104_recIdents;
            return ;
          }
        } else if (_source186.is_SeqUpdate) {
          DAST._IExpression _5106___mcc_h104 = _source186.dtor_expr;
          DAST._IExpression _5107___mcc_h105 = _source186.dtor_indexExpr;
          DAST._IExpression _5108___mcc_h106 = _source186.dtor_value;
          bool _5109_isDatatype = _4968___mcc_h51;
          bool _5110_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5111_field = _4966___mcc_h49;
          DAST._IExpression _5112_on = _4965___mcc_h48;
          {
            RAST._IExpr _5113_onExpr;
            DCOMP._IOwnership _5114_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5115_recIdents;
            RAST._IExpr _out2291;
            DCOMP._IOwnership _out2292;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2293;
            DCOMP.COMP.GenExpr(_5112_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2291, out _out2292, out _out2293);
            _5113_onExpr = _out2291;
            _5114_onOwned = _out2292;
            _5115_recIdents = _out2293;
            if ((_5109_isDatatype) || (_5110_isConstant)) {
              r = RAST.Expr.create_Call((_5113_onExpr).Sel(DCOMP.__default.escapeIdent(_5111_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2294;
              DCOMP._IOwnership _out2295;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2294, out _out2295);
              r = _out2294;
              resultingOwnership = _out2295;
            } else {
              Dafny.ISequence<Dafny.Rune> _5116_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5116_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5113_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5111_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2296;
              DCOMP._IOwnership _out2297;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5116_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2296, out _out2297);
              r = _out2296;
              resultingOwnership = _out2297;
            }
            readIdents = _5115_recIdents;
            return ;
          }
        } else if (_source186.is_MapUpdate) {
          DAST._IExpression _5117___mcc_h110 = _source186.dtor_expr;
          DAST._IExpression _5118___mcc_h111 = _source186.dtor_indexExpr;
          DAST._IExpression _5119___mcc_h112 = _source186.dtor_value;
          bool _5120_isDatatype = _4968___mcc_h51;
          bool _5121_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5122_field = _4966___mcc_h49;
          DAST._IExpression _5123_on = _4965___mcc_h48;
          {
            RAST._IExpr _5124_onExpr;
            DCOMP._IOwnership _5125_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5126_recIdents;
            RAST._IExpr _out2298;
            DCOMP._IOwnership _out2299;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2300;
            DCOMP.COMP.GenExpr(_5123_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2298, out _out2299, out _out2300);
            _5124_onExpr = _out2298;
            _5125_onOwned = _out2299;
            _5126_recIdents = _out2300;
            if ((_5120_isDatatype) || (_5121_isConstant)) {
              r = RAST.Expr.create_Call((_5124_onExpr).Sel(DCOMP.__default.escapeIdent(_5122_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2301;
              DCOMP._IOwnership _out2302;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2301, out _out2302);
              r = _out2301;
              resultingOwnership = _out2302;
            } else {
              Dafny.ISequence<Dafny.Rune> _5127_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5127_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5124_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5122_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2303;
              DCOMP._IOwnership _out2304;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5127_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2303, out _out2304);
              r = _out2303;
              resultingOwnership = _out2304;
            }
            readIdents = _5126_recIdents;
            return ;
          }
        } else if (_source186.is_SetBuilder) {
          DAST._IType _5128___mcc_h116 = _source186.dtor_elemType;
          bool _5129_isDatatype = _4968___mcc_h51;
          bool _5130_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5131_field = _4966___mcc_h49;
          DAST._IExpression _5132_on = _4965___mcc_h48;
          {
            RAST._IExpr _5133_onExpr;
            DCOMP._IOwnership _5134_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5135_recIdents;
            RAST._IExpr _out2305;
            DCOMP._IOwnership _out2306;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2307;
            DCOMP.COMP.GenExpr(_5132_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2305, out _out2306, out _out2307);
            _5133_onExpr = _out2305;
            _5134_onOwned = _out2306;
            _5135_recIdents = _out2307;
            if ((_5129_isDatatype) || (_5130_isConstant)) {
              r = RAST.Expr.create_Call((_5133_onExpr).Sel(DCOMP.__default.escapeIdent(_5131_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2308;
              DCOMP._IOwnership _out2309;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2308, out _out2309);
              r = _out2308;
              resultingOwnership = _out2309;
            } else {
              Dafny.ISequence<Dafny.Rune> _5136_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5136_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5133_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5131_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2310;
              DCOMP._IOwnership _out2311;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5136_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2310, out _out2311);
              r = _out2310;
              resultingOwnership = _out2311;
            }
            readIdents = _5135_recIdents;
            return ;
          }
        } else if (_source186.is_ToMultiset) {
          DAST._IExpression _5137___mcc_h118 = _source186.dtor_ToMultiset_a0;
          bool _5138_isDatatype = _4968___mcc_h51;
          bool _5139_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5140_field = _4966___mcc_h49;
          DAST._IExpression _5141_on = _4965___mcc_h48;
          {
            RAST._IExpr _5142_onExpr;
            DCOMP._IOwnership _5143_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5144_recIdents;
            RAST._IExpr _out2312;
            DCOMP._IOwnership _out2313;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2314;
            DCOMP.COMP.GenExpr(_5141_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2312, out _out2313, out _out2314);
            _5142_onExpr = _out2312;
            _5143_onOwned = _out2313;
            _5144_recIdents = _out2314;
            if ((_5138_isDatatype) || (_5139_isConstant)) {
              r = RAST.Expr.create_Call((_5142_onExpr).Sel(DCOMP.__default.escapeIdent(_5140_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2315;
              DCOMP._IOwnership _out2316;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2315, out _out2316);
              r = _out2315;
              resultingOwnership = _out2316;
            } else {
              Dafny.ISequence<Dafny.Rune> _5145_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5145_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5142_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5140_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2317;
              DCOMP._IOwnership _out2318;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5145_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2317, out _out2318);
              r = _out2317;
              resultingOwnership = _out2318;
            }
            readIdents = _5144_recIdents;
            return ;
          }
        } else if (_source186.is_This) {
          bool _5146_isDatatype = _4968___mcc_h51;
          bool _5147_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5148_field = _4966___mcc_h49;
          DAST._IExpression _5149_on = _4965___mcc_h48;
          {
            RAST._IExpr _5150_onExpr;
            DCOMP._IOwnership _5151_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5152_recIdents;
            RAST._IExpr _out2319;
            DCOMP._IOwnership _out2320;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2321;
            DCOMP.COMP.GenExpr(_5149_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2319, out _out2320, out _out2321);
            _5150_onExpr = _out2319;
            _5151_onOwned = _out2320;
            _5152_recIdents = _out2321;
            if ((_5146_isDatatype) || (_5147_isConstant)) {
              r = RAST.Expr.create_Call((_5150_onExpr).Sel(DCOMP.__default.escapeIdent(_5148_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2322;
              DCOMP._IOwnership _out2323;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2322, out _out2323);
              r = _out2322;
              resultingOwnership = _out2323;
            } else {
              Dafny.ISequence<Dafny.Rune> _5153_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5153_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5150_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5148_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2324;
              DCOMP._IOwnership _out2325;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5153_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2324, out _out2325);
              r = _out2324;
              resultingOwnership = _out2325;
            }
            readIdents = _5152_recIdents;
            return ;
          }
        } else if (_source186.is_Ite) {
          DAST._IExpression _5154___mcc_h120 = _source186.dtor_cond;
          DAST._IExpression _5155___mcc_h121 = _source186.dtor_thn;
          DAST._IExpression _5156___mcc_h122 = _source186.dtor_els;
          bool _5157_isDatatype = _4968___mcc_h51;
          bool _5158_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5159_field = _4966___mcc_h49;
          DAST._IExpression _5160_on = _4965___mcc_h48;
          {
            RAST._IExpr _5161_onExpr;
            DCOMP._IOwnership _5162_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5163_recIdents;
            RAST._IExpr _out2326;
            DCOMP._IOwnership _out2327;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2328;
            DCOMP.COMP.GenExpr(_5160_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2326, out _out2327, out _out2328);
            _5161_onExpr = _out2326;
            _5162_onOwned = _out2327;
            _5163_recIdents = _out2328;
            if ((_5157_isDatatype) || (_5158_isConstant)) {
              r = RAST.Expr.create_Call((_5161_onExpr).Sel(DCOMP.__default.escapeIdent(_5159_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2329;
              DCOMP._IOwnership _out2330;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2329, out _out2330);
              r = _out2329;
              resultingOwnership = _out2330;
            } else {
              Dafny.ISequence<Dafny.Rune> _5164_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5164_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5161_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5159_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2331;
              DCOMP._IOwnership _out2332;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5164_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2331, out _out2332);
              r = _out2331;
              resultingOwnership = _out2332;
            }
            readIdents = _5163_recIdents;
            return ;
          }
        } else if (_source186.is_UnOp) {
          DAST._IUnaryOp _5165___mcc_h126 = _source186.dtor_unOp;
          DAST._IExpression _5166___mcc_h127 = _source186.dtor_expr;
          DAST.Format._IUnaryOpFormat _5167___mcc_h128 = _source186.dtor_format1;
          bool _5168_isDatatype = _4968___mcc_h51;
          bool _5169_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5170_field = _4966___mcc_h49;
          DAST._IExpression _5171_on = _4965___mcc_h48;
          {
            RAST._IExpr _5172_onExpr;
            DCOMP._IOwnership _5173_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5174_recIdents;
            RAST._IExpr _out2333;
            DCOMP._IOwnership _out2334;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2335;
            DCOMP.COMP.GenExpr(_5171_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2333, out _out2334, out _out2335);
            _5172_onExpr = _out2333;
            _5173_onOwned = _out2334;
            _5174_recIdents = _out2335;
            if ((_5168_isDatatype) || (_5169_isConstant)) {
              r = RAST.Expr.create_Call((_5172_onExpr).Sel(DCOMP.__default.escapeIdent(_5170_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2336;
              DCOMP._IOwnership _out2337;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2336, out _out2337);
              r = _out2336;
              resultingOwnership = _out2337;
            } else {
              Dafny.ISequence<Dafny.Rune> _5175_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5175_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5172_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5170_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2338;
              DCOMP._IOwnership _out2339;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5175_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2338, out _out2339);
              r = _out2338;
              resultingOwnership = _out2339;
            }
            readIdents = _5174_recIdents;
            return ;
          }
        } else if (_source186.is_BinOp) {
          DAST._IBinOp _5176___mcc_h132 = _source186.dtor_op;
          DAST._IExpression _5177___mcc_h133 = _source186.dtor_left;
          DAST._IExpression _5178___mcc_h134 = _source186.dtor_right;
          DAST.Format._IBinaryOpFormat _5179___mcc_h135 = _source186.dtor_format2;
          bool _5180_isDatatype = _4968___mcc_h51;
          bool _5181_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5182_field = _4966___mcc_h49;
          DAST._IExpression _5183_on = _4965___mcc_h48;
          {
            RAST._IExpr _5184_onExpr;
            DCOMP._IOwnership _5185_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5186_recIdents;
            RAST._IExpr _out2340;
            DCOMP._IOwnership _out2341;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2342;
            DCOMP.COMP.GenExpr(_5183_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2340, out _out2341, out _out2342);
            _5184_onExpr = _out2340;
            _5185_onOwned = _out2341;
            _5186_recIdents = _out2342;
            if ((_5180_isDatatype) || (_5181_isConstant)) {
              r = RAST.Expr.create_Call((_5184_onExpr).Sel(DCOMP.__default.escapeIdent(_5182_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2343;
              DCOMP._IOwnership _out2344;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2343, out _out2344);
              r = _out2343;
              resultingOwnership = _out2344;
            } else {
              Dafny.ISequence<Dafny.Rune> _5187_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5187_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5184_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5182_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2345;
              DCOMP._IOwnership _out2346;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5187_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2345, out _out2346);
              r = _out2345;
              resultingOwnership = _out2346;
            }
            readIdents = _5186_recIdents;
            return ;
          }
        } else if (_source186.is_ArrayLen) {
          DAST._IExpression _5188___mcc_h140 = _source186.dtor_expr;
          BigInteger _5189___mcc_h141 = _source186.dtor_dim;
          bool _5190_isDatatype = _4968___mcc_h51;
          bool _5191_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5192_field = _4966___mcc_h49;
          DAST._IExpression _5193_on = _4965___mcc_h48;
          {
            RAST._IExpr _5194_onExpr;
            DCOMP._IOwnership _5195_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5196_recIdents;
            RAST._IExpr _out2347;
            DCOMP._IOwnership _out2348;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2349;
            DCOMP.COMP.GenExpr(_5193_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2347, out _out2348, out _out2349);
            _5194_onExpr = _out2347;
            _5195_onOwned = _out2348;
            _5196_recIdents = _out2349;
            if ((_5190_isDatatype) || (_5191_isConstant)) {
              r = RAST.Expr.create_Call((_5194_onExpr).Sel(DCOMP.__default.escapeIdent(_5192_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2350;
              DCOMP._IOwnership _out2351;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2350, out _out2351);
              r = _out2350;
              resultingOwnership = _out2351;
            } else {
              Dafny.ISequence<Dafny.Rune> _5197_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5197_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5194_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5192_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2352;
              DCOMP._IOwnership _out2353;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5197_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2352, out _out2353);
              r = _out2352;
              resultingOwnership = _out2353;
            }
            readIdents = _5196_recIdents;
            return ;
          }
        } else if (_source186.is_MapKeys) {
          DAST._IExpression _5198___mcc_h144 = _source186.dtor_expr;
          bool _5199_isDatatype = _4968___mcc_h51;
          bool _5200_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5201_field = _4966___mcc_h49;
          DAST._IExpression _5202_on = _4965___mcc_h48;
          {
            RAST._IExpr _5203_onExpr;
            DCOMP._IOwnership _5204_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5205_recIdents;
            RAST._IExpr _out2354;
            DCOMP._IOwnership _out2355;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2356;
            DCOMP.COMP.GenExpr(_5202_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2354, out _out2355, out _out2356);
            _5203_onExpr = _out2354;
            _5204_onOwned = _out2355;
            _5205_recIdents = _out2356;
            if ((_5199_isDatatype) || (_5200_isConstant)) {
              r = RAST.Expr.create_Call((_5203_onExpr).Sel(DCOMP.__default.escapeIdent(_5201_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2357;
              DCOMP._IOwnership _out2358;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2357, out _out2358);
              r = _out2357;
              resultingOwnership = _out2358;
            } else {
              Dafny.ISequence<Dafny.Rune> _5206_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5206_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5203_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5201_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2359;
              DCOMP._IOwnership _out2360;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5206_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2359, out _out2360);
              r = _out2359;
              resultingOwnership = _out2360;
            }
            readIdents = _5205_recIdents;
            return ;
          }
        } else if (_source186.is_MapValues) {
          DAST._IExpression _5207___mcc_h146 = _source186.dtor_expr;
          bool _5208_isDatatype = _4968___mcc_h51;
          bool _5209_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5210_field = _4966___mcc_h49;
          DAST._IExpression _5211_on = _4965___mcc_h48;
          {
            RAST._IExpr _5212_onExpr;
            DCOMP._IOwnership _5213_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5214_recIdents;
            RAST._IExpr _out2361;
            DCOMP._IOwnership _out2362;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2363;
            DCOMP.COMP.GenExpr(_5211_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2361, out _out2362, out _out2363);
            _5212_onExpr = _out2361;
            _5213_onOwned = _out2362;
            _5214_recIdents = _out2363;
            if ((_5208_isDatatype) || (_5209_isConstant)) {
              r = RAST.Expr.create_Call((_5212_onExpr).Sel(DCOMP.__default.escapeIdent(_5210_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2364;
              DCOMP._IOwnership _out2365;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2364, out _out2365);
              r = _out2364;
              resultingOwnership = _out2365;
            } else {
              Dafny.ISequence<Dafny.Rune> _5215_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5212_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5210_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2366;
              DCOMP._IOwnership _out2367;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5215_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2366, out _out2367);
              r = _out2366;
              resultingOwnership = _out2367;
            }
            readIdents = _5214_recIdents;
            return ;
          }
        } else if (_source186.is_Select) {
          DAST._IExpression _5216___mcc_h148 = _source186.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _5217___mcc_h149 = _source186.dtor_field;
          bool _5218___mcc_h150 = _source186.dtor_isConstant;
          bool _5219___mcc_h151 = _source186.dtor_onDatatype;
          bool _5220_isDatatype = _4968___mcc_h51;
          bool _5221_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5222_field = _4966___mcc_h49;
          DAST._IExpression _5223_on = _4965___mcc_h48;
          {
            RAST._IExpr _5224_onExpr;
            DCOMP._IOwnership _5225_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5226_recIdents;
            RAST._IExpr _out2368;
            DCOMP._IOwnership _out2369;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2370;
            DCOMP.COMP.GenExpr(_5223_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2368, out _out2369, out _out2370);
            _5224_onExpr = _out2368;
            _5225_onOwned = _out2369;
            _5226_recIdents = _out2370;
            if ((_5220_isDatatype) || (_5221_isConstant)) {
              r = RAST.Expr.create_Call((_5224_onExpr).Sel(DCOMP.__default.escapeIdent(_5222_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2371;
              DCOMP._IOwnership _out2372;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2371, out _out2372);
              r = _out2371;
              resultingOwnership = _out2372;
            } else {
              Dafny.ISequence<Dafny.Rune> _5227_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5224_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5222_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2373;
              DCOMP._IOwnership _out2374;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5227_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2373, out _out2374);
              r = _out2373;
              resultingOwnership = _out2374;
            }
            readIdents = _5226_recIdents;
            return ;
          }
        } else if (_source186.is_SelectFn) {
          DAST._IExpression _5228___mcc_h156 = _source186.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _5229___mcc_h157 = _source186.dtor_field;
          bool _5230___mcc_h158 = _source186.dtor_onDatatype;
          bool _5231___mcc_h159 = _source186.dtor_isStatic;
          BigInteger _5232___mcc_h160 = _source186.dtor_arity;
          bool _5233_isDatatype = _4968___mcc_h51;
          bool _5234_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5235_field = _4966___mcc_h49;
          DAST._IExpression _5236_on = _4965___mcc_h48;
          {
            RAST._IExpr _5237_onExpr;
            DCOMP._IOwnership _5238_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5239_recIdents;
            RAST._IExpr _out2375;
            DCOMP._IOwnership _out2376;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2377;
            DCOMP.COMP.GenExpr(_5236_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2375, out _out2376, out _out2377);
            _5237_onExpr = _out2375;
            _5238_onOwned = _out2376;
            _5239_recIdents = _out2377;
            if ((_5233_isDatatype) || (_5234_isConstant)) {
              r = RAST.Expr.create_Call((_5237_onExpr).Sel(DCOMP.__default.escapeIdent(_5235_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2378;
              DCOMP._IOwnership _out2379;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2378, out _out2379);
              r = _out2378;
              resultingOwnership = _out2379;
            } else {
              Dafny.ISequence<Dafny.Rune> _5240_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5240_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5237_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5235_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2380;
              DCOMP._IOwnership _out2381;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5240_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2380, out _out2381);
              r = _out2380;
              resultingOwnership = _out2381;
            }
            readIdents = _5239_recIdents;
            return ;
          }
        } else if (_source186.is_Index) {
          DAST._IExpression _5241___mcc_h166 = _source186.dtor_expr;
          DAST._ICollKind _5242___mcc_h167 = _source186.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _5243___mcc_h168 = _source186.dtor_indices;
          bool _5244_isDatatype = _4968___mcc_h51;
          bool _5245_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5246_field = _4966___mcc_h49;
          DAST._IExpression _5247_on = _4965___mcc_h48;
          {
            RAST._IExpr _5248_onExpr;
            DCOMP._IOwnership _5249_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5250_recIdents;
            RAST._IExpr _out2382;
            DCOMP._IOwnership _out2383;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2384;
            DCOMP.COMP.GenExpr(_5247_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2382, out _out2383, out _out2384);
            _5248_onExpr = _out2382;
            _5249_onOwned = _out2383;
            _5250_recIdents = _out2384;
            if ((_5244_isDatatype) || (_5245_isConstant)) {
              r = RAST.Expr.create_Call((_5248_onExpr).Sel(DCOMP.__default.escapeIdent(_5246_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2385;
              DCOMP._IOwnership _out2386;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2385, out _out2386);
              r = _out2385;
              resultingOwnership = _out2386;
            } else {
              Dafny.ISequence<Dafny.Rune> _5251_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5251_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5248_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5246_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2387;
              DCOMP._IOwnership _out2388;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5251_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2387, out _out2388);
              r = _out2387;
              resultingOwnership = _out2388;
            }
            readIdents = _5250_recIdents;
            return ;
          }
        } else if (_source186.is_IndexRange) {
          DAST._IExpression _5252___mcc_h172 = _source186.dtor_expr;
          bool _5253___mcc_h173 = _source186.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _5254___mcc_h174 = _source186.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _5255___mcc_h175 = _source186.dtor_high;
          bool _5256_isDatatype = _4968___mcc_h51;
          bool _5257_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5258_field = _4966___mcc_h49;
          DAST._IExpression _5259_on = _4965___mcc_h48;
          {
            RAST._IExpr _5260_onExpr;
            DCOMP._IOwnership _5261_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5262_recIdents;
            RAST._IExpr _out2389;
            DCOMP._IOwnership _out2390;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2391;
            DCOMP.COMP.GenExpr(_5259_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2389, out _out2390, out _out2391);
            _5260_onExpr = _out2389;
            _5261_onOwned = _out2390;
            _5262_recIdents = _out2391;
            if ((_5256_isDatatype) || (_5257_isConstant)) {
              r = RAST.Expr.create_Call((_5260_onExpr).Sel(DCOMP.__default.escapeIdent(_5258_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2392;
              DCOMP._IOwnership _out2393;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2392, out _out2393);
              r = _out2392;
              resultingOwnership = _out2393;
            } else {
              Dafny.ISequence<Dafny.Rune> _5263_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5263_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5260_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5258_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2394;
              DCOMP._IOwnership _out2395;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5263_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2394, out _out2395);
              r = _out2394;
              resultingOwnership = _out2395;
            }
            readIdents = _5262_recIdents;
            return ;
          }
        } else if (_source186.is_TupleSelect) {
          DAST._IExpression _5264___mcc_h180 = _source186.dtor_expr;
          BigInteger _5265___mcc_h181 = _source186.dtor_index;
          bool _5266_isDatatype = _4968___mcc_h51;
          bool _5267_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5268_field = _4966___mcc_h49;
          DAST._IExpression _5269_on = _4965___mcc_h48;
          {
            RAST._IExpr _5270_onExpr;
            DCOMP._IOwnership _5271_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5272_recIdents;
            RAST._IExpr _out2396;
            DCOMP._IOwnership _out2397;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2398;
            DCOMP.COMP.GenExpr(_5269_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2396, out _out2397, out _out2398);
            _5270_onExpr = _out2396;
            _5271_onOwned = _out2397;
            _5272_recIdents = _out2398;
            if ((_5266_isDatatype) || (_5267_isConstant)) {
              r = RAST.Expr.create_Call((_5270_onExpr).Sel(DCOMP.__default.escapeIdent(_5268_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2399;
              DCOMP._IOwnership _out2400;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2399, out _out2400);
              r = _out2399;
              resultingOwnership = _out2400;
            } else {
              Dafny.ISequence<Dafny.Rune> _5273_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5273_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5270_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5268_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2401;
              DCOMP._IOwnership _out2402;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5273_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2401, out _out2402);
              r = _out2401;
              resultingOwnership = _out2402;
            }
            readIdents = _5272_recIdents;
            return ;
          }
        } else if (_source186.is_Call) {
          DAST._IExpression _5274___mcc_h184 = _source186.dtor_on;
          DAST._ICallName _5275___mcc_h185 = _source186.dtor_callName;
          Dafny.ISequence<DAST._IType> _5276___mcc_h186 = _source186.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5277___mcc_h187 = _source186.dtor_args;
          bool _5278_isDatatype = _4968___mcc_h51;
          bool _5279_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5280_field = _4966___mcc_h49;
          DAST._IExpression _5281_on = _4965___mcc_h48;
          {
            RAST._IExpr _5282_onExpr;
            DCOMP._IOwnership _5283_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5284_recIdents;
            RAST._IExpr _out2403;
            DCOMP._IOwnership _out2404;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2405;
            DCOMP.COMP.GenExpr(_5281_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2403, out _out2404, out _out2405);
            _5282_onExpr = _out2403;
            _5283_onOwned = _out2404;
            _5284_recIdents = _out2405;
            if ((_5278_isDatatype) || (_5279_isConstant)) {
              r = RAST.Expr.create_Call((_5282_onExpr).Sel(DCOMP.__default.escapeIdent(_5280_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2406;
              DCOMP._IOwnership _out2407;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2406, out _out2407);
              r = _out2406;
              resultingOwnership = _out2407;
            } else {
              Dafny.ISequence<Dafny.Rune> _5285_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5285_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5282_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5280_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2408;
              DCOMP._IOwnership _out2409;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5285_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2408, out _out2409);
              r = _out2408;
              resultingOwnership = _out2409;
            }
            readIdents = _5284_recIdents;
            return ;
          }
        } else if (_source186.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _5286___mcc_h192 = _source186.dtor_params;
          DAST._IType _5287___mcc_h193 = _source186.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _5288___mcc_h194 = _source186.dtor_body;
          bool _5289_isDatatype = _4968___mcc_h51;
          bool _5290_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5291_field = _4966___mcc_h49;
          DAST._IExpression _5292_on = _4965___mcc_h48;
          {
            RAST._IExpr _5293_onExpr;
            DCOMP._IOwnership _5294_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5295_recIdents;
            RAST._IExpr _out2410;
            DCOMP._IOwnership _out2411;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2412;
            DCOMP.COMP.GenExpr(_5292_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2410, out _out2411, out _out2412);
            _5293_onExpr = _out2410;
            _5294_onOwned = _out2411;
            _5295_recIdents = _out2412;
            if ((_5289_isDatatype) || (_5290_isConstant)) {
              r = RAST.Expr.create_Call((_5293_onExpr).Sel(DCOMP.__default.escapeIdent(_5291_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2413;
              DCOMP._IOwnership _out2414;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2413, out _out2414);
              r = _out2413;
              resultingOwnership = _out2414;
            } else {
              Dafny.ISequence<Dafny.Rune> _5296_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5296_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5293_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5291_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2415;
              DCOMP._IOwnership _out2416;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5296_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2415, out _out2416);
              r = _out2415;
              resultingOwnership = _out2416;
            }
            readIdents = _5295_recIdents;
            return ;
          }
        } else if (_source186.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5297___mcc_h198 = _source186.dtor_values;
          DAST._IType _5298___mcc_h199 = _source186.dtor_retType;
          DAST._IExpression _5299___mcc_h200 = _source186.dtor_expr;
          bool _5300_isDatatype = _4968___mcc_h51;
          bool _5301_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5302_field = _4966___mcc_h49;
          DAST._IExpression _5303_on = _4965___mcc_h48;
          {
            RAST._IExpr _5304_onExpr;
            DCOMP._IOwnership _5305_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5306_recIdents;
            RAST._IExpr _out2417;
            DCOMP._IOwnership _out2418;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2419;
            DCOMP.COMP.GenExpr(_5303_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2417, out _out2418, out _out2419);
            _5304_onExpr = _out2417;
            _5305_onOwned = _out2418;
            _5306_recIdents = _out2419;
            if ((_5300_isDatatype) || (_5301_isConstant)) {
              r = RAST.Expr.create_Call((_5304_onExpr).Sel(DCOMP.__default.escapeIdent(_5302_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2420;
              DCOMP._IOwnership _out2421;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2420, out _out2421);
              r = _out2420;
              resultingOwnership = _out2421;
            } else {
              Dafny.ISequence<Dafny.Rune> _5307_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5307_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5304_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5302_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2422;
              DCOMP._IOwnership _out2423;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5307_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2422, out _out2423);
              r = _out2422;
              resultingOwnership = _out2423;
            }
            readIdents = _5306_recIdents;
            return ;
          }
        } else if (_source186.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _5308___mcc_h204 = _source186.dtor_name;
          DAST._IType _5309___mcc_h205 = _source186.dtor_typ;
          DAST._IExpression _5310___mcc_h206 = _source186.dtor_value;
          DAST._IExpression _5311___mcc_h207 = _source186.dtor_iifeBody;
          bool _5312_isDatatype = _4968___mcc_h51;
          bool _5313_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5314_field = _4966___mcc_h49;
          DAST._IExpression _5315_on = _4965___mcc_h48;
          {
            RAST._IExpr _5316_onExpr;
            DCOMP._IOwnership _5317_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5318_recIdents;
            RAST._IExpr _out2424;
            DCOMP._IOwnership _out2425;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2426;
            DCOMP.COMP.GenExpr(_5315_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2424, out _out2425, out _out2426);
            _5316_onExpr = _out2424;
            _5317_onOwned = _out2425;
            _5318_recIdents = _out2426;
            if ((_5312_isDatatype) || (_5313_isConstant)) {
              r = RAST.Expr.create_Call((_5316_onExpr).Sel(DCOMP.__default.escapeIdent(_5314_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2427;
              DCOMP._IOwnership _out2428;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2427, out _out2428);
              r = _out2427;
              resultingOwnership = _out2428;
            } else {
              Dafny.ISequence<Dafny.Rune> _5319_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5319_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5316_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5314_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2429;
              DCOMP._IOwnership _out2430;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5319_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2429, out _out2430);
              r = _out2429;
              resultingOwnership = _out2430;
            }
            readIdents = _5318_recIdents;
            return ;
          }
        } else if (_source186.is_Apply) {
          DAST._IExpression _5320___mcc_h212 = _source186.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _5321___mcc_h213 = _source186.dtor_args;
          bool _5322_isDatatype = _4968___mcc_h51;
          bool _5323_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5324_field = _4966___mcc_h49;
          DAST._IExpression _5325_on = _4965___mcc_h48;
          {
            RAST._IExpr _5326_onExpr;
            DCOMP._IOwnership _5327_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5328_recIdents;
            RAST._IExpr _out2431;
            DCOMP._IOwnership _out2432;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2433;
            DCOMP.COMP.GenExpr(_5325_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2431, out _out2432, out _out2433);
            _5326_onExpr = _out2431;
            _5327_onOwned = _out2432;
            _5328_recIdents = _out2433;
            if ((_5322_isDatatype) || (_5323_isConstant)) {
              r = RAST.Expr.create_Call((_5326_onExpr).Sel(DCOMP.__default.escapeIdent(_5324_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2434;
              DCOMP._IOwnership _out2435;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2434, out _out2435);
              r = _out2434;
              resultingOwnership = _out2435;
            } else {
              Dafny.ISequence<Dafny.Rune> _5329_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5329_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5326_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5324_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2436;
              DCOMP._IOwnership _out2437;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5329_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2436, out _out2437);
              r = _out2436;
              resultingOwnership = _out2437;
            }
            readIdents = _5328_recIdents;
            return ;
          }
        } else if (_source186.is_TypeTest) {
          DAST._IExpression _5330___mcc_h216 = _source186.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5331___mcc_h217 = _source186.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _5332___mcc_h218 = _source186.dtor_variant;
          bool _5333_isDatatype = _4968___mcc_h51;
          bool _5334_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5335_field = _4966___mcc_h49;
          DAST._IExpression _5336_on = _4965___mcc_h48;
          {
            RAST._IExpr _5337_onExpr;
            DCOMP._IOwnership _5338_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5339_recIdents;
            RAST._IExpr _out2438;
            DCOMP._IOwnership _out2439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2440;
            DCOMP.COMP.GenExpr(_5336_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2438, out _out2439, out _out2440);
            _5337_onExpr = _out2438;
            _5338_onOwned = _out2439;
            _5339_recIdents = _out2440;
            if ((_5333_isDatatype) || (_5334_isConstant)) {
              r = RAST.Expr.create_Call((_5337_onExpr).Sel(DCOMP.__default.escapeIdent(_5335_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2441;
              DCOMP._IOwnership _out2442;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2441, out _out2442);
              r = _out2441;
              resultingOwnership = _out2442;
            } else {
              Dafny.ISequence<Dafny.Rune> _5340_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5340_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5337_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2443;
              DCOMP._IOwnership _out2444;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5340_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2443, out _out2444);
              r = _out2443;
              resultingOwnership = _out2444;
            }
            readIdents = _5339_recIdents;
            return ;
          }
        } else if (_source186.is_InitializationValue) {
          DAST._IType _5341___mcc_h222 = _source186.dtor_typ;
          bool _5342_isDatatype = _4968___mcc_h51;
          bool _5343_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5344_field = _4966___mcc_h49;
          DAST._IExpression _5345_on = _4965___mcc_h48;
          {
            RAST._IExpr _5346_onExpr;
            DCOMP._IOwnership _5347_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5348_recIdents;
            RAST._IExpr _out2445;
            DCOMP._IOwnership _out2446;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2447;
            DCOMP.COMP.GenExpr(_5345_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2445, out _out2446, out _out2447);
            _5346_onExpr = _out2445;
            _5347_onOwned = _out2446;
            _5348_recIdents = _out2447;
            if ((_5342_isDatatype) || (_5343_isConstant)) {
              r = RAST.Expr.create_Call((_5346_onExpr).Sel(DCOMP.__default.escapeIdent(_5344_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2448;
              DCOMP._IOwnership _out2449;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2448, out _out2449);
              r = _out2448;
              resultingOwnership = _out2449;
            } else {
              Dafny.ISequence<Dafny.Rune> _5349_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5349_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5346_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5344_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2450;
              DCOMP._IOwnership _out2451;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5349_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2450, out _out2451);
              r = _out2450;
              resultingOwnership = _out2451;
            }
            readIdents = _5348_recIdents;
            return ;
          }
        } else if (_source186.is_BoolBoundedPool) {
          bool _5350_isDatatype = _4968___mcc_h51;
          bool _5351_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5352_field = _4966___mcc_h49;
          DAST._IExpression _5353_on = _4965___mcc_h48;
          {
            RAST._IExpr _5354_onExpr;
            DCOMP._IOwnership _5355_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5356_recIdents;
            RAST._IExpr _out2452;
            DCOMP._IOwnership _out2453;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2454;
            DCOMP.COMP.GenExpr(_5353_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2452, out _out2453, out _out2454);
            _5354_onExpr = _out2452;
            _5355_onOwned = _out2453;
            _5356_recIdents = _out2454;
            if ((_5350_isDatatype) || (_5351_isConstant)) {
              r = RAST.Expr.create_Call((_5354_onExpr).Sel(DCOMP.__default.escapeIdent(_5352_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2455;
              DCOMP._IOwnership _out2456;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2455, out _out2456);
              r = _out2455;
              resultingOwnership = _out2456;
            } else {
              Dafny.ISequence<Dafny.Rune> _5357_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5357_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5354_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5352_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2457;
              DCOMP._IOwnership _out2458;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5357_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2457, out _out2458);
              r = _out2457;
              resultingOwnership = _out2458;
            }
            readIdents = _5356_recIdents;
            return ;
          }
        } else if (_source186.is_SetBoundedPool) {
          DAST._IExpression _5358___mcc_h224 = _source186.dtor_of;
          bool _5359_isDatatype = _4968___mcc_h51;
          bool _5360_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5361_field = _4966___mcc_h49;
          DAST._IExpression _5362_on = _4965___mcc_h48;
          {
            RAST._IExpr _5363_onExpr;
            DCOMP._IOwnership _5364_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5365_recIdents;
            RAST._IExpr _out2459;
            DCOMP._IOwnership _out2460;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2461;
            DCOMP.COMP.GenExpr(_5362_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2459, out _out2460, out _out2461);
            _5363_onExpr = _out2459;
            _5364_onOwned = _out2460;
            _5365_recIdents = _out2461;
            if ((_5359_isDatatype) || (_5360_isConstant)) {
              r = RAST.Expr.create_Call((_5363_onExpr).Sel(DCOMP.__default.escapeIdent(_5361_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2462;
              DCOMP._IOwnership _out2463;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2462, out _out2463);
              r = _out2462;
              resultingOwnership = _out2463;
            } else {
              Dafny.ISequence<Dafny.Rune> _5366_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5366_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5363_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5361_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2464;
              DCOMP._IOwnership _out2465;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5366_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2464, out _out2465);
              r = _out2464;
              resultingOwnership = _out2465;
            }
            readIdents = _5365_recIdents;
            return ;
          }
        } else if (_source186.is_SeqBoundedPool) {
          DAST._IExpression _5367___mcc_h226 = _source186.dtor_of;
          bool _5368___mcc_h227 = _source186.dtor_includeDuplicates;
          bool _5369_isDatatype = _4968___mcc_h51;
          bool _5370_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5371_field = _4966___mcc_h49;
          DAST._IExpression _5372_on = _4965___mcc_h48;
          {
            RAST._IExpr _5373_onExpr;
            DCOMP._IOwnership _5374_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5375_recIdents;
            RAST._IExpr _out2466;
            DCOMP._IOwnership _out2467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2468;
            DCOMP.COMP.GenExpr(_5372_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2466, out _out2467, out _out2468);
            _5373_onExpr = _out2466;
            _5374_onOwned = _out2467;
            _5375_recIdents = _out2468;
            if ((_5369_isDatatype) || (_5370_isConstant)) {
              r = RAST.Expr.create_Call((_5373_onExpr).Sel(DCOMP.__default.escapeIdent(_5371_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2469;
              DCOMP._IOwnership _out2470;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2469, out _out2470);
              r = _out2469;
              resultingOwnership = _out2470;
            } else {
              Dafny.ISequence<Dafny.Rune> _5376_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5376_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5373_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5371_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2471;
              DCOMP._IOwnership _out2472;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5376_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2471, out _out2472);
              r = _out2471;
              resultingOwnership = _out2472;
            }
            readIdents = _5375_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _5377___mcc_h230 = _source186.dtor_lo;
          DAST._IExpression _5378___mcc_h231 = _source186.dtor_hi;
          bool _5379_isDatatype = _4968___mcc_h51;
          bool _5380_isConstant = _4967___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5381_field = _4966___mcc_h49;
          DAST._IExpression _5382_on = _4965___mcc_h48;
          {
            RAST._IExpr _5383_onExpr;
            DCOMP._IOwnership _5384_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5385_recIdents;
            RAST._IExpr _out2473;
            DCOMP._IOwnership _out2474;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2475;
            DCOMP.COMP.GenExpr(_5382_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2473, out _out2474, out _out2475);
            _5383_onExpr = _out2473;
            _5384_onOwned = _out2474;
            _5385_recIdents = _out2475;
            if ((_5379_isDatatype) || (_5380_isConstant)) {
              r = RAST.Expr.create_Call((_5383_onExpr).Sel(DCOMP.__default.escapeIdent(_5381_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2476;
              DCOMP._IOwnership _out2477;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2476, out _out2477);
              r = _out2476;
              resultingOwnership = _out2477;
            } else {
              Dafny.ISequence<Dafny.Rune> _5386_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5386_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5383_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5381_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2478;
              DCOMP._IOwnership _out2479;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5386_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2478, out _out2479);
              r = _out2478;
              resultingOwnership = _out2479;
            }
            readIdents = _5385_recIdents;
            return ;
          }
        }
      } else if (_source183.is_SelectFn) {
        DAST._IExpression _5387___mcc_h234 = _source183.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5388___mcc_h235 = _source183.dtor_field;
        bool _5389___mcc_h236 = _source183.dtor_onDatatype;
        bool _5390___mcc_h237 = _source183.dtor_isStatic;
        BigInteger _5391___mcc_h238 = _source183.dtor_arity;
        BigInteger _5392_arity = _5391___mcc_h238;
        bool _5393_isStatic = _5390___mcc_h237;
        bool _5394_isDatatype = _5389___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _5395_field = _5388___mcc_h235;
        DAST._IExpression _5396_on = _5387___mcc_h234;
        {
          RAST._IExpr _5397_onExpr;
          DCOMP._IOwnership _5398_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5399_recIdents;
          RAST._IExpr _out2480;
          DCOMP._IOwnership _out2481;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2482;
          DCOMP.COMP.GenExpr(_5396_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2480, out _out2481, out _out2482);
          _5397_onExpr = _out2480;
          _5398_onOwned = _out2481;
          _5399_recIdents = _out2482;
          Dafny.ISequence<Dafny.Rune> _5400_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _5401_onString;
          _5401_onString = (_5397_onExpr)._ToString(DCOMP.__default.IND);
          if (_5393_isStatic) {
            _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5401_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5395_field));
          } else {
            _5400_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5400_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _5401_onString), ((object.Equals(_5398_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _5402_args;
            _5402_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _5403_i;
            _5403_i = BigInteger.Zero;
            while ((_5403_i) < (_5392_arity)) {
              if ((_5403_i).Sign == 1) {
                _5402_args = Dafny.Sequence<Dafny.Rune>.Concat(_5402_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _5402_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5402_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_5403_i));
              _5403_i = (_5403_i) + (BigInteger.One);
            }
            _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5400_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _5402_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5400_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _5395_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _5402_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(_5400_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(_5400_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _5404_typeShape;
          _5404_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _5405_i;
          _5405_i = BigInteger.Zero;
          while ((_5405_i) < (_5392_arity)) {
            if ((_5405_i).Sign == 1) {
              _5404_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5404_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _5404_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5404_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _5405_i = (_5405_i) + (BigInteger.One);
          }
          _5404_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5404_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _5400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _5400_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _5404_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_5400_s);
          RAST._IExpr _out2483;
          DCOMP._IOwnership _out2484;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2483, out _out2484);
          r = _out2483;
          resultingOwnership = _out2484;
          readIdents = _5399_recIdents;
          return ;
        }
      } else if (_source183.is_Index) {
        DAST._IExpression _5406___mcc_h239 = _source183.dtor_expr;
        DAST._ICollKind _5407___mcc_h240 = _source183.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _5408___mcc_h241 = _source183.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _5409_indices = _5408___mcc_h241;
        DAST._ICollKind _5410_collKind = _5407___mcc_h240;
        DAST._IExpression _5411_on = _5406___mcc_h239;
        {
          RAST._IExpr _5412_onExpr;
          DCOMP._IOwnership _5413_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5414_recIdents;
          RAST._IExpr _out2485;
          DCOMP._IOwnership _out2486;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2487;
          DCOMP.COMP.GenExpr(_5411_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2485, out _out2486, out _out2487);
          _5412_onExpr = _out2485;
          _5413_onOwned = _out2486;
          _5414_recIdents = _out2487;
          readIdents = _5414_recIdents;
          r = _5412_onExpr;
          BigInteger _5415_i;
          _5415_i = BigInteger.Zero;
          while ((_5415_i) < (new BigInteger((_5409_indices).Count))) {
            if (object.Equals(_5410_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _5416_idx;
            DCOMP._IOwnership _5417_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5418_recIdentsIdx;
            RAST._IExpr _out2488;
            DCOMP._IOwnership _out2489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2490;
            DCOMP.COMP.GenExpr((_5409_indices).Select(_5415_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2488, out _out2489, out _out2490);
            _5416_idx = _out2488;
            _5417_idxOwned = _out2489;
            _5418_recIdentsIdx = _out2490;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_5416_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5418_recIdentsIdx);
            _5415_i = (_5415_i) + (BigInteger.One);
          }
          RAST._IExpr _out2491;
          DCOMP._IOwnership _out2492;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2491, out _out2492);
          r = _out2491;
          resultingOwnership = _out2492;
          return ;
        }
      } else if (_source183.is_IndexRange) {
        DAST._IExpression _5419___mcc_h242 = _source183.dtor_expr;
        bool _5420___mcc_h243 = _source183.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _5421___mcc_h244 = _source183.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _5422___mcc_h245 = _source183.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _5423_high = _5422___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _5424_low = _5421___mcc_h244;
        bool _5425_isArray = _5420___mcc_h243;
        DAST._IExpression _5426_on = _5419___mcc_h242;
        {
          RAST._IExpr _5427_onExpr;
          DCOMP._IOwnership _5428_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5429_recIdents;
          RAST._IExpr _out2493;
          DCOMP._IOwnership _out2494;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2495;
          DCOMP.COMP.GenExpr(_5426_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2493, out _out2494, out _out2495);
          _5427_onExpr = _out2493;
          _5428_onOwned = _out2494;
          _5429_recIdents = _out2495;
          readIdents = _5429_recIdents;
          Dafny.ISequence<Dafny.Rune> _5430_methodName;
          _5430_methodName = (((_5424_low).is_Some) ? ((((_5423_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_5423_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _5431_arguments;
          _5431_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source187 = _5424_low;
          if (_source187.is_None) {
          } else {
            DAST._IExpression _5432___mcc_h274 = _source187.dtor_value;
            DAST._IExpression _5433_l = _5432___mcc_h274;
            {
              RAST._IExpr _5434_lExpr;
              DCOMP._IOwnership _5435___v119;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5436_recIdentsL;
              RAST._IExpr _out2496;
              DCOMP._IOwnership _out2497;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2498;
              DCOMP.COMP.GenExpr(_5433_l, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2496, out _out2497, out _out2498);
              _5434_lExpr = _out2496;
              _5435___v119 = _out2497;
              _5436_recIdentsL = _out2498;
              _5431_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5431_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5434_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5436_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source188 = _5423_high;
          if (_source188.is_None) {
          } else {
            DAST._IExpression _5437___mcc_h275 = _source188.dtor_value;
            DAST._IExpression _5438_h = _5437___mcc_h275;
            {
              RAST._IExpr _5439_hExpr;
              DCOMP._IOwnership _5440___v120;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5441_recIdentsH;
              RAST._IExpr _out2499;
              DCOMP._IOwnership _out2500;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2501;
              DCOMP.COMP.GenExpr(_5438_h, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2499, out _out2500, out _out2501);
              _5439_hExpr = _out2499;
              _5440___v120 = _out2500;
              _5441_recIdentsH = _out2501;
              _5431_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5431_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5439_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5441_recIdentsH);
            }
          }
          r = _5427_onExpr;
          if (_5425_isArray) {
            if (!(_5430_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _5430_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _5430_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _5430_methodName))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _5431_arguments);
          } else {
            if (!(_5430_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_5430_methodName)).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _5431_arguments);
            }
          }
          RAST._IExpr _out2502;
          DCOMP._IOwnership _out2503;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2502, out _out2503);
          r = _out2502;
          resultingOwnership = _out2503;
          return ;
        }
      } else if (_source183.is_TupleSelect) {
        DAST._IExpression _5442___mcc_h246 = _source183.dtor_expr;
        BigInteger _5443___mcc_h247 = _source183.dtor_index;
        BigInteger _5444_idx = _5443___mcc_h247;
        DAST._IExpression _5445_on = _5442___mcc_h246;
        {
          RAST._IExpr _5446_onExpr;
          DCOMP._IOwnership _5447_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5448_recIdents;
          RAST._IExpr _out2504;
          DCOMP._IOwnership _out2505;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2506;
          DCOMP.COMP.GenExpr(_5445_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2504, out _out2505, out _out2506);
          _5446_onExpr = _out2504;
          _5447_onOwnership = _out2505;
          _5448_recIdents = _out2506;
          r = (_5446_onExpr).Sel(Std.Strings.__default.OfNat(_5444_idx));
          RAST._IExpr _out2507;
          DCOMP._IOwnership _out2508;
          DCOMP.COMP.FromOwnership(r, _5447_onOwnership, expectedOwnership, out _out2507, out _out2508);
          r = _out2507;
          resultingOwnership = _out2508;
          readIdents = _5448_recIdents;
          return ;
        }
      } else if (_source183.is_Call) {
        DAST._IExpression _5449___mcc_h248 = _source183.dtor_on;
        DAST._ICallName _5450___mcc_h249 = _source183.dtor_callName;
        Dafny.ISequence<DAST._IType> _5451___mcc_h250 = _source183.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _5452___mcc_h251 = _source183.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5453_args = _5452___mcc_h251;
        Dafny.ISequence<DAST._IType> _5454_typeArgs = _5451___mcc_h250;
        DAST._ICallName _5455_name = _5450___mcc_h249;
        DAST._IExpression _5456_on = _5449___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _5457_typeExprs;
          _5457_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_5454_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _5458_typeI;
            _5458_typeI = BigInteger.Zero;
            while ((_5458_typeI) < (new BigInteger((_5454_typeArgs).Count))) {
              RAST._IType _5459_typeExpr;
              RAST._IType _out2509;
              _out2509 = DCOMP.COMP.GenType((_5454_typeArgs).Select(_5458_typeI), false, false);
              _5459_typeExpr = _out2509;
              _5457_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_5457_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_5459_typeExpr));
              _5458_typeI = (_5458_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _5460_argExprs;
          _5460_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _5461_i;
          _5461_i = BigInteger.Zero;
          while ((_5461_i) < (new BigInteger((_5453_args).Count))) {
            RAST._IExpr _5462_argExpr;
            DCOMP._IOwnership _5463_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5464_argIdents;
            RAST._IExpr _out2510;
            DCOMP._IOwnership _out2511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2512;
            DCOMP.COMP.GenExpr((_5453_args).Select(_5461_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2510, out _out2511, out _out2512);
            _5462_argExpr = _out2510;
            _5463_argOwnership = _out2511;
            _5464_argIdents = _out2512;
            _5460_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_5460_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_5462_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5464_argIdents);
            _5461_i = (_5461_i) + (BigInteger.One);
          }
          RAST._IExpr _5465_onExpr;
          DCOMP._IOwnership _5466___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5467_recIdents;
          RAST._IExpr _out2513;
          DCOMP._IOwnership _out2514;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2515;
          DCOMP.COMP.GenExpr(_5456_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2513, out _out2514, out _out2515);
          _5465_onExpr = _out2513;
          _5466___v121 = _out2514;
          _5467_recIdents = _out2515;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5467_recIdents);
          Dafny.ISequence<Dafny.Rune> _5468_renderedName;
          _5468_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source189) => {
            if (_source189.is_Name) {
              Dafny.ISequence<Dafny.Rune> _5469___mcc_h276 = _source189.dtor_name;
              Dafny.ISequence<Dafny.Rune> _5470_ident = _5469___mcc_h276;
              return DCOMP.__default.escapeIdent(_5470_ident);
            } else if (_source189.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source189.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source189.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_5455_name);
          DAST._IExpression _source190 = _5456_on;
          if (_source190.is_Literal) {
            DAST._ILiteral _5471___mcc_h277 = _source190.dtor_Literal_a0;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _5472___mcc_h279 = _source190.dtor_Ident_a0;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5473___mcc_h281 = _source190.dtor_Companion_a0;
            {
              _5465_onExpr = (_5465_onExpr).MSel(_5468_renderedName);
            }
          } else if (_source190.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _5474___mcc_h283 = _source190.dtor_Tuple_a0;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5475___mcc_h285 = _source190.dtor_path;
            Dafny.ISequence<DAST._IType> _5476___mcc_h286 = _source190.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _5477___mcc_h287 = _source190.dtor_args;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _5478___mcc_h291 = _source190.dtor_dims;
            DAST._IType _5479___mcc_h292 = _source190.dtor_typ;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5480___mcc_h295 = _source190.dtor_path;
            Dafny.ISequence<DAST._IType> _5481___mcc_h296 = _source190.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _5482___mcc_h297 = _source190.dtor_variant;
            bool _5483___mcc_h298 = _source190.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5484___mcc_h299 = _source190.dtor_contents;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Convert) {
            DAST._IExpression _5485___mcc_h305 = _source190.dtor_value;
            DAST._IType _5486___mcc_h306 = _source190.dtor_from;
            DAST._IType _5487___mcc_h307 = _source190.dtor_typ;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SeqConstruct) {
            DAST._IExpression _5488___mcc_h311 = _source190.dtor_length;
            DAST._IExpression _5489___mcc_h312 = _source190.dtor_elem;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _5490___mcc_h315 = _source190.dtor_elements;
            DAST._IType _5491___mcc_h316 = _source190.dtor_typ;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _5492___mcc_h319 = _source190.dtor_elements;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _5493___mcc_h321 = _source190.dtor_elements;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5494___mcc_h323 = _source190.dtor_mapElems;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_MapBuilder) {
            DAST._IType _5495___mcc_h325 = _source190.dtor_keyType;
            DAST._IType _5496___mcc_h326 = _source190.dtor_valueType;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SeqUpdate) {
            DAST._IExpression _5497___mcc_h329 = _source190.dtor_expr;
            DAST._IExpression _5498___mcc_h330 = _source190.dtor_indexExpr;
            DAST._IExpression _5499___mcc_h331 = _source190.dtor_value;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_MapUpdate) {
            DAST._IExpression _5500___mcc_h335 = _source190.dtor_expr;
            DAST._IExpression _5501___mcc_h336 = _source190.dtor_indexExpr;
            DAST._IExpression _5502___mcc_h337 = _source190.dtor_value;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SetBuilder) {
            DAST._IType _5503___mcc_h341 = _source190.dtor_elemType;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_ToMultiset) {
            DAST._IExpression _5504___mcc_h343 = _source190.dtor_ToMultiset_a0;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_This) {
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Ite) {
            DAST._IExpression _5505___mcc_h345 = _source190.dtor_cond;
            DAST._IExpression _5506___mcc_h346 = _source190.dtor_thn;
            DAST._IExpression _5507___mcc_h347 = _source190.dtor_els;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_UnOp) {
            DAST._IUnaryOp _5508___mcc_h351 = _source190.dtor_unOp;
            DAST._IExpression _5509___mcc_h352 = _source190.dtor_expr;
            DAST.Format._IUnaryOpFormat _5510___mcc_h353 = _source190.dtor_format1;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_BinOp) {
            DAST._IBinOp _5511___mcc_h357 = _source190.dtor_op;
            DAST._IExpression _5512___mcc_h358 = _source190.dtor_left;
            DAST._IExpression _5513___mcc_h359 = _source190.dtor_right;
            DAST.Format._IBinaryOpFormat _5514___mcc_h360 = _source190.dtor_format2;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_ArrayLen) {
            DAST._IExpression _5515___mcc_h365 = _source190.dtor_expr;
            BigInteger _5516___mcc_h366 = _source190.dtor_dim;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_MapKeys) {
            DAST._IExpression _5517___mcc_h369 = _source190.dtor_expr;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_MapValues) {
            DAST._IExpression _5518___mcc_h371 = _source190.dtor_expr;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Select) {
            DAST._IExpression _5519___mcc_h373 = _source190.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _5520___mcc_h374 = _source190.dtor_field;
            bool _5521___mcc_h375 = _source190.dtor_isConstant;
            bool _5522___mcc_h376 = _source190.dtor_onDatatype;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SelectFn) {
            DAST._IExpression _5523___mcc_h381 = _source190.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _5524___mcc_h382 = _source190.dtor_field;
            bool _5525___mcc_h383 = _source190.dtor_onDatatype;
            bool _5526___mcc_h384 = _source190.dtor_isStatic;
            BigInteger _5527___mcc_h385 = _source190.dtor_arity;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Index) {
            DAST._IExpression _5528___mcc_h391 = _source190.dtor_expr;
            DAST._ICollKind _5529___mcc_h392 = _source190.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _5530___mcc_h393 = _source190.dtor_indices;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_IndexRange) {
            DAST._IExpression _5531___mcc_h397 = _source190.dtor_expr;
            bool _5532___mcc_h398 = _source190.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _5533___mcc_h399 = _source190.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _5534___mcc_h400 = _source190.dtor_high;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_TupleSelect) {
            DAST._IExpression _5535___mcc_h405 = _source190.dtor_expr;
            BigInteger _5536___mcc_h406 = _source190.dtor_index;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Call) {
            DAST._IExpression _5537___mcc_h409 = _source190.dtor_on;
            DAST._ICallName _5538___mcc_h410 = _source190.dtor_callName;
            Dafny.ISequence<DAST._IType> _5539___mcc_h411 = _source190.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _5540___mcc_h412 = _source190.dtor_args;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _5541___mcc_h417 = _source190.dtor_params;
            DAST._IType _5542___mcc_h418 = _source190.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _5543___mcc_h419 = _source190.dtor_body;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5544___mcc_h423 = _source190.dtor_values;
            DAST._IType _5545___mcc_h424 = _source190.dtor_retType;
            DAST._IExpression _5546___mcc_h425 = _source190.dtor_expr;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _5547___mcc_h429 = _source190.dtor_name;
            DAST._IType _5548___mcc_h430 = _source190.dtor_typ;
            DAST._IExpression _5549___mcc_h431 = _source190.dtor_value;
            DAST._IExpression _5550___mcc_h432 = _source190.dtor_iifeBody;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_Apply) {
            DAST._IExpression _5551___mcc_h437 = _source190.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _5552___mcc_h438 = _source190.dtor_args;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_TypeTest) {
            DAST._IExpression _5553___mcc_h441 = _source190.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5554___mcc_h442 = _source190.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _5555___mcc_h443 = _source190.dtor_variant;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_InitializationValue) {
            DAST._IType _5556___mcc_h447 = _source190.dtor_typ;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_BoolBoundedPool) {
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SetBoundedPool) {
            DAST._IExpression _5557___mcc_h449 = _source190.dtor_of;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else if (_source190.is_SeqBoundedPool) {
            DAST._IExpression _5558___mcc_h451 = _source190.dtor_of;
            bool _5559___mcc_h452 = _source190.dtor_includeDuplicates;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          } else {
            DAST._IExpression _5560___mcc_h455 = _source190.dtor_lo;
            DAST._IExpression _5561___mcc_h456 = _source190.dtor_hi;
            {
              _5465_onExpr = (_5465_onExpr).Sel(_5468_renderedName);
            }
          }
          r = RAST.Expr.create_Call(_5465_onExpr, _5457_typeExprs, _5460_argExprs);
          RAST._IExpr _out2516;
          DCOMP._IOwnership _out2517;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2516, out _out2517);
          r = _out2516;
          resultingOwnership = _out2517;
          return ;
        }
      } else if (_source183.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _5562___mcc_h252 = _source183.dtor_params;
        DAST._IType _5563___mcc_h253 = _source183.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _5564___mcc_h254 = _source183.dtor_body;
        Dafny.ISequence<DAST._IStatement> _5565_body = _5564___mcc_h254;
        DAST._IType _5566_retType = _5563___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _5567_params = _5562___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5568_paramNames;
          _5568_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5569_i;
          _5569_i = BigInteger.Zero;
          while ((_5569_i) < (new BigInteger((_5567_params).Count))) {
            _5568_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5568_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_5567_params).Select(_5569_i)).dtor_name));
            _5569_i = (_5569_i) + (BigInteger.One);
          }
          RAST._IExpr _5570_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5571_recIdents;
          RAST._IExpr _out2518;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2519;
          DCOMP.COMP.GenStmts(_5565_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _5568_paramNames, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2518, out _out2519);
          _5570_recursiveGen = _out2518;
          _5571_recIdents = _out2519;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _5572_allReadCloned;
          _5572_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_5571_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _5573_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_5571_recIdents).Elements) {
              _5573_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_5571_recIdents).Contains(_5573_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3199)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_5573_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _5572_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_5572_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_5568_paramNames).Contains(_5573_next))) {
              _5572_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5572_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_5573_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_5573_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5573_next));
            }
            _5571_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5571_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5573_next));
          }
          Dafny.ISequence<Dafny.Rune> _5574_paramsString;
          _5574_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _5575_paramTypes;
          _5575_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _5569_i = BigInteger.Zero;
          while ((_5569_i) < (new BigInteger((_5567_params).Count))) {
            if ((_5569_i).Sign == 1) {
              _5574_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_5574_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _5575_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_5575_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _5576_typStr;
            RAST._IType _out2520;
            _out2520 = DCOMP.COMP.GenType(((_5567_params).Select(_5569_i)).dtor_typ, false, true);
            _5576_typStr = _out2520;
            _5574_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5574_paramsString, DCOMP.__default.escapeIdent(((_5567_params).Select(_5569_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_5576_typStr))._ToString(DCOMP.__default.IND));
            _5575_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_5575_paramTypes, (RAST.Type.create_Borrowed(_5576_typStr))._ToString(DCOMP.__default.IND));
            _5569_i = (_5569_i) + (BigInteger.One);
          }
          RAST._IType _5577_retTypeGen;
          RAST._IType _out2521;
          _out2521 = DCOMP.COMP.GenType(_5566_retType, false, true);
          _5577_retTypeGen = _out2521;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _5575_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_5577_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _5572_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _5574_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_5577_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_5570_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out2522;
          DCOMP._IOwnership _out2523;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2522, out _out2523);
          r = _out2522;
          resultingOwnership = _out2523;
          return ;
        }
      } else if (_source183.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5578___mcc_h255 = _source183.dtor_values;
        DAST._IType _5579___mcc_h256 = _source183.dtor_retType;
        DAST._IExpression _5580___mcc_h257 = _source183.dtor_expr;
        DAST._IExpression _5581_expr = _5580___mcc_h257;
        DAST._IType _5582_retType = _5579___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5583_values = _5578___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5584_paramNames;
          _5584_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5585_paramNamesSet;
          _5585_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5586_i;
          _5586_i = BigInteger.Zero;
          while ((_5586_i) < (new BigInteger((_5583_values).Count))) {
            _5584_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5584_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_5583_values).Select(_5586_i)).dtor__0).dtor_name));
            _5585_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5585_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_5583_values).Select(_5586_i)).dtor__0).dtor_name));
            _5586_i = (_5586_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _5587_s;
          _5587_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _5588_paramsString;
          _5588_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _5586_i = BigInteger.Zero;
          while ((_5586_i) < (new BigInteger((_5583_values).Count))) {
            if ((_5586_i).Sign == 1) {
              _5588_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_5588_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _5589_typStr;
            RAST._IType _out2524;
            _out2524 = DCOMP.COMP.GenType((((_5583_values).Select(_5586_i)).dtor__0).dtor_typ, false, true);
            _5589_typStr = _out2524;
            RAST._IExpr _5590_valueGen;
            DCOMP._IOwnership _5591___v124;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5592_recIdents;
            RAST._IExpr _out2525;
            DCOMP._IOwnership _out2526;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2527;
            DCOMP.COMP.GenExpr(((_5583_values).Select(_5586_i)).dtor__1, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2525, out _out2526, out _out2527);
            _5590_valueGen = _out2525;
            _5591___v124 = _out2526;
            _5592_recIdents = _out2527;
            _5587_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5587_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_5583_values).Select(_5586_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_5589_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5592_recIdents);
            _5587_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5587_s, (_5590_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _5586_i = (_5586_i) + (BigInteger.One);
          }
          RAST._IExpr _5593_recGen;
          DCOMP._IOwnership _5594_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5595_recIdents;
          RAST._IExpr _out2528;
          DCOMP._IOwnership _out2529;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2530;
          DCOMP.COMP.GenExpr(_5581_expr, selfIdent, _5584_paramNames, expectedOwnership, out _out2528, out _out2529, out _out2530);
          _5593_recGen = _out2528;
          _5594_recOwned = _out2529;
          _5595_recIdents = _out2530;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5595_recIdents, _5585_paramNamesSet);
          _5587_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5587_s, (_5593_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_5587_s);
          RAST._IExpr _out2531;
          DCOMP._IOwnership _out2532;
          DCOMP.COMP.FromOwnership(r, _5594_recOwned, expectedOwnership, out _out2531, out _out2532);
          r = _out2531;
          resultingOwnership = _out2532;
          return ;
        }
      } else if (_source183.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _5596___mcc_h258 = _source183.dtor_name;
        DAST._IType _5597___mcc_h259 = _source183.dtor_typ;
        DAST._IExpression _5598___mcc_h260 = _source183.dtor_value;
        DAST._IExpression _5599___mcc_h261 = _source183.dtor_iifeBody;
        DAST._IExpression _5600_iifeBody = _5599___mcc_h261;
        DAST._IExpression _5601_value = _5598___mcc_h260;
        DAST._IType _5602_tpe = _5597___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _5603_name = _5596___mcc_h258;
        {
          RAST._IExpr _5604_valueGen;
          DCOMP._IOwnership _5605___v125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5606_recIdents;
          RAST._IExpr _out2533;
          DCOMP._IOwnership _out2534;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2535;
          DCOMP.COMP.GenExpr(_5601_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2533, out _out2534, out _out2535);
          _5604_valueGen = _out2533;
          _5605___v125 = _out2534;
          _5606_recIdents = _out2535;
          readIdents = _5606_recIdents;
          RAST._IType _5607_valueTypeGen;
          RAST._IType _out2536;
          _out2536 = DCOMP.COMP.GenType(_5602_tpe, false, true);
          _5607_valueTypeGen = _out2536;
          RAST._IExpr _5608_bodyGen;
          DCOMP._IOwnership _5609___v126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5610_bodyIdents;
          RAST._IExpr _out2537;
          DCOMP._IOwnership _out2538;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2539;
          DCOMP.COMP.GenExpr(_5600_iifeBody, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2537, out _out2538, out _out2539);
          _5608_bodyGen = _out2537;
          _5609___v126 = _out2538;
          _5610_bodyIdents = _out2539;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5610_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_5603_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_5603_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_5607_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_5604_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_5608_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out2540;
          DCOMP._IOwnership _out2541;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2540, out _out2541);
          r = _out2540;
          resultingOwnership = _out2541;
          return ;
        }
      } else if (_source183.is_Apply) {
        DAST._IExpression _5611___mcc_h262 = _source183.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _5612___mcc_h263 = _source183.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5613_args = _5612___mcc_h263;
        DAST._IExpression _5614_func = _5611___mcc_h262;
        {
          RAST._IExpr _5615_funcExpr;
          DCOMP._IOwnership _5616___v127;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5617_recIdents;
          RAST._IExpr _out2542;
          DCOMP._IOwnership _out2543;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2544;
          DCOMP.COMP.GenExpr(_5614_func, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2542, out _out2543, out _out2544);
          _5615_funcExpr = _out2542;
          _5616___v127 = _out2543;
          _5617_recIdents = _out2544;
          readIdents = _5617_recIdents;
          Dafny.ISequence<Dafny.Rune> _5618_argString;
          _5618_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _5619_i;
          _5619_i = BigInteger.Zero;
          while ((_5619_i) < (new BigInteger((_5613_args).Count))) {
            if ((_5619_i).Sign == 1) {
              _5618_argString = Dafny.Sequence<Dafny.Rune>.Concat(_5618_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _5620_argExpr;
            DCOMP._IOwnership _5621_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5622_argIdents;
            RAST._IExpr _out2545;
            DCOMP._IOwnership _out2546;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2547;
            DCOMP.COMP.GenExpr((_5613_args).Select(_5619_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2545, out _out2546, out _out2547);
            _5620_argExpr = _out2545;
            _5621_argOwned = _out2546;
            _5622_argIdents = _out2547;
            Dafny.ISequence<Dafny.Rune> _5623_argExprString;
            _5623_argExprString = (_5620_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_5621_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _5623_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _5623_argExprString);
            }
            _5618_argString = Dafny.Sequence<Dafny.Rune>.Concat(_5618_argString, _5623_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5622_argIdents);
            _5619_i = (_5619_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_5615_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _5618_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out2548;
          DCOMP._IOwnership _out2549;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2548, out _out2549);
          r = _out2548;
          resultingOwnership = _out2549;
          return ;
        }
      } else if (_source183.is_TypeTest) {
        DAST._IExpression _5624___mcc_h264 = _source183.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5625___mcc_h265 = _source183.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _5626___mcc_h266 = _source183.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _5627_variant = _5626___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5628_dType = _5625___mcc_h265;
        DAST._IExpression _5629_on = _5624___mcc_h264;
        {
          RAST._IExpr _5630_exprGen;
          DCOMP._IOwnership _5631___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5632_recIdents;
          RAST._IExpr _out2550;
          DCOMP._IOwnership _out2551;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2552;
          DCOMP.COMP.GenExpr(_5629_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2550, out _out2551, out _out2552);
          _5630_exprGen = _out2550;
          _5631___v128 = _out2551;
          _5632_recIdents = _out2552;
          Dafny.ISequence<Dafny.Rune> _5633_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out2553;
          _out2553 = DCOMP.COMP.GenPath(_5628_dType);
          _5633_dTypePath = _out2553;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_5630_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _5633_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5627_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          RAST._IExpr _out2554;
          DCOMP._IOwnership _out2555;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2554, out _out2555);
          r = _out2554;
          resultingOwnership = _out2555;
          readIdents = _5632_recIdents;
          return ;
        }
      } else if (_source183.is_InitializationValue) {
        DAST._IType _5634___mcc_h267 = _source183.dtor_typ;
        DAST._IType _5635_typ = _5634___mcc_h267;
        {
          RAST._IType _5636_typExpr;
          RAST._IType _out2556;
          _out2556 = DCOMP.COMP.GenType(_5635_typ, false, false);
          _5636_typExpr = _out2556;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5636_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out2557;
          DCOMP._IOwnership _out2558;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2557, out _out2558);
          r = _out2557;
          resultingOwnership = _out2558;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source183.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2559;
          DCOMP._IOwnership _out2560;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2559, out _out2560);
          r = _out2559;
          resultingOwnership = _out2560;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source183.is_SetBoundedPool) {
        DAST._IExpression _5637___mcc_h268 = _source183.dtor_of;
        DAST._IExpression _5638_of = _5637___mcc_h268;
        {
          RAST._IExpr _5639_exprGen;
          DCOMP._IOwnership _5640___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5641_recIdents;
          RAST._IExpr _out2561;
          DCOMP._IOwnership _out2562;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2563;
          DCOMP.COMP.GenExpr(_5638_of, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2561, out _out2562, out _out2563);
          _5639_exprGen = _out2561;
          _5640___v129 = _out2562;
          _5641_recIdents = _out2563;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5639_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out2564;
          DCOMP._IOwnership _out2565;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2564, out _out2565);
          r = _out2564;
          resultingOwnership = _out2565;
          readIdents = _5641_recIdents;
          return ;
        }
      } else if (_source183.is_SeqBoundedPool) {
        DAST._IExpression _5642___mcc_h269 = _source183.dtor_of;
        bool _5643___mcc_h270 = _source183.dtor_includeDuplicates;
        bool _5644_includeDuplicates = _5643___mcc_h270;
        DAST._IExpression _5645_of = _5642___mcc_h269;
        {
          RAST._IExpr _5646_exprGen;
          DCOMP._IOwnership _5647___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5648_recIdents;
          RAST._IExpr _out2566;
          DCOMP._IOwnership _out2567;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2568;
          DCOMP.COMP.GenExpr(_5645_of, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2566, out _out2567, out _out2568);
          _5646_exprGen = _out2566;
          _5647___v130 = _out2567;
          _5648_recIdents = _out2568;
          Dafny.ISequence<Dafny.Rune> _5649_s;
          _5649_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5646_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_5644_includeDuplicates)) {
            _5649_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _5649_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_5649_s);
          RAST._IExpr _out2569;
          DCOMP._IOwnership _out2570;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2569, out _out2570);
          r = _out2569;
          resultingOwnership = _out2570;
          readIdents = _5648_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _5650___mcc_h271 = _source183.dtor_lo;
        DAST._IExpression _5651___mcc_h272 = _source183.dtor_hi;
        DAST._IExpression _5652_hi = _5651___mcc_h272;
        DAST._IExpression _5653_lo = _5650___mcc_h271;
        {
          RAST._IExpr _5654_lo;
          DCOMP._IOwnership _5655___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5656_recIdentsLo;
          RAST._IExpr _out2571;
          DCOMP._IOwnership _out2572;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2573;
          DCOMP.COMP.GenExpr(_5653_lo, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2571, out _out2572, out _out2573);
          _5654_lo = _out2571;
          _5655___v131 = _out2572;
          _5656_recIdentsLo = _out2573;
          RAST._IExpr _5657_hi;
          DCOMP._IOwnership _5658___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5659_recIdentsHi;
          RAST._IExpr _out2574;
          DCOMP._IOwnership _out2575;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2576;
          DCOMP.COMP.GenExpr(_5652_hi, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out2574, out _out2575, out _out2576);
          _5657_hi = _out2574;
          _5658___v132 = _out2575;
          _5659_recIdentsHi = _out2576;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_5654_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_5657_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out2577;
          DCOMP._IOwnership _out2578;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2577, out _out2578);
          r = _out2577;
          resultingOwnership = _out2578;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5656_recIdentsLo, _5659_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _5660_i;
      _5660_i = BigInteger.Zero;
      while ((_5660_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _5661_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _5662_m;
        RAST._IMod _out2579;
        _out2579 = DCOMP.COMP.GenModule((p).Select(_5660_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _5662_m = _out2579;
        _5661_generated = (_5662_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_5660_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _5661_generated);
        _5660_i = (_5660_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _5663_i;
      _5663_i = BigInteger.Zero;
      while ((_5663_i) < (new BigInteger((fullName).Count))) {
        if ((_5663_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_5663_i)));
        _5663_i = (_5663_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP
namespace DCOMPUTF16 {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in119 = (i).Drop(new BigInteger(2));
            i = _in119;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in120 = (i).Drop(BigInteger.One);
        i = _in120;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _5664___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_5664___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _5664___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5664___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in121 = (i).Drop(new BigInteger(2));
        i = _in121;
        goto TAIL_CALL_START;
      } else {
        _5664___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5664___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in122 = (i).Drop(BigInteger.One);
        i = _in122;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _5665___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_5665___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _5665___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5665___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in123 = (i).Drop(BigInteger.One);
        i = _in123;
        goto TAIL_CALL_START;
      } else {
        _5665___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5665___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in124 = (i).Drop(BigInteger.One);
        i = _in124;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMPUTF16.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMPUTF16.__default.has__special(i)))) && (!(DCOMPUTF16.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMPUTF16.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMPUTF16.__default.is__tuple__builder(i)) {
        return DCOMPUTF16.__default.better__tuple__builder__name(i);
      } else if ((DCOMPUTF16.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMPUTF16.__default.is__idiomatic__rust__id(i)) {
        return DCOMPUTF16.__default.idiomatic__rust(i);
      } else if (DCOMPUTF16.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _5666_r = DCOMPUTF16.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _5666_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static bool UnicodeChars { get {
      return false;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMPUTF16._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMPUTF16._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IOwnership>(DCOMPUTF16.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _5667_body;
      Dafny.ISequence<RAST._IModDecl> _out2580;
      _out2580 = DCOMPUTF16.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _5667_body = _out2580;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name), _5667_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _5668_i;
      _5668_i = BigInteger.Zero;
      while ((_5668_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _5669_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source191 = (body).Select(_5668_i);
        if (_source191.is_Module) {
          DAST._IModule _5670___mcc_h0 = _source191.dtor_Module_a0;
          DAST._IModule _5671_m = _5670___mcc_h0;
          RAST._IMod _5672_mm;
          RAST._IMod _out2581;
          _out2581 = DCOMPUTF16.COMP.GenModule(_5671_m, containingPath);
          _5672_mm = _out2581;
          _5669_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_5672_mm));
        } else if (_source191.is_Class) {
          DAST._IClass _5673___mcc_h1 = _source191.dtor_Class_a0;
          DAST._IClass _5674_c = _5673___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out2582;
          _out2582 = DCOMPUTF16.COMP.GenClass(_5674_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_5674_c).dtor_name)));
          _5669_generated = _out2582;
        } else if (_source191.is_Trait) {
          DAST._ITrait _5675___mcc_h2 = _source191.dtor_Trait_a0;
          DAST._ITrait _5676_t = _5675___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _5677_tt;
          Dafny.ISequence<Dafny.Rune> _out2583;
          _out2583 = DCOMPUTF16.COMP.GenTrait(_5676_t, containingPath);
          _5677_tt = _out2583;
          _5669_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_5677_tt));
        } else if (_source191.is_Newtype) {
          DAST._INewtype _5678___mcc_h3 = _source191.dtor_Newtype_a0;
          DAST._INewtype _5679_n = _5678___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out2584;
          _out2584 = DCOMPUTF16.COMP.GenNewtype(_5679_n);
          _5669_generated = _out2584;
        } else {
          DAST._IDatatype _5680___mcc_h4 = _source191.dtor_Datatype_a0;
          DAST._IDatatype _5681_d = _5680___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out2585;
          _out2585 = DCOMPUTF16.COMP.GenDatatype(_5681_d);
          _5669_generated = _out2585;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _5669_generated);
        _5668_i = (_5668_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _5682_tpI;
      _5682_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_5682_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _5683_tp;
          _5683_tp = (@params).Select(_5682_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_5683_tp));
          RAST._IType _5684_genTp;
          RAST._IType _out2586;
          _out2586 = DCOMPUTF16.COMP.GenType(_5683_tp, false, false);
          _5684_genTp = _out2586;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_5684_genTp)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _5682_tpI = (_5682_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _5685_baseConstraints;
      _5685_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _5685_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _5686_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _5687_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _5688_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _5689_whereConstraints;
      Dafny.ISet<DAST._IType> _out2587;
      Dafny.ISequence<RAST._ITypeParam> _out2588;
      Dafny.ISequence<RAST._ITypeParam> _out2589;
      Dafny.ISequence<Dafny.Rune> _out2590;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2587, out _out2588, out _out2589, out _out2590);
      _5686_typeParamsSet = _out2587;
      _5687_sTypeParams = _out2588;
      _5688_sConstrainedTypeParams = _out2589;
      _5689_whereConstraints = _out2590;
      Dafny.ISequence<Dafny.Rune> _5690_constrainedTypeParams;
      _5690_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_5688_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _5691_fields;
      _5691_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _5692_fieldInits;
      _5692_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _5693_fieldI;
      _5693_fieldI = BigInteger.Zero;
      while ((_5693_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _5694_field;
        _5694_field = ((c).dtor_fields).Select(_5693_fieldI);
        RAST._IType _5695_fieldType;
        RAST._IType _out2591;
        _out2591 = DCOMPUTF16.COMP.GenType(((_5694_field).dtor_formal).dtor_typ, false, false);
        _5695_fieldType = _out2591;
        _5691_fields = Dafny.Sequence<RAST._IFormal>.Concat(_5691_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMPUTF16.__default.escapeIdent(((_5694_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_5695_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source192 = (_5694_field).dtor_defaultValue;
        if (_source192.is_None) {
          {
            _5692_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5692_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_5694_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _5696___mcc_h0 = _source192.dtor_value;
          DAST._IExpression _5697_e = _5696___mcc_h0;
          {
            RAST._IExpr _5698_eStr;
            DCOMPUTF16._IOwnership _5699___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5700___v36;
            RAST._IExpr _out2592;
            DCOMPUTF16._IOwnership _out2593;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2594;
            DCOMPUTF16.COMP.GenExpr(_5697_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2592, out _out2593, out _out2594);
            _5698_eStr = _out2592;
            _5699___v35 = _out2593;
            _5700___v36 = _out2594;
            _5692_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5692_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_5694_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_5698_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _5693_fieldI = (_5693_fieldI) + (BigInteger.One);
      }
      BigInteger _5701_typeParamI;
      _5701_typeParamI = BigInteger.Zero;
      while ((_5701_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _5702_tpeGen;
        RAST._IType _out2595;
        _out2595 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_5701_typeParamI), false, false);
        _5702_tpeGen = _out2595;
        _5691_fields = Dafny.Sequence<RAST._IFormal>.Concat(_5691_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_5701_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_5702_tpeGen)))));
        _5692_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5692_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_5701_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _5701_typeParamI = (_5701_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _5703_struct;
      _5703_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5687_sTypeParams, RAST.Formals.create_NamedFormals(_5691_fields));
      Dafny.ISequence<RAST._IType> _5704_typeParamsAsTypes;
      _5704_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_5705_typeParam) => {
        return RAST.__default.RawType((_5705_typeParam).dtor_content);
      })), _5687_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_5703_struct));
      Dafny.ISequence<RAST._IImplMember> _5706_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _5707_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2596;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2597;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _5686_typeParamsSet, out _out2596, out _out2597);
      _5706_implBodyRaw = _out2596;
      _5707_traitBodies = _out2597;
      Dafny.ISequence<RAST._IImplMember> _5708_implBody;
      _5708_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5692_fieldInits))))), _5706_implBodyRaw);
      RAST._IImpl _5709_i;
      _5709_i = RAST.Impl.create_Impl(_5688_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5704_typeParamsAsTypes), _5689_whereConstraints, _5708_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5709_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _5710_i;
        _5710_i = BigInteger.Zero;
        while ((_5710_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _5711_superClass;
          _5711_superClass = ((c).dtor_superClasses).Select(_5710_i);
          DAST._IType _source193 = _5711_superClass;
          if (_source193.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5712___mcc_h1 = _source193.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5713___mcc_h2 = _source193.dtor_typeArgs;
            DAST._IResolvedType _5714___mcc_h3 = _source193.dtor_resolved;
            DAST._IResolvedType _source194 = _5714___mcc_h3;
            if (_source194.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5715___mcc_h7 = _source194.dtor_path;
            } else if (_source194.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5716___mcc_h9 = _source194.dtor_path;
              Dafny.ISequence<DAST._IType> _5717_typeArgs = _5713___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5718_traitPath = _5712___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _5719_pathStr;
                Dafny.ISequence<Dafny.Rune> _out2598;
                _out2598 = DCOMPUTF16.COMP.GenPath(_5718_traitPath);
                _5719_pathStr = _out2598;
                Dafny.ISequence<RAST._IType> _5720_typeArgs;
                Dafny.ISequence<RAST._IType> _out2599;
                _out2599 = DCOMPUTF16.COMP.GenTypeArgs(_5717_typeArgs, false, false);
                _5720_typeArgs = _out2599;
                Dafny.ISequence<RAST._IImplMember> _5721_body;
                _5721_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_5707_traitBodies).Contains(_5718_traitPath)) {
                  _5721_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_5707_traitBodies,_5718_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _5722_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out2600;
                _out2600 = DCOMPUTF16.COMP.GenPath(path);
                _5722_genSelfPath = _out2600;
                RAST._IModDecl _5723_x;
                _5723_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5688_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_5719_pathStr), _5720_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_5722_genSelfPath), _5704_typeParamsAsTypes)), _5689_whereConstraints, _5721_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_5723_x));
              }
            } else {
              DAST._IType _5724___mcc_h11 = _source194.dtor_baseType;
              DAST._INewtypeRange _5725___mcc_h12 = _source194.dtor_range;
              bool _5726___mcc_h13 = _source194.dtor_erase;
            }
          } else if (_source193.is_Nullable) {
            DAST._IType _5727___mcc_h17 = _source193.dtor_Nullable_a0;
          } else if (_source193.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5728___mcc_h19 = _source193.dtor_Tuple_a0;
          } else if (_source193.is_Array) {
            DAST._IType _5729___mcc_h21 = _source193.dtor_element;
            BigInteger _5730___mcc_h22 = _source193.dtor_dims;
          } else if (_source193.is_Seq) {
            DAST._IType _5731___mcc_h25 = _source193.dtor_element;
          } else if (_source193.is_Set) {
            DAST._IType _5732___mcc_h27 = _source193.dtor_element;
          } else if (_source193.is_Multiset) {
            DAST._IType _5733___mcc_h29 = _source193.dtor_element;
          } else if (_source193.is_Map) {
            DAST._IType _5734___mcc_h31 = _source193.dtor_key;
            DAST._IType _5735___mcc_h32 = _source193.dtor_value;
          } else if (_source193.is_SetBuilder) {
            DAST._IType _5736___mcc_h35 = _source193.dtor_element;
          } else if (_source193.is_MapBuilder) {
            DAST._IType _5737___mcc_h37 = _source193.dtor_key;
            DAST._IType _5738___mcc_h38 = _source193.dtor_value;
          } else if (_source193.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5739___mcc_h41 = _source193.dtor_args;
            DAST._IType _5740___mcc_h42 = _source193.dtor_result;
          } else if (_source193.is_Primitive) {
            DAST._IPrimitive _5741___mcc_h45 = _source193.dtor_Primitive_a0;
          } else if (_source193.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5742___mcc_h47 = _source193.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _5743___mcc_h49 = _source193.dtor_TypeArg_a0;
          }
          _5710_i = (_5710_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _5744_d;
      _5744_d = RAST.Impl.create_ImplFor(_5688_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5704_typeParamsAsTypes), _5689_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _5745_defaultImpl;
      _5745_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5744_d));
      RAST._IImpl _5746_p;
      _5746_p = RAST.Impl.create_ImplFor(_5688_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5704_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _5747_printImpl;
      _5747_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5746_p));
      RAST._IImpl _5748_pp;
      _5748_pp = RAST.Impl.create_ImplFor(_5687_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5704_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _5749_ptrPartialEqImpl;
      _5749_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5748_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _5745_defaultImpl), _5747_printImpl), _5749_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _5750_typeParamsSet;
      _5750_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _5751_typeParams;
      _5751_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _5752_tpI;
      _5752_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_5752_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _5753_tp;
          _5753_tp = ((t).dtor_typeParams).Select(_5752_tpI);
          _5750_typeParamsSet = Dafny.Set<DAST._IType>.Union(_5750_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_5753_tp));
          RAST._IType _5754_genTp;
          RAST._IType _out2601;
          _out2601 = DCOMPUTF16.COMP.GenType(_5753_tp, false, false);
          _5754_genTp = _out2601;
          _5751_typeParams = Dafny.Sequence<RAST._IType>.Concat(_5751_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_5754_genTp));
          _5752_tpI = (_5752_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5755_fullPath;
      _5755_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _5756_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _5757___v39;
      Dafny.ISequence<RAST._IImplMember> _out2602;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2603;
      DCOMPUTF16.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_5755_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_5755_fullPath)), _5750_typeParamsSet, out _out2602, out _out2603);
      _5756_implBody = _out2602;
      _5757___v39 = _out2603;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((t).dtor_name)), _5751_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _5756_implBody)))._ToString(DCOMPUTF16.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _5758_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _5759_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _5760_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _5761_whereConstraints;
      Dafny.ISet<DAST._IType> _out2604;
      Dafny.ISequence<RAST._ITypeParam> _out2605;
      Dafny.ISequence<RAST._ITypeParam> _out2606;
      Dafny.ISequence<Dafny.Rune> _out2607;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2604, out _out2605, out _out2606, out _out2607);
      _5758_typeParamsSet = _out2604;
      _5759_sTypeParams = _out2605;
      _5760_sConstrainedTypeParams = _out2606;
      _5761_whereConstraints = _out2607;
      Dafny.ISequence<RAST._IType> _5762_typeParamsAsTypes;
      _5762_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_5763_t) => {
        return RAST.__default.RawType((_5763_t).dtor_content);
      })), _5759_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _5764_constrainedTypeParams;
      _5764_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_5760_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _5765_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source195 = DCOMPUTF16.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source195.is_None) {
        RAST._IType _out2608;
        _out2608 = DCOMPUTF16.COMP.GenType((c).dtor_base, false, false);
        _5765_underlyingType = _out2608;
      } else {
        RAST._IType _5766___mcc_h0 = _source195.dtor_value;
        RAST._IType _5767_v = _5766___mcc_h0;
        _5765_underlyingType = _5767_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5759_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _5765_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _5768_fnBody;
      _5768_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source196 = (c).dtor_witnessExpr;
      if (_source196.is_None) {
        {
          _5768_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5768_fnBody, DCOMPUTF16.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _5769___mcc_h1 = _source196.dtor_value;
        DAST._IExpression _5770_e = _5769___mcc_h1;
        {
          RAST._IExpr _5771_eStr;
          DCOMPUTF16._IOwnership _5772___v40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5773___v41;
          RAST._IExpr _out2609;
          DCOMPUTF16._IOwnership _out2610;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2611;
          DCOMPUTF16.COMP.GenExpr(_5770_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2609, out _out2610, out _out2611);
          _5771_eStr = _out2609;
          _5772___v40 = _out2610;
          _5773___v41 = _out2611;
          _5768_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5768_fnBody, DCOMPUTF16.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5771_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _5774_body;
      _5774_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_5768_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5760_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5762_typeParamsAsTypes), _5761_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_5774_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5760_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5762_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5760_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5762_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_5765_underlyingType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _5775_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _5776_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _5777_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _5778_whereConstraints;
      Dafny.ISet<DAST._IType> _out2612;
      Dafny.ISequence<RAST._ITypeParam> _out2613;
      Dafny.ISequence<RAST._ITypeParam> _out2614;
      Dafny.ISequence<Dafny.Rune> _out2615;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2612, out _out2613, out _out2614, out _out2615);
      _5775_typeParamsSet = _out2612;
      _5776_sTypeParams = _out2613;
      _5777_sConstrainedTypeParams = _out2614;
      _5778_whereConstraints = _out2615;
      Dafny.ISequence<RAST._IType> _5779_typeParamsAsTypes;
      _5779_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_5780_t) => {
        return RAST.__default.RawType((_5780_t).dtor_content);
      })), _5776_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _5781_constrainedTypeParams;
      _5781_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_5777_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.IND, DCOMPUTF16.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _5782_ctors;
      _5782_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _5783_i;
      _5783_i = BigInteger.Zero;
      while ((_5783_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _5784_ctor;
        _5784_ctor = ((c).dtor_ctors).Select(_5783_i);
        Dafny.ISequence<RAST._IFormal> _5785_ctorArgs;
        _5785_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _5786_j;
        _5786_j = BigInteger.Zero;
        while ((_5786_j) < (new BigInteger(((_5784_ctor).dtor_args).Count))) {
          DAST._IFormal _5787_formal;
          _5787_formal = ((_5784_ctor).dtor_args).Select(_5786_j);
          RAST._IType _5788_formalType;
          RAST._IType _out2616;
          _out2616 = DCOMPUTF16.COMP.GenType((_5787_formal).dtor_typ, false, false);
          _5788_formalType = _out2616;
          if ((c).dtor_isCo) {
            _5785_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_5785_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_5787_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_5788_formalType)))));
          } else {
            _5785_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_5785_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_5787_formal).dtor_name), _5788_formalType)));
          }
          _5786_j = (_5786_j) + (BigInteger.One);
        }
        _5782_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_5782_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMPUTF16.__default.escapeIdent((_5784_ctor).dtor_name), RAST.Formals.create_NamedFormals(_5785_ctorArgs))));
        _5783_i = (_5783_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5789_selfPath;
      _5789_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _5790_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _5791_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2617;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2618;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_5789_selfPath)), _5775_typeParamsSet, out _out2617, out _out2618);
      _5790_implBodyRaw = _out2617;
      _5791_traitBodies = _out2618;
      Dafny.ISequence<RAST._IImplMember> _5792_implBody;
      _5792_implBody = _5790_implBodyRaw;
      _5783_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5793_emittedFields;
      _5793_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_5783_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _5794_ctor;
        _5794_ctor = ((c).dtor_ctors).Select(_5783_i);
        BigInteger _5795_j;
        _5795_j = BigInteger.Zero;
        while ((_5795_j) < (new BigInteger(((_5794_ctor).dtor_args).Count))) {
          DAST._IFormal _5796_formal;
          _5796_formal = ((_5794_ctor).dtor_args).Select(_5795_j);
          if (!((_5793_emittedFields).Contains((_5796_formal).dtor_name))) {
            _5793_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5793_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_5796_formal).dtor_name));
            RAST._IType _5797_formalType;
            RAST._IType _out2619;
            _out2619 = DCOMPUTF16.COMP.GenType((_5796_formal).dtor_typ, false, false);
            _5797_formalType = _out2619;
            Dafny.ISequence<RAST._IMatchCase> _5798_cases;
            _5798_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _5799_k;
            _5799_k = BigInteger.Zero;
            while ((_5799_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _5800_ctor2;
              _5800_ctor2 = ((c).dtor_ctors).Select(_5799_k);
              Dafny.ISequence<Dafny.Rune> _5801_pattern;
              _5801_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent((_5800_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _5802_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _5803_l;
              _5803_l = BigInteger.Zero;
              bool _5804_hasMatchingField;
              _5804_hasMatchingField = false;
              while ((_5803_l) < (new BigInteger(((_5800_ctor2).dtor_args).Count))) {
                DAST._IFormal _5805_formal2;
                _5805_formal2 = ((_5800_ctor2).dtor_args).Select(_5803_l);
                if (((_5796_formal).dtor_name).Equals((_5805_formal2).dtor_name)) {
                  _5804_hasMatchingField = true;
                }
                _5801_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5801_pattern, DCOMPUTF16.__default.escapeIdent((_5805_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _5803_l = (_5803_l) + (BigInteger.One);
              }
              _5801_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_5801_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_5804_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _5802_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMPUTF16.__default.escapeIdent((_5796_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _5802_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_5796_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _5802_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _5806_ctorMatch;
              _5806_ctorMatch = RAST.MatchCase.create(_5801_pattern, RAST.Expr.create_RawExpr(_5802_rhs));
              _5798_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5798_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_5806_ctorMatch));
              _5799_k = (_5799_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _5798_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5798_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _5807_methodBody;
            _5807_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _5798_cases);
            _5792_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_5792_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMPUTF16.__default.escapeIdent((_5796_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_5797_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_5807_methodBody)))));
          }
          _5795_j = (_5795_j) + (BigInteger.One);
        }
        _5783_i = (_5783_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _5808_typeI;
        _5808_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _5809_types;
        _5809_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_5808_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _5810_genTp;
          RAST._IType _out2620;
          _out2620 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_5808_typeI), false, false);
          _5810_genTp = _out2620;
          _5809_types = Dafny.Sequence<RAST._IType>.Concat(_5809_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_5810_genTp))));
          _5808_typeI = (_5808_typeI) + (BigInteger.One);
        }
        _5782_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_5782_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_5811_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _5811_tpe);
})), _5809_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _5812_enumBody;
      _5812_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5776_sTypeParams, _5782_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_5777_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5779_typeParamsAsTypes), _5778_whereConstraints, _5792_implBody)));
      _5783_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _5813_printImplBodyCases;
      _5813_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_5783_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _5814_ctor;
        _5814_ctor = ((c).dtor_ctors).Select(_5783_i);
        Dafny.ISequence<Dafny.Rune> _5815_ctorMatch;
        _5815_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_5814_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _5816_modulePrefix;
        _5816_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _5817_printRhs;
        _5817_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _5816_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent((_5814_ctor).dtor_name)), (((_5814_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _5818_j;
        _5818_j = BigInteger.Zero;
        while ((_5818_j) < (new BigInteger(((_5814_ctor).dtor_args).Count))) {
          DAST._IFormal _5819_formal;
          _5819_formal = ((_5814_ctor).dtor_args).Select(_5818_j);
          _5815_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5815_ctorMatch, DCOMPUTF16.__default.escapeIdent((_5819_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_5818_j).Sign == 1) {
            _5817_printRhs = (_5817_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _5817_printRhs = (_5817_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMPUTF16.__default.escapeIdent((_5819_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _5818_j = (_5818_j) + (BigInteger.One);
        }
        _5815_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_5815_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_5814_ctor).dtor_hasAnyArgs) {
          _5817_printRhs = (_5817_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _5817_printRhs = (_5817_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _5813_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5813_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _5815_ctorMatch), RAST.Expr.create_Block(_5817_printRhs))));
        _5783_i = (_5783_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _5813_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5813_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _5820_printImplBody;
      _5820_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _5813_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _5821_printImpl;
      _5821_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5777_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5779_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_5820_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _5822_defaultImpl;
      _5822_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _5783_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _5823_structName;
        _5823_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _5824_structAssignments;
        _5824_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_5783_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _5825_formal;
          _5825_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_5783_i);
          _5824_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5824_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent((_5825_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _5783_i = (_5783_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _5826_defaultConstrainedTypeParams;
        _5826_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_5776_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _5822_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5826_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5779_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_5823_structName, _5824_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_5812_enumBody, _5821_printImpl), _5822_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _5827_i;
        _5827_i = BigInteger.Zero;
        while ((_5827_i) < (new BigInteger((p).Count))) {
          if ((_5827_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMPUTF16.__default.escapeIdent(((p).Select(_5827_i))));
          _5827_i = (_5827_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _5828_i;
        _5828_i = BigInteger.Zero;
        while ((_5828_i) < (new BigInteger((args).Count))) {
          RAST._IType _5829_genTp;
          RAST._IType _out2621;
          _out2621 = DCOMPUTF16.COMP.GenType((args).Select(_5828_i), inBinding, inFn);
          _5829_genTp = _out2621;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_5829_genTp));
          _5828_i = (_5828_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source197 = c;
      if (_source197.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5830___mcc_h0 = _source197.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _5831___mcc_h1 = _source197.dtor_typeArgs;
        DAST._IResolvedType _5832___mcc_h2 = _source197.dtor_resolved;
        DAST._IResolvedType _5833_resolved = _5832___mcc_h2;
        Dafny.ISequence<DAST._IType> _5834_args = _5831___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5835_p = _5830___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _5836_t;
          Dafny.ISequence<Dafny.Rune> _out2622;
          _out2622 = DCOMPUTF16.COMP.GenPath(_5835_p);
          _5836_t = _out2622;
          s = RAST.Type.create_TIdentifier(_5836_t);
          Dafny.ISequence<RAST._IType> _5837_typeArgs;
          Dafny.ISequence<RAST._IType> _out2623;
          _out2623 = DCOMPUTF16.COMP.GenTypeArgs(_5834_args, inBinding, inFn);
          _5837_typeArgs = _out2623;
          s = RAST.Type.create_TypeApp(s, _5837_typeArgs);
          DAST._IResolvedType _source198 = _5833_resolved;
          if (_source198.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5838___mcc_h21 = _source198.dtor_path;
            {
              s = RAST.__default.Rc(s);
            }
          } else if (_source198.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5839___mcc_h22 = _source198.dtor_path;
            {
              if ((_5835_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>"));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _5840___mcc_h23 = _source198.dtor_baseType;
            DAST._INewtypeRange _5841___mcc_h24 = _source198.dtor_range;
            bool _5842___mcc_h25 = _source198.dtor_erase;
            bool _5843_erased = _5842___mcc_h25;
            DAST._INewtypeRange _5844_range = _5841___mcc_h24;
            DAST._IType _5845_t = _5840___mcc_h23;
            {
              if (_5843_erased) {
                Std.Wrappers._IOption<RAST._IType> _source199 = DCOMPUTF16.COMP.NewtypeToRustType(_5845_t, _5844_range);
                if (_source199.is_None) {
                } else {
                  RAST._IType _5846___mcc_h26 = _source199.dtor_value;
                  RAST._IType _5847_v = _5846___mcc_h26;
                  s = _5847_v;
                }
              }
            }
          }
        }
      } else if (_source197.is_Nullable) {
        DAST._IType _5848___mcc_h3 = _source197.dtor_Nullable_a0;
        DAST._IType _5849_inner = _5848___mcc_h3;
        {
          RAST._IType _5850_innerExpr;
          RAST._IType _out2624;
          _out2624 = DCOMPUTF16.COMP.GenType(_5849_inner, inBinding, inFn);
          _5850_innerExpr = _out2624;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_5850_innerExpr));
        }
      } else if (_source197.is_Tuple) {
        Dafny.ISequence<DAST._IType> _5851___mcc_h4 = _source197.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _5852_types = _5851___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _5853_args;
          _5853_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _5854_i;
          _5854_i = BigInteger.Zero;
          while ((_5854_i) < (new BigInteger((_5852_types).Count))) {
            RAST._IType _5855_generated;
            RAST._IType _out2625;
            _out2625 = DCOMPUTF16.COMP.GenType((_5852_types).Select(_5854_i), inBinding, inFn);
            _5855_generated = _out2625;
            _5853_args = Dafny.Sequence<RAST._IType>.Concat(_5853_args, Dafny.Sequence<RAST._IType>.FromElements(_5855_generated));
            _5854_i = (_5854_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_5853_args);
        }
      } else if (_source197.is_Array) {
        DAST._IType _5856___mcc_h5 = _source197.dtor_element;
        BigInteger _5857___mcc_h6 = _source197.dtor_dims;
        BigInteger _5858_dims = _5857___mcc_h6;
        DAST._IType _5859_element = _5856___mcc_h5;
        {
          RAST._IType _5860_elem;
          RAST._IType _out2626;
          _out2626 = DCOMPUTF16.COMP.GenType(_5859_element, inBinding, inFn);
          _5860_elem = _out2626;
          s = _5860_elem;
          BigInteger _5861_i;
          _5861_i = BigInteger.Zero;
          while ((_5861_i) < (_5858_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _5861_i = (_5861_i) + (BigInteger.One);
          }
        }
      } else if (_source197.is_Seq) {
        DAST._IType _5862___mcc_h7 = _source197.dtor_element;
        DAST._IType _5863_element = _5862___mcc_h7;
        {
          RAST._IType _5864_elem;
          RAST._IType _out2627;
          _out2627 = DCOMPUTF16.COMP.GenType(_5863_element, inBinding, inFn);
          _5864_elem = _out2627;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_5864_elem));
        }
      } else if (_source197.is_Set) {
        DAST._IType _5865___mcc_h8 = _source197.dtor_element;
        DAST._IType _5866_element = _5865___mcc_h8;
        {
          RAST._IType _5867_elem;
          RAST._IType _out2628;
          _out2628 = DCOMPUTF16.COMP.GenType(_5866_element, inBinding, inFn);
          _5867_elem = _out2628;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_5867_elem));
        }
      } else if (_source197.is_Multiset) {
        DAST._IType _5868___mcc_h9 = _source197.dtor_element;
        DAST._IType _5869_element = _5868___mcc_h9;
        {
          RAST._IType _5870_elem;
          RAST._IType _out2629;
          _out2629 = DCOMPUTF16.COMP.GenType(_5869_element, inBinding, inFn);
          _5870_elem = _out2629;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_5870_elem));
        }
      } else if (_source197.is_Map) {
        DAST._IType _5871___mcc_h10 = _source197.dtor_key;
        DAST._IType _5872___mcc_h11 = _source197.dtor_value;
        DAST._IType _5873_value = _5872___mcc_h11;
        DAST._IType _5874_key = _5871___mcc_h10;
        {
          RAST._IType _5875_keyType;
          RAST._IType _out2630;
          _out2630 = DCOMPUTF16.COMP.GenType(_5874_key, inBinding, inFn);
          _5875_keyType = _out2630;
          RAST._IType _5876_valueType;
          RAST._IType _out2631;
          _out2631 = DCOMPUTF16.COMP.GenType(_5873_value, inBinding, inFn);
          _5876_valueType = _out2631;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_5875_keyType, _5876_valueType));
        }
      } else if (_source197.is_SetBuilder) {
        DAST._IType _5877___mcc_h12 = _source197.dtor_element;
        DAST._IType _5878_elem = _5877___mcc_h12;
        {
          RAST._IType _5879_elemType;
          RAST._IType _out2632;
          _out2632 = DCOMPUTF16.COMP.GenType(_5878_elem, inBinding, inFn);
          _5879_elemType = _out2632;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_5879_elemType));
        }
      } else if (_source197.is_MapBuilder) {
        DAST._IType _5880___mcc_h13 = _source197.dtor_key;
        DAST._IType _5881___mcc_h14 = _source197.dtor_value;
        DAST._IType _5882_value = _5881___mcc_h14;
        DAST._IType _5883_key = _5880___mcc_h13;
        {
          RAST._IType _5884_keyType;
          RAST._IType _out2633;
          _out2633 = DCOMPUTF16.COMP.GenType(_5883_key, inBinding, inFn);
          _5884_keyType = _out2633;
          RAST._IType _5885_valueType;
          RAST._IType _out2634;
          _out2634 = DCOMPUTF16.COMP.GenType(_5882_value, inBinding, inFn);
          _5885_valueType = _out2634;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_5884_keyType, _5885_valueType));
        }
      } else if (_source197.is_Arrow) {
        Dafny.ISequence<DAST._IType> _5886___mcc_h15 = _source197.dtor_args;
        DAST._IType _5887___mcc_h16 = _source197.dtor_result;
        DAST._IType _5888_result = _5887___mcc_h16;
        Dafny.ISequence<DAST._IType> _5889_args = _5886___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _5890_argTypes;
          _5890_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _5891_i;
          _5891_i = BigInteger.Zero;
          while ((_5891_i) < (new BigInteger((_5889_args).Count))) {
            RAST._IType _5892_generated;
            RAST._IType _out2635;
            _out2635 = DCOMPUTF16.COMP.GenType((_5889_args).Select(_5891_i), inBinding, true);
            _5892_generated = _out2635;
            _5890_argTypes = Dafny.Sequence<RAST._IType>.Concat(_5890_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_5892_generated)));
            _5891_i = (_5891_i) + (BigInteger.One);
          }
          RAST._IType _5893_resultType;
          RAST._IType _out2636;
          _out2636 = DCOMPUTF16.COMP.GenType(_5888_result, inBinding, (inFn) || (inBinding));
          _5893_resultType = _out2636;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_5890_argTypes, RAST.Type.create_IntersectionType(_5893_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source197.is_Primitive) {
        DAST._IPrimitive _5894___mcc_h17 = _source197.dtor_Primitive_a0;
        DAST._IPrimitive _5895_p = _5894___mcc_h17;
        {
          DAST._IPrimitive _source200 = _5895_p;
          if (_source200.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source200.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source200.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar)));
          } else if (_source200.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar);
          }
        }
      } else if (_source197.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _5896___mcc_h18 = _source197.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _5897_v = _5896___mcc_h18;
        s = RAST.__default.RawType(_5897_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _5898___mcc_h19 = _source197.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source201 = _5898___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _5899___mcc_h20 = _source201;
        Dafny.ISequence<Dafny.Rune> _5900_name = _5899___mcc_h20;
        s = RAST.__default.RawType(DCOMPUTF16.__default.escapeIdent(_5900_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _5901_i;
      _5901_i = BigInteger.Zero;
      while ((_5901_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source202 = (body).Select(_5901_i);
        DAST._IMethod _5902___mcc_h0 = _source202;
        DAST._IMethod _5903_m = _5902___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source203 = (_5903_m).dtor_overridingPath;
          if (_source203.is_None) {
            {
              RAST._IImplMember _5904_generated;
              RAST._IImplMember _out2637;
              _out2637 = DCOMPUTF16.COMP.GenMethod(_5903_m, forTrait, enclosingType, enclosingTypeParams);
              _5904_generated = _out2637;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_5904_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5905___mcc_h1 = _source203.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5906_p = _5905___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _5907_existing;
              _5907_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_5906_p)) {
                _5907_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_5906_p);
              }
              RAST._IImplMember _5908_genMethod;
              RAST._IImplMember _out2638;
              _out2638 = DCOMPUTF16.COMP.GenMethod(_5903_m, true, enclosingType, enclosingTypeParams);
              _5908_genMethod = _out2638;
              _5907_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_5907_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_5908_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_5906_p, _5907_existing)));
            }
          }
        }
        _5901_i = (_5901_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _5909_i;
      _5909_i = BigInteger.Zero;
      while ((_5909_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _5910_param;
        _5910_param = (@params).Select(_5909_i);
        RAST._IType _5911_paramType;
        RAST._IType _out2639;
        _out2639 = DCOMPUTF16.COMP.GenType((_5910_param).dtor_typ, false, false);
        _5911_paramType = _out2639;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_5910_param).dtor_name), RAST.Type.create_Borrowed(_5911_paramType))));
        _5909_i = (_5909_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _5912_params;
      Dafny.ISequence<RAST._IFormal> _out2640;
      _out2640 = DCOMPUTF16.COMP.GenParams((m).dtor_params);
      _5912_params = _out2640;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5913_paramNames;
      _5913_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _5914_paramI;
      _5914_paramI = BigInteger.Zero;
      while ((_5914_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _5913_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5913_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_5914_paramI)).dtor_name));
        _5914_paramI = (_5914_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _5912_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _5912_params);
        } else {
          RAST._IType _5915_tpe;
          RAST._IType _out2641;
          _out2641 = DCOMPUTF16.COMP.GenType(enclosingType, false, false);
          _5915_tpe = _out2641;
          _5912_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_5915_tpe))), _5912_params);
        }
      }
      Dafny.ISequence<RAST._IType> _5916_retTypeArgs;
      _5916_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _5917_typeI;
      _5917_typeI = BigInteger.Zero;
      while ((_5917_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _5918_typeExpr;
        RAST._IType _out2642;
        _out2642 = DCOMPUTF16.COMP.GenType(((m).dtor_outTypes).Select(_5917_typeI), false, false);
        _5918_typeExpr = _out2642;
        _5916_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_5916_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_5918_typeExpr));
        _5917_typeI = (_5917_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _5919_visibility;
      _5919_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _5920_fnName;
      _5920_fnName = DCOMPUTF16.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _5921_typeParamsFiltered;
      _5921_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _5922_typeParamI;
      _5922_typeParamI = BigInteger.Zero;
      while ((_5922_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _5923_typeParam;
        _5923_typeParam = ((m).dtor_typeParams).Select(_5922_typeParamI);
        if (!((enclosingTypeParams).Contains(_5923_typeParam))) {
          _5921_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_5921_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_5923_typeParam));
        }
        _5922_typeParamI = (_5922_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _5924_whereClauses;
      _5924_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _5925_typeParams;
      _5925_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_5921_typeParamsFiltered).Count)).Sign == 1) {
        _5924_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_5924_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _5926_i;
        _5926_i = BigInteger.Zero;
        while ((_5926_i) < (new BigInteger((_5921_typeParamsFiltered).Count))) {
          RAST._IType _5927_typeExpr;
          RAST._IType _out2643;
          _out2643 = DCOMPUTF16.COMP.GenType((_5921_typeParamsFiltered).Select(_5926_i), false, false);
          _5927_typeExpr = _out2643;
          _5925_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_5925_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_5927_typeExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _5926_i = (_5926_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _5928_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _5929_earlyReturn;
        _5929_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source204 = (m).dtor_outVars;
        if (_source204.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5930___mcc_h0 = _source204.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5931_outVars = _5930___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _5932_tupleArgs;
            _5932_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _5933_outI;
            _5933_outI = BigInteger.Zero;
            while ((_5933_outI) < (new BigInteger((_5931_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _5934_outVar;
              _5934_outVar = (_5931_outVars).Select(_5933_outI);
              _5932_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_5932_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((_5934_outVar)))));
              _5933_outI = (_5933_outI) + (BigInteger.One);
            }
            _5929_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_5932_tupleArgs)));
          }
        }
        RAST._IExpr _5935_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5936___v44;
        RAST._IExpr _out2644;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2645;
        DCOMPUTF16.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _5913_paramNames, true, _5929_earlyReturn, out _out2644, out _out2645);
        _5935_body = _out2644;
        _5936___v44 = _out2645;
        _5928_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_5935_body);
      } else {
        _5928_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_5919_visibility, RAST.Fn.create(_5920_fnName, _5925_typeParams, _5912_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_5916_retTypeArgs).Count)) == (BigInteger.One)) ? ((_5916_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_5916_retTypeArgs)))), _5924_whereClauses, _5928_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5937_declarations;
      _5937_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _5938_i;
      _5938_i = BigInteger.Zero;
      while ((_5938_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _5939_stmt;
        _5939_stmt = (stmts).Select(_5938_i);
        RAST._IExpr _5940_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5941_recIdents;
        RAST._IExpr _out2646;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2647;
        DCOMPUTF16.COMP.GenStmt(_5939_stmt, selfIdent, @params, (isLast) && ((_5938_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out2646, out _out2647);
        _5940_stmtExpr = _out2646;
        _5941_recIdents = _out2647;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5941_recIdents, _5937_declarations));
        DAST._IStatement _source205 = _5939_stmt;
        if (_source205.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _5942___mcc_h0 = _source205.dtor_name;
          DAST._IType _5943___mcc_h1 = _source205.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _5944___mcc_h2 = _source205.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _5945_name = _5942___mcc_h0;
          {
            _5937_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5937_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5945_name));
          }
        } else if (_source205.is_Assign) {
          DAST._IAssignLhs _5946___mcc_h6 = _source205.dtor_lhs;
          DAST._IExpression _5947___mcc_h7 = _source205.dtor_value;
        } else if (_source205.is_If) {
          DAST._IExpression _5948___mcc_h10 = _source205.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _5949___mcc_h11 = _source205.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _5950___mcc_h12 = _source205.dtor_els;
        } else if (_source205.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _5951___mcc_h16 = _source205.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _5952___mcc_h17 = _source205.dtor_body;
        } else if (_source205.is_While) {
          DAST._IExpression _5953___mcc_h20 = _source205.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _5954___mcc_h21 = _source205.dtor_body;
        } else if (_source205.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _5955___mcc_h24 = _source205.dtor_boundName;
          DAST._IType _5956___mcc_h25 = _source205.dtor_boundType;
          DAST._IExpression _5957___mcc_h26 = _source205.dtor_over;
          Dafny.ISequence<DAST._IStatement> _5958___mcc_h27 = _source205.dtor_body;
        } else if (_source205.is_Call) {
          DAST._IExpression _5959___mcc_h32 = _source205.dtor_on;
          DAST._ICallName _5960___mcc_h33 = _source205.dtor_callName;
          Dafny.ISequence<DAST._IType> _5961___mcc_h34 = _source205.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5962___mcc_h35 = _source205.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _5963___mcc_h36 = _source205.dtor_outs;
        } else if (_source205.is_Return) {
          DAST._IExpression _5964___mcc_h42 = _source205.dtor_expr;
        } else if (_source205.is_EarlyReturn) {
        } else if (_source205.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5965___mcc_h44 = _source205.dtor_toLabel;
        } else if (_source205.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _5966___mcc_h46 = _source205.dtor_body;
        } else if (_source205.is_JumpTailCallStart) {
        } else if (_source205.is_Halt) {
        } else {
          DAST._IExpression _5967___mcc_h48 = _source205.dtor_Print_a0;
        }
        generated = (generated).Then(_5940_stmtExpr);
        _5938_i = (_5938_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source206 = lhs;
      if (_source206.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _5968___mcc_h0 = _source206.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source207 = _5968___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _5969___mcc_h1 = _source207;
        Dafny.ISequence<Dafny.Rune> _5970_id = _5969___mcc_h1;
        {
          if ((@params).Contains(_5970_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMPUTF16.__default.escapeIdent(_5970_id));
          } else {
            generated = DCOMPUTF16.__default.escapeIdent(_5970_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5970_id);
          needsIIFE = false;
        }
      } else if (_source206.is_Select) {
        DAST._IExpression _5971___mcc_h2 = _source206.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5972___mcc_h3 = _source206.dtor_field;
        Dafny.ISequence<Dafny.Rune> _5973_field = _5972___mcc_h3;
        DAST._IExpression _5974_on = _5971___mcc_h2;
        {
          RAST._IExpr _5975_onExpr;
          DCOMPUTF16._IOwnership _5976_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5977_recIdents;
          RAST._IExpr _out2648;
          DCOMPUTF16._IOwnership _out2649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2650;
          DCOMPUTF16.COMP.GenExpr(_5974_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2648, out _out2649, out _out2650);
          _5975_onExpr = _out2648;
          _5976_onOwned = _out2649;
          _5977_recIdents = _out2650;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_5975_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _5973_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _5977_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _5978___mcc_h4 = _source206.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _5979___mcc_h5 = _source206.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _5980_indices = _5979___mcc_h5;
        DAST._IExpression _5981_on = _5978___mcc_h4;
        {
          RAST._IExpr _5982_onExpr;
          DCOMPUTF16._IOwnership _5983_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5984_recIdents;
          RAST._IExpr _out2651;
          DCOMPUTF16._IOwnership _out2652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2653;
          DCOMPUTF16.COMP.GenExpr(_5981_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2651, out _out2652, out _out2653);
          _5982_onExpr = _out2651;
          _5983_onOwned = _out2652;
          _5984_recIdents = _out2653;
          readIdents = _5984_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _5985_i;
          _5985_i = BigInteger.Zero;
          while ((_5985_i) < (new BigInteger((_5980_indices).Count))) {
            RAST._IExpr _5986_idx;
            DCOMPUTF16._IOwnership _5987___v48;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5988_recIdentsIdx;
            RAST._IExpr _out2654;
            DCOMPUTF16._IOwnership _out2655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2656;
            DCOMPUTF16.COMP.GenExpr((_5980_indices).Select(_5985_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2654, out _out2655, out _out2656);
            _5986_idx = _out2654;
            _5987___v48 = _out2655;
            _5988_recIdentsIdx = _out2656;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_5985_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_5986_idx)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5988_recIdentsIdx);
            _5985_i = (_5985_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_5982_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _5985_i = BigInteger.Zero;
          while ((_5985_i) < (new BigInteger((_5980_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_5985_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _5985_i = (_5985_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source208 = stmt;
      if (_source208.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _5989___mcc_h0 = _source208.dtor_name;
        DAST._IType _5990___mcc_h1 = _source208.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _5991___mcc_h2 = _source208.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source209 = _5991___mcc_h2;
        if (_source209.is_None) {
          DAST._IType _5992_typ = _5990___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _5993_name = _5989___mcc_h0;
          {
            RAST._IType _5994_typeString;
            RAST._IType _out2657;
            _out2657 = DCOMPUTF16.COMP.GenType(_5992_typ, true, false);
            _5994_typeString = _out2657;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_5993_name), Std.Wrappers.Option<RAST._IType>.create_Some(_5994_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _5995___mcc_h3 = _source209.dtor_value;
          DAST._IExpression _5996_expression = _5995___mcc_h3;
          DAST._IType _5997_typ = _5990___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _5998_name = _5989___mcc_h0;
          {
            RAST._IType _5999_typeString;
            RAST._IType _out2658;
            _out2658 = DCOMPUTF16.COMP.GenType(_5997_typ, true, false);
            _5999_typeString = _out2658;
            RAST._IExpr _6000_expr;
            DCOMPUTF16._IOwnership _6001___v49;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6002_recIdents;
            RAST._IExpr _out2659;
            DCOMPUTF16._IOwnership _out2660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2661;
            DCOMPUTF16.COMP.GenExpr(_5996_expression, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2659, out _out2660, out _out2661);
            _6000_expr = _out2659;
            _6001___v49 = _out2660;
            _6002_recIdents = _out2661;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_5998_name), Std.Wrappers.Option<RAST._IType>.create_Some(_5999_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6000_expr));
            readIdents = _6002_recIdents;
          }
        }
      } else if (_source208.is_Assign) {
        DAST._IAssignLhs _6003___mcc_h4 = _source208.dtor_lhs;
        DAST._IExpression _6004___mcc_h5 = _source208.dtor_value;
        DAST._IExpression _6005_expression = _6004___mcc_h5;
        DAST._IAssignLhs _6006_lhs = _6003___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _6007_lhsGen;
          bool _6008_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6009_recIdents;
          Dafny.ISequence<Dafny.Rune> _out2662;
          bool _out2663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2664;
          DCOMPUTF16.COMP.GenAssignLhs(_6006_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out2662, out _out2663, out _out2664);
          _6007_lhsGen = _out2662;
          _6008_needsIIFE = _out2663;
          _6009_recIdents = _out2664;
          RAST._IExpr _6010_exprGen;
          DCOMPUTF16._IOwnership _6011___v50;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6012_exprIdents;
          RAST._IExpr _out2665;
          DCOMPUTF16._IOwnership _out2666;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2667;
          DCOMPUTF16.COMP.GenExpr(_6005_expression, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2665, out _out2666, out _out2667);
          _6010_exprGen = _out2665;
          _6011___v50 = _out2666;
          _6012_exprIdents = _out2667;
          if (_6008_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6010_exprGen)), RAST.Expr.create_RawExpr(_6007_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_6007_lhsGen, _6010_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6009_recIdents, _6012_exprIdents);
        }
      } else if (_source208.is_If) {
        DAST._IExpression _6013___mcc_h6 = _source208.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _6014___mcc_h7 = _source208.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _6015___mcc_h8 = _source208.dtor_els;
        Dafny.ISequence<DAST._IStatement> _6016_els = _6015___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _6017_thn = _6014___mcc_h7;
        DAST._IExpression _6018_cond = _6013___mcc_h6;
        {
          RAST._IExpr _6019_cond;
          DCOMPUTF16._IOwnership _6020___v51;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6021_recIdents;
          RAST._IExpr _out2668;
          DCOMPUTF16._IOwnership _out2669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2670;
          DCOMPUTF16.COMP.GenExpr(_6018_cond, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2668, out _out2669, out _out2670);
          _6019_cond = _out2668;
          _6020___v51 = _out2669;
          _6021_recIdents = _out2670;
          Dafny.ISequence<Dafny.Rune> _6022_condString;
          _6022_condString = (_6019_cond)._ToString(DCOMPUTF16.__default.IND);
          readIdents = _6021_recIdents;
          RAST._IExpr _6023_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6024_thnIdents;
          RAST._IExpr _out2671;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2672;
          DCOMPUTF16.COMP.GenStmts(_6017_thn, selfIdent, @params, isLast, earlyReturn, out _out2671, out _out2672);
          _6023_thn = _out2671;
          _6024_thnIdents = _out2672;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6024_thnIdents);
          RAST._IExpr _6025_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6026_elsIdents;
          RAST._IExpr _out2673;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2674;
          DCOMPUTF16.COMP.GenStmts(_6016_els, selfIdent, @params, isLast, earlyReturn, out _out2673, out _out2674);
          _6025_els = _out2673;
          _6026_elsIdents = _out2674;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6026_elsIdents);
          generated = RAST.Expr.create_IfExpr(_6019_cond, _6023_thn, _6025_els);
        }
      } else if (_source208.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _6027___mcc_h9 = _source208.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _6028___mcc_h10 = _source208.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6029_body = _6028___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _6030_lbl = _6027___mcc_h9;
        {
          RAST._IExpr _6031_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6032_bodyIdents;
          RAST._IExpr _out2675;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2676;
          DCOMPUTF16.COMP.GenStmts(_6029_body, selfIdent, @params, isLast, earlyReturn, out _out2675, out _out2676);
          _6031_body = _out2675;
          _6032_bodyIdents = _out2676;
          readIdents = _6032_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _6030_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_6031_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source208.is_While) {
        DAST._IExpression _6033___mcc_h11 = _source208.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _6034___mcc_h12 = _source208.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6035_body = _6034___mcc_h12;
        DAST._IExpression _6036_cond = _6033___mcc_h11;
        {
          RAST._IExpr _6037_cond;
          DCOMPUTF16._IOwnership _6038___v52;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6039_recIdents;
          RAST._IExpr _out2677;
          DCOMPUTF16._IOwnership _out2678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2679;
          DCOMPUTF16.COMP.GenExpr(_6036_cond, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2677, out _out2678, out _out2679);
          _6037_cond = _out2677;
          _6038___v52 = _out2678;
          _6039_recIdents = _out2679;
          readIdents = _6039_recIdents;
          RAST._IExpr _6040_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6041_bodyIdents;
          RAST._IExpr _out2680;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2681;
          DCOMPUTF16.COMP.GenStmts(_6035_body, selfIdent, @params, false, earlyReturn, out _out2680, out _out2681);
          _6040_body = _out2680;
          _6041_bodyIdents = _out2681;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6041_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_6037_cond), _6040_body);
        }
      } else if (_source208.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _6042___mcc_h13 = _source208.dtor_boundName;
        DAST._IType _6043___mcc_h14 = _source208.dtor_boundType;
        DAST._IExpression _6044___mcc_h15 = _source208.dtor_over;
        Dafny.ISequence<DAST._IStatement> _6045___mcc_h16 = _source208.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6046_body = _6045___mcc_h16;
        DAST._IExpression _6047_over = _6044___mcc_h15;
        DAST._IType _6048_boundType = _6043___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _6049_boundName = _6042___mcc_h13;
        {
          RAST._IExpr _6050_over;
          DCOMPUTF16._IOwnership _6051___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6052_recIdents;
          RAST._IExpr _out2682;
          DCOMPUTF16._IOwnership _out2683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2684;
          DCOMPUTF16.COMP.GenExpr(_6047_over, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2682, out _out2683, out _out2684);
          _6050_over = _out2682;
          _6051___v53 = _out2683;
          _6052_recIdents = _out2684;
          RAST._IType _6053_boundTypeStr;
          RAST._IType _out2685;
          _out2685 = DCOMPUTF16.COMP.GenType(_6048_boundType, false, false);
          _6053_boundTypeStr = _out2685;
          readIdents = _6052_recIdents;
          RAST._IExpr _6054_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6055_bodyIdents;
          RAST._IExpr _out2686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2687;
          DCOMPUTF16.COMP.GenStmts(_6046_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6049_boundName)), false, earlyReturn, out _out2686, out _out2687);
          _6054_body = _out2686;
          _6055_bodyIdents = _out2687;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6055_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6049_boundName));
          generated = RAST.Expr.create_For(DCOMPUTF16.__default.escapeIdent(_6049_boundName), _6050_over, _6054_body);
        }
      } else if (_source208.is_Call) {
        DAST._IExpression _6056___mcc_h17 = _source208.dtor_on;
        DAST._ICallName _6057___mcc_h18 = _source208.dtor_callName;
        Dafny.ISequence<DAST._IType> _6058___mcc_h19 = _source208.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _6059___mcc_h20 = _source208.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6060___mcc_h21 = _source208.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6061_maybeOutVars = _6060___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _6062_args = _6059___mcc_h20;
        Dafny.ISequence<DAST._IType> _6063_typeArgs = _6058___mcc_h19;
        DAST._ICallName _6064_name = _6057___mcc_h18;
        DAST._IExpression _6065_on = _6056___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6066_typeArgString;
          _6066_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_6063_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _6067_typeI;
            _6067_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _6068_typeArgsR;
            _6068_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_6067_typeI) < (new BigInteger((_6063_typeArgs).Count))) {
              RAST._IType _6069_tpe;
              RAST._IType _out2688;
              _out2688 = DCOMPUTF16.COMP.GenType((_6063_typeArgs).Select(_6067_typeI), false, false);
              _6069_tpe = _out2688;
              _6068_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_6068_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_6069_tpe));
              _6067_typeI = (_6067_typeI) + (BigInteger.One);
            }
            _6066_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _6068_typeArgsR))._ToString(DCOMPUTF16.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _6070_argString;
          _6070_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _6071_i;
          _6071_i = BigInteger.Zero;
          while ((_6071_i) < (new BigInteger((_6062_args).Count))) {
            if ((_6071_i).Sign == 1) {
              _6070_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6070_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _6072_argExpr;
            DCOMPUTF16._IOwnership _6073_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6074_argIdents;
            RAST._IExpr _out2689;
            DCOMPUTF16._IOwnership _out2690;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2691;
            DCOMPUTF16.COMP.GenExpr((_6062_args).Select(_6071_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2689, out _out2690, out _out2691);
            _6072_argExpr = _out2689;
            _6073_ownership = _out2690;
            _6074_argIdents = _out2691;
            Dafny.ISequence<Dafny.Rune> _6075_argExprString;
            _6075_argExprString = (_6072_argExpr)._ToString(DCOMPUTF16.__default.IND);
            _6070_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6070_argString, _6075_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6074_argIdents);
            _6071_i = (_6071_i) + (BigInteger.One);
          }
          RAST._IExpr _6076_onExpr;
          DCOMPUTF16._IOwnership _6077___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6078_enclosingIdents;
          RAST._IExpr _out2692;
          DCOMPUTF16._IOwnership _out2693;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2694;
          DCOMPUTF16.COMP.GenExpr(_6065_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out2692, out _out2693, out _out2694);
          _6076_onExpr = _out2692;
          _6077___v54 = _out2693;
          _6078_enclosingIdents = _out2694;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6078_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _6079_enclosingString;
          _6079_enclosingString = (_6076_onExpr)._ToString(DCOMPUTF16.__default.IND);
          DAST._IExpression _source210 = _6065_on;
          if (_source210.is_Literal) {
            DAST._ILiteral _6080___mcc_h26 = _source210.dtor_Literal_a0;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _6081___mcc_h28 = _source210.dtor_Ident_a0;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6082___mcc_h30 = _source210.dtor_Companion_a0;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_6079_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source210.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _6083___mcc_h32 = _source210.dtor_Tuple_a0;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6084___mcc_h34 = _source210.dtor_path;
            Dafny.ISequence<DAST._IType> _6085___mcc_h35 = _source210.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6086___mcc_h36 = _source210.dtor_args;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _6087___mcc_h40 = _source210.dtor_dims;
            DAST._IType _6088___mcc_h41 = _source210.dtor_typ;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6089___mcc_h44 = _source210.dtor_path;
            Dafny.ISequence<DAST._IType> _6090___mcc_h45 = _source210.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _6091___mcc_h46 = _source210.dtor_variant;
            bool _6092___mcc_h47 = _source210.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6093___mcc_h48 = _source210.dtor_contents;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Convert) {
            DAST._IExpression _6094___mcc_h54 = _source210.dtor_value;
            DAST._IType _6095___mcc_h55 = _source210.dtor_from;
            DAST._IType _6096___mcc_h56 = _source210.dtor_typ;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SeqConstruct) {
            DAST._IExpression _6097___mcc_h60 = _source210.dtor_length;
            DAST._IExpression _6098___mcc_h61 = _source210.dtor_elem;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _6099___mcc_h64 = _source210.dtor_elements;
            DAST._IType _6100___mcc_h65 = _source210.dtor_typ;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _6101___mcc_h68 = _source210.dtor_elements;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _6102___mcc_h70 = _source210.dtor_elements;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6103___mcc_h72 = _source210.dtor_mapElems;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_MapBuilder) {
            DAST._IType _6104___mcc_h74 = _source210.dtor_keyType;
            DAST._IType _6105___mcc_h75 = _source210.dtor_valueType;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SeqUpdate) {
            DAST._IExpression _6106___mcc_h78 = _source210.dtor_expr;
            DAST._IExpression _6107___mcc_h79 = _source210.dtor_indexExpr;
            DAST._IExpression _6108___mcc_h80 = _source210.dtor_value;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_MapUpdate) {
            DAST._IExpression _6109___mcc_h84 = _source210.dtor_expr;
            DAST._IExpression _6110___mcc_h85 = _source210.dtor_indexExpr;
            DAST._IExpression _6111___mcc_h86 = _source210.dtor_value;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SetBuilder) {
            DAST._IType _6112___mcc_h90 = _source210.dtor_elemType;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_ToMultiset) {
            DAST._IExpression _6113___mcc_h92 = _source210.dtor_ToMultiset_a0;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_This) {
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Ite) {
            DAST._IExpression _6114___mcc_h94 = _source210.dtor_cond;
            DAST._IExpression _6115___mcc_h95 = _source210.dtor_thn;
            DAST._IExpression _6116___mcc_h96 = _source210.dtor_els;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_UnOp) {
            DAST._IUnaryOp _6117___mcc_h100 = _source210.dtor_unOp;
            DAST._IExpression _6118___mcc_h101 = _source210.dtor_expr;
            DAST.Format._IUnaryOpFormat _6119___mcc_h102 = _source210.dtor_format1;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_BinOp) {
            DAST._IBinOp _6120___mcc_h106 = _source210.dtor_op;
            DAST._IExpression _6121___mcc_h107 = _source210.dtor_left;
            DAST._IExpression _6122___mcc_h108 = _source210.dtor_right;
            DAST.Format._IBinaryOpFormat _6123___mcc_h109 = _source210.dtor_format2;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_ArrayLen) {
            DAST._IExpression _6124___mcc_h114 = _source210.dtor_expr;
            BigInteger _6125___mcc_h115 = _source210.dtor_dim;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_MapKeys) {
            DAST._IExpression _6126___mcc_h118 = _source210.dtor_expr;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_MapValues) {
            DAST._IExpression _6127___mcc_h120 = _source210.dtor_expr;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Select) {
            DAST._IExpression _6128___mcc_h122 = _source210.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6129___mcc_h123 = _source210.dtor_field;
            bool _6130___mcc_h124 = _source210.dtor_isConstant;
            bool _6131___mcc_h125 = _source210.dtor_onDatatype;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SelectFn) {
            DAST._IExpression _6132___mcc_h130 = _source210.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6133___mcc_h131 = _source210.dtor_field;
            bool _6134___mcc_h132 = _source210.dtor_onDatatype;
            bool _6135___mcc_h133 = _source210.dtor_isStatic;
            BigInteger _6136___mcc_h134 = _source210.dtor_arity;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Index) {
            DAST._IExpression _6137___mcc_h140 = _source210.dtor_expr;
            DAST._ICollKind _6138___mcc_h141 = _source210.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _6139___mcc_h142 = _source210.dtor_indices;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_IndexRange) {
            DAST._IExpression _6140___mcc_h146 = _source210.dtor_expr;
            bool _6141___mcc_h147 = _source210.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _6142___mcc_h148 = _source210.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _6143___mcc_h149 = _source210.dtor_high;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_TupleSelect) {
            DAST._IExpression _6144___mcc_h154 = _source210.dtor_expr;
            BigInteger _6145___mcc_h155 = _source210.dtor_index;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Call) {
            DAST._IExpression _6146___mcc_h158 = _source210.dtor_on;
            DAST._ICallName _6147___mcc_h159 = _source210.dtor_callName;
            Dafny.ISequence<DAST._IType> _6148___mcc_h160 = _source210.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6149___mcc_h161 = _source210.dtor_args;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _6150___mcc_h166 = _source210.dtor_params;
            DAST._IType _6151___mcc_h167 = _source210.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _6152___mcc_h168 = _source210.dtor_body;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6153___mcc_h172 = _source210.dtor_values;
            DAST._IType _6154___mcc_h173 = _source210.dtor_retType;
            DAST._IExpression _6155___mcc_h174 = _source210.dtor_expr;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _6156___mcc_h178 = _source210.dtor_name;
            DAST._IType _6157___mcc_h179 = _source210.dtor_typ;
            DAST._IExpression _6158___mcc_h180 = _source210.dtor_value;
            DAST._IExpression _6159___mcc_h181 = _source210.dtor_iifeBody;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_Apply) {
            DAST._IExpression _6160___mcc_h186 = _source210.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _6161___mcc_h187 = _source210.dtor_args;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_TypeTest) {
            DAST._IExpression _6162___mcc_h190 = _source210.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6163___mcc_h191 = _source210.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _6164___mcc_h192 = _source210.dtor_variant;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_InitializationValue) {
            DAST._IType _6165___mcc_h196 = _source210.dtor_typ;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_BoolBoundedPool) {
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SetBoundedPool) {
            DAST._IExpression _6166___mcc_h198 = _source210.dtor_of;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source210.is_SeqBoundedPool) {
            DAST._IExpression _6167___mcc_h200 = _source210.dtor_of;
            bool _6168___mcc_h201 = _source210.dtor_includeDuplicates;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _6169___mcc_h204 = _source210.dtor_lo;
            DAST._IExpression _6170___mcc_h205 = _source210.dtor_hi;
            {
              _6079_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6079_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _6171_receiver;
          _6171_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source211 = _6061_maybeOutVars;
          if (_source211.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6172___mcc_h208 = _source211.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6173_outVars = _6172___mcc_h208;
            {
              if ((new BigInteger((_6173_outVars).Count)) > (BigInteger.One)) {
                _6171_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _6174_outI;
              _6174_outI = BigInteger.Zero;
              while ((_6174_outI) < (new BigInteger((_6173_outVars).Count))) {
                if ((_6174_outI).Sign == 1) {
                  _6171_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6171_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _6175_outVar;
                _6175_outVar = (_6173_outVars).Select(_6174_outI);
                _6171_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6171_receiver, (_6175_outVar));
                _6174_outI = (_6174_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_6173_outVars).Count)) > (BigInteger.One)) {
                _6171_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6171_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _6176_renderedName;
          _6176_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source212) => {
            if (_source212.is_Name) {
              Dafny.ISequence<Dafny.Rune> _6177___mcc_h209 = _source212.dtor_name;
              Dafny.ISequence<Dafny.Rune> _6178_name = _6177___mcc_h209;
              return DCOMPUTF16.__default.escapeIdent(_6178_name);
            } else if (_source212.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source212.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source212.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_6064_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_6171_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_6171_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _6079_enclosingString), _6176_renderedName), _6066_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6070_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source208.is_Return) {
        DAST._IExpression _6179___mcc_h22 = _source208.dtor_expr;
        DAST._IExpression _6180_expr = _6179___mcc_h22;
        {
          RAST._IExpr _6181_expr;
          DCOMPUTF16._IOwnership _6182___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6183_recIdents;
          RAST._IExpr _out2695;
          DCOMPUTF16._IOwnership _out2696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2697;
          DCOMPUTF16.COMP.GenExpr(_6180_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2695, out _out2696, out _out2697);
          _6181_expr = _out2695;
          _6182___v57 = _out2696;
          _6183_recIdents = _out2697;
          readIdents = _6183_recIdents;
          if (isLast) {
            generated = _6181_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_6181_expr));
          }
        }
      } else if (_source208.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source208.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6184___mcc_h23 = _source208.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6185_toLabel = _6184___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source213 = _6185_toLabel;
          if (_source213.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6186___mcc_h210 = _source213.dtor_value;
            Dafny.ISequence<Dafny.Rune> _6187_lbl = _6186___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _6187_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source208.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _6188___mcc_h24 = _source208.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6189_body = _6188___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _6190_paramI;
          _6190_paramI = BigInteger.Zero;
          while ((_6190_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _6191_param;
            _6191_param = (@params).Select(_6190_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6191_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_6191_param))))));
            _6190_paramI = (_6190_paramI) + (BigInteger.One);
          }
          RAST._IExpr _6192_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6193_bodyIdents;
          RAST._IExpr _out2698;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2699;
          DCOMPUTF16.COMP.GenStmts(_6189_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out2698, out _out2699);
          _6192_body = _out2698;
          _6193_bodyIdents = _out2699;
          readIdents = _6193_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _6192_body)));
        }
      } else if (_source208.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source208.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _6194___mcc_h25 = _source208.dtor_Print_a0;
        DAST._IExpression _6195_e = _6194___mcc_h25;
        {
          RAST._IExpr _6196_printedExpr;
          DCOMPUTF16._IOwnership _6197_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6198_recIdents;
          RAST._IExpr _out2700;
          DCOMPUTF16._IOwnership _out2701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2702;
          DCOMPUTF16.COMP.GenExpr(_6195_e, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2700, out _out2701, out _out2702);
          _6196_printedExpr = _out2700;
          _6197_recOwnership = _out2701;
          _6198_recIdents = _out2702;
          Dafny.ISequence<Dafny.Rune> _6199_printedExprString;
          _6199_printedExprString = (_6196_printedExpr)._ToString(DCOMPUTF16.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _6199_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _6198_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source214 = range;
      if (_source214.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source214.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source214.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source214.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source214.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source214.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source214.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source214.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source214.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source214.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source214.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMPUTF16._IOwnership ownership, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out2703;
        DCOMPUTF16._IOwnership _out2704;
        DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2703, out _out2704);
        @out = _out2703;
        resultingOwnership = _out2704;
        return ;
      } else if ((object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static bool OwnershipGuarantee(DCOMPUTF16._IOwnership expectedOwnership, DCOMPUTF16._IOwnership resultingOwnership)
    {
      return (!(!object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed())) || (object.Equals(resultingOwnership, expectedOwnership))) && (!object.Equals(resultingOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()));
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source215 = e;
      DAST._ILiteral _6200___mcc_h0 = _source215.dtor_Literal_a0;
      DAST._ILiteral _source216 = _6200___mcc_h0;
      if (_source216.is_BoolLiteral) {
        bool _6201___mcc_h1 = _source216.dtor_BoolLiteral_a0;
        if ((_6201___mcc_h1) == (false)) {
          {
            RAST._IExpr _out2705;
            DCOMPUTF16._IOwnership _out2706;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out2705, out _out2706);
            r = _out2705;
            resultingOwnership = _out2706;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out2707;
            DCOMPUTF16._IOwnership _out2708;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out2707, out _out2708);
            r = _out2707;
            resultingOwnership = _out2708;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source216.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _6202___mcc_h2 = _source216.dtor_IntLiteral_a0;
        DAST._IType _6203___mcc_h3 = _source216.dtor_IntLiteral_a1;
        DAST._IType _6204_t = _6203___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _6205_i = _6202___mcc_h2;
        {
          DAST._IType _source217 = _6204_t;
          if (_source217.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6206___mcc_h100 = _source217.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6207___mcc_h101 = _source217.dtor_typeArgs;
            DAST._IResolvedType _6208___mcc_h102 = _source217.dtor_resolved;
            DAST._IType _6209_o = _6204_t;
            {
              RAST._IType _6210_genType;
              RAST._IType _out2709;
              _out2709 = DCOMPUTF16.COMP.GenType(_6209_o, false, false);
              _6210_genType = _out2709;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6210_genType);
            }
          } else if (_source217.is_Nullable) {
            DAST._IType _6211___mcc_h106 = _source217.dtor_Nullable_a0;
            DAST._IType _6212_o = _6204_t;
            {
              RAST._IType _6213_genType;
              RAST._IType _out2710;
              _out2710 = DCOMPUTF16.COMP.GenType(_6212_o, false, false);
              _6213_genType = _out2710;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6213_genType);
            }
          } else if (_source217.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6214___mcc_h108 = _source217.dtor_Tuple_a0;
            DAST._IType _6215_o = _6204_t;
            {
              RAST._IType _6216_genType;
              RAST._IType _out2711;
              _out2711 = DCOMPUTF16.COMP.GenType(_6215_o, false, false);
              _6216_genType = _out2711;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6216_genType);
            }
          } else if (_source217.is_Array) {
            DAST._IType _6217___mcc_h110 = _source217.dtor_element;
            BigInteger _6218___mcc_h111 = _source217.dtor_dims;
            DAST._IType _6219_o = _6204_t;
            {
              RAST._IType _6220_genType;
              RAST._IType _out2712;
              _out2712 = DCOMPUTF16.COMP.GenType(_6219_o, false, false);
              _6220_genType = _out2712;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6220_genType);
            }
          } else if (_source217.is_Seq) {
            DAST._IType _6221___mcc_h114 = _source217.dtor_element;
            DAST._IType _6222_o = _6204_t;
            {
              RAST._IType _6223_genType;
              RAST._IType _out2713;
              _out2713 = DCOMPUTF16.COMP.GenType(_6222_o, false, false);
              _6223_genType = _out2713;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6223_genType);
            }
          } else if (_source217.is_Set) {
            DAST._IType _6224___mcc_h116 = _source217.dtor_element;
            DAST._IType _6225_o = _6204_t;
            {
              RAST._IType _6226_genType;
              RAST._IType _out2714;
              _out2714 = DCOMPUTF16.COMP.GenType(_6225_o, false, false);
              _6226_genType = _out2714;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6226_genType);
            }
          } else if (_source217.is_Multiset) {
            DAST._IType _6227___mcc_h118 = _source217.dtor_element;
            DAST._IType _6228_o = _6204_t;
            {
              RAST._IType _6229_genType;
              RAST._IType _out2715;
              _out2715 = DCOMPUTF16.COMP.GenType(_6228_o, false, false);
              _6229_genType = _out2715;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6229_genType);
            }
          } else if (_source217.is_Map) {
            DAST._IType _6230___mcc_h120 = _source217.dtor_key;
            DAST._IType _6231___mcc_h121 = _source217.dtor_value;
            DAST._IType _6232_o = _6204_t;
            {
              RAST._IType _6233_genType;
              RAST._IType _out2716;
              _out2716 = DCOMPUTF16.COMP.GenType(_6232_o, false, false);
              _6233_genType = _out2716;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6233_genType);
            }
          } else if (_source217.is_SetBuilder) {
            DAST._IType _6234___mcc_h124 = _source217.dtor_element;
            DAST._IType _6235_o = _6204_t;
            {
              RAST._IType _6236_genType;
              RAST._IType _out2717;
              _out2717 = DCOMPUTF16.COMP.GenType(_6235_o, false, false);
              _6236_genType = _out2717;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6236_genType);
            }
          } else if (_source217.is_MapBuilder) {
            DAST._IType _6237___mcc_h126 = _source217.dtor_key;
            DAST._IType _6238___mcc_h127 = _source217.dtor_value;
            DAST._IType _6239_o = _6204_t;
            {
              RAST._IType _6240_genType;
              RAST._IType _out2718;
              _out2718 = DCOMPUTF16.COMP.GenType(_6239_o, false, false);
              _6240_genType = _out2718;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6240_genType);
            }
          } else if (_source217.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6241___mcc_h130 = _source217.dtor_args;
            DAST._IType _6242___mcc_h131 = _source217.dtor_result;
            DAST._IType _6243_o = _6204_t;
            {
              RAST._IType _6244_genType;
              RAST._IType _out2719;
              _out2719 = DCOMPUTF16.COMP.GenType(_6243_o, false, false);
              _6244_genType = _out2719;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6244_genType);
            }
          } else if (_source217.is_Primitive) {
            DAST._IPrimitive _6245___mcc_h134 = _source217.dtor_Primitive_a0;
            DAST._IPrimitive _source218 = _6245___mcc_h134;
            if (_source218.is_Int) {
              {
                if ((new BigInteger((_6205_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_6205_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_6205_i, true));
                }
              }
            } else if (_source218.is_Real) {
              DAST._IType _6246_o = _6204_t;
              {
                RAST._IType _6247_genType;
                RAST._IType _out2720;
                _out2720 = DCOMPUTF16.COMP.GenType(_6246_o, false, false);
                _6247_genType = _out2720;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6247_genType);
              }
            } else if (_source218.is_String) {
              DAST._IType _6248_o = _6204_t;
              {
                RAST._IType _6249_genType;
                RAST._IType _out2721;
                _out2721 = DCOMPUTF16.COMP.GenType(_6248_o, false, false);
                _6249_genType = _out2721;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6249_genType);
              }
            } else if (_source218.is_Bool) {
              DAST._IType _6250_o = _6204_t;
              {
                RAST._IType _6251_genType;
                RAST._IType _out2722;
                _out2722 = DCOMPUTF16.COMP.GenType(_6250_o, false, false);
                _6251_genType = _out2722;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6251_genType);
              }
            } else {
              DAST._IType _6252_o = _6204_t;
              {
                RAST._IType _6253_genType;
                RAST._IType _out2723;
                _out2723 = DCOMPUTF16.COMP.GenType(_6252_o, false, false);
                _6253_genType = _out2723;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6253_genType);
              }
            }
          } else if (_source217.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6254___mcc_h136 = _source217.dtor_Passthrough_a0;
            DAST._IType _6255_o = _6204_t;
            {
              RAST._IType _6256_genType;
              RAST._IType _out2724;
              _out2724 = DCOMPUTF16.COMP.GenType(_6255_o, false, false);
              _6256_genType = _out2724;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6256_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6257___mcc_h138 = _source217.dtor_TypeArg_a0;
            DAST._IType _6258_o = _6204_t;
            {
              RAST._IType _6259_genType;
              RAST._IType _out2725;
              _out2725 = DCOMPUTF16.COMP.GenType(_6258_o, false, false);
              _6259_genType = _out2725;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6205_i), _6259_genType);
            }
          }
          RAST._IExpr _out2726;
          DCOMPUTF16._IOwnership _out2727;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2726, out _out2727);
          r = _out2726;
          resultingOwnership = _out2727;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source216.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _6260___mcc_h4 = _source216.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _6261___mcc_h5 = _source216.dtor_DecLiteral_a1;
        DAST._IType _6262___mcc_h6 = _source216.dtor_DecLiteral_a2;
        DAST._IType _6263_t = _6262___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _6264_d = _6261___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _6265_n = _6260___mcc_h4;
        {
          DAST._IType _source219 = _6263_t;
          if (_source219.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6266___mcc_h140 = _source219.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6267___mcc_h141 = _source219.dtor_typeArgs;
            DAST._IResolvedType _6268___mcc_h142 = _source219.dtor_resolved;
            DAST._IType _6269_o = _6263_t;
            {
              RAST._IType _6270_genType;
              RAST._IType _out2728;
              _out2728 = DCOMPUTF16.COMP.GenType(_6269_o, false, false);
              _6270_genType = _out2728;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6270_genType);
            }
          } else if (_source219.is_Nullable) {
            DAST._IType _6271___mcc_h146 = _source219.dtor_Nullable_a0;
            DAST._IType _6272_o = _6263_t;
            {
              RAST._IType _6273_genType;
              RAST._IType _out2729;
              _out2729 = DCOMPUTF16.COMP.GenType(_6272_o, false, false);
              _6273_genType = _out2729;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6273_genType);
            }
          } else if (_source219.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6274___mcc_h148 = _source219.dtor_Tuple_a0;
            DAST._IType _6275_o = _6263_t;
            {
              RAST._IType _6276_genType;
              RAST._IType _out2730;
              _out2730 = DCOMPUTF16.COMP.GenType(_6275_o, false, false);
              _6276_genType = _out2730;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6276_genType);
            }
          } else if (_source219.is_Array) {
            DAST._IType _6277___mcc_h150 = _source219.dtor_element;
            BigInteger _6278___mcc_h151 = _source219.dtor_dims;
            DAST._IType _6279_o = _6263_t;
            {
              RAST._IType _6280_genType;
              RAST._IType _out2731;
              _out2731 = DCOMPUTF16.COMP.GenType(_6279_o, false, false);
              _6280_genType = _out2731;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6280_genType);
            }
          } else if (_source219.is_Seq) {
            DAST._IType _6281___mcc_h154 = _source219.dtor_element;
            DAST._IType _6282_o = _6263_t;
            {
              RAST._IType _6283_genType;
              RAST._IType _out2732;
              _out2732 = DCOMPUTF16.COMP.GenType(_6282_o, false, false);
              _6283_genType = _out2732;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6283_genType);
            }
          } else if (_source219.is_Set) {
            DAST._IType _6284___mcc_h156 = _source219.dtor_element;
            DAST._IType _6285_o = _6263_t;
            {
              RAST._IType _6286_genType;
              RAST._IType _out2733;
              _out2733 = DCOMPUTF16.COMP.GenType(_6285_o, false, false);
              _6286_genType = _out2733;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6286_genType);
            }
          } else if (_source219.is_Multiset) {
            DAST._IType _6287___mcc_h158 = _source219.dtor_element;
            DAST._IType _6288_o = _6263_t;
            {
              RAST._IType _6289_genType;
              RAST._IType _out2734;
              _out2734 = DCOMPUTF16.COMP.GenType(_6288_o, false, false);
              _6289_genType = _out2734;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6289_genType);
            }
          } else if (_source219.is_Map) {
            DAST._IType _6290___mcc_h160 = _source219.dtor_key;
            DAST._IType _6291___mcc_h161 = _source219.dtor_value;
            DAST._IType _6292_o = _6263_t;
            {
              RAST._IType _6293_genType;
              RAST._IType _out2735;
              _out2735 = DCOMPUTF16.COMP.GenType(_6292_o, false, false);
              _6293_genType = _out2735;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6293_genType);
            }
          } else if (_source219.is_SetBuilder) {
            DAST._IType _6294___mcc_h164 = _source219.dtor_element;
            DAST._IType _6295_o = _6263_t;
            {
              RAST._IType _6296_genType;
              RAST._IType _out2736;
              _out2736 = DCOMPUTF16.COMP.GenType(_6295_o, false, false);
              _6296_genType = _out2736;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6296_genType);
            }
          } else if (_source219.is_MapBuilder) {
            DAST._IType _6297___mcc_h166 = _source219.dtor_key;
            DAST._IType _6298___mcc_h167 = _source219.dtor_value;
            DAST._IType _6299_o = _6263_t;
            {
              RAST._IType _6300_genType;
              RAST._IType _out2737;
              _out2737 = DCOMPUTF16.COMP.GenType(_6299_o, false, false);
              _6300_genType = _out2737;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6300_genType);
            }
          } else if (_source219.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6301___mcc_h170 = _source219.dtor_args;
            DAST._IType _6302___mcc_h171 = _source219.dtor_result;
            DAST._IType _6303_o = _6263_t;
            {
              RAST._IType _6304_genType;
              RAST._IType _out2738;
              _out2738 = DCOMPUTF16.COMP.GenType(_6303_o, false, false);
              _6304_genType = _out2738;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6304_genType);
            }
          } else if (_source219.is_Primitive) {
            DAST._IPrimitive _6305___mcc_h174 = _source219.dtor_Primitive_a0;
            DAST._IPrimitive _source220 = _6305___mcc_h174;
            if (_source220.is_Int) {
              DAST._IType _6306_o = _6263_t;
              {
                RAST._IType _6307_genType;
                RAST._IType _out2739;
                _out2739 = DCOMPUTF16.COMP.GenType(_6306_o, false, false);
                _6307_genType = _out2739;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6307_genType);
              }
            } else if (_source220.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source220.is_String) {
              DAST._IType _6308_o = _6263_t;
              {
                RAST._IType _6309_genType;
                RAST._IType _out2740;
                _out2740 = DCOMPUTF16.COMP.GenType(_6308_o, false, false);
                _6309_genType = _out2740;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6309_genType);
              }
            } else if (_source220.is_Bool) {
              DAST._IType _6310_o = _6263_t;
              {
                RAST._IType _6311_genType;
                RAST._IType _out2741;
                _out2741 = DCOMPUTF16.COMP.GenType(_6310_o, false, false);
                _6311_genType = _out2741;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6311_genType);
              }
            } else {
              DAST._IType _6312_o = _6263_t;
              {
                RAST._IType _6313_genType;
                RAST._IType _out2742;
                _out2742 = DCOMPUTF16.COMP.GenType(_6312_o, false, false);
                _6313_genType = _out2742;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6313_genType);
              }
            }
          } else if (_source219.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6314___mcc_h176 = _source219.dtor_Passthrough_a0;
            DAST._IType _6315_o = _6263_t;
            {
              RAST._IType _6316_genType;
              RAST._IType _out2743;
              _out2743 = DCOMPUTF16.COMP.GenType(_6315_o, false, false);
              _6316_genType = _out2743;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6316_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6317___mcc_h178 = _source219.dtor_TypeArg_a0;
            DAST._IType _6318_o = _6263_t;
            {
              RAST._IType _6319_genType;
              RAST._IType _out2744;
              _out2744 = DCOMPUTF16.COMP.GenType(_6318_o, false, false);
              _6319_genType = _out2744;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6265_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6264_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6319_genType);
            }
          }
          RAST._IExpr _out2745;
          DCOMPUTF16._IOwnership _out2746;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2745, out _out2746);
          r = _out2745;
          resultingOwnership = _out2746;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source216.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _6320___mcc_h7 = _source216.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _6321_l = _6320___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_6321_l, false));
          RAST._IExpr _out2747;
          DCOMPUTF16._IOwnership _out2748;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2747, out _out2748);
          r = _out2747;
          resultingOwnership = _out2748;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source216.is_CharLiteral) {
        Dafny.Rune _6322___mcc_h8 = _source216.dtor_CharLiteral_a0;
        Dafny.Rune _6323_c = _6322___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_6323_c).Value)));
          if (!(DCOMPUTF16.__default.UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out2749;
          DCOMPUTF16._IOwnership _out2750;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2749, out _out2750);
          r = _out2749;
          resultingOwnership = _out2750;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _6324___mcc_h9 = _source216.dtor_Null_a0;
        DAST._IType _6325_tpe = _6324___mcc_h9;
        {
          RAST._IType _6326_tpeGen;
          RAST._IType _out2751;
          _out2751 = DCOMPUTF16.COMP.GenType(_6325_tpe, false, false);
          _6326_tpeGen = _out2751;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _6326_tpeGen);
          RAST._IExpr _out2752;
          DCOMPUTF16._IOwnership _out2753;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2752, out _out2753);
          r = _out2752;
          resultingOwnership = _out2753;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs52 = e;
      DAST._IBinOp _6327_op = _let_tmp_rhs52.dtor_op;
      DAST._IExpression _6328_lExpr = _let_tmp_rhs52.dtor_left;
      DAST._IExpression _6329_rExpr = _let_tmp_rhs52.dtor_right;
      DAST.Format._IBinaryOpFormat _6330_format = _let_tmp_rhs52.dtor_format2;
      bool _6331_becomesLeftCallsRight;
      _6331_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source221) => {
        if (_source221.is_Eq) {
          bool _6332___mcc_h0 = _source221.dtor_referential;
          bool _6333___mcc_h1 = _source221.dtor_nullable;
          return false;
        } else if (_source221.is_Div) {
          return false;
        } else if (_source221.is_EuclidianDiv) {
          return false;
        } else if (_source221.is_Mod) {
          return false;
        } else if (_source221.is_EuclidianMod) {
          return false;
        } else if (_source221.is_Lt) {
          return false;
        } else if (_source221.is_LtChar) {
          return false;
        } else if (_source221.is_Plus) {
          return false;
        } else if (_source221.is_Minus) {
          return false;
        } else if (_source221.is_Times) {
          return false;
        } else if (_source221.is_BitwiseAnd) {
          return false;
        } else if (_source221.is_BitwiseOr) {
          return false;
        } else if (_source221.is_BitwiseXor) {
          return false;
        } else if (_source221.is_BitwiseShiftRight) {
          return false;
        } else if (_source221.is_BitwiseShiftLeft) {
          return false;
        } else if (_source221.is_And) {
          return false;
        } else if (_source221.is_Or) {
          return false;
        } else if (_source221.is_In) {
          return false;
        } else if (_source221.is_SeqProperPrefix) {
          return false;
        } else if (_source221.is_SeqPrefix) {
          return false;
        } else if (_source221.is_SetMerge) {
          return true;
        } else if (_source221.is_SetSubtraction) {
          return true;
        } else if (_source221.is_SetIntersection) {
          return true;
        } else if (_source221.is_Subset) {
          return false;
        } else if (_source221.is_ProperSubset) {
          return false;
        } else if (_source221.is_SetDisjoint) {
          return true;
        } else if (_source221.is_MapMerge) {
          return true;
        } else if (_source221.is_MapSubtraction) {
          return true;
        } else if (_source221.is_MultisetMerge) {
          return true;
        } else if (_source221.is_MultisetSubtraction) {
          return true;
        } else if (_source221.is_MultisetIntersection) {
          return true;
        } else if (_source221.is_Submultiset) {
          return false;
        } else if (_source221.is_ProperSubmultiset) {
          return false;
        } else if (_source221.is_MultisetDisjoint) {
          return true;
        } else if (_source221.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _6334___mcc_h4 = _source221.dtor_Passthrough_a0;
          return false;
        }
      }))(_6327_op);
      bool _6335_becomesRightCallsLeft;
      _6335_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source222) => {
        if (_source222.is_Eq) {
          bool _6336___mcc_h6 = _source222.dtor_referential;
          bool _6337___mcc_h7 = _source222.dtor_nullable;
          return false;
        } else if (_source222.is_Div) {
          return false;
        } else if (_source222.is_EuclidianDiv) {
          return false;
        } else if (_source222.is_Mod) {
          return false;
        } else if (_source222.is_EuclidianMod) {
          return false;
        } else if (_source222.is_Lt) {
          return false;
        } else if (_source222.is_LtChar) {
          return false;
        } else if (_source222.is_Plus) {
          return false;
        } else if (_source222.is_Minus) {
          return false;
        } else if (_source222.is_Times) {
          return false;
        } else if (_source222.is_BitwiseAnd) {
          return false;
        } else if (_source222.is_BitwiseOr) {
          return false;
        } else if (_source222.is_BitwiseXor) {
          return false;
        } else if (_source222.is_BitwiseShiftRight) {
          return false;
        } else if (_source222.is_BitwiseShiftLeft) {
          return false;
        } else if (_source222.is_And) {
          return false;
        } else if (_source222.is_Or) {
          return false;
        } else if (_source222.is_In) {
          return true;
        } else if (_source222.is_SeqProperPrefix) {
          return false;
        } else if (_source222.is_SeqPrefix) {
          return false;
        } else if (_source222.is_SetMerge) {
          return false;
        } else if (_source222.is_SetSubtraction) {
          return false;
        } else if (_source222.is_SetIntersection) {
          return false;
        } else if (_source222.is_Subset) {
          return false;
        } else if (_source222.is_ProperSubset) {
          return false;
        } else if (_source222.is_SetDisjoint) {
          return false;
        } else if (_source222.is_MapMerge) {
          return false;
        } else if (_source222.is_MapSubtraction) {
          return false;
        } else if (_source222.is_MultisetMerge) {
          return false;
        } else if (_source222.is_MultisetSubtraction) {
          return false;
        } else if (_source222.is_MultisetIntersection) {
          return false;
        } else if (_source222.is_Submultiset) {
          return false;
        } else if (_source222.is_ProperSubmultiset) {
          return false;
        } else if (_source222.is_MultisetDisjoint) {
          return false;
        } else if (_source222.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _6338___mcc_h10 = _source222.dtor_Passthrough_a0;
          return false;
        }
      }))(_6327_op);
      bool _6339_becomesCallLeftRight;
      _6339_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source223) => {
        if (_source223.is_Eq) {
          bool _6340___mcc_h12 = _source223.dtor_referential;
          bool _6341___mcc_h13 = _source223.dtor_nullable;
          if ((_6340___mcc_h12) == (true)) {
            if ((_6341___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source223.is_Div) {
          return false;
        } else if (_source223.is_EuclidianDiv) {
          return false;
        } else if (_source223.is_Mod) {
          return false;
        } else if (_source223.is_EuclidianMod) {
          return false;
        } else if (_source223.is_Lt) {
          return false;
        } else if (_source223.is_LtChar) {
          return false;
        } else if (_source223.is_Plus) {
          return false;
        } else if (_source223.is_Minus) {
          return false;
        } else if (_source223.is_Times) {
          return false;
        } else if (_source223.is_BitwiseAnd) {
          return false;
        } else if (_source223.is_BitwiseOr) {
          return false;
        } else if (_source223.is_BitwiseXor) {
          return false;
        } else if (_source223.is_BitwiseShiftRight) {
          return false;
        } else if (_source223.is_BitwiseShiftLeft) {
          return false;
        } else if (_source223.is_And) {
          return false;
        } else if (_source223.is_Or) {
          return false;
        } else if (_source223.is_In) {
          return false;
        } else if (_source223.is_SeqProperPrefix) {
          return false;
        } else if (_source223.is_SeqPrefix) {
          return false;
        } else if (_source223.is_SetMerge) {
          return false;
        } else if (_source223.is_SetSubtraction) {
          return false;
        } else if (_source223.is_SetIntersection) {
          return false;
        } else if (_source223.is_Subset) {
          return false;
        } else if (_source223.is_ProperSubset) {
          return false;
        } else if (_source223.is_SetDisjoint) {
          return false;
        } else if (_source223.is_MapMerge) {
          return false;
        } else if (_source223.is_MapSubtraction) {
          return false;
        } else if (_source223.is_MultisetMerge) {
          return false;
        } else if (_source223.is_MultisetSubtraction) {
          return false;
        } else if (_source223.is_MultisetIntersection) {
          return false;
        } else if (_source223.is_Submultiset) {
          return false;
        } else if (_source223.is_ProperSubmultiset) {
          return false;
        } else if (_source223.is_MultisetDisjoint) {
          return false;
        } else if (_source223.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _6342___mcc_h16 = _source223.dtor_Passthrough_a0;
          return false;
        }
      }))(_6327_op);
      DCOMPUTF16._IOwnership _6343_expectedLeftOwnership;
      _6343_expectedLeftOwnership = ((_6331_becomesLeftCallsRight) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : ((((_6335_becomesRightCallsLeft) || (_6339_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      DCOMPUTF16._IOwnership _6344_expectedRightOwnership;
      _6344_expectedRightOwnership = (((_6331_becomesLeftCallsRight) || (_6339_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (((_6335_becomesRightCallsLeft) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _6345_left;
      DCOMPUTF16._IOwnership _6346___v62;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6347_recIdentsL;
      RAST._IExpr _out2754;
      DCOMPUTF16._IOwnership _out2755;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2756;
      DCOMPUTF16.COMP.GenExpr(_6328_lExpr, selfIdent, @params, _6343_expectedLeftOwnership, out _out2754, out _out2755, out _out2756);
      _6345_left = _out2754;
      _6346___v62 = _out2755;
      _6347_recIdentsL = _out2756;
      RAST._IExpr _6348_right;
      DCOMPUTF16._IOwnership _6349___v63;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6350_recIdentsR;
      RAST._IExpr _out2757;
      DCOMPUTF16._IOwnership _out2758;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2759;
      DCOMPUTF16.COMP.GenExpr(_6329_rExpr, selfIdent, @params, _6344_expectedRightOwnership, out _out2757, out _out2758, out _out2759);
      _6348_right = _out2757;
      _6349___v63 = _out2758;
      _6350_recIdentsR = _out2759;
      DAST._IBinOp _source224 = _6327_op;
      if (_source224.is_Eq) {
        bool _6351___mcc_h18 = _source224.dtor_referential;
        bool _6352___mcc_h19 = _source224.dtor_nullable;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source225 = _6327_op;
            if (_source225.is_Eq) {
              bool _6353___mcc_h24 = _source225.dtor_referential;
              bool _6354___mcc_h25 = _source225.dtor_nullable;
              bool _6355_nullable = _6354___mcc_h25;
              bool _6356_referential = _6353___mcc_h24;
              {
                if (_6356_referential) {
                  if (_6355_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source225.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source225.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6357___mcc_h26 = _source225.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6358_op = _6357___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_6358_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Div) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source226 = _6327_op;
            if (_source226.is_Eq) {
              bool _6359___mcc_h27 = _source226.dtor_referential;
              bool _6360___mcc_h28 = _source226.dtor_nullable;
              bool _6361_nullable = _6360___mcc_h28;
              bool _6362_referential = _6359___mcc_h27;
              {
                if (_6362_referential) {
                  if (_6361_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source226.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source226.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6363___mcc_h29 = _source226.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6364_op = _6363___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_6364_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_EuclidianDiv) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source227 = _6327_op;
            if (_source227.is_Eq) {
              bool _6365___mcc_h30 = _source227.dtor_referential;
              bool _6366___mcc_h31 = _source227.dtor_nullable;
              bool _6367_nullable = _6366___mcc_h31;
              bool _6368_referential = _6365___mcc_h30;
              {
                if (_6368_referential) {
                  if (_6367_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source227.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source227.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6369___mcc_h32 = _source227.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6370_op = _6369___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_6370_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Mod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source228 = _6327_op;
            if (_source228.is_Eq) {
              bool _6371___mcc_h33 = _source228.dtor_referential;
              bool _6372___mcc_h34 = _source228.dtor_nullable;
              bool _6373_nullable = _6372___mcc_h34;
              bool _6374_referential = _6371___mcc_h33;
              {
                if (_6374_referential) {
                  if (_6373_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source228.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source228.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6375___mcc_h35 = _source228.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6376_op = _6375___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_6376_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_EuclidianMod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source229 = _6327_op;
            if (_source229.is_Eq) {
              bool _6377___mcc_h36 = _source229.dtor_referential;
              bool _6378___mcc_h37 = _source229.dtor_nullable;
              bool _6379_nullable = _6378___mcc_h37;
              bool _6380_referential = _6377___mcc_h36;
              {
                if (_6380_referential) {
                  if (_6379_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source229.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source229.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6381___mcc_h38 = _source229.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6382_op = _6381___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_6382_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Lt) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source230 = _6327_op;
            if (_source230.is_Eq) {
              bool _6383___mcc_h39 = _source230.dtor_referential;
              bool _6384___mcc_h40 = _source230.dtor_nullable;
              bool _6385_nullable = _6384___mcc_h40;
              bool _6386_referential = _6383___mcc_h39;
              {
                if (_6386_referential) {
                  if (_6385_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source230.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source230.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6387___mcc_h41 = _source230.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6388_op = _6387___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_6388_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_LtChar) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source231 = _6327_op;
            if (_source231.is_Eq) {
              bool _6389___mcc_h42 = _source231.dtor_referential;
              bool _6390___mcc_h43 = _source231.dtor_nullable;
              bool _6391_nullable = _6390___mcc_h43;
              bool _6392_referential = _6389___mcc_h42;
              {
                if (_6392_referential) {
                  if (_6391_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source231.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source231.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6393___mcc_h44 = _source231.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6394_op = _6393___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_6394_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Plus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source232 = _6327_op;
            if (_source232.is_Eq) {
              bool _6395___mcc_h45 = _source232.dtor_referential;
              bool _6396___mcc_h46 = _source232.dtor_nullable;
              bool _6397_nullable = _6396___mcc_h46;
              bool _6398_referential = _6395___mcc_h45;
              {
                if (_6398_referential) {
                  if (_6397_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source232.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source232.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6399___mcc_h47 = _source232.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6400_op = _6399___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_6400_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Minus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source233 = _6327_op;
            if (_source233.is_Eq) {
              bool _6401___mcc_h48 = _source233.dtor_referential;
              bool _6402___mcc_h49 = _source233.dtor_nullable;
              bool _6403_nullable = _6402___mcc_h49;
              bool _6404_referential = _6401___mcc_h48;
              {
                if (_6404_referential) {
                  if (_6403_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source233.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source233.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6405___mcc_h50 = _source233.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6406_op = _6405___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_6406_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Times) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source234 = _6327_op;
            if (_source234.is_Eq) {
              bool _6407___mcc_h51 = _source234.dtor_referential;
              bool _6408___mcc_h52 = _source234.dtor_nullable;
              bool _6409_nullable = _6408___mcc_h52;
              bool _6410_referential = _6407___mcc_h51;
              {
                if (_6410_referential) {
                  if (_6409_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source234.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source234.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6411___mcc_h53 = _source234.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6412_op = _6411___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_6412_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_BitwiseAnd) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source235 = _6327_op;
            if (_source235.is_Eq) {
              bool _6413___mcc_h54 = _source235.dtor_referential;
              bool _6414___mcc_h55 = _source235.dtor_nullable;
              bool _6415_nullable = _6414___mcc_h55;
              bool _6416_referential = _6413___mcc_h54;
              {
                if (_6416_referential) {
                  if (_6415_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source235.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source235.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6417___mcc_h56 = _source235.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6418_op = _6417___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_6418_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_BitwiseOr) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source236 = _6327_op;
            if (_source236.is_Eq) {
              bool _6419___mcc_h57 = _source236.dtor_referential;
              bool _6420___mcc_h58 = _source236.dtor_nullable;
              bool _6421_nullable = _6420___mcc_h58;
              bool _6422_referential = _6419___mcc_h57;
              {
                if (_6422_referential) {
                  if (_6421_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source236.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source236.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6423___mcc_h59 = _source236.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6424_op = _6423___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_6424_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_BitwiseXor) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source237 = _6327_op;
            if (_source237.is_Eq) {
              bool _6425___mcc_h60 = _source237.dtor_referential;
              bool _6426___mcc_h61 = _source237.dtor_nullable;
              bool _6427_nullable = _6426___mcc_h61;
              bool _6428_referential = _6425___mcc_h60;
              {
                if (_6428_referential) {
                  if (_6427_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source237.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source237.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6429___mcc_h62 = _source237.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6430_op = _6429___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_6430_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_BitwiseShiftRight) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source238 = _6327_op;
            if (_source238.is_Eq) {
              bool _6431___mcc_h63 = _source238.dtor_referential;
              bool _6432___mcc_h64 = _source238.dtor_nullable;
              bool _6433_nullable = _6432___mcc_h64;
              bool _6434_referential = _6431___mcc_h63;
              {
                if (_6434_referential) {
                  if (_6433_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source238.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source238.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6435___mcc_h65 = _source238.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6436_op = _6435___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_6436_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_BitwiseShiftLeft) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source239 = _6327_op;
            if (_source239.is_Eq) {
              bool _6437___mcc_h66 = _source239.dtor_referential;
              bool _6438___mcc_h67 = _source239.dtor_nullable;
              bool _6439_nullable = _6438___mcc_h67;
              bool _6440_referential = _6437___mcc_h66;
              {
                if (_6440_referential) {
                  if (_6439_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source239.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source239.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6441___mcc_h68 = _source239.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6442_op = _6441___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_6442_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_And) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source240 = _6327_op;
            if (_source240.is_Eq) {
              bool _6443___mcc_h69 = _source240.dtor_referential;
              bool _6444___mcc_h70 = _source240.dtor_nullable;
              bool _6445_nullable = _6444___mcc_h70;
              bool _6446_referential = _6443___mcc_h69;
              {
                if (_6446_referential) {
                  if (_6445_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source240.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source240.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6447___mcc_h71 = _source240.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6448_op = _6447___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_6448_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_Or) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source241 = _6327_op;
            if (_source241.is_Eq) {
              bool _6449___mcc_h72 = _source241.dtor_referential;
              bool _6450___mcc_h73 = _source241.dtor_nullable;
              bool _6451_nullable = _6450___mcc_h73;
              bool _6452_referential = _6449___mcc_h72;
              {
                if (_6452_referential) {
                  if (_6451_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source241.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source241.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6453___mcc_h74 = _source241.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6454_op = _6453___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_6454_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      } else if (_source224.is_In) {
        {
          r = ((_6348_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_6345_left);
        }
      } else if (_source224.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6345_left, _6348_right, _6330_format);
      } else if (_source224.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6345_left, _6348_right, _6330_format);
      } else if (_source224.is_SetMerge) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6348_right);
        }
      } else if (_source224.is_SetSubtraction) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6348_right);
        }
      } else if (_source224.is_SetIntersection) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_6348_right);
        }
      } else if (_source224.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6345_left, _6348_right, _6330_format);
        }
      } else if (_source224.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6345_left, _6348_right, _6330_format);
        }
      } else if (_source224.is_SetDisjoint) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_6348_right);
        }
      } else if (_source224.is_MapMerge) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6348_right);
        }
      } else if (_source224.is_MapSubtraction) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6348_right);
        }
      } else if (_source224.is_MultisetMerge) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6348_right);
        }
      } else if (_source224.is_MultisetSubtraction) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6348_right);
        }
      } else if (_source224.is_MultisetIntersection) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_6348_right);
        }
      } else if (_source224.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6345_left, _6348_right, _6330_format);
        }
      } else if (_source224.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6345_left, _6348_right, _6330_format);
        }
      } else if (_source224.is_MultisetDisjoint) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_6348_right);
        }
      } else if (_source224.is_Concat) {
        {
          r = ((_6345_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_6348_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _6455___mcc_h22 = _source224.dtor_Passthrough_a0;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6327_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6327_op), _6345_left, _6348_right, _6330_format);
          } else {
            DAST._IBinOp _source242 = _6327_op;
            if (_source242.is_Eq) {
              bool _6456___mcc_h75 = _source242.dtor_referential;
              bool _6457___mcc_h76 = _source242.dtor_nullable;
              bool _6458_nullable = _6457___mcc_h76;
              bool _6459_referential = _6456___mcc_h75;
              {
                if (_6459_referential) {
                  if (_6458_nullable) {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  } else {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6345_left, _6348_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source242.is_EuclidianDiv) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else if (_source242.is_EuclidianMod) {
              {
                r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_6345_left, _6348_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6460___mcc_h77 = _source242.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6461_op = _6460___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_6461_op, _6345_left, _6348_right, _6330_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out2760;
      DCOMPUTF16._IOwnership _out2761;
      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2760, out _out2761);
      r = _out2760;
      resultingOwnership = _out2761;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6347_recIdentsL, _6350_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IExpression _6462_expr = _let_tmp_rhs53.dtor_value;
      DAST._IType _6463_fromTpe = _let_tmp_rhs53.dtor_from;
      DAST._IType _6464_toTpe = _let_tmp_rhs53.dtor_typ;
      if (object.Equals(_6463_fromTpe, _6464_toTpe)) {
        RAST._IExpr _6465_recursiveGen;
        DCOMPUTF16._IOwnership _6466_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6467_recIdents;
        RAST._IExpr _out2762;
        DCOMPUTF16._IOwnership _out2763;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2764;
        DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2762, out _out2763, out _out2764);
        _6465_recursiveGen = _out2762;
        _6466_recOwned = _out2763;
        _6467_recIdents = _out2764;
        r = _6465_recursiveGen;
        RAST._IExpr _out2765;
        DCOMPUTF16._IOwnership _out2766;
        DCOMPUTF16.COMP.FromOwnership(r, _6466_recOwned, expectedOwnership, out _out2765, out _out2766);
        r = _out2765;
        resultingOwnership = _out2766;
        readIdents = _6467_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source243 = _System.Tuple2<DAST._IType, DAST._IType>.create(_6463_fromTpe, _6464_toTpe);
        DAST._IType _6468___mcc_h0 = _source243.dtor__0;
        DAST._IType _6469___mcc_h1 = _source243.dtor__1;
        DAST._IType _source244 = _6468___mcc_h0;
        if (_source244.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6470___mcc_h4 = _source244.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _6471___mcc_h5 = _source244.dtor_typeArgs;
          DAST._IResolvedType _6472___mcc_h6 = _source244.dtor_resolved;
          DAST._IResolvedType _source245 = _6472___mcc_h6;
          if (_source245.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6473___mcc_h16 = _source245.dtor_path;
            DAST._IType _source246 = _6469___mcc_h1;
            if (_source246.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6474___mcc_h20 = _source246.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6475___mcc_h21 = _source246.dtor_typeArgs;
              DAST._IResolvedType _6476___mcc_h22 = _source246.dtor_resolved;
              DAST._IResolvedType _source247 = _6476___mcc_h22;
              if (_source247.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6477___mcc_h26 = _source247.dtor_path;
                {
                  RAST._IExpr _6478_recursiveGen;
                  DCOMPUTF16._IOwnership _6479_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6480_recIdents;
                  RAST._IExpr _out2767;
                  DCOMPUTF16._IOwnership _out2768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2769;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2767, out _out2768, out _out2769);
                  _6478_recursiveGen = _out2767;
                  _6479_recOwned = _out2768;
                  _6480_recIdents = _out2769;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6478_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2770;
                  DCOMPUTF16._IOwnership _out2771;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2770, out _out2771);
                  r = _out2770;
                  resultingOwnership = _out2771;
                  readIdents = _6480_recIdents;
                }
              } else if (_source247.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6481___mcc_h28 = _source247.dtor_path;
                {
                  RAST._IExpr _6482_recursiveGen;
                  DCOMPUTF16._IOwnership _6483_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6484_recIdents;
                  RAST._IExpr _out2772;
                  DCOMPUTF16._IOwnership _out2773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2774;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2772, out _out2773, out _out2774);
                  _6482_recursiveGen = _out2772;
                  _6483_recOwned = _out2773;
                  _6484_recIdents = _out2774;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6482_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2775;
                  DCOMPUTF16._IOwnership _out2776;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2775, out _out2776);
                  r = _out2775;
                  resultingOwnership = _out2776;
                  readIdents = _6484_recIdents;
                }
              } else {
                DAST._IType _6485___mcc_h30 = _source247.dtor_baseType;
                DAST._INewtypeRange _6486___mcc_h31 = _source247.dtor_range;
                bool _6487___mcc_h32 = _source247.dtor_erase;
                bool _6488_erase = _6487___mcc_h32;
                DAST._INewtypeRange _6489_range = _6486___mcc_h31;
                DAST._IType _6490_b = _6485___mcc_h30;
                {
                  if (object.Equals(_6463_fromTpe, _6490_b)) {
                    RAST._IExpr _6491_recursiveGen;
                    DCOMPUTF16._IOwnership _6492_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6493_recIdents;
                    RAST._IExpr _out2777;
                    DCOMPUTF16._IOwnership _out2778;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2779;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2777, out _out2778, out _out2779);
                    _6491_recursiveGen = _out2777;
                    _6492_recOwned = _out2778;
                    _6493_recIdents = _out2779;
                    Std.Wrappers._IOption<RAST._IType> _6494_potentialRhsType;
                    _6494_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6490_b, _6489_range);
                    Std.Wrappers._IOption<RAST._IType> _source248 = _6494_potentialRhsType;
                    if (_source248.is_None) {
                      if (_6488_erase) {
                        r = _6491_recursiveGen;
                      } else {
                        RAST._IType _6495_rhsType;
                        RAST._IType _out2780;
                        _out2780 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _6495_rhsType = _out2780;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6495_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6491_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2781;
                      DCOMPUTF16._IOwnership _out2782;
                      DCOMPUTF16.COMP.FromOwnership(r, _6492_recOwned, expectedOwnership, out _out2781, out _out2782);
                      r = _out2781;
                      resultingOwnership = _out2782;
                    } else {
                      RAST._IType _6496___mcc_h1154 = _source248.dtor_value;
                      RAST._IType _6497_v = _6496___mcc_h1154;
                      r = RAST.Expr.create_ConversionNum(_6497_v, _6491_recursiveGen);
                      RAST._IExpr _out2783;
                      DCOMPUTF16._IOwnership _out2784;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2783, out _out2784);
                      r = _out2783;
                      resultingOwnership = _out2784;
                    }
                    readIdents = _6493_recIdents;
                  } else {
                    RAST._IExpr _out2785;
                    DCOMPUTF16._IOwnership _out2786;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2787;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6490_b), _6490_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2785, out _out2786, out _out2787);
                    r = _out2785;
                    resultingOwnership = _out2786;
                    readIdents = _out2787;
                  }
                }
              }
            } else if (_source246.is_Nullable) {
              DAST._IType _6498___mcc_h36 = _source246.dtor_Nullable_a0;
              {
                RAST._IExpr _6499_recursiveGen;
                DCOMPUTF16._IOwnership _6500_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6501_recIdents;
                RAST._IExpr _out2788;
                DCOMPUTF16._IOwnership _out2789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2790;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2788, out _out2789, out _out2790);
                _6499_recursiveGen = _out2788;
                _6500_recOwned = _out2789;
                _6501_recIdents = _out2790;
                Dafny.ISequence<Dafny.Rune> _6502_s;
                _6502_s = (_6499_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6500_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6502_s = Dafny.Sequence<Dafny.Rune>.Concat(_6502_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _6502_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6502_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_6502_s);
                RAST._IExpr _out2791;
                DCOMPUTF16._IOwnership _out2792;
                DCOMPUTF16.COMP.FromOwnership(r, _6500_recOwned, expectedOwnership, out _out2791, out _out2792);
                r = _out2791;
                resultingOwnership = _out2792;
                readIdents = _6501_recIdents;
              }
            } else if (_source246.is_Tuple) {
              Dafny.ISequence<DAST._IType> _6503___mcc_h38 = _source246.dtor_Tuple_a0;
              {
                RAST._IExpr _6504_recursiveGen;
                DCOMPUTF16._IOwnership _6505_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6506_recIdents;
                RAST._IExpr _out2793;
                DCOMPUTF16._IOwnership _out2794;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2795;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2793, out _out2794, out _out2795);
                _6504_recursiveGen = _out2793;
                _6505_recOwned = _out2794;
                _6506_recIdents = _out2795;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6504_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2796;
                DCOMPUTF16._IOwnership _out2797;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2796, out _out2797);
                r = _out2796;
                resultingOwnership = _out2797;
                readIdents = _6506_recIdents;
              }
            } else if (_source246.is_Array) {
              DAST._IType _6507___mcc_h40 = _source246.dtor_element;
              BigInteger _6508___mcc_h41 = _source246.dtor_dims;
              {
                RAST._IExpr _6509_recursiveGen;
                DCOMPUTF16._IOwnership _6510_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6511_recIdents;
                RAST._IExpr _out2798;
                DCOMPUTF16._IOwnership _out2799;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2800;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2798, out _out2799, out _out2800);
                _6509_recursiveGen = _out2798;
                _6510_recOwned = _out2799;
                _6511_recIdents = _out2800;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6509_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2801;
                DCOMPUTF16._IOwnership _out2802;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2801, out _out2802);
                r = _out2801;
                resultingOwnership = _out2802;
                readIdents = _6511_recIdents;
              }
            } else if (_source246.is_Seq) {
              DAST._IType _6512___mcc_h44 = _source246.dtor_element;
              {
                RAST._IExpr _6513_recursiveGen;
                DCOMPUTF16._IOwnership _6514_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6515_recIdents;
                RAST._IExpr _out2803;
                DCOMPUTF16._IOwnership _out2804;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2805;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2803, out _out2804, out _out2805);
                _6513_recursiveGen = _out2803;
                _6514_recOwned = _out2804;
                _6515_recIdents = _out2805;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6513_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2806;
                DCOMPUTF16._IOwnership _out2807;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2806, out _out2807);
                r = _out2806;
                resultingOwnership = _out2807;
                readIdents = _6515_recIdents;
              }
            } else if (_source246.is_Set) {
              DAST._IType _6516___mcc_h46 = _source246.dtor_element;
              {
                RAST._IExpr _6517_recursiveGen;
                DCOMPUTF16._IOwnership _6518_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6519_recIdents;
                RAST._IExpr _out2808;
                DCOMPUTF16._IOwnership _out2809;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2810;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2808, out _out2809, out _out2810);
                _6517_recursiveGen = _out2808;
                _6518_recOwned = _out2809;
                _6519_recIdents = _out2810;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6517_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2811;
                DCOMPUTF16._IOwnership _out2812;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2811, out _out2812);
                r = _out2811;
                resultingOwnership = _out2812;
                readIdents = _6519_recIdents;
              }
            } else if (_source246.is_Multiset) {
              DAST._IType _6520___mcc_h48 = _source246.dtor_element;
              {
                RAST._IExpr _6521_recursiveGen;
                DCOMPUTF16._IOwnership _6522_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6523_recIdents;
                RAST._IExpr _out2813;
                DCOMPUTF16._IOwnership _out2814;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2815;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2813, out _out2814, out _out2815);
                _6521_recursiveGen = _out2813;
                _6522_recOwned = _out2814;
                _6523_recIdents = _out2815;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6521_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2816;
                DCOMPUTF16._IOwnership _out2817;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2816, out _out2817);
                r = _out2816;
                resultingOwnership = _out2817;
                readIdents = _6523_recIdents;
              }
            } else if (_source246.is_Map) {
              DAST._IType _6524___mcc_h50 = _source246.dtor_key;
              DAST._IType _6525___mcc_h51 = _source246.dtor_value;
              {
                RAST._IExpr _6526_recursiveGen;
                DCOMPUTF16._IOwnership _6527_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6528_recIdents;
                RAST._IExpr _out2818;
                DCOMPUTF16._IOwnership _out2819;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2820;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2818, out _out2819, out _out2820);
                _6526_recursiveGen = _out2818;
                _6527_recOwned = _out2819;
                _6528_recIdents = _out2820;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6526_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2821;
                DCOMPUTF16._IOwnership _out2822;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2821, out _out2822);
                r = _out2821;
                resultingOwnership = _out2822;
                readIdents = _6528_recIdents;
              }
            } else if (_source246.is_SetBuilder) {
              DAST._IType _6529___mcc_h54 = _source246.dtor_element;
              {
                RAST._IExpr _6530_recursiveGen;
                DCOMPUTF16._IOwnership _6531_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6532_recIdents;
                RAST._IExpr _out2823;
                DCOMPUTF16._IOwnership _out2824;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2825;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2823, out _out2824, out _out2825);
                _6530_recursiveGen = _out2823;
                _6531_recOwned = _out2824;
                _6532_recIdents = _out2825;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6530_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2826;
                DCOMPUTF16._IOwnership _out2827;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2826, out _out2827);
                r = _out2826;
                resultingOwnership = _out2827;
                readIdents = _6532_recIdents;
              }
            } else if (_source246.is_MapBuilder) {
              DAST._IType _6533___mcc_h56 = _source246.dtor_key;
              DAST._IType _6534___mcc_h57 = _source246.dtor_value;
              {
                RAST._IExpr _6535_recursiveGen;
                DCOMPUTF16._IOwnership _6536_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6537_recIdents;
                RAST._IExpr _out2828;
                DCOMPUTF16._IOwnership _out2829;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2830;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2828, out _out2829, out _out2830);
                _6535_recursiveGen = _out2828;
                _6536_recOwned = _out2829;
                _6537_recIdents = _out2830;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6535_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2831;
                DCOMPUTF16._IOwnership _out2832;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2831, out _out2832);
                r = _out2831;
                resultingOwnership = _out2832;
                readIdents = _6537_recIdents;
              }
            } else if (_source246.is_Arrow) {
              Dafny.ISequence<DAST._IType> _6538___mcc_h60 = _source246.dtor_args;
              DAST._IType _6539___mcc_h61 = _source246.dtor_result;
              {
                RAST._IExpr _6540_recursiveGen;
                DCOMPUTF16._IOwnership _6541_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6542_recIdents;
                RAST._IExpr _out2833;
                DCOMPUTF16._IOwnership _out2834;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2835;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2833, out _out2834, out _out2835);
                _6540_recursiveGen = _out2833;
                _6541_recOwned = _out2834;
                _6542_recIdents = _out2835;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6540_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2836;
                DCOMPUTF16._IOwnership _out2837;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2836, out _out2837);
                r = _out2836;
                resultingOwnership = _out2837;
                readIdents = _6542_recIdents;
              }
            } else if (_source246.is_Primitive) {
              DAST._IPrimitive _6543___mcc_h64 = _source246.dtor_Primitive_a0;
              {
                RAST._IExpr _6544_recursiveGen;
                DCOMPUTF16._IOwnership _6545_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6546_recIdents;
                RAST._IExpr _out2838;
                DCOMPUTF16._IOwnership _out2839;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2840;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2838, out _out2839, out _out2840);
                _6544_recursiveGen = _out2838;
                _6545_recOwned = _out2839;
                _6546_recIdents = _out2840;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6544_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2841;
                DCOMPUTF16._IOwnership _out2842;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2841, out _out2842);
                r = _out2841;
                resultingOwnership = _out2842;
                readIdents = _6546_recIdents;
              }
            } else if (_source246.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _6547___mcc_h66 = _source246.dtor_Passthrough_a0;
              {
                RAST._IExpr _6548_recursiveGen;
                DCOMPUTF16._IOwnership _6549_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6550_recIdents;
                RAST._IExpr _out2843;
                DCOMPUTF16._IOwnership _out2844;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2845;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2843, out _out2844, out _out2845);
                _6548_recursiveGen = _out2843;
                _6549_recOwned = _out2844;
                _6550_recIdents = _out2845;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6548_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2846;
                DCOMPUTF16._IOwnership _out2847;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2846, out _out2847);
                r = _out2846;
                resultingOwnership = _out2847;
                readIdents = _6550_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6551___mcc_h68 = _source246.dtor_TypeArg_a0;
              {
                RAST._IExpr _6552_recursiveGen;
                DCOMPUTF16._IOwnership _6553_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6554_recIdents;
                RAST._IExpr _out2848;
                DCOMPUTF16._IOwnership _out2849;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2850;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2848, out _out2849, out _out2850);
                _6552_recursiveGen = _out2848;
                _6553_recOwned = _out2849;
                _6554_recIdents = _out2850;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6552_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2851;
                DCOMPUTF16._IOwnership _out2852;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2851, out _out2852);
                r = _out2851;
                resultingOwnership = _out2852;
                readIdents = _6554_recIdents;
              }
            }
          } else if (_source245.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6555___mcc_h70 = _source245.dtor_path;
            DAST._IType _source249 = _6469___mcc_h1;
            if (_source249.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6556___mcc_h74 = _source249.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6557___mcc_h75 = _source249.dtor_typeArgs;
              DAST._IResolvedType _6558___mcc_h76 = _source249.dtor_resolved;
              DAST._IResolvedType _source250 = _6558___mcc_h76;
              if (_source250.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6559___mcc_h80 = _source250.dtor_path;
                {
                  RAST._IExpr _6560_recursiveGen;
                  DCOMPUTF16._IOwnership _6561_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6562_recIdents;
                  RAST._IExpr _out2853;
                  DCOMPUTF16._IOwnership _out2854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2855;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2853, out _out2854, out _out2855);
                  _6560_recursiveGen = _out2853;
                  _6561_recOwned = _out2854;
                  _6562_recIdents = _out2855;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6560_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2856;
                  DCOMPUTF16._IOwnership _out2857;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2856, out _out2857);
                  r = _out2856;
                  resultingOwnership = _out2857;
                  readIdents = _6562_recIdents;
                }
              } else if (_source250.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6563___mcc_h82 = _source250.dtor_path;
                {
                  RAST._IExpr _6564_recursiveGen;
                  DCOMPUTF16._IOwnership _6565_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6566_recIdents;
                  RAST._IExpr _out2858;
                  DCOMPUTF16._IOwnership _out2859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2860;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2858, out _out2859, out _out2860);
                  _6564_recursiveGen = _out2858;
                  _6565_recOwned = _out2859;
                  _6566_recIdents = _out2860;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6564_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2861;
                  DCOMPUTF16._IOwnership _out2862;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2861, out _out2862);
                  r = _out2861;
                  resultingOwnership = _out2862;
                  readIdents = _6566_recIdents;
                }
              } else {
                DAST._IType _6567___mcc_h84 = _source250.dtor_baseType;
                DAST._INewtypeRange _6568___mcc_h85 = _source250.dtor_range;
                bool _6569___mcc_h86 = _source250.dtor_erase;
                bool _6570_erase = _6569___mcc_h86;
                DAST._INewtypeRange _6571_range = _6568___mcc_h85;
                DAST._IType _6572_b = _6567___mcc_h84;
                {
                  if (object.Equals(_6463_fromTpe, _6572_b)) {
                    RAST._IExpr _6573_recursiveGen;
                    DCOMPUTF16._IOwnership _6574_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6575_recIdents;
                    RAST._IExpr _out2863;
                    DCOMPUTF16._IOwnership _out2864;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2865;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2863, out _out2864, out _out2865);
                    _6573_recursiveGen = _out2863;
                    _6574_recOwned = _out2864;
                    _6575_recIdents = _out2865;
                    Std.Wrappers._IOption<RAST._IType> _6576_potentialRhsType;
                    _6576_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6572_b, _6571_range);
                    Std.Wrappers._IOption<RAST._IType> _source251 = _6576_potentialRhsType;
                    if (_source251.is_None) {
                      if (_6570_erase) {
                        r = _6573_recursiveGen;
                      } else {
                        RAST._IType _6577_rhsType;
                        RAST._IType _out2866;
                        _out2866 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _6577_rhsType = _out2866;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6577_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6573_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2867;
                      DCOMPUTF16._IOwnership _out2868;
                      DCOMPUTF16.COMP.FromOwnership(r, _6574_recOwned, expectedOwnership, out _out2867, out _out2868);
                      r = _out2867;
                      resultingOwnership = _out2868;
                    } else {
                      RAST._IType _6578___mcc_h1155 = _source251.dtor_value;
                      RAST._IType _6579_v = _6578___mcc_h1155;
                      r = RAST.Expr.create_ConversionNum(_6579_v, _6573_recursiveGen);
                      RAST._IExpr _out2869;
                      DCOMPUTF16._IOwnership _out2870;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2869, out _out2870);
                      r = _out2869;
                      resultingOwnership = _out2870;
                    }
                    readIdents = _6575_recIdents;
                  } else {
                    RAST._IExpr _out2871;
                    DCOMPUTF16._IOwnership _out2872;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2873;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6572_b), _6572_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2871, out _out2872, out _out2873);
                    r = _out2871;
                    resultingOwnership = _out2872;
                    readIdents = _out2873;
                  }
                }
              }
            } else if (_source249.is_Nullable) {
              DAST._IType _6580___mcc_h90 = _source249.dtor_Nullable_a0;
              {
                RAST._IExpr _6581_recursiveGen;
                DCOMPUTF16._IOwnership _6582_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6583_recIdents;
                RAST._IExpr _out2874;
                DCOMPUTF16._IOwnership _out2875;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2876;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2874, out _out2875, out _out2876);
                _6581_recursiveGen = _out2874;
                _6582_recOwned = _out2875;
                _6583_recIdents = _out2876;
                Dafny.ISequence<Dafny.Rune> _6584_s;
                _6584_s = (_6581_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6582_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6584_s = Dafny.Sequence<Dafny.Rune>.Concat(_6584_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _6584_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6584_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_6584_s);
                RAST._IExpr _out2877;
                DCOMPUTF16._IOwnership _out2878;
                DCOMPUTF16.COMP.FromOwnership(r, _6582_recOwned, expectedOwnership, out _out2877, out _out2878);
                r = _out2877;
                resultingOwnership = _out2878;
                readIdents = _6583_recIdents;
              }
            } else if (_source249.is_Tuple) {
              Dafny.ISequence<DAST._IType> _6585___mcc_h92 = _source249.dtor_Tuple_a0;
              {
                RAST._IExpr _6586_recursiveGen;
                DCOMPUTF16._IOwnership _6587_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6588_recIdents;
                RAST._IExpr _out2879;
                DCOMPUTF16._IOwnership _out2880;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2881;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2879, out _out2880, out _out2881);
                _6586_recursiveGen = _out2879;
                _6587_recOwned = _out2880;
                _6588_recIdents = _out2881;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6586_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2882;
                DCOMPUTF16._IOwnership _out2883;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2882, out _out2883);
                r = _out2882;
                resultingOwnership = _out2883;
                readIdents = _6588_recIdents;
              }
            } else if (_source249.is_Array) {
              DAST._IType _6589___mcc_h94 = _source249.dtor_element;
              BigInteger _6590___mcc_h95 = _source249.dtor_dims;
              {
                RAST._IExpr _6591_recursiveGen;
                DCOMPUTF16._IOwnership _6592_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6593_recIdents;
                RAST._IExpr _out2884;
                DCOMPUTF16._IOwnership _out2885;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2886;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2884, out _out2885, out _out2886);
                _6591_recursiveGen = _out2884;
                _6592_recOwned = _out2885;
                _6593_recIdents = _out2886;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6591_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2887;
                DCOMPUTF16._IOwnership _out2888;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2887, out _out2888);
                r = _out2887;
                resultingOwnership = _out2888;
                readIdents = _6593_recIdents;
              }
            } else if (_source249.is_Seq) {
              DAST._IType _6594___mcc_h98 = _source249.dtor_element;
              {
                RAST._IExpr _6595_recursiveGen;
                DCOMPUTF16._IOwnership _6596_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6597_recIdents;
                RAST._IExpr _out2889;
                DCOMPUTF16._IOwnership _out2890;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2891;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2889, out _out2890, out _out2891);
                _6595_recursiveGen = _out2889;
                _6596_recOwned = _out2890;
                _6597_recIdents = _out2891;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6595_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2892;
                DCOMPUTF16._IOwnership _out2893;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2892, out _out2893);
                r = _out2892;
                resultingOwnership = _out2893;
                readIdents = _6597_recIdents;
              }
            } else if (_source249.is_Set) {
              DAST._IType _6598___mcc_h100 = _source249.dtor_element;
              {
                RAST._IExpr _6599_recursiveGen;
                DCOMPUTF16._IOwnership _6600_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6601_recIdents;
                RAST._IExpr _out2894;
                DCOMPUTF16._IOwnership _out2895;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2896;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2894, out _out2895, out _out2896);
                _6599_recursiveGen = _out2894;
                _6600_recOwned = _out2895;
                _6601_recIdents = _out2896;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6599_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2897;
                DCOMPUTF16._IOwnership _out2898;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2897, out _out2898);
                r = _out2897;
                resultingOwnership = _out2898;
                readIdents = _6601_recIdents;
              }
            } else if (_source249.is_Multiset) {
              DAST._IType _6602___mcc_h102 = _source249.dtor_element;
              {
                RAST._IExpr _6603_recursiveGen;
                DCOMPUTF16._IOwnership _6604_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6605_recIdents;
                RAST._IExpr _out2899;
                DCOMPUTF16._IOwnership _out2900;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2901;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2899, out _out2900, out _out2901);
                _6603_recursiveGen = _out2899;
                _6604_recOwned = _out2900;
                _6605_recIdents = _out2901;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6603_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2902;
                DCOMPUTF16._IOwnership _out2903;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2902, out _out2903);
                r = _out2902;
                resultingOwnership = _out2903;
                readIdents = _6605_recIdents;
              }
            } else if (_source249.is_Map) {
              DAST._IType _6606___mcc_h104 = _source249.dtor_key;
              DAST._IType _6607___mcc_h105 = _source249.dtor_value;
              {
                RAST._IExpr _6608_recursiveGen;
                DCOMPUTF16._IOwnership _6609_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6610_recIdents;
                RAST._IExpr _out2904;
                DCOMPUTF16._IOwnership _out2905;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2906;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2904, out _out2905, out _out2906);
                _6608_recursiveGen = _out2904;
                _6609_recOwned = _out2905;
                _6610_recIdents = _out2906;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6608_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2907;
                DCOMPUTF16._IOwnership _out2908;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2907, out _out2908);
                r = _out2907;
                resultingOwnership = _out2908;
                readIdents = _6610_recIdents;
              }
            } else if (_source249.is_SetBuilder) {
              DAST._IType _6611___mcc_h108 = _source249.dtor_element;
              {
                RAST._IExpr _6612_recursiveGen;
                DCOMPUTF16._IOwnership _6613_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6614_recIdents;
                RAST._IExpr _out2909;
                DCOMPUTF16._IOwnership _out2910;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2911;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2909, out _out2910, out _out2911);
                _6612_recursiveGen = _out2909;
                _6613_recOwned = _out2910;
                _6614_recIdents = _out2911;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6612_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2912;
                DCOMPUTF16._IOwnership _out2913;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2912, out _out2913);
                r = _out2912;
                resultingOwnership = _out2913;
                readIdents = _6614_recIdents;
              }
            } else if (_source249.is_MapBuilder) {
              DAST._IType _6615___mcc_h110 = _source249.dtor_key;
              DAST._IType _6616___mcc_h111 = _source249.dtor_value;
              {
                RAST._IExpr _6617_recursiveGen;
                DCOMPUTF16._IOwnership _6618_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6619_recIdents;
                RAST._IExpr _out2914;
                DCOMPUTF16._IOwnership _out2915;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2916;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2914, out _out2915, out _out2916);
                _6617_recursiveGen = _out2914;
                _6618_recOwned = _out2915;
                _6619_recIdents = _out2916;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6617_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2917;
                DCOMPUTF16._IOwnership _out2918;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2917, out _out2918);
                r = _out2917;
                resultingOwnership = _out2918;
                readIdents = _6619_recIdents;
              }
            } else if (_source249.is_Arrow) {
              Dafny.ISequence<DAST._IType> _6620___mcc_h114 = _source249.dtor_args;
              DAST._IType _6621___mcc_h115 = _source249.dtor_result;
              {
                RAST._IExpr _6622_recursiveGen;
                DCOMPUTF16._IOwnership _6623_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6624_recIdents;
                RAST._IExpr _out2919;
                DCOMPUTF16._IOwnership _out2920;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2921;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2919, out _out2920, out _out2921);
                _6622_recursiveGen = _out2919;
                _6623_recOwned = _out2920;
                _6624_recIdents = _out2921;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6622_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2922;
                DCOMPUTF16._IOwnership _out2923;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2922, out _out2923);
                r = _out2922;
                resultingOwnership = _out2923;
                readIdents = _6624_recIdents;
              }
            } else if (_source249.is_Primitive) {
              DAST._IPrimitive _6625___mcc_h118 = _source249.dtor_Primitive_a0;
              {
                RAST._IExpr _6626_recursiveGen;
                DCOMPUTF16._IOwnership _6627_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6628_recIdents;
                RAST._IExpr _out2924;
                DCOMPUTF16._IOwnership _out2925;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2926;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2924, out _out2925, out _out2926);
                _6626_recursiveGen = _out2924;
                _6627_recOwned = _out2925;
                _6628_recIdents = _out2926;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6626_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2927;
                DCOMPUTF16._IOwnership _out2928;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2927, out _out2928);
                r = _out2927;
                resultingOwnership = _out2928;
                readIdents = _6628_recIdents;
              }
            } else if (_source249.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _6629___mcc_h120 = _source249.dtor_Passthrough_a0;
              {
                RAST._IExpr _6630_recursiveGen;
                DCOMPUTF16._IOwnership _6631_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6632_recIdents;
                RAST._IExpr _out2929;
                DCOMPUTF16._IOwnership _out2930;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2931;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2929, out _out2930, out _out2931);
                _6630_recursiveGen = _out2929;
                _6631_recOwned = _out2930;
                _6632_recIdents = _out2931;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2932;
                DCOMPUTF16._IOwnership _out2933;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2932, out _out2933);
                r = _out2932;
                resultingOwnership = _out2933;
                readIdents = _6632_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6633___mcc_h122 = _source249.dtor_TypeArg_a0;
              {
                RAST._IExpr _6634_recursiveGen;
                DCOMPUTF16._IOwnership _6635_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6636_recIdents;
                RAST._IExpr _out2934;
                DCOMPUTF16._IOwnership _out2935;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2936;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2934, out _out2935, out _out2936);
                _6634_recursiveGen = _out2934;
                _6635_recOwned = _out2935;
                _6636_recIdents = _out2936;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6634_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2937;
                DCOMPUTF16._IOwnership _out2938;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2937, out _out2938);
                r = _out2937;
                resultingOwnership = _out2938;
                readIdents = _6636_recIdents;
              }
            }
          } else {
            DAST._IType _6637___mcc_h124 = _source245.dtor_baseType;
            DAST._INewtypeRange _6638___mcc_h125 = _source245.dtor_range;
            bool _6639___mcc_h126 = _source245.dtor_erase;
            DAST._IType _source252 = _6469___mcc_h1;
            if (_source252.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6640___mcc_h136 = _source252.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6641___mcc_h137 = _source252.dtor_typeArgs;
              DAST._IResolvedType _6642___mcc_h138 = _source252.dtor_resolved;
              DAST._IResolvedType _source253 = _6642___mcc_h138;
              if (_source253.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6643___mcc_h145 = _source253.dtor_path;
                bool _6644_erase = _6639___mcc_h126;
                DAST._INewtypeRange _6645_range = _6638___mcc_h125;
                DAST._IType _6646_b = _6637___mcc_h124;
                {
                  if (object.Equals(_6646_b, _6464_toTpe)) {
                    RAST._IExpr _6647_recursiveGen;
                    DCOMPUTF16._IOwnership _6648_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6649_recIdents;
                    RAST._IExpr _out2939;
                    DCOMPUTF16._IOwnership _out2940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2941;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2939, out _out2940, out _out2941);
                    _6647_recursiveGen = _out2939;
                    _6648_recOwned = _out2940;
                    _6649_recIdents = _out2941;
                    if (_6644_erase) {
                      r = _6647_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6647_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out2942;
                    DCOMPUTF16._IOwnership _out2943;
                    DCOMPUTF16.COMP.FromOwnership(r, _6648_recOwned, expectedOwnership, out _out2942, out _out2943);
                    r = _out2942;
                    resultingOwnership = _out2943;
                    readIdents = _6649_recIdents;
                  } else {
                    RAST._IExpr _out2944;
                    DCOMPUTF16._IOwnership _out2945;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2946;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6646_b), _6646_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2944, out _out2945, out _out2946);
                    r = _out2944;
                    resultingOwnership = _out2945;
                    readIdents = _out2946;
                  }
                }
              } else if (_source253.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6650___mcc_h148 = _source253.dtor_path;
                bool _6651_erase = _6639___mcc_h126;
                DAST._INewtypeRange _6652_range = _6638___mcc_h125;
                DAST._IType _6653_b = _6637___mcc_h124;
                {
                  if (object.Equals(_6653_b, _6464_toTpe)) {
                    RAST._IExpr _6654_recursiveGen;
                    DCOMPUTF16._IOwnership _6655_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6656_recIdents;
                    RAST._IExpr _out2947;
                    DCOMPUTF16._IOwnership _out2948;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2949;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2947, out _out2948, out _out2949);
                    _6654_recursiveGen = _out2947;
                    _6655_recOwned = _out2948;
                    _6656_recIdents = _out2949;
                    if (_6651_erase) {
                      r = _6654_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6654_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out2950;
                    DCOMPUTF16._IOwnership _out2951;
                    DCOMPUTF16.COMP.FromOwnership(r, _6655_recOwned, expectedOwnership, out _out2950, out _out2951);
                    r = _out2950;
                    resultingOwnership = _out2951;
                    readIdents = _6656_recIdents;
                  } else {
                    RAST._IExpr _out2952;
                    DCOMPUTF16._IOwnership _out2953;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2954;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6653_b), _6653_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2952, out _out2953, out _out2954);
                    r = _out2952;
                    resultingOwnership = _out2953;
                    readIdents = _out2954;
                  }
                }
              } else {
                DAST._IType _6657___mcc_h151 = _source253.dtor_baseType;
                DAST._INewtypeRange _6658___mcc_h152 = _source253.dtor_range;
                bool _6659___mcc_h153 = _source253.dtor_erase;
                bool _6660_erase = _6659___mcc_h153;
                DAST._INewtypeRange _6661_range = _6658___mcc_h152;
                DAST._IType _6662_b = _6657___mcc_h151;
                {
                  if (object.Equals(_6463_fromTpe, _6662_b)) {
                    RAST._IExpr _6663_recursiveGen;
                    DCOMPUTF16._IOwnership _6664_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6665_recIdents;
                    RAST._IExpr _out2955;
                    DCOMPUTF16._IOwnership _out2956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2957;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2955, out _out2956, out _out2957);
                    _6663_recursiveGen = _out2955;
                    _6664_recOwned = _out2956;
                    _6665_recIdents = _out2957;
                    Std.Wrappers._IOption<RAST._IType> _6666_potentialRhsType;
                    _6666_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6662_b, _6661_range);
                    Std.Wrappers._IOption<RAST._IType> _source254 = _6666_potentialRhsType;
                    if (_source254.is_None) {
                      if (_6660_erase) {
                        r = _6663_recursiveGen;
                      } else {
                        RAST._IType _6667_rhsType;
                        RAST._IType _out2958;
                        _out2958 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _6667_rhsType = _out2958;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6667_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6663_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2959;
                      DCOMPUTF16._IOwnership _out2960;
                      DCOMPUTF16.COMP.FromOwnership(r, _6664_recOwned, expectedOwnership, out _out2959, out _out2960);
                      r = _out2959;
                      resultingOwnership = _out2960;
                    } else {
                      RAST._IType _6668___mcc_h1156 = _source254.dtor_value;
                      RAST._IType _6669_v = _6668___mcc_h1156;
                      r = RAST.Expr.create_ConversionNum(_6669_v, _6663_recursiveGen);
                      RAST._IExpr _out2961;
                      DCOMPUTF16._IOwnership _out2962;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2961, out _out2962);
                      r = _out2961;
                      resultingOwnership = _out2962;
                    }
                    readIdents = _6665_recIdents;
                  } else {
                    RAST._IExpr _out2963;
                    DCOMPUTF16._IOwnership _out2964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2965;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6662_b), _6662_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2963, out _out2964, out _out2965);
                    r = _out2963;
                    resultingOwnership = _out2964;
                    readIdents = _out2965;
                  }
                }
              }
            } else if (_source252.is_Nullable) {
              DAST._IType _6670___mcc_h160 = _source252.dtor_Nullable_a0;
              {
                RAST._IExpr _6671_recursiveGen;
                DCOMPUTF16._IOwnership _6672_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6673_recIdents;
                RAST._IExpr _out2966;
                DCOMPUTF16._IOwnership _out2967;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2968;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2966, out _out2967, out _out2968);
                _6671_recursiveGen = _out2966;
                _6672_recOwned = _out2967;
                _6673_recIdents = _out2968;
                Dafny.ISequence<Dafny.Rune> _6674_s;
                _6674_s = (_6671_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6672_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6674_s = Dafny.Sequence<Dafny.Rune>.Concat(_6674_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _6674_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6674_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_6674_s);
                RAST._IExpr _out2969;
                DCOMPUTF16._IOwnership _out2970;
                DCOMPUTF16.COMP.FromOwnership(r, _6672_recOwned, expectedOwnership, out _out2969, out _out2970);
                r = _out2969;
                resultingOwnership = _out2970;
                readIdents = _6673_recIdents;
              }
            } else if (_source252.is_Tuple) {
              Dafny.ISequence<DAST._IType> _6675___mcc_h163 = _source252.dtor_Tuple_a0;
              bool _6676_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6677_range = _6638___mcc_h125;
              DAST._IType _6678_b = _6637___mcc_h124;
              {
                if (object.Equals(_6678_b, _6464_toTpe)) {
                  RAST._IExpr _6679_recursiveGen;
                  DCOMPUTF16._IOwnership _6680_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6681_recIdents;
                  RAST._IExpr _out2971;
                  DCOMPUTF16._IOwnership _out2972;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2973;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2971, out _out2972, out _out2973);
                  _6679_recursiveGen = _out2971;
                  _6680_recOwned = _out2972;
                  _6681_recIdents = _out2973;
                  if (_6676_erase) {
                    r = _6679_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6679_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2974;
                  DCOMPUTF16._IOwnership _out2975;
                  DCOMPUTF16.COMP.FromOwnership(r, _6680_recOwned, expectedOwnership, out _out2974, out _out2975);
                  r = _out2974;
                  resultingOwnership = _out2975;
                  readIdents = _6681_recIdents;
                } else {
                  RAST._IExpr _out2976;
                  DCOMPUTF16._IOwnership _out2977;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2978;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6678_b), _6678_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2976, out _out2977, out _out2978);
                  r = _out2976;
                  resultingOwnership = _out2977;
                  readIdents = _out2978;
                }
              }
            } else if (_source252.is_Array) {
              DAST._IType _6682___mcc_h166 = _source252.dtor_element;
              BigInteger _6683___mcc_h167 = _source252.dtor_dims;
              bool _6684_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6685_range = _6638___mcc_h125;
              DAST._IType _6686_b = _6637___mcc_h124;
              {
                if (object.Equals(_6686_b, _6464_toTpe)) {
                  RAST._IExpr _6687_recursiveGen;
                  DCOMPUTF16._IOwnership _6688_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6689_recIdents;
                  RAST._IExpr _out2979;
                  DCOMPUTF16._IOwnership _out2980;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2981;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2979, out _out2980, out _out2981);
                  _6687_recursiveGen = _out2979;
                  _6688_recOwned = _out2980;
                  _6689_recIdents = _out2981;
                  if (_6684_erase) {
                    r = _6687_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6687_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2982;
                  DCOMPUTF16._IOwnership _out2983;
                  DCOMPUTF16.COMP.FromOwnership(r, _6688_recOwned, expectedOwnership, out _out2982, out _out2983);
                  r = _out2982;
                  resultingOwnership = _out2983;
                  readIdents = _6689_recIdents;
                } else {
                  RAST._IExpr _out2984;
                  DCOMPUTF16._IOwnership _out2985;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2986;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6686_b), _6686_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2984, out _out2985, out _out2986);
                  r = _out2984;
                  resultingOwnership = _out2985;
                  readIdents = _out2986;
                }
              }
            } else if (_source252.is_Seq) {
              DAST._IType _6690___mcc_h172 = _source252.dtor_element;
              bool _6691_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6692_range = _6638___mcc_h125;
              DAST._IType _6693_b = _6637___mcc_h124;
              {
                if (object.Equals(_6693_b, _6464_toTpe)) {
                  RAST._IExpr _6694_recursiveGen;
                  DCOMPUTF16._IOwnership _6695_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6696_recIdents;
                  RAST._IExpr _out2987;
                  DCOMPUTF16._IOwnership _out2988;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2989;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2987, out _out2988, out _out2989);
                  _6694_recursiveGen = _out2987;
                  _6695_recOwned = _out2988;
                  _6696_recIdents = _out2989;
                  if (_6691_erase) {
                    r = _6694_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6694_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2990;
                  DCOMPUTF16._IOwnership _out2991;
                  DCOMPUTF16.COMP.FromOwnership(r, _6695_recOwned, expectedOwnership, out _out2990, out _out2991);
                  r = _out2990;
                  resultingOwnership = _out2991;
                  readIdents = _6696_recIdents;
                } else {
                  RAST._IExpr _out2992;
                  DCOMPUTF16._IOwnership _out2993;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2994;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6693_b), _6693_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out2992, out _out2993, out _out2994);
                  r = _out2992;
                  resultingOwnership = _out2993;
                  readIdents = _out2994;
                }
              }
            } else if (_source252.is_Set) {
              DAST._IType _6697___mcc_h175 = _source252.dtor_element;
              bool _6698_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6699_range = _6638___mcc_h125;
              DAST._IType _6700_b = _6637___mcc_h124;
              {
                if (object.Equals(_6700_b, _6464_toTpe)) {
                  RAST._IExpr _6701_recursiveGen;
                  DCOMPUTF16._IOwnership _6702_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6703_recIdents;
                  RAST._IExpr _out2995;
                  DCOMPUTF16._IOwnership _out2996;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2997;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out2995, out _out2996, out _out2997);
                  _6701_recursiveGen = _out2995;
                  _6702_recOwned = _out2996;
                  _6703_recIdents = _out2997;
                  if (_6698_erase) {
                    r = _6701_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6701_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2998;
                  DCOMPUTF16._IOwnership _out2999;
                  DCOMPUTF16.COMP.FromOwnership(r, _6702_recOwned, expectedOwnership, out _out2998, out _out2999);
                  r = _out2998;
                  resultingOwnership = _out2999;
                  readIdents = _6703_recIdents;
                } else {
                  RAST._IExpr _out3000;
                  DCOMPUTF16._IOwnership _out3001;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3002;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6700_b), _6700_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3000, out _out3001, out _out3002);
                  r = _out3000;
                  resultingOwnership = _out3001;
                  readIdents = _out3002;
                }
              }
            } else if (_source252.is_Multiset) {
              DAST._IType _6704___mcc_h178 = _source252.dtor_element;
              bool _6705_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6706_range = _6638___mcc_h125;
              DAST._IType _6707_b = _6637___mcc_h124;
              {
                if (object.Equals(_6707_b, _6464_toTpe)) {
                  RAST._IExpr _6708_recursiveGen;
                  DCOMPUTF16._IOwnership _6709_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6710_recIdents;
                  RAST._IExpr _out3003;
                  DCOMPUTF16._IOwnership _out3004;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3005;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3003, out _out3004, out _out3005);
                  _6708_recursiveGen = _out3003;
                  _6709_recOwned = _out3004;
                  _6710_recIdents = _out3005;
                  if (_6705_erase) {
                    r = _6708_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6708_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3006;
                  DCOMPUTF16._IOwnership _out3007;
                  DCOMPUTF16.COMP.FromOwnership(r, _6709_recOwned, expectedOwnership, out _out3006, out _out3007);
                  r = _out3006;
                  resultingOwnership = _out3007;
                  readIdents = _6710_recIdents;
                } else {
                  RAST._IExpr _out3008;
                  DCOMPUTF16._IOwnership _out3009;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3010;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6707_b), _6707_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3008, out _out3009, out _out3010);
                  r = _out3008;
                  resultingOwnership = _out3009;
                  readIdents = _out3010;
                }
              }
            } else if (_source252.is_Map) {
              DAST._IType _6711___mcc_h181 = _source252.dtor_key;
              DAST._IType _6712___mcc_h182 = _source252.dtor_value;
              bool _6713_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6714_range = _6638___mcc_h125;
              DAST._IType _6715_b = _6637___mcc_h124;
              {
                if (object.Equals(_6715_b, _6464_toTpe)) {
                  RAST._IExpr _6716_recursiveGen;
                  DCOMPUTF16._IOwnership _6717_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6718_recIdents;
                  RAST._IExpr _out3011;
                  DCOMPUTF16._IOwnership _out3012;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3013;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3011, out _out3012, out _out3013);
                  _6716_recursiveGen = _out3011;
                  _6717_recOwned = _out3012;
                  _6718_recIdents = _out3013;
                  if (_6713_erase) {
                    r = _6716_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6716_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3014;
                  DCOMPUTF16._IOwnership _out3015;
                  DCOMPUTF16.COMP.FromOwnership(r, _6717_recOwned, expectedOwnership, out _out3014, out _out3015);
                  r = _out3014;
                  resultingOwnership = _out3015;
                  readIdents = _6718_recIdents;
                } else {
                  RAST._IExpr _out3016;
                  DCOMPUTF16._IOwnership _out3017;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3018;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6715_b), _6715_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3016, out _out3017, out _out3018);
                  r = _out3016;
                  resultingOwnership = _out3017;
                  readIdents = _out3018;
                }
              }
            } else if (_source252.is_SetBuilder) {
              DAST._IType _6719___mcc_h187 = _source252.dtor_element;
              bool _6720_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6721_range = _6638___mcc_h125;
              DAST._IType _6722_b = _6637___mcc_h124;
              {
                if (object.Equals(_6722_b, _6464_toTpe)) {
                  RAST._IExpr _6723_recursiveGen;
                  DCOMPUTF16._IOwnership _6724_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6725_recIdents;
                  RAST._IExpr _out3019;
                  DCOMPUTF16._IOwnership _out3020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3021;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3019, out _out3020, out _out3021);
                  _6723_recursiveGen = _out3019;
                  _6724_recOwned = _out3020;
                  _6725_recIdents = _out3021;
                  if (_6720_erase) {
                    r = _6723_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6723_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3022;
                  DCOMPUTF16._IOwnership _out3023;
                  DCOMPUTF16.COMP.FromOwnership(r, _6724_recOwned, expectedOwnership, out _out3022, out _out3023);
                  r = _out3022;
                  resultingOwnership = _out3023;
                  readIdents = _6725_recIdents;
                } else {
                  RAST._IExpr _out3024;
                  DCOMPUTF16._IOwnership _out3025;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3026;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6722_b), _6722_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3024, out _out3025, out _out3026);
                  r = _out3024;
                  resultingOwnership = _out3025;
                  readIdents = _out3026;
                }
              }
            } else if (_source252.is_MapBuilder) {
              DAST._IType _6726___mcc_h190 = _source252.dtor_key;
              DAST._IType _6727___mcc_h191 = _source252.dtor_value;
              bool _6728_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6729_range = _6638___mcc_h125;
              DAST._IType _6730_b = _6637___mcc_h124;
              {
                if (object.Equals(_6730_b, _6464_toTpe)) {
                  RAST._IExpr _6731_recursiveGen;
                  DCOMPUTF16._IOwnership _6732_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6733_recIdents;
                  RAST._IExpr _out3027;
                  DCOMPUTF16._IOwnership _out3028;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3029;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3027, out _out3028, out _out3029);
                  _6731_recursiveGen = _out3027;
                  _6732_recOwned = _out3028;
                  _6733_recIdents = _out3029;
                  if (_6728_erase) {
                    r = _6731_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6731_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3030;
                  DCOMPUTF16._IOwnership _out3031;
                  DCOMPUTF16.COMP.FromOwnership(r, _6732_recOwned, expectedOwnership, out _out3030, out _out3031);
                  r = _out3030;
                  resultingOwnership = _out3031;
                  readIdents = _6733_recIdents;
                } else {
                  RAST._IExpr _out3032;
                  DCOMPUTF16._IOwnership _out3033;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3034;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6730_b), _6730_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3032, out _out3033, out _out3034);
                  r = _out3032;
                  resultingOwnership = _out3033;
                  readIdents = _out3034;
                }
              }
            } else if (_source252.is_Arrow) {
              Dafny.ISequence<DAST._IType> _6734___mcc_h196 = _source252.dtor_args;
              DAST._IType _6735___mcc_h197 = _source252.dtor_result;
              bool _6736_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6737_range = _6638___mcc_h125;
              DAST._IType _6738_b = _6637___mcc_h124;
              {
                if (object.Equals(_6738_b, _6464_toTpe)) {
                  RAST._IExpr _6739_recursiveGen;
                  DCOMPUTF16._IOwnership _6740_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6741_recIdents;
                  RAST._IExpr _out3035;
                  DCOMPUTF16._IOwnership _out3036;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3037;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3035, out _out3036, out _out3037);
                  _6739_recursiveGen = _out3035;
                  _6740_recOwned = _out3036;
                  _6741_recIdents = _out3037;
                  if (_6736_erase) {
                    r = _6739_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6739_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3038;
                  DCOMPUTF16._IOwnership _out3039;
                  DCOMPUTF16.COMP.FromOwnership(r, _6740_recOwned, expectedOwnership, out _out3038, out _out3039);
                  r = _out3038;
                  resultingOwnership = _out3039;
                  readIdents = _6741_recIdents;
                } else {
                  RAST._IExpr _out3040;
                  DCOMPUTF16._IOwnership _out3041;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3042;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6738_b), _6738_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3040, out _out3041, out _out3042);
                  r = _out3040;
                  resultingOwnership = _out3041;
                  readIdents = _out3042;
                }
              }
            } else if (_source252.is_Primitive) {
              DAST._IPrimitive _6742___mcc_h202 = _source252.dtor_Primitive_a0;
              bool _6743_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6744_range = _6638___mcc_h125;
              DAST._IType _6745_b = _6637___mcc_h124;
              {
                if (object.Equals(_6745_b, _6464_toTpe)) {
                  RAST._IExpr _6746_recursiveGen;
                  DCOMPUTF16._IOwnership _6747_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6748_recIdents;
                  RAST._IExpr _out3043;
                  DCOMPUTF16._IOwnership _out3044;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3045;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3043, out _out3044, out _out3045);
                  _6746_recursiveGen = _out3043;
                  _6747_recOwned = _out3044;
                  _6748_recIdents = _out3045;
                  if (_6743_erase) {
                    r = _6746_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6746_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3046;
                  DCOMPUTF16._IOwnership _out3047;
                  DCOMPUTF16.COMP.FromOwnership(r, _6747_recOwned, expectedOwnership, out _out3046, out _out3047);
                  r = _out3046;
                  resultingOwnership = _out3047;
                  readIdents = _6748_recIdents;
                } else {
                  RAST._IExpr _out3048;
                  DCOMPUTF16._IOwnership _out3049;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3050;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6745_b), _6745_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3048, out _out3049, out _out3050);
                  r = _out3048;
                  resultingOwnership = _out3049;
                  readIdents = _out3050;
                }
              }
            } else if (_source252.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _6749___mcc_h205 = _source252.dtor_Passthrough_a0;
              bool _6750_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6751_range = _6638___mcc_h125;
              DAST._IType _6752_b = _6637___mcc_h124;
              {
                if (object.Equals(_6752_b, _6464_toTpe)) {
                  RAST._IExpr _6753_recursiveGen;
                  DCOMPUTF16._IOwnership _6754_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6755_recIdents;
                  RAST._IExpr _out3051;
                  DCOMPUTF16._IOwnership _out3052;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3053;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3051, out _out3052, out _out3053);
                  _6753_recursiveGen = _out3051;
                  _6754_recOwned = _out3052;
                  _6755_recIdents = _out3053;
                  if (_6750_erase) {
                    r = _6753_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6753_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3054;
                  DCOMPUTF16._IOwnership _out3055;
                  DCOMPUTF16.COMP.FromOwnership(r, _6754_recOwned, expectedOwnership, out _out3054, out _out3055);
                  r = _out3054;
                  resultingOwnership = _out3055;
                  readIdents = _6755_recIdents;
                } else {
                  RAST._IExpr _out3056;
                  DCOMPUTF16._IOwnership _out3057;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3058;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6752_b), _6752_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3056, out _out3057, out _out3058);
                  r = _out3056;
                  resultingOwnership = _out3057;
                  readIdents = _out3058;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6756___mcc_h208 = _source252.dtor_TypeArg_a0;
              bool _6757_erase = _6639___mcc_h126;
              DAST._INewtypeRange _6758_range = _6638___mcc_h125;
              DAST._IType _6759_b = _6637___mcc_h124;
              {
                if (object.Equals(_6759_b, _6464_toTpe)) {
                  RAST._IExpr _6760_recursiveGen;
                  DCOMPUTF16._IOwnership _6761_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6762_recIdents;
                  RAST._IExpr _out3059;
                  DCOMPUTF16._IOwnership _out3060;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3061;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3059, out _out3060, out _out3061);
                  _6760_recursiveGen = _out3059;
                  _6761_recOwned = _out3060;
                  _6762_recIdents = _out3061;
                  if (_6757_erase) {
                    r = _6760_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6760_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3062;
                  DCOMPUTF16._IOwnership _out3063;
                  DCOMPUTF16.COMP.FromOwnership(r, _6761_recOwned, expectedOwnership, out _out3062, out _out3063);
                  r = _out3062;
                  resultingOwnership = _out3063;
                  readIdents = _6762_recIdents;
                } else {
                  RAST._IExpr _out3064;
                  DCOMPUTF16._IOwnership _out3065;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3066;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6759_b), _6759_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3064, out _out3065, out _out3066);
                  r = _out3064;
                  resultingOwnership = _out3065;
                  readIdents = _out3066;
                }
              }
            }
          }
        } else if (_source244.is_Nullable) {
          DAST._IType _6763___mcc_h211 = _source244.dtor_Nullable_a0;
          DAST._IType _source255 = _6469___mcc_h1;
          if (_source255.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6764___mcc_h215 = _source255.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6765___mcc_h216 = _source255.dtor_typeArgs;
            DAST._IResolvedType _6766___mcc_h217 = _source255.dtor_resolved;
            DAST._IResolvedType _source256 = _6766___mcc_h217;
            if (_source256.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6767___mcc_h224 = _source256.dtor_path;
              {
                RAST._IExpr _6768_recursiveGen;
                DCOMPUTF16._IOwnership _6769_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6770_recIdents;
                RAST._IExpr _out3067;
                DCOMPUTF16._IOwnership _out3068;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3069;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3067, out _out3068, out _out3069);
                _6768_recursiveGen = _out3067;
                _6769_recOwned = _out3068;
                _6770_recIdents = _out3069;
                Dafny.ISequence<Dafny.Rune> _6771_s;
                _6771_s = (_6768_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6769_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6771_s = Dafny.Sequence<Dafny.Rune>.Concat(_6771_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _6771_s = Dafny.Sequence<Dafny.Rune>.Concat(_6771_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_6771_s);
                RAST._IExpr _out3070;
                DCOMPUTF16._IOwnership _out3071;
                DCOMPUTF16.COMP.FromOwnership(r, _6769_recOwned, expectedOwnership, out _out3070, out _out3071);
                r = _out3070;
                resultingOwnership = _out3071;
                readIdents = _6770_recIdents;
              }
            } else if (_source256.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6772___mcc_h227 = _source256.dtor_path;
              {
                RAST._IExpr _6773_recursiveGen;
                DCOMPUTF16._IOwnership _6774_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6775_recIdents;
                RAST._IExpr _out3072;
                DCOMPUTF16._IOwnership _out3073;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3074;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3072, out _out3073, out _out3074);
                _6773_recursiveGen = _out3072;
                _6774_recOwned = _out3073;
                _6775_recIdents = _out3074;
                Dafny.ISequence<Dafny.Rune> _6776_s;
                _6776_s = (_6773_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6774_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6776_s = Dafny.Sequence<Dafny.Rune>.Concat(_6776_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _6776_s = Dafny.Sequence<Dafny.Rune>.Concat(_6776_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_6776_s);
                RAST._IExpr _out3075;
                DCOMPUTF16._IOwnership _out3076;
                DCOMPUTF16.COMP.FromOwnership(r, _6774_recOwned, expectedOwnership, out _out3075, out _out3076);
                r = _out3075;
                resultingOwnership = _out3076;
                readIdents = _6775_recIdents;
              }
            } else {
              DAST._IType _6777___mcc_h230 = _source256.dtor_baseType;
              DAST._INewtypeRange _6778___mcc_h231 = _source256.dtor_range;
              bool _6779___mcc_h232 = _source256.dtor_erase;
              {
                RAST._IExpr _6780_recursiveGen;
                DCOMPUTF16._IOwnership _6781_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6782_recIdents;
                RAST._IExpr _out3077;
                DCOMPUTF16._IOwnership _out3078;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3079;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3077, out _out3078, out _out3079);
                _6780_recursiveGen = _out3077;
                _6781_recOwned = _out3078;
                _6782_recIdents = _out3079;
                Dafny.ISequence<Dafny.Rune> _6783_s;
                _6783_s = (_6780_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6781_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6783_s = Dafny.Sequence<Dafny.Rune>.Concat(_6783_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _6783_s = Dafny.Sequence<Dafny.Rune>.Concat(_6783_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_6783_s);
                RAST._IExpr _out3080;
                DCOMPUTF16._IOwnership _out3081;
                DCOMPUTF16.COMP.FromOwnership(r, _6781_recOwned, expectedOwnership, out _out3080, out _out3081);
                r = _out3080;
                resultingOwnership = _out3081;
                readIdents = _6782_recIdents;
              }
            }
          } else if (_source255.is_Nullable) {
            DAST._IType _6784___mcc_h239 = _source255.dtor_Nullable_a0;
            {
              RAST._IExpr _6785_recursiveGen;
              DCOMPUTF16._IOwnership _6786_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6787_recIdents;
              RAST._IExpr _out3082;
              DCOMPUTF16._IOwnership _out3083;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3084;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3082, out _out3083, out _out3084);
              _6785_recursiveGen = _out3082;
              _6786_recOwned = _out3083;
              _6787_recIdents = _out3084;
              Dafny.ISequence<Dafny.Rune> _6788_s;
              _6788_s = (_6785_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6786_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6788_s = Dafny.Sequence<Dafny.Rune>.Concat(_6788_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6788_s = Dafny.Sequence<Dafny.Rune>.Concat(_6788_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6788_s);
              RAST._IExpr _out3085;
              DCOMPUTF16._IOwnership _out3086;
              DCOMPUTF16.COMP.FromOwnership(r, _6786_recOwned, expectedOwnership, out _out3085, out _out3086);
              r = _out3085;
              resultingOwnership = _out3086;
              readIdents = _6787_recIdents;
            }
          } else if (_source255.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6789___mcc_h242 = _source255.dtor_Tuple_a0;
            {
              RAST._IExpr _6790_recursiveGen;
              DCOMPUTF16._IOwnership _6791_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6792_recIdents;
              RAST._IExpr _out3087;
              DCOMPUTF16._IOwnership _out3088;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3089;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3087, out _out3088, out _out3089);
              _6790_recursiveGen = _out3087;
              _6791_recOwned = _out3088;
              _6792_recIdents = _out3089;
              Dafny.ISequence<Dafny.Rune> _6793_s;
              _6793_s = (_6790_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6791_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6793_s = Dafny.Sequence<Dafny.Rune>.Concat(_6793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6793_s = Dafny.Sequence<Dafny.Rune>.Concat(_6793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6793_s);
              RAST._IExpr _out3090;
              DCOMPUTF16._IOwnership _out3091;
              DCOMPUTF16.COMP.FromOwnership(r, _6791_recOwned, expectedOwnership, out _out3090, out _out3091);
              r = _out3090;
              resultingOwnership = _out3091;
              readIdents = _6792_recIdents;
            }
          } else if (_source255.is_Array) {
            DAST._IType _6794___mcc_h245 = _source255.dtor_element;
            BigInteger _6795___mcc_h246 = _source255.dtor_dims;
            {
              RAST._IExpr _6796_recursiveGen;
              DCOMPUTF16._IOwnership _6797_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6798_recIdents;
              RAST._IExpr _out3092;
              DCOMPUTF16._IOwnership _out3093;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3094;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3092, out _out3093, out _out3094);
              _6796_recursiveGen = _out3092;
              _6797_recOwned = _out3093;
              _6798_recIdents = _out3094;
              Dafny.ISequence<Dafny.Rune> _6799_s;
              _6799_s = (_6796_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6797_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6799_s = Dafny.Sequence<Dafny.Rune>.Concat(_6799_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6799_s = Dafny.Sequence<Dafny.Rune>.Concat(_6799_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6799_s);
              RAST._IExpr _out3095;
              DCOMPUTF16._IOwnership _out3096;
              DCOMPUTF16.COMP.FromOwnership(r, _6797_recOwned, expectedOwnership, out _out3095, out _out3096);
              r = _out3095;
              resultingOwnership = _out3096;
              readIdents = _6798_recIdents;
            }
          } else if (_source255.is_Seq) {
            DAST._IType _6800___mcc_h251 = _source255.dtor_element;
            {
              RAST._IExpr _6801_recursiveGen;
              DCOMPUTF16._IOwnership _6802_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6803_recIdents;
              RAST._IExpr _out3097;
              DCOMPUTF16._IOwnership _out3098;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3099;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3097, out _out3098, out _out3099);
              _6801_recursiveGen = _out3097;
              _6802_recOwned = _out3098;
              _6803_recIdents = _out3099;
              Dafny.ISequence<Dafny.Rune> _6804_s;
              _6804_s = (_6801_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6802_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6804_s = Dafny.Sequence<Dafny.Rune>.Concat(_6804_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6804_s = Dafny.Sequence<Dafny.Rune>.Concat(_6804_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6804_s);
              RAST._IExpr _out3100;
              DCOMPUTF16._IOwnership _out3101;
              DCOMPUTF16.COMP.FromOwnership(r, _6802_recOwned, expectedOwnership, out _out3100, out _out3101);
              r = _out3100;
              resultingOwnership = _out3101;
              readIdents = _6803_recIdents;
            }
          } else if (_source255.is_Set) {
            DAST._IType _6805___mcc_h254 = _source255.dtor_element;
            {
              RAST._IExpr _6806_recursiveGen;
              DCOMPUTF16._IOwnership _6807_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6808_recIdents;
              RAST._IExpr _out3102;
              DCOMPUTF16._IOwnership _out3103;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3104;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3102, out _out3103, out _out3104);
              _6806_recursiveGen = _out3102;
              _6807_recOwned = _out3103;
              _6808_recIdents = _out3104;
              Dafny.ISequence<Dafny.Rune> _6809_s;
              _6809_s = (_6806_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6807_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6809_s = Dafny.Sequence<Dafny.Rune>.Concat(_6809_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6809_s = Dafny.Sequence<Dafny.Rune>.Concat(_6809_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6809_s);
              RAST._IExpr _out3105;
              DCOMPUTF16._IOwnership _out3106;
              DCOMPUTF16.COMP.FromOwnership(r, _6807_recOwned, expectedOwnership, out _out3105, out _out3106);
              r = _out3105;
              resultingOwnership = _out3106;
              readIdents = _6808_recIdents;
            }
          } else if (_source255.is_Multiset) {
            DAST._IType _6810___mcc_h257 = _source255.dtor_element;
            {
              RAST._IExpr _6811_recursiveGen;
              DCOMPUTF16._IOwnership _6812_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6813_recIdents;
              RAST._IExpr _out3107;
              DCOMPUTF16._IOwnership _out3108;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3109;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3107, out _out3108, out _out3109);
              _6811_recursiveGen = _out3107;
              _6812_recOwned = _out3108;
              _6813_recIdents = _out3109;
              Dafny.ISequence<Dafny.Rune> _6814_s;
              _6814_s = (_6811_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6812_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6814_s = Dafny.Sequence<Dafny.Rune>.Concat(_6814_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6814_s = Dafny.Sequence<Dafny.Rune>.Concat(_6814_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6814_s);
              RAST._IExpr _out3110;
              DCOMPUTF16._IOwnership _out3111;
              DCOMPUTF16.COMP.FromOwnership(r, _6812_recOwned, expectedOwnership, out _out3110, out _out3111);
              r = _out3110;
              resultingOwnership = _out3111;
              readIdents = _6813_recIdents;
            }
          } else if (_source255.is_Map) {
            DAST._IType _6815___mcc_h260 = _source255.dtor_key;
            DAST._IType _6816___mcc_h261 = _source255.dtor_value;
            {
              RAST._IExpr _6817_recursiveGen;
              DCOMPUTF16._IOwnership _6818_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6819_recIdents;
              RAST._IExpr _out3112;
              DCOMPUTF16._IOwnership _out3113;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3114;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3112, out _out3113, out _out3114);
              _6817_recursiveGen = _out3112;
              _6818_recOwned = _out3113;
              _6819_recIdents = _out3114;
              Dafny.ISequence<Dafny.Rune> _6820_s;
              _6820_s = (_6817_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6818_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6820_s = Dafny.Sequence<Dafny.Rune>.Concat(_6820_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6820_s = Dafny.Sequence<Dafny.Rune>.Concat(_6820_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6820_s);
              RAST._IExpr _out3115;
              DCOMPUTF16._IOwnership _out3116;
              DCOMPUTF16.COMP.FromOwnership(r, _6818_recOwned, expectedOwnership, out _out3115, out _out3116);
              r = _out3115;
              resultingOwnership = _out3116;
              readIdents = _6819_recIdents;
            }
          } else if (_source255.is_SetBuilder) {
            DAST._IType _6821___mcc_h266 = _source255.dtor_element;
            {
              RAST._IExpr _6822_recursiveGen;
              DCOMPUTF16._IOwnership _6823_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6824_recIdents;
              RAST._IExpr _out3117;
              DCOMPUTF16._IOwnership _out3118;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3119;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3117, out _out3118, out _out3119);
              _6822_recursiveGen = _out3117;
              _6823_recOwned = _out3118;
              _6824_recIdents = _out3119;
              Dafny.ISequence<Dafny.Rune> _6825_s;
              _6825_s = (_6822_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6823_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6825_s = Dafny.Sequence<Dafny.Rune>.Concat(_6825_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6825_s = Dafny.Sequence<Dafny.Rune>.Concat(_6825_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6825_s);
              RAST._IExpr _out3120;
              DCOMPUTF16._IOwnership _out3121;
              DCOMPUTF16.COMP.FromOwnership(r, _6823_recOwned, expectedOwnership, out _out3120, out _out3121);
              r = _out3120;
              resultingOwnership = _out3121;
              readIdents = _6824_recIdents;
            }
          } else if (_source255.is_MapBuilder) {
            DAST._IType _6826___mcc_h269 = _source255.dtor_key;
            DAST._IType _6827___mcc_h270 = _source255.dtor_value;
            {
              RAST._IExpr _6828_recursiveGen;
              DCOMPUTF16._IOwnership _6829_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6830_recIdents;
              RAST._IExpr _out3122;
              DCOMPUTF16._IOwnership _out3123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3124;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3122, out _out3123, out _out3124);
              _6828_recursiveGen = _out3122;
              _6829_recOwned = _out3123;
              _6830_recIdents = _out3124;
              Dafny.ISequence<Dafny.Rune> _6831_s;
              _6831_s = (_6828_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6829_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6831_s = Dafny.Sequence<Dafny.Rune>.Concat(_6831_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6831_s = Dafny.Sequence<Dafny.Rune>.Concat(_6831_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6831_s);
              RAST._IExpr _out3125;
              DCOMPUTF16._IOwnership _out3126;
              DCOMPUTF16.COMP.FromOwnership(r, _6829_recOwned, expectedOwnership, out _out3125, out _out3126);
              r = _out3125;
              resultingOwnership = _out3126;
              readIdents = _6830_recIdents;
            }
          } else if (_source255.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6832___mcc_h275 = _source255.dtor_args;
            DAST._IType _6833___mcc_h276 = _source255.dtor_result;
            {
              RAST._IExpr _6834_recursiveGen;
              DCOMPUTF16._IOwnership _6835_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6836_recIdents;
              RAST._IExpr _out3127;
              DCOMPUTF16._IOwnership _out3128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3129;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3127, out _out3128, out _out3129);
              _6834_recursiveGen = _out3127;
              _6835_recOwned = _out3128;
              _6836_recIdents = _out3129;
              Dafny.ISequence<Dafny.Rune> _6837_s;
              _6837_s = (_6834_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6835_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6837_s = Dafny.Sequence<Dafny.Rune>.Concat(_6837_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6837_s = Dafny.Sequence<Dafny.Rune>.Concat(_6837_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6837_s);
              RAST._IExpr _out3130;
              DCOMPUTF16._IOwnership _out3131;
              DCOMPUTF16.COMP.FromOwnership(r, _6835_recOwned, expectedOwnership, out _out3130, out _out3131);
              r = _out3130;
              resultingOwnership = _out3131;
              readIdents = _6836_recIdents;
            }
          } else if (_source255.is_Primitive) {
            DAST._IPrimitive _6838___mcc_h281 = _source255.dtor_Primitive_a0;
            {
              RAST._IExpr _6839_recursiveGen;
              DCOMPUTF16._IOwnership _6840_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6841_recIdents;
              RAST._IExpr _out3132;
              DCOMPUTF16._IOwnership _out3133;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3134;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3132, out _out3133, out _out3134);
              _6839_recursiveGen = _out3132;
              _6840_recOwned = _out3133;
              _6841_recIdents = _out3134;
              Dafny.ISequence<Dafny.Rune> _6842_s;
              _6842_s = (_6839_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6840_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6842_s = Dafny.Sequence<Dafny.Rune>.Concat(_6842_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6842_s = Dafny.Sequence<Dafny.Rune>.Concat(_6842_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6842_s);
              RAST._IExpr _out3135;
              DCOMPUTF16._IOwnership _out3136;
              DCOMPUTF16.COMP.FromOwnership(r, _6840_recOwned, expectedOwnership, out _out3135, out _out3136);
              r = _out3135;
              resultingOwnership = _out3136;
              readIdents = _6841_recIdents;
            }
          } else if (_source255.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6843___mcc_h284 = _source255.dtor_Passthrough_a0;
            {
              RAST._IExpr _6844_recursiveGen;
              DCOMPUTF16._IOwnership _6845_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6846_recIdents;
              RAST._IExpr _out3137;
              DCOMPUTF16._IOwnership _out3138;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3139;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3137, out _out3138, out _out3139);
              _6844_recursiveGen = _out3137;
              _6845_recOwned = _out3138;
              _6846_recIdents = _out3139;
              Dafny.ISequence<Dafny.Rune> _6847_s;
              _6847_s = (_6844_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6845_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6847_s = Dafny.Sequence<Dafny.Rune>.Concat(_6847_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6847_s = Dafny.Sequence<Dafny.Rune>.Concat(_6847_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6847_s);
              RAST._IExpr _out3140;
              DCOMPUTF16._IOwnership _out3141;
              DCOMPUTF16.COMP.FromOwnership(r, _6845_recOwned, expectedOwnership, out _out3140, out _out3141);
              r = _out3140;
              resultingOwnership = _out3141;
              readIdents = _6846_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6848___mcc_h287 = _source255.dtor_TypeArg_a0;
            {
              RAST._IExpr _6849_recursiveGen;
              DCOMPUTF16._IOwnership _6850_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6851_recIdents;
              RAST._IExpr _out3142;
              DCOMPUTF16._IOwnership _out3143;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3144;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3142, out _out3143, out _out3144);
              _6849_recursiveGen = _out3142;
              _6850_recOwned = _out3143;
              _6851_recIdents = _out3144;
              Dafny.ISequence<Dafny.Rune> _6852_s;
              _6852_s = (_6849_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6850_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6852_s = Dafny.Sequence<Dafny.Rune>.Concat(_6852_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6852_s = Dafny.Sequence<Dafny.Rune>.Concat(_6852_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6852_s);
              RAST._IExpr _out3145;
              DCOMPUTF16._IOwnership _out3146;
              DCOMPUTF16.COMP.FromOwnership(r, _6850_recOwned, expectedOwnership, out _out3145, out _out3146);
              r = _out3145;
              resultingOwnership = _out3146;
              readIdents = _6851_recIdents;
            }
          }
        } else if (_source244.is_Tuple) {
          Dafny.ISequence<DAST._IType> _6853___mcc_h290 = _source244.dtor_Tuple_a0;
          DAST._IType _source257 = _6469___mcc_h1;
          if (_source257.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6854___mcc_h294 = _source257.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6855___mcc_h295 = _source257.dtor_typeArgs;
            DAST._IResolvedType _6856___mcc_h296 = _source257.dtor_resolved;
            DAST._IResolvedType _source258 = _6856___mcc_h296;
            if (_source258.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6857___mcc_h300 = _source258.dtor_path;
              {
                RAST._IExpr _6858_recursiveGen;
                DCOMPUTF16._IOwnership _6859_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6860_recIdents;
                RAST._IExpr _out3147;
                DCOMPUTF16._IOwnership _out3148;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3149;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3147, out _out3148, out _out3149);
                _6858_recursiveGen = _out3147;
                _6859_recOwned = _out3148;
                _6860_recIdents = _out3149;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6858_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3150;
                DCOMPUTF16._IOwnership _out3151;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3150, out _out3151);
                r = _out3150;
                resultingOwnership = _out3151;
                readIdents = _6860_recIdents;
              }
            } else if (_source258.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6861___mcc_h302 = _source258.dtor_path;
              {
                RAST._IExpr _6862_recursiveGen;
                DCOMPUTF16._IOwnership _6863_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6864_recIdents;
                RAST._IExpr _out3152;
                DCOMPUTF16._IOwnership _out3153;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3154;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3152, out _out3153, out _out3154);
                _6862_recursiveGen = _out3152;
                _6863_recOwned = _out3153;
                _6864_recIdents = _out3154;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6862_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3155;
                DCOMPUTF16._IOwnership _out3156;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3155, out _out3156);
                r = _out3155;
                resultingOwnership = _out3156;
                readIdents = _6864_recIdents;
              }
            } else {
              DAST._IType _6865___mcc_h304 = _source258.dtor_baseType;
              DAST._INewtypeRange _6866___mcc_h305 = _source258.dtor_range;
              bool _6867___mcc_h306 = _source258.dtor_erase;
              bool _6868_erase = _6867___mcc_h306;
              DAST._INewtypeRange _6869_range = _6866___mcc_h305;
              DAST._IType _6870_b = _6865___mcc_h304;
              {
                if (object.Equals(_6463_fromTpe, _6870_b)) {
                  RAST._IExpr _6871_recursiveGen;
                  DCOMPUTF16._IOwnership _6872_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6873_recIdents;
                  RAST._IExpr _out3157;
                  DCOMPUTF16._IOwnership _out3158;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3159;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3157, out _out3158, out _out3159);
                  _6871_recursiveGen = _out3157;
                  _6872_recOwned = _out3158;
                  _6873_recIdents = _out3159;
                  Std.Wrappers._IOption<RAST._IType> _6874_potentialRhsType;
                  _6874_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6870_b, _6869_range);
                  Std.Wrappers._IOption<RAST._IType> _source259 = _6874_potentialRhsType;
                  if (_source259.is_None) {
                    if (_6868_erase) {
                      r = _6871_recursiveGen;
                    } else {
                      RAST._IType _6875_rhsType;
                      RAST._IType _out3160;
                      _out3160 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _6875_rhsType = _out3160;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6875_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6871_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3161;
                    DCOMPUTF16._IOwnership _out3162;
                    DCOMPUTF16.COMP.FromOwnership(r, _6872_recOwned, expectedOwnership, out _out3161, out _out3162);
                    r = _out3161;
                    resultingOwnership = _out3162;
                  } else {
                    RAST._IType _6876___mcc_h1157 = _source259.dtor_value;
                    RAST._IType _6877_v = _6876___mcc_h1157;
                    r = RAST.Expr.create_ConversionNum(_6877_v, _6871_recursiveGen);
                    RAST._IExpr _out3163;
                    DCOMPUTF16._IOwnership _out3164;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3163, out _out3164);
                    r = _out3163;
                    resultingOwnership = _out3164;
                  }
                  readIdents = _6873_recIdents;
                } else {
                  RAST._IExpr _out3165;
                  DCOMPUTF16._IOwnership _out3166;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3167;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6870_b), _6870_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3165, out _out3166, out _out3167);
                  r = _out3165;
                  resultingOwnership = _out3166;
                  readIdents = _out3167;
                }
              }
            }
          } else if (_source257.is_Nullable) {
            DAST._IType _6878___mcc_h310 = _source257.dtor_Nullable_a0;
            {
              RAST._IExpr _6879_recursiveGen;
              DCOMPUTF16._IOwnership _6880_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6881_recIdents;
              RAST._IExpr _out3168;
              DCOMPUTF16._IOwnership _out3169;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3170;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3168, out _out3169, out _out3170);
              _6879_recursiveGen = _out3168;
              _6880_recOwned = _out3169;
              _6881_recIdents = _out3170;
              Dafny.ISequence<Dafny.Rune> _6882_s;
              _6882_s = (_6879_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6880_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6882_s = Dafny.Sequence<Dafny.Rune>.Concat(_6882_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _6882_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6882_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_6882_s);
              RAST._IExpr _out3171;
              DCOMPUTF16._IOwnership _out3172;
              DCOMPUTF16.COMP.FromOwnership(r, _6880_recOwned, expectedOwnership, out _out3171, out _out3172);
              r = _out3171;
              resultingOwnership = _out3172;
              readIdents = _6881_recIdents;
            }
          } else if (_source257.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6883___mcc_h312 = _source257.dtor_Tuple_a0;
            {
              RAST._IExpr _6884_recursiveGen;
              DCOMPUTF16._IOwnership _6885_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6886_recIdents;
              RAST._IExpr _out3173;
              DCOMPUTF16._IOwnership _out3174;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3175;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3173, out _out3174, out _out3175);
              _6884_recursiveGen = _out3173;
              _6885_recOwned = _out3174;
              _6886_recIdents = _out3175;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6884_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3176;
              DCOMPUTF16._IOwnership _out3177;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3176, out _out3177);
              r = _out3176;
              resultingOwnership = _out3177;
              readIdents = _6886_recIdents;
            }
          } else if (_source257.is_Array) {
            DAST._IType _6887___mcc_h314 = _source257.dtor_element;
            BigInteger _6888___mcc_h315 = _source257.dtor_dims;
            {
              RAST._IExpr _6889_recursiveGen;
              DCOMPUTF16._IOwnership _6890_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6891_recIdents;
              RAST._IExpr _out3178;
              DCOMPUTF16._IOwnership _out3179;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3180;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3178, out _out3179, out _out3180);
              _6889_recursiveGen = _out3178;
              _6890_recOwned = _out3179;
              _6891_recIdents = _out3180;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6889_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3181;
              DCOMPUTF16._IOwnership _out3182;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3181, out _out3182);
              r = _out3181;
              resultingOwnership = _out3182;
              readIdents = _6891_recIdents;
            }
          } else if (_source257.is_Seq) {
            DAST._IType _6892___mcc_h318 = _source257.dtor_element;
            {
              RAST._IExpr _6893_recursiveGen;
              DCOMPUTF16._IOwnership _6894_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6895_recIdents;
              RAST._IExpr _out3183;
              DCOMPUTF16._IOwnership _out3184;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3185;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3183, out _out3184, out _out3185);
              _6893_recursiveGen = _out3183;
              _6894_recOwned = _out3184;
              _6895_recIdents = _out3185;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6893_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3186;
              DCOMPUTF16._IOwnership _out3187;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3186, out _out3187);
              r = _out3186;
              resultingOwnership = _out3187;
              readIdents = _6895_recIdents;
            }
          } else if (_source257.is_Set) {
            DAST._IType _6896___mcc_h320 = _source257.dtor_element;
            {
              RAST._IExpr _6897_recursiveGen;
              DCOMPUTF16._IOwnership _6898_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6899_recIdents;
              RAST._IExpr _out3188;
              DCOMPUTF16._IOwnership _out3189;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3190;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3188, out _out3189, out _out3190);
              _6897_recursiveGen = _out3188;
              _6898_recOwned = _out3189;
              _6899_recIdents = _out3190;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6897_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3191;
              DCOMPUTF16._IOwnership _out3192;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3191, out _out3192);
              r = _out3191;
              resultingOwnership = _out3192;
              readIdents = _6899_recIdents;
            }
          } else if (_source257.is_Multiset) {
            DAST._IType _6900___mcc_h322 = _source257.dtor_element;
            {
              RAST._IExpr _6901_recursiveGen;
              DCOMPUTF16._IOwnership _6902_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6903_recIdents;
              RAST._IExpr _out3193;
              DCOMPUTF16._IOwnership _out3194;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3195;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3193, out _out3194, out _out3195);
              _6901_recursiveGen = _out3193;
              _6902_recOwned = _out3194;
              _6903_recIdents = _out3195;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6901_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3196;
              DCOMPUTF16._IOwnership _out3197;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3196, out _out3197);
              r = _out3196;
              resultingOwnership = _out3197;
              readIdents = _6903_recIdents;
            }
          } else if (_source257.is_Map) {
            DAST._IType _6904___mcc_h324 = _source257.dtor_key;
            DAST._IType _6905___mcc_h325 = _source257.dtor_value;
            {
              RAST._IExpr _6906_recursiveGen;
              DCOMPUTF16._IOwnership _6907_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6908_recIdents;
              RAST._IExpr _out3198;
              DCOMPUTF16._IOwnership _out3199;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3200;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3198, out _out3199, out _out3200);
              _6906_recursiveGen = _out3198;
              _6907_recOwned = _out3199;
              _6908_recIdents = _out3200;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6906_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3201;
              DCOMPUTF16._IOwnership _out3202;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3201, out _out3202);
              r = _out3201;
              resultingOwnership = _out3202;
              readIdents = _6908_recIdents;
            }
          } else if (_source257.is_SetBuilder) {
            DAST._IType _6909___mcc_h328 = _source257.dtor_element;
            {
              RAST._IExpr _6910_recursiveGen;
              DCOMPUTF16._IOwnership _6911_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6912_recIdents;
              RAST._IExpr _out3203;
              DCOMPUTF16._IOwnership _out3204;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3205;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3203, out _out3204, out _out3205);
              _6910_recursiveGen = _out3203;
              _6911_recOwned = _out3204;
              _6912_recIdents = _out3205;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6910_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3206;
              DCOMPUTF16._IOwnership _out3207;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3206, out _out3207);
              r = _out3206;
              resultingOwnership = _out3207;
              readIdents = _6912_recIdents;
            }
          } else if (_source257.is_MapBuilder) {
            DAST._IType _6913___mcc_h330 = _source257.dtor_key;
            DAST._IType _6914___mcc_h331 = _source257.dtor_value;
            {
              RAST._IExpr _6915_recursiveGen;
              DCOMPUTF16._IOwnership _6916_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6917_recIdents;
              RAST._IExpr _out3208;
              DCOMPUTF16._IOwnership _out3209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3210;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3208, out _out3209, out _out3210);
              _6915_recursiveGen = _out3208;
              _6916_recOwned = _out3209;
              _6917_recIdents = _out3210;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6915_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3211;
              DCOMPUTF16._IOwnership _out3212;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3211, out _out3212);
              r = _out3211;
              resultingOwnership = _out3212;
              readIdents = _6917_recIdents;
            }
          } else if (_source257.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6918___mcc_h334 = _source257.dtor_args;
            DAST._IType _6919___mcc_h335 = _source257.dtor_result;
            {
              RAST._IExpr _6920_recursiveGen;
              DCOMPUTF16._IOwnership _6921_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6922_recIdents;
              RAST._IExpr _out3213;
              DCOMPUTF16._IOwnership _out3214;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3215;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3213, out _out3214, out _out3215);
              _6920_recursiveGen = _out3213;
              _6921_recOwned = _out3214;
              _6922_recIdents = _out3215;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6920_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3216;
              DCOMPUTF16._IOwnership _out3217;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3216, out _out3217);
              r = _out3216;
              resultingOwnership = _out3217;
              readIdents = _6922_recIdents;
            }
          } else if (_source257.is_Primitive) {
            DAST._IPrimitive _6923___mcc_h338 = _source257.dtor_Primitive_a0;
            {
              RAST._IExpr _6924_recursiveGen;
              DCOMPUTF16._IOwnership _6925_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6926_recIdents;
              RAST._IExpr _out3218;
              DCOMPUTF16._IOwnership _out3219;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3220;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3218, out _out3219, out _out3220);
              _6924_recursiveGen = _out3218;
              _6925_recOwned = _out3219;
              _6926_recIdents = _out3220;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6924_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3221;
              DCOMPUTF16._IOwnership _out3222;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3221, out _out3222);
              r = _out3221;
              resultingOwnership = _out3222;
              readIdents = _6926_recIdents;
            }
          } else if (_source257.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6927___mcc_h340 = _source257.dtor_Passthrough_a0;
            {
              RAST._IExpr _6928_recursiveGen;
              DCOMPUTF16._IOwnership _6929_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6930_recIdents;
              RAST._IExpr _out3223;
              DCOMPUTF16._IOwnership _out3224;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3225;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3223, out _out3224, out _out3225);
              _6928_recursiveGen = _out3223;
              _6929_recOwned = _out3224;
              _6930_recIdents = _out3225;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6928_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3226;
              DCOMPUTF16._IOwnership _out3227;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3226, out _out3227);
              r = _out3226;
              resultingOwnership = _out3227;
              readIdents = _6930_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6931___mcc_h342 = _source257.dtor_TypeArg_a0;
            {
              RAST._IExpr _6932_recursiveGen;
              DCOMPUTF16._IOwnership _6933_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6934_recIdents;
              RAST._IExpr _out3228;
              DCOMPUTF16._IOwnership _out3229;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3230;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3228, out _out3229, out _out3230);
              _6932_recursiveGen = _out3228;
              _6933_recOwned = _out3229;
              _6934_recIdents = _out3230;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6932_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3231;
              DCOMPUTF16._IOwnership _out3232;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3231, out _out3232);
              r = _out3231;
              resultingOwnership = _out3232;
              readIdents = _6934_recIdents;
            }
          }
        } else if (_source244.is_Array) {
          DAST._IType _6935___mcc_h344 = _source244.dtor_element;
          BigInteger _6936___mcc_h345 = _source244.dtor_dims;
          DAST._IType _source260 = _6469___mcc_h1;
          if (_source260.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6937___mcc_h352 = _source260.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6938___mcc_h353 = _source260.dtor_typeArgs;
            DAST._IResolvedType _6939___mcc_h354 = _source260.dtor_resolved;
            DAST._IResolvedType _source261 = _6939___mcc_h354;
            if (_source261.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6940___mcc_h358 = _source261.dtor_path;
              {
                RAST._IExpr _6941_recursiveGen;
                DCOMPUTF16._IOwnership _6942_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6943_recIdents;
                RAST._IExpr _out3233;
                DCOMPUTF16._IOwnership _out3234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3235;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3233, out _out3234, out _out3235);
                _6941_recursiveGen = _out3233;
                _6942_recOwned = _out3234;
                _6943_recIdents = _out3235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6941_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3236;
                DCOMPUTF16._IOwnership _out3237;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3236, out _out3237);
                r = _out3236;
                resultingOwnership = _out3237;
                readIdents = _6943_recIdents;
              }
            } else if (_source261.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6944___mcc_h360 = _source261.dtor_path;
              {
                RAST._IExpr _6945_recursiveGen;
                DCOMPUTF16._IOwnership _6946_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6947_recIdents;
                RAST._IExpr _out3238;
                DCOMPUTF16._IOwnership _out3239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3240;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3238, out _out3239, out _out3240);
                _6945_recursiveGen = _out3238;
                _6946_recOwned = _out3239;
                _6947_recIdents = _out3240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6945_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3241;
                DCOMPUTF16._IOwnership _out3242;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3241, out _out3242);
                r = _out3241;
                resultingOwnership = _out3242;
                readIdents = _6947_recIdents;
              }
            } else {
              DAST._IType _6948___mcc_h362 = _source261.dtor_baseType;
              DAST._INewtypeRange _6949___mcc_h363 = _source261.dtor_range;
              bool _6950___mcc_h364 = _source261.dtor_erase;
              bool _6951_erase = _6950___mcc_h364;
              DAST._INewtypeRange _6952_range = _6949___mcc_h363;
              DAST._IType _6953_b = _6948___mcc_h362;
              {
                if (object.Equals(_6463_fromTpe, _6953_b)) {
                  RAST._IExpr _6954_recursiveGen;
                  DCOMPUTF16._IOwnership _6955_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6956_recIdents;
                  RAST._IExpr _out3243;
                  DCOMPUTF16._IOwnership _out3244;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3245;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3243, out _out3244, out _out3245);
                  _6954_recursiveGen = _out3243;
                  _6955_recOwned = _out3244;
                  _6956_recIdents = _out3245;
                  Std.Wrappers._IOption<RAST._IType> _6957_potentialRhsType;
                  _6957_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6953_b, _6952_range);
                  Std.Wrappers._IOption<RAST._IType> _source262 = _6957_potentialRhsType;
                  if (_source262.is_None) {
                    if (_6951_erase) {
                      r = _6954_recursiveGen;
                    } else {
                      RAST._IType _6958_rhsType;
                      RAST._IType _out3246;
                      _out3246 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _6958_rhsType = _out3246;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6958_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6954_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3247;
                    DCOMPUTF16._IOwnership _out3248;
                    DCOMPUTF16.COMP.FromOwnership(r, _6955_recOwned, expectedOwnership, out _out3247, out _out3248);
                    r = _out3247;
                    resultingOwnership = _out3248;
                  } else {
                    RAST._IType _6959___mcc_h1158 = _source262.dtor_value;
                    RAST._IType _6960_v = _6959___mcc_h1158;
                    r = RAST.Expr.create_ConversionNum(_6960_v, _6954_recursiveGen);
                    RAST._IExpr _out3249;
                    DCOMPUTF16._IOwnership _out3250;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3249, out _out3250);
                    r = _out3249;
                    resultingOwnership = _out3250;
                  }
                  readIdents = _6956_recIdents;
                } else {
                  RAST._IExpr _out3251;
                  DCOMPUTF16._IOwnership _out3252;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3253;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _6953_b), _6953_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3251, out _out3252, out _out3253);
                  r = _out3251;
                  resultingOwnership = _out3252;
                  readIdents = _out3253;
                }
              }
            }
          } else if (_source260.is_Nullable) {
            DAST._IType _6961___mcc_h368 = _source260.dtor_Nullable_a0;
            {
              RAST._IExpr _6962_recursiveGen;
              DCOMPUTF16._IOwnership _6963_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6964_recIdents;
              RAST._IExpr _out3254;
              DCOMPUTF16._IOwnership _out3255;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3256;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3254, out _out3255, out _out3256);
              _6962_recursiveGen = _out3254;
              _6963_recOwned = _out3255;
              _6964_recIdents = _out3256;
              Dafny.ISequence<Dafny.Rune> _6965_s;
              _6965_s = (_6962_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6963_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6965_s = Dafny.Sequence<Dafny.Rune>.Concat(_6965_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _6965_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6965_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_6965_s);
              RAST._IExpr _out3257;
              DCOMPUTF16._IOwnership _out3258;
              DCOMPUTF16.COMP.FromOwnership(r, _6963_recOwned, expectedOwnership, out _out3257, out _out3258);
              r = _out3257;
              resultingOwnership = _out3258;
              readIdents = _6964_recIdents;
            }
          } else if (_source260.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6966___mcc_h370 = _source260.dtor_Tuple_a0;
            {
              RAST._IExpr _6967_recursiveGen;
              DCOMPUTF16._IOwnership _6968_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6969_recIdents;
              RAST._IExpr _out3259;
              DCOMPUTF16._IOwnership _out3260;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3261;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3259, out _out3260, out _out3261);
              _6967_recursiveGen = _out3259;
              _6968_recOwned = _out3260;
              _6969_recIdents = _out3261;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6967_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3262;
              DCOMPUTF16._IOwnership _out3263;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3262, out _out3263);
              r = _out3262;
              resultingOwnership = _out3263;
              readIdents = _6969_recIdents;
            }
          } else if (_source260.is_Array) {
            DAST._IType _6970___mcc_h372 = _source260.dtor_element;
            BigInteger _6971___mcc_h373 = _source260.dtor_dims;
            {
              RAST._IExpr _6972_recursiveGen;
              DCOMPUTF16._IOwnership _6973_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6974_recIdents;
              RAST._IExpr _out3264;
              DCOMPUTF16._IOwnership _out3265;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3266;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3264, out _out3265, out _out3266);
              _6972_recursiveGen = _out3264;
              _6973_recOwned = _out3265;
              _6974_recIdents = _out3266;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6972_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3267;
              DCOMPUTF16._IOwnership _out3268;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3267, out _out3268);
              r = _out3267;
              resultingOwnership = _out3268;
              readIdents = _6974_recIdents;
            }
          } else if (_source260.is_Seq) {
            DAST._IType _6975___mcc_h376 = _source260.dtor_element;
            {
              RAST._IExpr _6976_recursiveGen;
              DCOMPUTF16._IOwnership _6977_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6978_recIdents;
              RAST._IExpr _out3269;
              DCOMPUTF16._IOwnership _out3270;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3271;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3269, out _out3270, out _out3271);
              _6976_recursiveGen = _out3269;
              _6977_recOwned = _out3270;
              _6978_recIdents = _out3271;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6976_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3272;
              DCOMPUTF16._IOwnership _out3273;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3272, out _out3273);
              r = _out3272;
              resultingOwnership = _out3273;
              readIdents = _6978_recIdents;
            }
          } else if (_source260.is_Set) {
            DAST._IType _6979___mcc_h378 = _source260.dtor_element;
            {
              RAST._IExpr _6980_recursiveGen;
              DCOMPUTF16._IOwnership _6981_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6982_recIdents;
              RAST._IExpr _out3274;
              DCOMPUTF16._IOwnership _out3275;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3276;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3274, out _out3275, out _out3276);
              _6980_recursiveGen = _out3274;
              _6981_recOwned = _out3275;
              _6982_recIdents = _out3276;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6980_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3277;
              DCOMPUTF16._IOwnership _out3278;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3277, out _out3278);
              r = _out3277;
              resultingOwnership = _out3278;
              readIdents = _6982_recIdents;
            }
          } else if (_source260.is_Multiset) {
            DAST._IType _6983___mcc_h380 = _source260.dtor_element;
            {
              RAST._IExpr _6984_recursiveGen;
              DCOMPUTF16._IOwnership _6985_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6986_recIdents;
              RAST._IExpr _out3279;
              DCOMPUTF16._IOwnership _out3280;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3281;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3279, out _out3280, out _out3281);
              _6984_recursiveGen = _out3279;
              _6985_recOwned = _out3280;
              _6986_recIdents = _out3281;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6984_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3282;
              DCOMPUTF16._IOwnership _out3283;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3282, out _out3283);
              r = _out3282;
              resultingOwnership = _out3283;
              readIdents = _6986_recIdents;
            }
          } else if (_source260.is_Map) {
            DAST._IType _6987___mcc_h382 = _source260.dtor_key;
            DAST._IType _6988___mcc_h383 = _source260.dtor_value;
            {
              RAST._IExpr _6989_recursiveGen;
              DCOMPUTF16._IOwnership _6990_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6991_recIdents;
              RAST._IExpr _out3284;
              DCOMPUTF16._IOwnership _out3285;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3286;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3284, out _out3285, out _out3286);
              _6989_recursiveGen = _out3284;
              _6990_recOwned = _out3285;
              _6991_recIdents = _out3286;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6989_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3287;
              DCOMPUTF16._IOwnership _out3288;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3287, out _out3288);
              r = _out3287;
              resultingOwnership = _out3288;
              readIdents = _6991_recIdents;
            }
          } else if (_source260.is_SetBuilder) {
            DAST._IType _6992___mcc_h386 = _source260.dtor_element;
            {
              RAST._IExpr _6993_recursiveGen;
              DCOMPUTF16._IOwnership _6994_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6995_recIdents;
              RAST._IExpr _out3289;
              DCOMPUTF16._IOwnership _out3290;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3291;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3289, out _out3290, out _out3291);
              _6993_recursiveGen = _out3289;
              _6994_recOwned = _out3290;
              _6995_recIdents = _out3291;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6993_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3292;
              DCOMPUTF16._IOwnership _out3293;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3292, out _out3293);
              r = _out3292;
              resultingOwnership = _out3293;
              readIdents = _6995_recIdents;
            }
          } else if (_source260.is_MapBuilder) {
            DAST._IType _6996___mcc_h388 = _source260.dtor_key;
            DAST._IType _6997___mcc_h389 = _source260.dtor_value;
            {
              RAST._IExpr _6998_recursiveGen;
              DCOMPUTF16._IOwnership _6999_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7000_recIdents;
              RAST._IExpr _out3294;
              DCOMPUTF16._IOwnership _out3295;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3296;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3294, out _out3295, out _out3296);
              _6998_recursiveGen = _out3294;
              _6999_recOwned = _out3295;
              _7000_recIdents = _out3296;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6998_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3297;
              DCOMPUTF16._IOwnership _out3298;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3297, out _out3298);
              r = _out3297;
              resultingOwnership = _out3298;
              readIdents = _7000_recIdents;
            }
          } else if (_source260.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7001___mcc_h392 = _source260.dtor_args;
            DAST._IType _7002___mcc_h393 = _source260.dtor_result;
            {
              RAST._IExpr _7003_recursiveGen;
              DCOMPUTF16._IOwnership _7004_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7005_recIdents;
              RAST._IExpr _out3299;
              DCOMPUTF16._IOwnership _out3300;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3301;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3299, out _out3300, out _out3301);
              _7003_recursiveGen = _out3299;
              _7004_recOwned = _out3300;
              _7005_recIdents = _out3301;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7003_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3302;
              DCOMPUTF16._IOwnership _out3303;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3302, out _out3303);
              r = _out3302;
              resultingOwnership = _out3303;
              readIdents = _7005_recIdents;
            }
          } else if (_source260.is_Primitive) {
            DAST._IPrimitive _7006___mcc_h396 = _source260.dtor_Primitive_a0;
            {
              RAST._IExpr _7007_recursiveGen;
              DCOMPUTF16._IOwnership _7008_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7009_recIdents;
              RAST._IExpr _out3304;
              DCOMPUTF16._IOwnership _out3305;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3306;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3304, out _out3305, out _out3306);
              _7007_recursiveGen = _out3304;
              _7008_recOwned = _out3305;
              _7009_recIdents = _out3306;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7007_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3307;
              DCOMPUTF16._IOwnership _out3308;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3307, out _out3308);
              r = _out3307;
              resultingOwnership = _out3308;
              readIdents = _7009_recIdents;
            }
          } else if (_source260.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7010___mcc_h398 = _source260.dtor_Passthrough_a0;
            {
              RAST._IExpr _7011_recursiveGen;
              DCOMPUTF16._IOwnership _7012_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7013_recIdents;
              RAST._IExpr _out3309;
              DCOMPUTF16._IOwnership _out3310;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3311;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3309, out _out3310, out _out3311);
              _7011_recursiveGen = _out3309;
              _7012_recOwned = _out3310;
              _7013_recIdents = _out3311;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7011_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3312;
              DCOMPUTF16._IOwnership _out3313;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3312, out _out3313);
              r = _out3312;
              resultingOwnership = _out3313;
              readIdents = _7013_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7014___mcc_h400 = _source260.dtor_TypeArg_a0;
            {
              RAST._IExpr _7015_recursiveGen;
              DCOMPUTF16._IOwnership _7016_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7017_recIdents;
              RAST._IExpr _out3314;
              DCOMPUTF16._IOwnership _out3315;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3316;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3314, out _out3315, out _out3316);
              _7015_recursiveGen = _out3314;
              _7016_recOwned = _out3315;
              _7017_recIdents = _out3316;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7015_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3317;
              DCOMPUTF16._IOwnership _out3318;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3317, out _out3318);
              r = _out3317;
              resultingOwnership = _out3318;
              readIdents = _7017_recIdents;
            }
          }
        } else if (_source244.is_Seq) {
          DAST._IType _7018___mcc_h402 = _source244.dtor_element;
          DAST._IType _source263 = _6469___mcc_h1;
          if (_source263.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7019___mcc_h406 = _source263.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7020___mcc_h407 = _source263.dtor_typeArgs;
            DAST._IResolvedType _7021___mcc_h408 = _source263.dtor_resolved;
            DAST._IResolvedType _source264 = _7021___mcc_h408;
            if (_source264.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7022___mcc_h412 = _source264.dtor_path;
              {
                RAST._IExpr _7023_recursiveGen;
                DCOMPUTF16._IOwnership _7024_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7025_recIdents;
                RAST._IExpr _out3319;
                DCOMPUTF16._IOwnership _out3320;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3321;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3319, out _out3320, out _out3321);
                _7023_recursiveGen = _out3319;
                _7024_recOwned = _out3320;
                _7025_recIdents = _out3321;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7023_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3322;
                DCOMPUTF16._IOwnership _out3323;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3322, out _out3323);
                r = _out3322;
                resultingOwnership = _out3323;
                readIdents = _7025_recIdents;
              }
            } else if (_source264.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7026___mcc_h414 = _source264.dtor_path;
              {
                RAST._IExpr _7027_recursiveGen;
                DCOMPUTF16._IOwnership _7028_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7029_recIdents;
                RAST._IExpr _out3324;
                DCOMPUTF16._IOwnership _out3325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3326;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3324, out _out3325, out _out3326);
                _7027_recursiveGen = _out3324;
                _7028_recOwned = _out3325;
                _7029_recIdents = _out3326;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7027_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3327;
                DCOMPUTF16._IOwnership _out3328;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3327, out _out3328);
                r = _out3327;
                resultingOwnership = _out3328;
                readIdents = _7029_recIdents;
              }
            } else {
              DAST._IType _7030___mcc_h416 = _source264.dtor_baseType;
              DAST._INewtypeRange _7031___mcc_h417 = _source264.dtor_range;
              bool _7032___mcc_h418 = _source264.dtor_erase;
              bool _7033_erase = _7032___mcc_h418;
              DAST._INewtypeRange _7034_range = _7031___mcc_h417;
              DAST._IType _7035_b = _7030___mcc_h416;
              {
                if (object.Equals(_6463_fromTpe, _7035_b)) {
                  RAST._IExpr _7036_recursiveGen;
                  DCOMPUTF16._IOwnership _7037_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7038_recIdents;
                  RAST._IExpr _out3329;
                  DCOMPUTF16._IOwnership _out3330;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3331;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3329, out _out3330, out _out3331);
                  _7036_recursiveGen = _out3329;
                  _7037_recOwned = _out3330;
                  _7038_recIdents = _out3331;
                  Std.Wrappers._IOption<RAST._IType> _7039_potentialRhsType;
                  _7039_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7035_b, _7034_range);
                  Std.Wrappers._IOption<RAST._IType> _source265 = _7039_potentialRhsType;
                  if (_source265.is_None) {
                    if (_7033_erase) {
                      r = _7036_recursiveGen;
                    } else {
                      RAST._IType _7040_rhsType;
                      RAST._IType _out3332;
                      _out3332 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7040_rhsType = _out3332;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7040_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7036_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3333;
                    DCOMPUTF16._IOwnership _out3334;
                    DCOMPUTF16.COMP.FromOwnership(r, _7037_recOwned, expectedOwnership, out _out3333, out _out3334);
                    r = _out3333;
                    resultingOwnership = _out3334;
                  } else {
                    RAST._IType _7041___mcc_h1159 = _source265.dtor_value;
                    RAST._IType _7042_v = _7041___mcc_h1159;
                    r = RAST.Expr.create_ConversionNum(_7042_v, _7036_recursiveGen);
                    RAST._IExpr _out3335;
                    DCOMPUTF16._IOwnership _out3336;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3335, out _out3336);
                    r = _out3335;
                    resultingOwnership = _out3336;
                  }
                  readIdents = _7038_recIdents;
                } else {
                  RAST._IExpr _out3337;
                  DCOMPUTF16._IOwnership _out3338;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3339;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7035_b), _7035_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3337, out _out3338, out _out3339);
                  r = _out3337;
                  resultingOwnership = _out3338;
                  readIdents = _out3339;
                }
              }
            }
          } else if (_source263.is_Nullable) {
            DAST._IType _7043___mcc_h422 = _source263.dtor_Nullable_a0;
            {
              RAST._IExpr _7044_recursiveGen;
              DCOMPUTF16._IOwnership _7045_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7046_recIdents;
              RAST._IExpr _out3340;
              DCOMPUTF16._IOwnership _out3341;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3342;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3340, out _out3341, out _out3342);
              _7044_recursiveGen = _out3340;
              _7045_recOwned = _out3341;
              _7046_recIdents = _out3342;
              Dafny.ISequence<Dafny.Rune> _7047_s;
              _7047_s = (_7044_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7045_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7047_s = Dafny.Sequence<Dafny.Rune>.Concat(_7047_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7047_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7047_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7047_s);
              RAST._IExpr _out3343;
              DCOMPUTF16._IOwnership _out3344;
              DCOMPUTF16.COMP.FromOwnership(r, _7045_recOwned, expectedOwnership, out _out3343, out _out3344);
              r = _out3343;
              resultingOwnership = _out3344;
              readIdents = _7046_recIdents;
            }
          } else if (_source263.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7048___mcc_h424 = _source263.dtor_Tuple_a0;
            {
              RAST._IExpr _7049_recursiveGen;
              DCOMPUTF16._IOwnership _7050_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7051_recIdents;
              RAST._IExpr _out3345;
              DCOMPUTF16._IOwnership _out3346;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3347;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3345, out _out3346, out _out3347);
              _7049_recursiveGen = _out3345;
              _7050_recOwned = _out3346;
              _7051_recIdents = _out3347;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7049_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3348;
              DCOMPUTF16._IOwnership _out3349;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3348, out _out3349);
              r = _out3348;
              resultingOwnership = _out3349;
              readIdents = _7051_recIdents;
            }
          } else if (_source263.is_Array) {
            DAST._IType _7052___mcc_h426 = _source263.dtor_element;
            BigInteger _7053___mcc_h427 = _source263.dtor_dims;
            {
              RAST._IExpr _7054_recursiveGen;
              DCOMPUTF16._IOwnership _7055_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7056_recIdents;
              RAST._IExpr _out3350;
              DCOMPUTF16._IOwnership _out3351;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3352;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3350, out _out3351, out _out3352);
              _7054_recursiveGen = _out3350;
              _7055_recOwned = _out3351;
              _7056_recIdents = _out3352;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7054_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3353;
              DCOMPUTF16._IOwnership _out3354;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3353, out _out3354);
              r = _out3353;
              resultingOwnership = _out3354;
              readIdents = _7056_recIdents;
            }
          } else if (_source263.is_Seq) {
            DAST._IType _7057___mcc_h430 = _source263.dtor_element;
            {
              RAST._IExpr _7058_recursiveGen;
              DCOMPUTF16._IOwnership _7059_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7060_recIdents;
              RAST._IExpr _out3355;
              DCOMPUTF16._IOwnership _out3356;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3357;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3355, out _out3356, out _out3357);
              _7058_recursiveGen = _out3355;
              _7059_recOwned = _out3356;
              _7060_recIdents = _out3357;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7058_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3358;
              DCOMPUTF16._IOwnership _out3359;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3358, out _out3359);
              r = _out3358;
              resultingOwnership = _out3359;
              readIdents = _7060_recIdents;
            }
          } else if (_source263.is_Set) {
            DAST._IType _7061___mcc_h432 = _source263.dtor_element;
            {
              RAST._IExpr _7062_recursiveGen;
              DCOMPUTF16._IOwnership _7063_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7064_recIdents;
              RAST._IExpr _out3360;
              DCOMPUTF16._IOwnership _out3361;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3362;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3360, out _out3361, out _out3362);
              _7062_recursiveGen = _out3360;
              _7063_recOwned = _out3361;
              _7064_recIdents = _out3362;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7062_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3363;
              DCOMPUTF16._IOwnership _out3364;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3363, out _out3364);
              r = _out3363;
              resultingOwnership = _out3364;
              readIdents = _7064_recIdents;
            }
          } else if (_source263.is_Multiset) {
            DAST._IType _7065___mcc_h434 = _source263.dtor_element;
            {
              RAST._IExpr _7066_recursiveGen;
              DCOMPUTF16._IOwnership _7067_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7068_recIdents;
              RAST._IExpr _out3365;
              DCOMPUTF16._IOwnership _out3366;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3367;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3365, out _out3366, out _out3367);
              _7066_recursiveGen = _out3365;
              _7067_recOwned = _out3366;
              _7068_recIdents = _out3367;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7066_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3368;
              DCOMPUTF16._IOwnership _out3369;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3368, out _out3369);
              r = _out3368;
              resultingOwnership = _out3369;
              readIdents = _7068_recIdents;
            }
          } else if (_source263.is_Map) {
            DAST._IType _7069___mcc_h436 = _source263.dtor_key;
            DAST._IType _7070___mcc_h437 = _source263.dtor_value;
            {
              RAST._IExpr _7071_recursiveGen;
              DCOMPUTF16._IOwnership _7072_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7073_recIdents;
              RAST._IExpr _out3370;
              DCOMPUTF16._IOwnership _out3371;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3372;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3370, out _out3371, out _out3372);
              _7071_recursiveGen = _out3370;
              _7072_recOwned = _out3371;
              _7073_recIdents = _out3372;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7071_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3373;
              DCOMPUTF16._IOwnership _out3374;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3373, out _out3374);
              r = _out3373;
              resultingOwnership = _out3374;
              readIdents = _7073_recIdents;
            }
          } else if (_source263.is_SetBuilder) {
            DAST._IType _7074___mcc_h440 = _source263.dtor_element;
            {
              RAST._IExpr _7075_recursiveGen;
              DCOMPUTF16._IOwnership _7076_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7077_recIdents;
              RAST._IExpr _out3375;
              DCOMPUTF16._IOwnership _out3376;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3377;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3375, out _out3376, out _out3377);
              _7075_recursiveGen = _out3375;
              _7076_recOwned = _out3376;
              _7077_recIdents = _out3377;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7075_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3378;
              DCOMPUTF16._IOwnership _out3379;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3378, out _out3379);
              r = _out3378;
              resultingOwnership = _out3379;
              readIdents = _7077_recIdents;
            }
          } else if (_source263.is_MapBuilder) {
            DAST._IType _7078___mcc_h442 = _source263.dtor_key;
            DAST._IType _7079___mcc_h443 = _source263.dtor_value;
            {
              RAST._IExpr _7080_recursiveGen;
              DCOMPUTF16._IOwnership _7081_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7082_recIdents;
              RAST._IExpr _out3380;
              DCOMPUTF16._IOwnership _out3381;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3382;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3380, out _out3381, out _out3382);
              _7080_recursiveGen = _out3380;
              _7081_recOwned = _out3381;
              _7082_recIdents = _out3382;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7080_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3383;
              DCOMPUTF16._IOwnership _out3384;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3383, out _out3384);
              r = _out3383;
              resultingOwnership = _out3384;
              readIdents = _7082_recIdents;
            }
          } else if (_source263.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7083___mcc_h446 = _source263.dtor_args;
            DAST._IType _7084___mcc_h447 = _source263.dtor_result;
            {
              RAST._IExpr _7085_recursiveGen;
              DCOMPUTF16._IOwnership _7086_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7087_recIdents;
              RAST._IExpr _out3385;
              DCOMPUTF16._IOwnership _out3386;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3387;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3385, out _out3386, out _out3387);
              _7085_recursiveGen = _out3385;
              _7086_recOwned = _out3386;
              _7087_recIdents = _out3387;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7085_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3388;
              DCOMPUTF16._IOwnership _out3389;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3388, out _out3389);
              r = _out3388;
              resultingOwnership = _out3389;
              readIdents = _7087_recIdents;
            }
          } else if (_source263.is_Primitive) {
            DAST._IPrimitive _7088___mcc_h450 = _source263.dtor_Primitive_a0;
            {
              RAST._IExpr _7089_recursiveGen;
              DCOMPUTF16._IOwnership _7090_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7091_recIdents;
              RAST._IExpr _out3390;
              DCOMPUTF16._IOwnership _out3391;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3392;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3390, out _out3391, out _out3392);
              _7089_recursiveGen = _out3390;
              _7090_recOwned = _out3391;
              _7091_recIdents = _out3392;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7089_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3393;
              DCOMPUTF16._IOwnership _out3394;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3393, out _out3394);
              r = _out3393;
              resultingOwnership = _out3394;
              readIdents = _7091_recIdents;
            }
          } else if (_source263.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7092___mcc_h452 = _source263.dtor_Passthrough_a0;
            {
              RAST._IExpr _7093_recursiveGen;
              DCOMPUTF16._IOwnership _7094_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7095_recIdents;
              RAST._IExpr _out3395;
              DCOMPUTF16._IOwnership _out3396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3397;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3395, out _out3396, out _out3397);
              _7093_recursiveGen = _out3395;
              _7094_recOwned = _out3396;
              _7095_recIdents = _out3397;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7093_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3398;
              DCOMPUTF16._IOwnership _out3399;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3398, out _out3399);
              r = _out3398;
              resultingOwnership = _out3399;
              readIdents = _7095_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7096___mcc_h454 = _source263.dtor_TypeArg_a0;
            {
              RAST._IExpr _7097_recursiveGen;
              DCOMPUTF16._IOwnership _7098_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7099_recIdents;
              RAST._IExpr _out3400;
              DCOMPUTF16._IOwnership _out3401;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3402;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3400, out _out3401, out _out3402);
              _7097_recursiveGen = _out3400;
              _7098_recOwned = _out3401;
              _7099_recIdents = _out3402;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7097_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3403;
              DCOMPUTF16._IOwnership _out3404;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3403, out _out3404);
              r = _out3403;
              resultingOwnership = _out3404;
              readIdents = _7099_recIdents;
            }
          }
        } else if (_source244.is_Set) {
          DAST._IType _7100___mcc_h456 = _source244.dtor_element;
          DAST._IType _source266 = _6469___mcc_h1;
          if (_source266.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7101___mcc_h460 = _source266.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7102___mcc_h461 = _source266.dtor_typeArgs;
            DAST._IResolvedType _7103___mcc_h462 = _source266.dtor_resolved;
            DAST._IResolvedType _source267 = _7103___mcc_h462;
            if (_source267.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7104___mcc_h466 = _source267.dtor_path;
              {
                RAST._IExpr _7105_recursiveGen;
                DCOMPUTF16._IOwnership _7106_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7107_recIdents;
                RAST._IExpr _out3405;
                DCOMPUTF16._IOwnership _out3406;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3407;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3405, out _out3406, out _out3407);
                _7105_recursiveGen = _out3405;
                _7106_recOwned = _out3406;
                _7107_recIdents = _out3407;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7105_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3408;
                DCOMPUTF16._IOwnership _out3409;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3408, out _out3409);
                r = _out3408;
                resultingOwnership = _out3409;
                readIdents = _7107_recIdents;
              }
            } else if (_source267.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7108___mcc_h468 = _source267.dtor_path;
              {
                RAST._IExpr _7109_recursiveGen;
                DCOMPUTF16._IOwnership _7110_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7111_recIdents;
                RAST._IExpr _out3410;
                DCOMPUTF16._IOwnership _out3411;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3412;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3410, out _out3411, out _out3412);
                _7109_recursiveGen = _out3410;
                _7110_recOwned = _out3411;
                _7111_recIdents = _out3412;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7109_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3413;
                DCOMPUTF16._IOwnership _out3414;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3413, out _out3414);
                r = _out3413;
                resultingOwnership = _out3414;
                readIdents = _7111_recIdents;
              }
            } else {
              DAST._IType _7112___mcc_h470 = _source267.dtor_baseType;
              DAST._INewtypeRange _7113___mcc_h471 = _source267.dtor_range;
              bool _7114___mcc_h472 = _source267.dtor_erase;
              bool _7115_erase = _7114___mcc_h472;
              DAST._INewtypeRange _7116_range = _7113___mcc_h471;
              DAST._IType _7117_b = _7112___mcc_h470;
              {
                if (object.Equals(_6463_fromTpe, _7117_b)) {
                  RAST._IExpr _7118_recursiveGen;
                  DCOMPUTF16._IOwnership _7119_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7120_recIdents;
                  RAST._IExpr _out3415;
                  DCOMPUTF16._IOwnership _out3416;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3417;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3415, out _out3416, out _out3417);
                  _7118_recursiveGen = _out3415;
                  _7119_recOwned = _out3416;
                  _7120_recIdents = _out3417;
                  Std.Wrappers._IOption<RAST._IType> _7121_potentialRhsType;
                  _7121_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7117_b, _7116_range);
                  Std.Wrappers._IOption<RAST._IType> _source268 = _7121_potentialRhsType;
                  if (_source268.is_None) {
                    if (_7115_erase) {
                      r = _7118_recursiveGen;
                    } else {
                      RAST._IType _7122_rhsType;
                      RAST._IType _out3418;
                      _out3418 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7122_rhsType = _out3418;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7122_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7118_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3419;
                    DCOMPUTF16._IOwnership _out3420;
                    DCOMPUTF16.COMP.FromOwnership(r, _7119_recOwned, expectedOwnership, out _out3419, out _out3420);
                    r = _out3419;
                    resultingOwnership = _out3420;
                  } else {
                    RAST._IType _7123___mcc_h1160 = _source268.dtor_value;
                    RAST._IType _7124_v = _7123___mcc_h1160;
                    r = RAST.Expr.create_ConversionNum(_7124_v, _7118_recursiveGen);
                    RAST._IExpr _out3421;
                    DCOMPUTF16._IOwnership _out3422;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3421, out _out3422);
                    r = _out3421;
                    resultingOwnership = _out3422;
                  }
                  readIdents = _7120_recIdents;
                } else {
                  RAST._IExpr _out3423;
                  DCOMPUTF16._IOwnership _out3424;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3425;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7117_b), _7117_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3423, out _out3424, out _out3425);
                  r = _out3423;
                  resultingOwnership = _out3424;
                  readIdents = _out3425;
                }
              }
            }
          } else if (_source266.is_Nullable) {
            DAST._IType _7125___mcc_h476 = _source266.dtor_Nullable_a0;
            {
              RAST._IExpr _7126_recursiveGen;
              DCOMPUTF16._IOwnership _7127_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7128_recIdents;
              RAST._IExpr _out3426;
              DCOMPUTF16._IOwnership _out3427;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3428;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3426, out _out3427, out _out3428);
              _7126_recursiveGen = _out3426;
              _7127_recOwned = _out3427;
              _7128_recIdents = _out3428;
              Dafny.ISequence<Dafny.Rune> _7129_s;
              _7129_s = (_7126_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7127_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7129_s = Dafny.Sequence<Dafny.Rune>.Concat(_7129_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7129_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7129_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7129_s);
              RAST._IExpr _out3429;
              DCOMPUTF16._IOwnership _out3430;
              DCOMPUTF16.COMP.FromOwnership(r, _7127_recOwned, expectedOwnership, out _out3429, out _out3430);
              r = _out3429;
              resultingOwnership = _out3430;
              readIdents = _7128_recIdents;
            }
          } else if (_source266.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7130___mcc_h478 = _source266.dtor_Tuple_a0;
            {
              RAST._IExpr _7131_recursiveGen;
              DCOMPUTF16._IOwnership _7132_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7133_recIdents;
              RAST._IExpr _out3431;
              DCOMPUTF16._IOwnership _out3432;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3433;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3431, out _out3432, out _out3433);
              _7131_recursiveGen = _out3431;
              _7132_recOwned = _out3432;
              _7133_recIdents = _out3433;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7131_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3434;
              DCOMPUTF16._IOwnership _out3435;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3434, out _out3435);
              r = _out3434;
              resultingOwnership = _out3435;
              readIdents = _7133_recIdents;
            }
          } else if (_source266.is_Array) {
            DAST._IType _7134___mcc_h480 = _source266.dtor_element;
            BigInteger _7135___mcc_h481 = _source266.dtor_dims;
            {
              RAST._IExpr _7136_recursiveGen;
              DCOMPUTF16._IOwnership _7137_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7138_recIdents;
              RAST._IExpr _out3436;
              DCOMPUTF16._IOwnership _out3437;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3438;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3436, out _out3437, out _out3438);
              _7136_recursiveGen = _out3436;
              _7137_recOwned = _out3437;
              _7138_recIdents = _out3438;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7136_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3439;
              DCOMPUTF16._IOwnership _out3440;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3439, out _out3440);
              r = _out3439;
              resultingOwnership = _out3440;
              readIdents = _7138_recIdents;
            }
          } else if (_source266.is_Seq) {
            DAST._IType _7139___mcc_h484 = _source266.dtor_element;
            {
              RAST._IExpr _7140_recursiveGen;
              DCOMPUTF16._IOwnership _7141_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7142_recIdents;
              RAST._IExpr _out3441;
              DCOMPUTF16._IOwnership _out3442;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3443;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3441, out _out3442, out _out3443);
              _7140_recursiveGen = _out3441;
              _7141_recOwned = _out3442;
              _7142_recIdents = _out3443;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7140_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3444;
              DCOMPUTF16._IOwnership _out3445;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3444, out _out3445);
              r = _out3444;
              resultingOwnership = _out3445;
              readIdents = _7142_recIdents;
            }
          } else if (_source266.is_Set) {
            DAST._IType _7143___mcc_h486 = _source266.dtor_element;
            {
              RAST._IExpr _7144_recursiveGen;
              DCOMPUTF16._IOwnership _7145_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7146_recIdents;
              RAST._IExpr _out3446;
              DCOMPUTF16._IOwnership _out3447;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3448;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3446, out _out3447, out _out3448);
              _7144_recursiveGen = _out3446;
              _7145_recOwned = _out3447;
              _7146_recIdents = _out3448;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7144_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3449;
              DCOMPUTF16._IOwnership _out3450;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3449, out _out3450);
              r = _out3449;
              resultingOwnership = _out3450;
              readIdents = _7146_recIdents;
            }
          } else if (_source266.is_Multiset) {
            DAST._IType _7147___mcc_h488 = _source266.dtor_element;
            {
              RAST._IExpr _7148_recursiveGen;
              DCOMPUTF16._IOwnership _7149_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7150_recIdents;
              RAST._IExpr _out3451;
              DCOMPUTF16._IOwnership _out3452;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3453;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3451, out _out3452, out _out3453);
              _7148_recursiveGen = _out3451;
              _7149_recOwned = _out3452;
              _7150_recIdents = _out3453;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7148_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3454;
              DCOMPUTF16._IOwnership _out3455;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3454, out _out3455);
              r = _out3454;
              resultingOwnership = _out3455;
              readIdents = _7150_recIdents;
            }
          } else if (_source266.is_Map) {
            DAST._IType _7151___mcc_h490 = _source266.dtor_key;
            DAST._IType _7152___mcc_h491 = _source266.dtor_value;
            {
              RAST._IExpr _7153_recursiveGen;
              DCOMPUTF16._IOwnership _7154_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7155_recIdents;
              RAST._IExpr _out3456;
              DCOMPUTF16._IOwnership _out3457;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3458;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3456, out _out3457, out _out3458);
              _7153_recursiveGen = _out3456;
              _7154_recOwned = _out3457;
              _7155_recIdents = _out3458;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7153_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3459;
              DCOMPUTF16._IOwnership _out3460;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3459, out _out3460);
              r = _out3459;
              resultingOwnership = _out3460;
              readIdents = _7155_recIdents;
            }
          } else if (_source266.is_SetBuilder) {
            DAST._IType _7156___mcc_h494 = _source266.dtor_element;
            {
              RAST._IExpr _7157_recursiveGen;
              DCOMPUTF16._IOwnership _7158_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7159_recIdents;
              RAST._IExpr _out3461;
              DCOMPUTF16._IOwnership _out3462;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3463;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3461, out _out3462, out _out3463);
              _7157_recursiveGen = _out3461;
              _7158_recOwned = _out3462;
              _7159_recIdents = _out3463;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7157_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3464;
              DCOMPUTF16._IOwnership _out3465;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3464, out _out3465);
              r = _out3464;
              resultingOwnership = _out3465;
              readIdents = _7159_recIdents;
            }
          } else if (_source266.is_MapBuilder) {
            DAST._IType _7160___mcc_h496 = _source266.dtor_key;
            DAST._IType _7161___mcc_h497 = _source266.dtor_value;
            {
              RAST._IExpr _7162_recursiveGen;
              DCOMPUTF16._IOwnership _7163_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7164_recIdents;
              RAST._IExpr _out3466;
              DCOMPUTF16._IOwnership _out3467;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3468;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3466, out _out3467, out _out3468);
              _7162_recursiveGen = _out3466;
              _7163_recOwned = _out3467;
              _7164_recIdents = _out3468;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7162_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3469;
              DCOMPUTF16._IOwnership _out3470;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3469, out _out3470);
              r = _out3469;
              resultingOwnership = _out3470;
              readIdents = _7164_recIdents;
            }
          } else if (_source266.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7165___mcc_h500 = _source266.dtor_args;
            DAST._IType _7166___mcc_h501 = _source266.dtor_result;
            {
              RAST._IExpr _7167_recursiveGen;
              DCOMPUTF16._IOwnership _7168_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7169_recIdents;
              RAST._IExpr _out3471;
              DCOMPUTF16._IOwnership _out3472;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3473;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3471, out _out3472, out _out3473);
              _7167_recursiveGen = _out3471;
              _7168_recOwned = _out3472;
              _7169_recIdents = _out3473;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7167_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3474;
              DCOMPUTF16._IOwnership _out3475;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3474, out _out3475);
              r = _out3474;
              resultingOwnership = _out3475;
              readIdents = _7169_recIdents;
            }
          } else if (_source266.is_Primitive) {
            DAST._IPrimitive _7170___mcc_h504 = _source266.dtor_Primitive_a0;
            {
              RAST._IExpr _7171_recursiveGen;
              DCOMPUTF16._IOwnership _7172_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7173_recIdents;
              RAST._IExpr _out3476;
              DCOMPUTF16._IOwnership _out3477;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3478;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3476, out _out3477, out _out3478);
              _7171_recursiveGen = _out3476;
              _7172_recOwned = _out3477;
              _7173_recIdents = _out3478;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7171_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3479;
              DCOMPUTF16._IOwnership _out3480;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3479, out _out3480);
              r = _out3479;
              resultingOwnership = _out3480;
              readIdents = _7173_recIdents;
            }
          } else if (_source266.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7174___mcc_h506 = _source266.dtor_Passthrough_a0;
            {
              RAST._IExpr _7175_recursiveGen;
              DCOMPUTF16._IOwnership _7176_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7177_recIdents;
              RAST._IExpr _out3481;
              DCOMPUTF16._IOwnership _out3482;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3483;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3481, out _out3482, out _out3483);
              _7175_recursiveGen = _out3481;
              _7176_recOwned = _out3482;
              _7177_recIdents = _out3483;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7175_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3484;
              DCOMPUTF16._IOwnership _out3485;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3484, out _out3485);
              r = _out3484;
              resultingOwnership = _out3485;
              readIdents = _7177_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7178___mcc_h508 = _source266.dtor_TypeArg_a0;
            {
              RAST._IExpr _7179_recursiveGen;
              DCOMPUTF16._IOwnership _7180_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7181_recIdents;
              RAST._IExpr _out3486;
              DCOMPUTF16._IOwnership _out3487;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3488;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3486, out _out3487, out _out3488);
              _7179_recursiveGen = _out3486;
              _7180_recOwned = _out3487;
              _7181_recIdents = _out3488;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7179_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3489;
              DCOMPUTF16._IOwnership _out3490;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3489, out _out3490);
              r = _out3489;
              resultingOwnership = _out3490;
              readIdents = _7181_recIdents;
            }
          }
        } else if (_source244.is_Multiset) {
          DAST._IType _7182___mcc_h510 = _source244.dtor_element;
          DAST._IType _source269 = _6469___mcc_h1;
          if (_source269.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7183___mcc_h514 = _source269.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7184___mcc_h515 = _source269.dtor_typeArgs;
            DAST._IResolvedType _7185___mcc_h516 = _source269.dtor_resolved;
            DAST._IResolvedType _source270 = _7185___mcc_h516;
            if (_source270.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7186___mcc_h520 = _source270.dtor_path;
              {
                RAST._IExpr _7187_recursiveGen;
                DCOMPUTF16._IOwnership _7188_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7189_recIdents;
                RAST._IExpr _out3491;
                DCOMPUTF16._IOwnership _out3492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3493;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3491, out _out3492, out _out3493);
                _7187_recursiveGen = _out3491;
                _7188_recOwned = _out3492;
                _7189_recIdents = _out3493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7187_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3494;
                DCOMPUTF16._IOwnership _out3495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3494, out _out3495);
                r = _out3494;
                resultingOwnership = _out3495;
                readIdents = _7189_recIdents;
              }
            } else if (_source270.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7190___mcc_h522 = _source270.dtor_path;
              {
                RAST._IExpr _7191_recursiveGen;
                DCOMPUTF16._IOwnership _7192_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7193_recIdents;
                RAST._IExpr _out3496;
                DCOMPUTF16._IOwnership _out3497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3498;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3496, out _out3497, out _out3498);
                _7191_recursiveGen = _out3496;
                _7192_recOwned = _out3497;
                _7193_recIdents = _out3498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7191_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3499;
                DCOMPUTF16._IOwnership _out3500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3499, out _out3500);
                r = _out3499;
                resultingOwnership = _out3500;
                readIdents = _7193_recIdents;
              }
            } else {
              DAST._IType _7194___mcc_h524 = _source270.dtor_baseType;
              DAST._INewtypeRange _7195___mcc_h525 = _source270.dtor_range;
              bool _7196___mcc_h526 = _source270.dtor_erase;
              bool _7197_erase = _7196___mcc_h526;
              DAST._INewtypeRange _7198_range = _7195___mcc_h525;
              DAST._IType _7199_b = _7194___mcc_h524;
              {
                if (object.Equals(_6463_fromTpe, _7199_b)) {
                  RAST._IExpr _7200_recursiveGen;
                  DCOMPUTF16._IOwnership _7201_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7202_recIdents;
                  RAST._IExpr _out3501;
                  DCOMPUTF16._IOwnership _out3502;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3503;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3501, out _out3502, out _out3503);
                  _7200_recursiveGen = _out3501;
                  _7201_recOwned = _out3502;
                  _7202_recIdents = _out3503;
                  Std.Wrappers._IOption<RAST._IType> _7203_potentialRhsType;
                  _7203_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7199_b, _7198_range);
                  Std.Wrappers._IOption<RAST._IType> _source271 = _7203_potentialRhsType;
                  if (_source271.is_None) {
                    if (_7197_erase) {
                      r = _7200_recursiveGen;
                    } else {
                      RAST._IType _7204_rhsType;
                      RAST._IType _out3504;
                      _out3504 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7204_rhsType = _out3504;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7204_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7200_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3505;
                    DCOMPUTF16._IOwnership _out3506;
                    DCOMPUTF16.COMP.FromOwnership(r, _7201_recOwned, expectedOwnership, out _out3505, out _out3506);
                    r = _out3505;
                    resultingOwnership = _out3506;
                  } else {
                    RAST._IType _7205___mcc_h1161 = _source271.dtor_value;
                    RAST._IType _7206_v = _7205___mcc_h1161;
                    r = RAST.Expr.create_ConversionNum(_7206_v, _7200_recursiveGen);
                    RAST._IExpr _out3507;
                    DCOMPUTF16._IOwnership _out3508;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3507, out _out3508);
                    r = _out3507;
                    resultingOwnership = _out3508;
                  }
                  readIdents = _7202_recIdents;
                } else {
                  RAST._IExpr _out3509;
                  DCOMPUTF16._IOwnership _out3510;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3511;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7199_b), _7199_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3509, out _out3510, out _out3511);
                  r = _out3509;
                  resultingOwnership = _out3510;
                  readIdents = _out3511;
                }
              }
            }
          } else if (_source269.is_Nullable) {
            DAST._IType _7207___mcc_h530 = _source269.dtor_Nullable_a0;
            {
              RAST._IExpr _7208_recursiveGen;
              DCOMPUTF16._IOwnership _7209_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7210_recIdents;
              RAST._IExpr _out3512;
              DCOMPUTF16._IOwnership _out3513;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3514;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3512, out _out3513, out _out3514);
              _7208_recursiveGen = _out3512;
              _7209_recOwned = _out3513;
              _7210_recIdents = _out3514;
              Dafny.ISequence<Dafny.Rune> _7211_s;
              _7211_s = (_7208_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7209_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7211_s = Dafny.Sequence<Dafny.Rune>.Concat(_7211_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7211_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7211_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7211_s);
              RAST._IExpr _out3515;
              DCOMPUTF16._IOwnership _out3516;
              DCOMPUTF16.COMP.FromOwnership(r, _7209_recOwned, expectedOwnership, out _out3515, out _out3516);
              r = _out3515;
              resultingOwnership = _out3516;
              readIdents = _7210_recIdents;
            }
          } else if (_source269.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7212___mcc_h532 = _source269.dtor_Tuple_a0;
            {
              RAST._IExpr _7213_recursiveGen;
              DCOMPUTF16._IOwnership _7214_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7215_recIdents;
              RAST._IExpr _out3517;
              DCOMPUTF16._IOwnership _out3518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3519;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3517, out _out3518, out _out3519);
              _7213_recursiveGen = _out3517;
              _7214_recOwned = _out3518;
              _7215_recIdents = _out3519;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7213_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3520;
              DCOMPUTF16._IOwnership _out3521;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3520, out _out3521);
              r = _out3520;
              resultingOwnership = _out3521;
              readIdents = _7215_recIdents;
            }
          } else if (_source269.is_Array) {
            DAST._IType _7216___mcc_h534 = _source269.dtor_element;
            BigInteger _7217___mcc_h535 = _source269.dtor_dims;
            {
              RAST._IExpr _7218_recursiveGen;
              DCOMPUTF16._IOwnership _7219_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7220_recIdents;
              RAST._IExpr _out3522;
              DCOMPUTF16._IOwnership _out3523;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3524;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3522, out _out3523, out _out3524);
              _7218_recursiveGen = _out3522;
              _7219_recOwned = _out3523;
              _7220_recIdents = _out3524;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7218_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3525;
              DCOMPUTF16._IOwnership _out3526;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3525, out _out3526);
              r = _out3525;
              resultingOwnership = _out3526;
              readIdents = _7220_recIdents;
            }
          } else if (_source269.is_Seq) {
            DAST._IType _7221___mcc_h538 = _source269.dtor_element;
            {
              RAST._IExpr _7222_recursiveGen;
              DCOMPUTF16._IOwnership _7223_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7224_recIdents;
              RAST._IExpr _out3527;
              DCOMPUTF16._IOwnership _out3528;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3529;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3527, out _out3528, out _out3529);
              _7222_recursiveGen = _out3527;
              _7223_recOwned = _out3528;
              _7224_recIdents = _out3529;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7222_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3530;
              DCOMPUTF16._IOwnership _out3531;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3530, out _out3531);
              r = _out3530;
              resultingOwnership = _out3531;
              readIdents = _7224_recIdents;
            }
          } else if (_source269.is_Set) {
            DAST._IType _7225___mcc_h540 = _source269.dtor_element;
            {
              RAST._IExpr _7226_recursiveGen;
              DCOMPUTF16._IOwnership _7227_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7228_recIdents;
              RAST._IExpr _out3532;
              DCOMPUTF16._IOwnership _out3533;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3534;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3532, out _out3533, out _out3534);
              _7226_recursiveGen = _out3532;
              _7227_recOwned = _out3533;
              _7228_recIdents = _out3534;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7226_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3535;
              DCOMPUTF16._IOwnership _out3536;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3535, out _out3536);
              r = _out3535;
              resultingOwnership = _out3536;
              readIdents = _7228_recIdents;
            }
          } else if (_source269.is_Multiset) {
            DAST._IType _7229___mcc_h542 = _source269.dtor_element;
            {
              RAST._IExpr _7230_recursiveGen;
              DCOMPUTF16._IOwnership _7231_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7232_recIdents;
              RAST._IExpr _out3537;
              DCOMPUTF16._IOwnership _out3538;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3539;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3537, out _out3538, out _out3539);
              _7230_recursiveGen = _out3537;
              _7231_recOwned = _out3538;
              _7232_recIdents = _out3539;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7230_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3540;
              DCOMPUTF16._IOwnership _out3541;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3540, out _out3541);
              r = _out3540;
              resultingOwnership = _out3541;
              readIdents = _7232_recIdents;
            }
          } else if (_source269.is_Map) {
            DAST._IType _7233___mcc_h544 = _source269.dtor_key;
            DAST._IType _7234___mcc_h545 = _source269.dtor_value;
            {
              RAST._IExpr _7235_recursiveGen;
              DCOMPUTF16._IOwnership _7236_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7237_recIdents;
              RAST._IExpr _out3542;
              DCOMPUTF16._IOwnership _out3543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3544;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3542, out _out3543, out _out3544);
              _7235_recursiveGen = _out3542;
              _7236_recOwned = _out3543;
              _7237_recIdents = _out3544;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7235_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3545;
              DCOMPUTF16._IOwnership _out3546;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3545, out _out3546);
              r = _out3545;
              resultingOwnership = _out3546;
              readIdents = _7237_recIdents;
            }
          } else if (_source269.is_SetBuilder) {
            DAST._IType _7238___mcc_h548 = _source269.dtor_element;
            {
              RAST._IExpr _7239_recursiveGen;
              DCOMPUTF16._IOwnership _7240_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7241_recIdents;
              RAST._IExpr _out3547;
              DCOMPUTF16._IOwnership _out3548;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3549;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3547, out _out3548, out _out3549);
              _7239_recursiveGen = _out3547;
              _7240_recOwned = _out3548;
              _7241_recIdents = _out3549;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7239_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3550;
              DCOMPUTF16._IOwnership _out3551;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3550, out _out3551);
              r = _out3550;
              resultingOwnership = _out3551;
              readIdents = _7241_recIdents;
            }
          } else if (_source269.is_MapBuilder) {
            DAST._IType _7242___mcc_h550 = _source269.dtor_key;
            DAST._IType _7243___mcc_h551 = _source269.dtor_value;
            {
              RAST._IExpr _7244_recursiveGen;
              DCOMPUTF16._IOwnership _7245_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7246_recIdents;
              RAST._IExpr _out3552;
              DCOMPUTF16._IOwnership _out3553;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3554;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3552, out _out3553, out _out3554);
              _7244_recursiveGen = _out3552;
              _7245_recOwned = _out3553;
              _7246_recIdents = _out3554;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7244_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3555;
              DCOMPUTF16._IOwnership _out3556;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3555, out _out3556);
              r = _out3555;
              resultingOwnership = _out3556;
              readIdents = _7246_recIdents;
            }
          } else if (_source269.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7247___mcc_h554 = _source269.dtor_args;
            DAST._IType _7248___mcc_h555 = _source269.dtor_result;
            {
              RAST._IExpr _7249_recursiveGen;
              DCOMPUTF16._IOwnership _7250_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7251_recIdents;
              RAST._IExpr _out3557;
              DCOMPUTF16._IOwnership _out3558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3559;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3557, out _out3558, out _out3559);
              _7249_recursiveGen = _out3557;
              _7250_recOwned = _out3558;
              _7251_recIdents = _out3559;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7249_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3560;
              DCOMPUTF16._IOwnership _out3561;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3560, out _out3561);
              r = _out3560;
              resultingOwnership = _out3561;
              readIdents = _7251_recIdents;
            }
          } else if (_source269.is_Primitive) {
            DAST._IPrimitive _7252___mcc_h558 = _source269.dtor_Primitive_a0;
            {
              RAST._IExpr _7253_recursiveGen;
              DCOMPUTF16._IOwnership _7254_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7255_recIdents;
              RAST._IExpr _out3562;
              DCOMPUTF16._IOwnership _out3563;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3564;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3562, out _out3563, out _out3564);
              _7253_recursiveGen = _out3562;
              _7254_recOwned = _out3563;
              _7255_recIdents = _out3564;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7253_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3565;
              DCOMPUTF16._IOwnership _out3566;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3565, out _out3566);
              r = _out3565;
              resultingOwnership = _out3566;
              readIdents = _7255_recIdents;
            }
          } else if (_source269.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7256___mcc_h560 = _source269.dtor_Passthrough_a0;
            {
              RAST._IExpr _7257_recursiveGen;
              DCOMPUTF16._IOwnership _7258_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7259_recIdents;
              RAST._IExpr _out3567;
              DCOMPUTF16._IOwnership _out3568;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3569;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3567, out _out3568, out _out3569);
              _7257_recursiveGen = _out3567;
              _7258_recOwned = _out3568;
              _7259_recIdents = _out3569;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7257_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3570;
              DCOMPUTF16._IOwnership _out3571;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3570, out _out3571);
              r = _out3570;
              resultingOwnership = _out3571;
              readIdents = _7259_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7260___mcc_h562 = _source269.dtor_TypeArg_a0;
            {
              RAST._IExpr _7261_recursiveGen;
              DCOMPUTF16._IOwnership _7262_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7263_recIdents;
              RAST._IExpr _out3572;
              DCOMPUTF16._IOwnership _out3573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3574;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3572, out _out3573, out _out3574);
              _7261_recursiveGen = _out3572;
              _7262_recOwned = _out3573;
              _7263_recIdents = _out3574;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7261_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3575;
              DCOMPUTF16._IOwnership _out3576;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3575, out _out3576);
              r = _out3575;
              resultingOwnership = _out3576;
              readIdents = _7263_recIdents;
            }
          }
        } else if (_source244.is_Map) {
          DAST._IType _7264___mcc_h564 = _source244.dtor_key;
          DAST._IType _7265___mcc_h565 = _source244.dtor_value;
          DAST._IType _source272 = _6469___mcc_h1;
          if (_source272.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7266___mcc_h572 = _source272.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7267___mcc_h573 = _source272.dtor_typeArgs;
            DAST._IResolvedType _7268___mcc_h574 = _source272.dtor_resolved;
            DAST._IResolvedType _source273 = _7268___mcc_h574;
            if (_source273.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7269___mcc_h578 = _source273.dtor_path;
              {
                RAST._IExpr _7270_recursiveGen;
                DCOMPUTF16._IOwnership _7271_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7272_recIdents;
                RAST._IExpr _out3577;
                DCOMPUTF16._IOwnership _out3578;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3579;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3577, out _out3578, out _out3579);
                _7270_recursiveGen = _out3577;
                _7271_recOwned = _out3578;
                _7272_recIdents = _out3579;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7270_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3580;
                DCOMPUTF16._IOwnership _out3581;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3580, out _out3581);
                r = _out3580;
                resultingOwnership = _out3581;
                readIdents = _7272_recIdents;
              }
            } else if (_source273.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7273___mcc_h580 = _source273.dtor_path;
              {
                RAST._IExpr _7274_recursiveGen;
                DCOMPUTF16._IOwnership _7275_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7276_recIdents;
                RAST._IExpr _out3582;
                DCOMPUTF16._IOwnership _out3583;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3584;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3582, out _out3583, out _out3584);
                _7274_recursiveGen = _out3582;
                _7275_recOwned = _out3583;
                _7276_recIdents = _out3584;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7274_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3585;
                DCOMPUTF16._IOwnership _out3586;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3585, out _out3586);
                r = _out3585;
                resultingOwnership = _out3586;
                readIdents = _7276_recIdents;
              }
            } else {
              DAST._IType _7277___mcc_h582 = _source273.dtor_baseType;
              DAST._INewtypeRange _7278___mcc_h583 = _source273.dtor_range;
              bool _7279___mcc_h584 = _source273.dtor_erase;
              bool _7280_erase = _7279___mcc_h584;
              DAST._INewtypeRange _7281_range = _7278___mcc_h583;
              DAST._IType _7282_b = _7277___mcc_h582;
              {
                if (object.Equals(_6463_fromTpe, _7282_b)) {
                  RAST._IExpr _7283_recursiveGen;
                  DCOMPUTF16._IOwnership _7284_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7285_recIdents;
                  RAST._IExpr _out3587;
                  DCOMPUTF16._IOwnership _out3588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3589;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3587, out _out3588, out _out3589);
                  _7283_recursiveGen = _out3587;
                  _7284_recOwned = _out3588;
                  _7285_recIdents = _out3589;
                  Std.Wrappers._IOption<RAST._IType> _7286_potentialRhsType;
                  _7286_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7282_b, _7281_range);
                  Std.Wrappers._IOption<RAST._IType> _source274 = _7286_potentialRhsType;
                  if (_source274.is_None) {
                    if (_7280_erase) {
                      r = _7283_recursiveGen;
                    } else {
                      RAST._IType _7287_rhsType;
                      RAST._IType _out3590;
                      _out3590 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7287_rhsType = _out3590;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7287_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7283_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3591;
                    DCOMPUTF16._IOwnership _out3592;
                    DCOMPUTF16.COMP.FromOwnership(r, _7284_recOwned, expectedOwnership, out _out3591, out _out3592);
                    r = _out3591;
                    resultingOwnership = _out3592;
                  } else {
                    RAST._IType _7288___mcc_h1162 = _source274.dtor_value;
                    RAST._IType _7289_v = _7288___mcc_h1162;
                    r = RAST.Expr.create_ConversionNum(_7289_v, _7283_recursiveGen);
                    RAST._IExpr _out3593;
                    DCOMPUTF16._IOwnership _out3594;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3593, out _out3594);
                    r = _out3593;
                    resultingOwnership = _out3594;
                  }
                  readIdents = _7285_recIdents;
                } else {
                  RAST._IExpr _out3595;
                  DCOMPUTF16._IOwnership _out3596;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3597;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7282_b), _7282_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3595, out _out3596, out _out3597);
                  r = _out3595;
                  resultingOwnership = _out3596;
                  readIdents = _out3597;
                }
              }
            }
          } else if (_source272.is_Nullable) {
            DAST._IType _7290___mcc_h588 = _source272.dtor_Nullable_a0;
            {
              RAST._IExpr _7291_recursiveGen;
              DCOMPUTF16._IOwnership _7292_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7293_recIdents;
              RAST._IExpr _out3598;
              DCOMPUTF16._IOwnership _out3599;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3600;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3598, out _out3599, out _out3600);
              _7291_recursiveGen = _out3598;
              _7292_recOwned = _out3599;
              _7293_recIdents = _out3600;
              Dafny.ISequence<Dafny.Rune> _7294_s;
              _7294_s = (_7291_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7292_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7294_s = Dafny.Sequence<Dafny.Rune>.Concat(_7294_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7294_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7294_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7294_s);
              RAST._IExpr _out3601;
              DCOMPUTF16._IOwnership _out3602;
              DCOMPUTF16.COMP.FromOwnership(r, _7292_recOwned, expectedOwnership, out _out3601, out _out3602);
              r = _out3601;
              resultingOwnership = _out3602;
              readIdents = _7293_recIdents;
            }
          } else if (_source272.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7295___mcc_h590 = _source272.dtor_Tuple_a0;
            {
              RAST._IExpr _7296_recursiveGen;
              DCOMPUTF16._IOwnership _7297_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7298_recIdents;
              RAST._IExpr _out3603;
              DCOMPUTF16._IOwnership _out3604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3605;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3603, out _out3604, out _out3605);
              _7296_recursiveGen = _out3603;
              _7297_recOwned = _out3604;
              _7298_recIdents = _out3605;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7296_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3606;
              DCOMPUTF16._IOwnership _out3607;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3606, out _out3607);
              r = _out3606;
              resultingOwnership = _out3607;
              readIdents = _7298_recIdents;
            }
          } else if (_source272.is_Array) {
            DAST._IType _7299___mcc_h592 = _source272.dtor_element;
            BigInteger _7300___mcc_h593 = _source272.dtor_dims;
            {
              RAST._IExpr _7301_recursiveGen;
              DCOMPUTF16._IOwnership _7302_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7303_recIdents;
              RAST._IExpr _out3608;
              DCOMPUTF16._IOwnership _out3609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3610;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3608, out _out3609, out _out3610);
              _7301_recursiveGen = _out3608;
              _7302_recOwned = _out3609;
              _7303_recIdents = _out3610;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7301_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3611;
              DCOMPUTF16._IOwnership _out3612;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3611, out _out3612);
              r = _out3611;
              resultingOwnership = _out3612;
              readIdents = _7303_recIdents;
            }
          } else if (_source272.is_Seq) {
            DAST._IType _7304___mcc_h596 = _source272.dtor_element;
            {
              RAST._IExpr _7305_recursiveGen;
              DCOMPUTF16._IOwnership _7306_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7307_recIdents;
              RAST._IExpr _out3613;
              DCOMPUTF16._IOwnership _out3614;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3615;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3613, out _out3614, out _out3615);
              _7305_recursiveGen = _out3613;
              _7306_recOwned = _out3614;
              _7307_recIdents = _out3615;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7305_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3616;
              DCOMPUTF16._IOwnership _out3617;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3616, out _out3617);
              r = _out3616;
              resultingOwnership = _out3617;
              readIdents = _7307_recIdents;
            }
          } else if (_source272.is_Set) {
            DAST._IType _7308___mcc_h598 = _source272.dtor_element;
            {
              RAST._IExpr _7309_recursiveGen;
              DCOMPUTF16._IOwnership _7310_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7311_recIdents;
              RAST._IExpr _out3618;
              DCOMPUTF16._IOwnership _out3619;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3620;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3618, out _out3619, out _out3620);
              _7309_recursiveGen = _out3618;
              _7310_recOwned = _out3619;
              _7311_recIdents = _out3620;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7309_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3621;
              DCOMPUTF16._IOwnership _out3622;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3621, out _out3622);
              r = _out3621;
              resultingOwnership = _out3622;
              readIdents = _7311_recIdents;
            }
          } else if (_source272.is_Multiset) {
            DAST._IType _7312___mcc_h600 = _source272.dtor_element;
            {
              RAST._IExpr _7313_recursiveGen;
              DCOMPUTF16._IOwnership _7314_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7315_recIdents;
              RAST._IExpr _out3623;
              DCOMPUTF16._IOwnership _out3624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3625;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3623, out _out3624, out _out3625);
              _7313_recursiveGen = _out3623;
              _7314_recOwned = _out3624;
              _7315_recIdents = _out3625;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7313_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3626;
              DCOMPUTF16._IOwnership _out3627;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3626, out _out3627);
              r = _out3626;
              resultingOwnership = _out3627;
              readIdents = _7315_recIdents;
            }
          } else if (_source272.is_Map) {
            DAST._IType _7316___mcc_h602 = _source272.dtor_key;
            DAST._IType _7317___mcc_h603 = _source272.dtor_value;
            {
              RAST._IExpr _7318_recursiveGen;
              DCOMPUTF16._IOwnership _7319_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7320_recIdents;
              RAST._IExpr _out3628;
              DCOMPUTF16._IOwnership _out3629;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3630;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3628, out _out3629, out _out3630);
              _7318_recursiveGen = _out3628;
              _7319_recOwned = _out3629;
              _7320_recIdents = _out3630;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7318_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3631;
              DCOMPUTF16._IOwnership _out3632;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3631, out _out3632);
              r = _out3631;
              resultingOwnership = _out3632;
              readIdents = _7320_recIdents;
            }
          } else if (_source272.is_SetBuilder) {
            DAST._IType _7321___mcc_h606 = _source272.dtor_element;
            {
              RAST._IExpr _7322_recursiveGen;
              DCOMPUTF16._IOwnership _7323_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7324_recIdents;
              RAST._IExpr _out3633;
              DCOMPUTF16._IOwnership _out3634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3635;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3633, out _out3634, out _out3635);
              _7322_recursiveGen = _out3633;
              _7323_recOwned = _out3634;
              _7324_recIdents = _out3635;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7322_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3636;
              DCOMPUTF16._IOwnership _out3637;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3636, out _out3637);
              r = _out3636;
              resultingOwnership = _out3637;
              readIdents = _7324_recIdents;
            }
          } else if (_source272.is_MapBuilder) {
            DAST._IType _7325___mcc_h608 = _source272.dtor_key;
            DAST._IType _7326___mcc_h609 = _source272.dtor_value;
            {
              RAST._IExpr _7327_recursiveGen;
              DCOMPUTF16._IOwnership _7328_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7329_recIdents;
              RAST._IExpr _out3638;
              DCOMPUTF16._IOwnership _out3639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3640;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3638, out _out3639, out _out3640);
              _7327_recursiveGen = _out3638;
              _7328_recOwned = _out3639;
              _7329_recIdents = _out3640;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7327_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3641;
              DCOMPUTF16._IOwnership _out3642;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3641, out _out3642);
              r = _out3641;
              resultingOwnership = _out3642;
              readIdents = _7329_recIdents;
            }
          } else if (_source272.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7330___mcc_h612 = _source272.dtor_args;
            DAST._IType _7331___mcc_h613 = _source272.dtor_result;
            {
              RAST._IExpr _7332_recursiveGen;
              DCOMPUTF16._IOwnership _7333_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7334_recIdents;
              RAST._IExpr _out3643;
              DCOMPUTF16._IOwnership _out3644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3645;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3643, out _out3644, out _out3645);
              _7332_recursiveGen = _out3643;
              _7333_recOwned = _out3644;
              _7334_recIdents = _out3645;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7332_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3646;
              DCOMPUTF16._IOwnership _out3647;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3646, out _out3647);
              r = _out3646;
              resultingOwnership = _out3647;
              readIdents = _7334_recIdents;
            }
          } else if (_source272.is_Primitive) {
            DAST._IPrimitive _7335___mcc_h616 = _source272.dtor_Primitive_a0;
            {
              RAST._IExpr _7336_recursiveGen;
              DCOMPUTF16._IOwnership _7337_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7338_recIdents;
              RAST._IExpr _out3648;
              DCOMPUTF16._IOwnership _out3649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3650;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3648, out _out3649, out _out3650);
              _7336_recursiveGen = _out3648;
              _7337_recOwned = _out3649;
              _7338_recIdents = _out3650;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7336_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3651;
              DCOMPUTF16._IOwnership _out3652;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3651, out _out3652);
              r = _out3651;
              resultingOwnership = _out3652;
              readIdents = _7338_recIdents;
            }
          } else if (_source272.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7339___mcc_h618 = _source272.dtor_Passthrough_a0;
            {
              RAST._IExpr _7340_recursiveGen;
              DCOMPUTF16._IOwnership _7341_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7342_recIdents;
              RAST._IExpr _out3653;
              DCOMPUTF16._IOwnership _out3654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3655;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3653, out _out3654, out _out3655);
              _7340_recursiveGen = _out3653;
              _7341_recOwned = _out3654;
              _7342_recIdents = _out3655;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7340_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3656;
              DCOMPUTF16._IOwnership _out3657;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3656, out _out3657);
              r = _out3656;
              resultingOwnership = _out3657;
              readIdents = _7342_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7343___mcc_h620 = _source272.dtor_TypeArg_a0;
            {
              RAST._IExpr _7344_recursiveGen;
              DCOMPUTF16._IOwnership _7345_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7346_recIdents;
              RAST._IExpr _out3658;
              DCOMPUTF16._IOwnership _out3659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3660;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3658, out _out3659, out _out3660);
              _7344_recursiveGen = _out3658;
              _7345_recOwned = _out3659;
              _7346_recIdents = _out3660;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7344_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3661;
              DCOMPUTF16._IOwnership _out3662;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3661, out _out3662);
              r = _out3661;
              resultingOwnership = _out3662;
              readIdents = _7346_recIdents;
            }
          }
        } else if (_source244.is_SetBuilder) {
          DAST._IType _7347___mcc_h622 = _source244.dtor_element;
          DAST._IType _source275 = _6469___mcc_h1;
          if (_source275.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7348___mcc_h626 = _source275.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7349___mcc_h627 = _source275.dtor_typeArgs;
            DAST._IResolvedType _7350___mcc_h628 = _source275.dtor_resolved;
            DAST._IResolvedType _source276 = _7350___mcc_h628;
            if (_source276.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7351___mcc_h632 = _source276.dtor_path;
              {
                RAST._IExpr _7352_recursiveGen;
                DCOMPUTF16._IOwnership _7353_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7354_recIdents;
                RAST._IExpr _out3663;
                DCOMPUTF16._IOwnership _out3664;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3665;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3663, out _out3664, out _out3665);
                _7352_recursiveGen = _out3663;
                _7353_recOwned = _out3664;
                _7354_recIdents = _out3665;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7352_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3666;
                DCOMPUTF16._IOwnership _out3667;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3666, out _out3667);
                r = _out3666;
                resultingOwnership = _out3667;
                readIdents = _7354_recIdents;
              }
            } else if (_source276.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7355___mcc_h634 = _source276.dtor_path;
              {
                RAST._IExpr _7356_recursiveGen;
                DCOMPUTF16._IOwnership _7357_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7358_recIdents;
                RAST._IExpr _out3668;
                DCOMPUTF16._IOwnership _out3669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3670;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3668, out _out3669, out _out3670);
                _7356_recursiveGen = _out3668;
                _7357_recOwned = _out3669;
                _7358_recIdents = _out3670;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7356_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3671;
                DCOMPUTF16._IOwnership _out3672;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3671, out _out3672);
                r = _out3671;
                resultingOwnership = _out3672;
                readIdents = _7358_recIdents;
              }
            } else {
              DAST._IType _7359___mcc_h636 = _source276.dtor_baseType;
              DAST._INewtypeRange _7360___mcc_h637 = _source276.dtor_range;
              bool _7361___mcc_h638 = _source276.dtor_erase;
              bool _7362_erase = _7361___mcc_h638;
              DAST._INewtypeRange _7363_range = _7360___mcc_h637;
              DAST._IType _7364_b = _7359___mcc_h636;
              {
                if (object.Equals(_6463_fromTpe, _7364_b)) {
                  RAST._IExpr _7365_recursiveGen;
                  DCOMPUTF16._IOwnership _7366_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7367_recIdents;
                  RAST._IExpr _out3673;
                  DCOMPUTF16._IOwnership _out3674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3675;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3673, out _out3674, out _out3675);
                  _7365_recursiveGen = _out3673;
                  _7366_recOwned = _out3674;
                  _7367_recIdents = _out3675;
                  Std.Wrappers._IOption<RAST._IType> _7368_potentialRhsType;
                  _7368_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7364_b, _7363_range);
                  Std.Wrappers._IOption<RAST._IType> _source277 = _7368_potentialRhsType;
                  if (_source277.is_None) {
                    if (_7362_erase) {
                      r = _7365_recursiveGen;
                    } else {
                      RAST._IType _7369_rhsType;
                      RAST._IType _out3676;
                      _out3676 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7369_rhsType = _out3676;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7369_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7365_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3677;
                    DCOMPUTF16._IOwnership _out3678;
                    DCOMPUTF16.COMP.FromOwnership(r, _7366_recOwned, expectedOwnership, out _out3677, out _out3678);
                    r = _out3677;
                    resultingOwnership = _out3678;
                  } else {
                    RAST._IType _7370___mcc_h1163 = _source277.dtor_value;
                    RAST._IType _7371_v = _7370___mcc_h1163;
                    r = RAST.Expr.create_ConversionNum(_7371_v, _7365_recursiveGen);
                    RAST._IExpr _out3679;
                    DCOMPUTF16._IOwnership _out3680;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3679, out _out3680);
                    r = _out3679;
                    resultingOwnership = _out3680;
                  }
                  readIdents = _7367_recIdents;
                } else {
                  RAST._IExpr _out3681;
                  DCOMPUTF16._IOwnership _out3682;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3683;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7364_b), _7364_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3681, out _out3682, out _out3683);
                  r = _out3681;
                  resultingOwnership = _out3682;
                  readIdents = _out3683;
                }
              }
            }
          } else if (_source275.is_Nullable) {
            DAST._IType _7372___mcc_h642 = _source275.dtor_Nullable_a0;
            {
              RAST._IExpr _7373_recursiveGen;
              DCOMPUTF16._IOwnership _7374_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7375_recIdents;
              RAST._IExpr _out3684;
              DCOMPUTF16._IOwnership _out3685;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3686;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3684, out _out3685, out _out3686);
              _7373_recursiveGen = _out3684;
              _7374_recOwned = _out3685;
              _7375_recIdents = _out3686;
              Dafny.ISequence<Dafny.Rune> _7376_s;
              _7376_s = (_7373_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7374_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7376_s = Dafny.Sequence<Dafny.Rune>.Concat(_7376_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7376_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7376_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7376_s);
              RAST._IExpr _out3687;
              DCOMPUTF16._IOwnership _out3688;
              DCOMPUTF16.COMP.FromOwnership(r, _7374_recOwned, expectedOwnership, out _out3687, out _out3688);
              r = _out3687;
              resultingOwnership = _out3688;
              readIdents = _7375_recIdents;
            }
          } else if (_source275.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7377___mcc_h644 = _source275.dtor_Tuple_a0;
            {
              RAST._IExpr _7378_recursiveGen;
              DCOMPUTF16._IOwnership _7379_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7380_recIdents;
              RAST._IExpr _out3689;
              DCOMPUTF16._IOwnership _out3690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3691;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3689, out _out3690, out _out3691);
              _7378_recursiveGen = _out3689;
              _7379_recOwned = _out3690;
              _7380_recIdents = _out3691;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7378_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3692;
              DCOMPUTF16._IOwnership _out3693;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3692, out _out3693);
              r = _out3692;
              resultingOwnership = _out3693;
              readIdents = _7380_recIdents;
            }
          } else if (_source275.is_Array) {
            DAST._IType _7381___mcc_h646 = _source275.dtor_element;
            BigInteger _7382___mcc_h647 = _source275.dtor_dims;
            {
              RAST._IExpr _7383_recursiveGen;
              DCOMPUTF16._IOwnership _7384_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7385_recIdents;
              RAST._IExpr _out3694;
              DCOMPUTF16._IOwnership _out3695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3696;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3694, out _out3695, out _out3696);
              _7383_recursiveGen = _out3694;
              _7384_recOwned = _out3695;
              _7385_recIdents = _out3696;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7383_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3697;
              DCOMPUTF16._IOwnership _out3698;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3697, out _out3698);
              r = _out3697;
              resultingOwnership = _out3698;
              readIdents = _7385_recIdents;
            }
          } else if (_source275.is_Seq) {
            DAST._IType _7386___mcc_h650 = _source275.dtor_element;
            {
              RAST._IExpr _7387_recursiveGen;
              DCOMPUTF16._IOwnership _7388_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7389_recIdents;
              RAST._IExpr _out3699;
              DCOMPUTF16._IOwnership _out3700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3701;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3699, out _out3700, out _out3701);
              _7387_recursiveGen = _out3699;
              _7388_recOwned = _out3700;
              _7389_recIdents = _out3701;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7387_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3702;
              DCOMPUTF16._IOwnership _out3703;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3702, out _out3703);
              r = _out3702;
              resultingOwnership = _out3703;
              readIdents = _7389_recIdents;
            }
          } else if (_source275.is_Set) {
            DAST._IType _7390___mcc_h652 = _source275.dtor_element;
            {
              RAST._IExpr _7391_recursiveGen;
              DCOMPUTF16._IOwnership _7392_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7393_recIdents;
              RAST._IExpr _out3704;
              DCOMPUTF16._IOwnership _out3705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3706;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3704, out _out3705, out _out3706);
              _7391_recursiveGen = _out3704;
              _7392_recOwned = _out3705;
              _7393_recIdents = _out3706;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7391_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3707;
              DCOMPUTF16._IOwnership _out3708;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3707, out _out3708);
              r = _out3707;
              resultingOwnership = _out3708;
              readIdents = _7393_recIdents;
            }
          } else if (_source275.is_Multiset) {
            DAST._IType _7394___mcc_h654 = _source275.dtor_element;
            {
              RAST._IExpr _7395_recursiveGen;
              DCOMPUTF16._IOwnership _7396_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7397_recIdents;
              RAST._IExpr _out3709;
              DCOMPUTF16._IOwnership _out3710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3711;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3709, out _out3710, out _out3711);
              _7395_recursiveGen = _out3709;
              _7396_recOwned = _out3710;
              _7397_recIdents = _out3711;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7395_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3712;
              DCOMPUTF16._IOwnership _out3713;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3712, out _out3713);
              r = _out3712;
              resultingOwnership = _out3713;
              readIdents = _7397_recIdents;
            }
          } else if (_source275.is_Map) {
            DAST._IType _7398___mcc_h656 = _source275.dtor_key;
            DAST._IType _7399___mcc_h657 = _source275.dtor_value;
            {
              RAST._IExpr _7400_recursiveGen;
              DCOMPUTF16._IOwnership _7401_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7402_recIdents;
              RAST._IExpr _out3714;
              DCOMPUTF16._IOwnership _out3715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3716;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3714, out _out3715, out _out3716);
              _7400_recursiveGen = _out3714;
              _7401_recOwned = _out3715;
              _7402_recIdents = _out3716;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7400_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3717;
              DCOMPUTF16._IOwnership _out3718;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3717, out _out3718);
              r = _out3717;
              resultingOwnership = _out3718;
              readIdents = _7402_recIdents;
            }
          } else if (_source275.is_SetBuilder) {
            DAST._IType _7403___mcc_h660 = _source275.dtor_element;
            {
              RAST._IExpr _7404_recursiveGen;
              DCOMPUTF16._IOwnership _7405_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7406_recIdents;
              RAST._IExpr _out3719;
              DCOMPUTF16._IOwnership _out3720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3721;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3719, out _out3720, out _out3721);
              _7404_recursiveGen = _out3719;
              _7405_recOwned = _out3720;
              _7406_recIdents = _out3721;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7404_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3722;
              DCOMPUTF16._IOwnership _out3723;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3722, out _out3723);
              r = _out3722;
              resultingOwnership = _out3723;
              readIdents = _7406_recIdents;
            }
          } else if (_source275.is_MapBuilder) {
            DAST._IType _7407___mcc_h662 = _source275.dtor_key;
            DAST._IType _7408___mcc_h663 = _source275.dtor_value;
            {
              RAST._IExpr _7409_recursiveGen;
              DCOMPUTF16._IOwnership _7410_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7411_recIdents;
              RAST._IExpr _out3724;
              DCOMPUTF16._IOwnership _out3725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3726;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3724, out _out3725, out _out3726);
              _7409_recursiveGen = _out3724;
              _7410_recOwned = _out3725;
              _7411_recIdents = _out3726;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7409_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3727;
              DCOMPUTF16._IOwnership _out3728;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3727, out _out3728);
              r = _out3727;
              resultingOwnership = _out3728;
              readIdents = _7411_recIdents;
            }
          } else if (_source275.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7412___mcc_h666 = _source275.dtor_args;
            DAST._IType _7413___mcc_h667 = _source275.dtor_result;
            {
              RAST._IExpr _7414_recursiveGen;
              DCOMPUTF16._IOwnership _7415_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7416_recIdents;
              RAST._IExpr _out3729;
              DCOMPUTF16._IOwnership _out3730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3731;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3729, out _out3730, out _out3731);
              _7414_recursiveGen = _out3729;
              _7415_recOwned = _out3730;
              _7416_recIdents = _out3731;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7414_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3732;
              DCOMPUTF16._IOwnership _out3733;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3732, out _out3733);
              r = _out3732;
              resultingOwnership = _out3733;
              readIdents = _7416_recIdents;
            }
          } else if (_source275.is_Primitive) {
            DAST._IPrimitive _7417___mcc_h670 = _source275.dtor_Primitive_a0;
            {
              RAST._IExpr _7418_recursiveGen;
              DCOMPUTF16._IOwnership _7419_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7420_recIdents;
              RAST._IExpr _out3734;
              DCOMPUTF16._IOwnership _out3735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3736;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3734, out _out3735, out _out3736);
              _7418_recursiveGen = _out3734;
              _7419_recOwned = _out3735;
              _7420_recIdents = _out3736;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7418_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3737;
              DCOMPUTF16._IOwnership _out3738;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3737, out _out3738);
              r = _out3737;
              resultingOwnership = _out3738;
              readIdents = _7420_recIdents;
            }
          } else if (_source275.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7421___mcc_h672 = _source275.dtor_Passthrough_a0;
            {
              RAST._IExpr _7422_recursiveGen;
              DCOMPUTF16._IOwnership _7423_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7424_recIdents;
              RAST._IExpr _out3739;
              DCOMPUTF16._IOwnership _out3740;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3741;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3739, out _out3740, out _out3741);
              _7422_recursiveGen = _out3739;
              _7423_recOwned = _out3740;
              _7424_recIdents = _out3741;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7422_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3742;
              DCOMPUTF16._IOwnership _out3743;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3742, out _out3743);
              r = _out3742;
              resultingOwnership = _out3743;
              readIdents = _7424_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7425___mcc_h674 = _source275.dtor_TypeArg_a0;
            {
              RAST._IExpr _7426_recursiveGen;
              DCOMPUTF16._IOwnership _7427_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7428_recIdents;
              RAST._IExpr _out3744;
              DCOMPUTF16._IOwnership _out3745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3746;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3744, out _out3745, out _out3746);
              _7426_recursiveGen = _out3744;
              _7427_recOwned = _out3745;
              _7428_recIdents = _out3746;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7426_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3747;
              DCOMPUTF16._IOwnership _out3748;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3747, out _out3748);
              r = _out3747;
              resultingOwnership = _out3748;
              readIdents = _7428_recIdents;
            }
          }
        } else if (_source244.is_MapBuilder) {
          DAST._IType _7429___mcc_h676 = _source244.dtor_key;
          DAST._IType _7430___mcc_h677 = _source244.dtor_value;
          DAST._IType _source278 = _6469___mcc_h1;
          if (_source278.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7431___mcc_h684 = _source278.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7432___mcc_h685 = _source278.dtor_typeArgs;
            DAST._IResolvedType _7433___mcc_h686 = _source278.dtor_resolved;
            DAST._IResolvedType _source279 = _7433___mcc_h686;
            if (_source279.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7434___mcc_h690 = _source279.dtor_path;
              {
                RAST._IExpr _7435_recursiveGen;
                DCOMPUTF16._IOwnership _7436_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7437_recIdents;
                RAST._IExpr _out3749;
                DCOMPUTF16._IOwnership _out3750;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3751;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3749, out _out3750, out _out3751);
                _7435_recursiveGen = _out3749;
                _7436_recOwned = _out3750;
                _7437_recIdents = _out3751;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7435_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3752;
                DCOMPUTF16._IOwnership _out3753;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3752, out _out3753);
                r = _out3752;
                resultingOwnership = _out3753;
                readIdents = _7437_recIdents;
              }
            } else if (_source279.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7438___mcc_h692 = _source279.dtor_path;
              {
                RAST._IExpr _7439_recursiveGen;
                DCOMPUTF16._IOwnership _7440_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7441_recIdents;
                RAST._IExpr _out3754;
                DCOMPUTF16._IOwnership _out3755;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3756;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3754, out _out3755, out _out3756);
                _7439_recursiveGen = _out3754;
                _7440_recOwned = _out3755;
                _7441_recIdents = _out3756;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7439_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3757;
                DCOMPUTF16._IOwnership _out3758;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3757, out _out3758);
                r = _out3757;
                resultingOwnership = _out3758;
                readIdents = _7441_recIdents;
              }
            } else {
              DAST._IType _7442___mcc_h694 = _source279.dtor_baseType;
              DAST._INewtypeRange _7443___mcc_h695 = _source279.dtor_range;
              bool _7444___mcc_h696 = _source279.dtor_erase;
              bool _7445_erase = _7444___mcc_h696;
              DAST._INewtypeRange _7446_range = _7443___mcc_h695;
              DAST._IType _7447_b = _7442___mcc_h694;
              {
                if (object.Equals(_6463_fromTpe, _7447_b)) {
                  RAST._IExpr _7448_recursiveGen;
                  DCOMPUTF16._IOwnership _7449_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7450_recIdents;
                  RAST._IExpr _out3759;
                  DCOMPUTF16._IOwnership _out3760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3761;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3759, out _out3760, out _out3761);
                  _7448_recursiveGen = _out3759;
                  _7449_recOwned = _out3760;
                  _7450_recIdents = _out3761;
                  Std.Wrappers._IOption<RAST._IType> _7451_potentialRhsType;
                  _7451_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7447_b, _7446_range);
                  Std.Wrappers._IOption<RAST._IType> _source280 = _7451_potentialRhsType;
                  if (_source280.is_None) {
                    if (_7445_erase) {
                      r = _7448_recursiveGen;
                    } else {
                      RAST._IType _7452_rhsType;
                      RAST._IType _out3762;
                      _out3762 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7452_rhsType = _out3762;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7452_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7448_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3763;
                    DCOMPUTF16._IOwnership _out3764;
                    DCOMPUTF16.COMP.FromOwnership(r, _7449_recOwned, expectedOwnership, out _out3763, out _out3764);
                    r = _out3763;
                    resultingOwnership = _out3764;
                  } else {
                    RAST._IType _7453___mcc_h1164 = _source280.dtor_value;
                    RAST._IType _7454_v = _7453___mcc_h1164;
                    r = RAST.Expr.create_ConversionNum(_7454_v, _7448_recursiveGen);
                    RAST._IExpr _out3765;
                    DCOMPUTF16._IOwnership _out3766;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3765, out _out3766);
                    r = _out3765;
                    resultingOwnership = _out3766;
                  }
                  readIdents = _7450_recIdents;
                } else {
                  RAST._IExpr _out3767;
                  DCOMPUTF16._IOwnership _out3768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3769;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7447_b), _7447_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3767, out _out3768, out _out3769);
                  r = _out3767;
                  resultingOwnership = _out3768;
                  readIdents = _out3769;
                }
              }
            }
          } else if (_source278.is_Nullable) {
            DAST._IType _7455___mcc_h700 = _source278.dtor_Nullable_a0;
            {
              RAST._IExpr _7456_recursiveGen;
              DCOMPUTF16._IOwnership _7457_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7458_recIdents;
              RAST._IExpr _out3770;
              DCOMPUTF16._IOwnership _out3771;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3772;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3770, out _out3771, out _out3772);
              _7456_recursiveGen = _out3770;
              _7457_recOwned = _out3771;
              _7458_recIdents = _out3772;
              Dafny.ISequence<Dafny.Rune> _7459_s;
              _7459_s = (_7456_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7457_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7459_s = Dafny.Sequence<Dafny.Rune>.Concat(_7459_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7459_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7459_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7459_s);
              RAST._IExpr _out3773;
              DCOMPUTF16._IOwnership _out3774;
              DCOMPUTF16.COMP.FromOwnership(r, _7457_recOwned, expectedOwnership, out _out3773, out _out3774);
              r = _out3773;
              resultingOwnership = _out3774;
              readIdents = _7458_recIdents;
            }
          } else if (_source278.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7460___mcc_h702 = _source278.dtor_Tuple_a0;
            {
              RAST._IExpr _7461_recursiveGen;
              DCOMPUTF16._IOwnership _7462_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7463_recIdents;
              RAST._IExpr _out3775;
              DCOMPUTF16._IOwnership _out3776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3777;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3775, out _out3776, out _out3777);
              _7461_recursiveGen = _out3775;
              _7462_recOwned = _out3776;
              _7463_recIdents = _out3777;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7461_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3778;
              DCOMPUTF16._IOwnership _out3779;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3778, out _out3779);
              r = _out3778;
              resultingOwnership = _out3779;
              readIdents = _7463_recIdents;
            }
          } else if (_source278.is_Array) {
            DAST._IType _7464___mcc_h704 = _source278.dtor_element;
            BigInteger _7465___mcc_h705 = _source278.dtor_dims;
            {
              RAST._IExpr _7466_recursiveGen;
              DCOMPUTF16._IOwnership _7467_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7468_recIdents;
              RAST._IExpr _out3780;
              DCOMPUTF16._IOwnership _out3781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3782;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3780, out _out3781, out _out3782);
              _7466_recursiveGen = _out3780;
              _7467_recOwned = _out3781;
              _7468_recIdents = _out3782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7466_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3783;
              DCOMPUTF16._IOwnership _out3784;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3783, out _out3784);
              r = _out3783;
              resultingOwnership = _out3784;
              readIdents = _7468_recIdents;
            }
          } else if (_source278.is_Seq) {
            DAST._IType _7469___mcc_h708 = _source278.dtor_element;
            {
              RAST._IExpr _7470_recursiveGen;
              DCOMPUTF16._IOwnership _7471_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7472_recIdents;
              RAST._IExpr _out3785;
              DCOMPUTF16._IOwnership _out3786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3787;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3785, out _out3786, out _out3787);
              _7470_recursiveGen = _out3785;
              _7471_recOwned = _out3786;
              _7472_recIdents = _out3787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7470_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3788;
              DCOMPUTF16._IOwnership _out3789;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3788, out _out3789);
              r = _out3788;
              resultingOwnership = _out3789;
              readIdents = _7472_recIdents;
            }
          } else if (_source278.is_Set) {
            DAST._IType _7473___mcc_h710 = _source278.dtor_element;
            {
              RAST._IExpr _7474_recursiveGen;
              DCOMPUTF16._IOwnership _7475_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7476_recIdents;
              RAST._IExpr _out3790;
              DCOMPUTF16._IOwnership _out3791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3792;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3790, out _out3791, out _out3792);
              _7474_recursiveGen = _out3790;
              _7475_recOwned = _out3791;
              _7476_recIdents = _out3792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7474_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3793;
              DCOMPUTF16._IOwnership _out3794;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3793, out _out3794);
              r = _out3793;
              resultingOwnership = _out3794;
              readIdents = _7476_recIdents;
            }
          } else if (_source278.is_Multiset) {
            DAST._IType _7477___mcc_h712 = _source278.dtor_element;
            {
              RAST._IExpr _7478_recursiveGen;
              DCOMPUTF16._IOwnership _7479_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7480_recIdents;
              RAST._IExpr _out3795;
              DCOMPUTF16._IOwnership _out3796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3797;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3795, out _out3796, out _out3797);
              _7478_recursiveGen = _out3795;
              _7479_recOwned = _out3796;
              _7480_recIdents = _out3797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7478_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3798;
              DCOMPUTF16._IOwnership _out3799;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3798, out _out3799);
              r = _out3798;
              resultingOwnership = _out3799;
              readIdents = _7480_recIdents;
            }
          } else if (_source278.is_Map) {
            DAST._IType _7481___mcc_h714 = _source278.dtor_key;
            DAST._IType _7482___mcc_h715 = _source278.dtor_value;
            {
              RAST._IExpr _7483_recursiveGen;
              DCOMPUTF16._IOwnership _7484_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7485_recIdents;
              RAST._IExpr _out3800;
              DCOMPUTF16._IOwnership _out3801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3802;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3800, out _out3801, out _out3802);
              _7483_recursiveGen = _out3800;
              _7484_recOwned = _out3801;
              _7485_recIdents = _out3802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7483_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3803;
              DCOMPUTF16._IOwnership _out3804;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3803, out _out3804);
              r = _out3803;
              resultingOwnership = _out3804;
              readIdents = _7485_recIdents;
            }
          } else if (_source278.is_SetBuilder) {
            DAST._IType _7486___mcc_h718 = _source278.dtor_element;
            {
              RAST._IExpr _7487_recursiveGen;
              DCOMPUTF16._IOwnership _7488_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7489_recIdents;
              RAST._IExpr _out3805;
              DCOMPUTF16._IOwnership _out3806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3807;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3805, out _out3806, out _out3807);
              _7487_recursiveGen = _out3805;
              _7488_recOwned = _out3806;
              _7489_recIdents = _out3807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7487_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3808;
              DCOMPUTF16._IOwnership _out3809;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3808, out _out3809);
              r = _out3808;
              resultingOwnership = _out3809;
              readIdents = _7489_recIdents;
            }
          } else if (_source278.is_MapBuilder) {
            DAST._IType _7490___mcc_h720 = _source278.dtor_key;
            DAST._IType _7491___mcc_h721 = _source278.dtor_value;
            {
              RAST._IExpr _7492_recursiveGen;
              DCOMPUTF16._IOwnership _7493_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7494_recIdents;
              RAST._IExpr _out3810;
              DCOMPUTF16._IOwnership _out3811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3812;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3810, out _out3811, out _out3812);
              _7492_recursiveGen = _out3810;
              _7493_recOwned = _out3811;
              _7494_recIdents = _out3812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7492_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3813;
              DCOMPUTF16._IOwnership _out3814;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3813, out _out3814);
              r = _out3813;
              resultingOwnership = _out3814;
              readIdents = _7494_recIdents;
            }
          } else if (_source278.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7495___mcc_h724 = _source278.dtor_args;
            DAST._IType _7496___mcc_h725 = _source278.dtor_result;
            {
              RAST._IExpr _7497_recursiveGen;
              DCOMPUTF16._IOwnership _7498_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7499_recIdents;
              RAST._IExpr _out3815;
              DCOMPUTF16._IOwnership _out3816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3817;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3815, out _out3816, out _out3817);
              _7497_recursiveGen = _out3815;
              _7498_recOwned = _out3816;
              _7499_recIdents = _out3817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7497_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3818;
              DCOMPUTF16._IOwnership _out3819;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3818, out _out3819);
              r = _out3818;
              resultingOwnership = _out3819;
              readIdents = _7499_recIdents;
            }
          } else if (_source278.is_Primitive) {
            DAST._IPrimitive _7500___mcc_h728 = _source278.dtor_Primitive_a0;
            {
              RAST._IExpr _7501_recursiveGen;
              DCOMPUTF16._IOwnership _7502_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7503_recIdents;
              RAST._IExpr _out3820;
              DCOMPUTF16._IOwnership _out3821;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3822;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3820, out _out3821, out _out3822);
              _7501_recursiveGen = _out3820;
              _7502_recOwned = _out3821;
              _7503_recIdents = _out3822;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7501_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3823;
              DCOMPUTF16._IOwnership _out3824;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3823, out _out3824);
              r = _out3823;
              resultingOwnership = _out3824;
              readIdents = _7503_recIdents;
            }
          } else if (_source278.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7504___mcc_h730 = _source278.dtor_Passthrough_a0;
            {
              RAST._IExpr _7505_recursiveGen;
              DCOMPUTF16._IOwnership _7506_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7507_recIdents;
              RAST._IExpr _out3825;
              DCOMPUTF16._IOwnership _out3826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3827;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3825, out _out3826, out _out3827);
              _7505_recursiveGen = _out3825;
              _7506_recOwned = _out3826;
              _7507_recIdents = _out3827;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7505_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3828;
              DCOMPUTF16._IOwnership _out3829;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3828, out _out3829);
              r = _out3828;
              resultingOwnership = _out3829;
              readIdents = _7507_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7508___mcc_h732 = _source278.dtor_TypeArg_a0;
            {
              RAST._IExpr _7509_recursiveGen;
              DCOMPUTF16._IOwnership _7510_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7511_recIdents;
              RAST._IExpr _out3830;
              DCOMPUTF16._IOwnership _out3831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3832;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3830, out _out3831, out _out3832);
              _7509_recursiveGen = _out3830;
              _7510_recOwned = _out3831;
              _7511_recIdents = _out3832;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7509_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3833;
              DCOMPUTF16._IOwnership _out3834;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3833, out _out3834);
              r = _out3833;
              resultingOwnership = _out3834;
              readIdents = _7511_recIdents;
            }
          }
        } else if (_source244.is_Arrow) {
          Dafny.ISequence<DAST._IType> _7512___mcc_h734 = _source244.dtor_args;
          DAST._IType _7513___mcc_h735 = _source244.dtor_result;
          DAST._IType _source281 = _6469___mcc_h1;
          if (_source281.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7514___mcc_h742 = _source281.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7515___mcc_h743 = _source281.dtor_typeArgs;
            DAST._IResolvedType _7516___mcc_h744 = _source281.dtor_resolved;
            DAST._IResolvedType _source282 = _7516___mcc_h744;
            if (_source282.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7517___mcc_h748 = _source282.dtor_path;
              {
                RAST._IExpr _7518_recursiveGen;
                DCOMPUTF16._IOwnership _7519_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7520_recIdents;
                RAST._IExpr _out3835;
                DCOMPUTF16._IOwnership _out3836;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3837;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3835, out _out3836, out _out3837);
                _7518_recursiveGen = _out3835;
                _7519_recOwned = _out3836;
                _7520_recIdents = _out3837;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7518_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3838;
                DCOMPUTF16._IOwnership _out3839;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3838, out _out3839);
                r = _out3838;
                resultingOwnership = _out3839;
                readIdents = _7520_recIdents;
              }
            } else if (_source282.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7521___mcc_h750 = _source282.dtor_path;
              {
                RAST._IExpr _7522_recursiveGen;
                DCOMPUTF16._IOwnership _7523_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7524_recIdents;
                RAST._IExpr _out3840;
                DCOMPUTF16._IOwnership _out3841;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3842;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3840, out _out3841, out _out3842);
                _7522_recursiveGen = _out3840;
                _7523_recOwned = _out3841;
                _7524_recIdents = _out3842;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7522_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3843;
                DCOMPUTF16._IOwnership _out3844;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3843, out _out3844);
                r = _out3843;
                resultingOwnership = _out3844;
                readIdents = _7524_recIdents;
              }
            } else {
              DAST._IType _7525___mcc_h752 = _source282.dtor_baseType;
              DAST._INewtypeRange _7526___mcc_h753 = _source282.dtor_range;
              bool _7527___mcc_h754 = _source282.dtor_erase;
              bool _7528_erase = _7527___mcc_h754;
              DAST._INewtypeRange _7529_range = _7526___mcc_h753;
              DAST._IType _7530_b = _7525___mcc_h752;
              {
                if (object.Equals(_6463_fromTpe, _7530_b)) {
                  RAST._IExpr _7531_recursiveGen;
                  DCOMPUTF16._IOwnership _7532_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7533_recIdents;
                  RAST._IExpr _out3845;
                  DCOMPUTF16._IOwnership _out3846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3847;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3845, out _out3846, out _out3847);
                  _7531_recursiveGen = _out3845;
                  _7532_recOwned = _out3846;
                  _7533_recIdents = _out3847;
                  Std.Wrappers._IOption<RAST._IType> _7534_potentialRhsType;
                  _7534_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7530_b, _7529_range);
                  Std.Wrappers._IOption<RAST._IType> _source283 = _7534_potentialRhsType;
                  if (_source283.is_None) {
                    if (_7528_erase) {
                      r = _7531_recursiveGen;
                    } else {
                      RAST._IType _7535_rhsType;
                      RAST._IType _out3848;
                      _out3848 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _7535_rhsType = _out3848;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7535_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7531_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3849;
                    DCOMPUTF16._IOwnership _out3850;
                    DCOMPUTF16.COMP.FromOwnership(r, _7532_recOwned, expectedOwnership, out _out3849, out _out3850);
                    r = _out3849;
                    resultingOwnership = _out3850;
                  } else {
                    RAST._IType _7536___mcc_h1165 = _source283.dtor_value;
                    RAST._IType _7537_v = _7536___mcc_h1165;
                    r = RAST.Expr.create_ConversionNum(_7537_v, _7531_recursiveGen);
                    RAST._IExpr _out3851;
                    DCOMPUTF16._IOwnership _out3852;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3851, out _out3852);
                    r = _out3851;
                    resultingOwnership = _out3852;
                  }
                  readIdents = _7533_recIdents;
                } else {
                  RAST._IExpr _out3853;
                  DCOMPUTF16._IOwnership _out3854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3855;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7530_b), _7530_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3853, out _out3854, out _out3855);
                  r = _out3853;
                  resultingOwnership = _out3854;
                  readIdents = _out3855;
                }
              }
            }
          } else if (_source281.is_Nullable) {
            DAST._IType _7538___mcc_h758 = _source281.dtor_Nullable_a0;
            {
              RAST._IExpr _7539_recursiveGen;
              DCOMPUTF16._IOwnership _7540_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7541_recIdents;
              RAST._IExpr _out3856;
              DCOMPUTF16._IOwnership _out3857;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3858;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3856, out _out3857, out _out3858);
              _7539_recursiveGen = _out3856;
              _7540_recOwned = _out3857;
              _7541_recIdents = _out3858;
              Dafny.ISequence<Dafny.Rune> _7542_s;
              _7542_s = (_7539_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7540_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7542_s = Dafny.Sequence<Dafny.Rune>.Concat(_7542_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7542_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7542_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7542_s);
              RAST._IExpr _out3859;
              DCOMPUTF16._IOwnership _out3860;
              DCOMPUTF16.COMP.FromOwnership(r, _7540_recOwned, expectedOwnership, out _out3859, out _out3860);
              r = _out3859;
              resultingOwnership = _out3860;
              readIdents = _7541_recIdents;
            }
          } else if (_source281.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7543___mcc_h760 = _source281.dtor_Tuple_a0;
            {
              RAST._IExpr _7544_recursiveGen;
              DCOMPUTF16._IOwnership _7545_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7546_recIdents;
              RAST._IExpr _out3861;
              DCOMPUTF16._IOwnership _out3862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3863;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3861, out _out3862, out _out3863);
              _7544_recursiveGen = _out3861;
              _7545_recOwned = _out3862;
              _7546_recIdents = _out3863;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7544_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3864;
              DCOMPUTF16._IOwnership _out3865;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3864, out _out3865);
              r = _out3864;
              resultingOwnership = _out3865;
              readIdents = _7546_recIdents;
            }
          } else if (_source281.is_Array) {
            DAST._IType _7547___mcc_h762 = _source281.dtor_element;
            BigInteger _7548___mcc_h763 = _source281.dtor_dims;
            {
              RAST._IExpr _7549_recursiveGen;
              DCOMPUTF16._IOwnership _7550_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7551_recIdents;
              RAST._IExpr _out3866;
              DCOMPUTF16._IOwnership _out3867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3868;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3866, out _out3867, out _out3868);
              _7549_recursiveGen = _out3866;
              _7550_recOwned = _out3867;
              _7551_recIdents = _out3868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7549_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3869;
              DCOMPUTF16._IOwnership _out3870;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3869, out _out3870);
              r = _out3869;
              resultingOwnership = _out3870;
              readIdents = _7551_recIdents;
            }
          } else if (_source281.is_Seq) {
            DAST._IType _7552___mcc_h766 = _source281.dtor_element;
            {
              RAST._IExpr _7553_recursiveGen;
              DCOMPUTF16._IOwnership _7554_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7555_recIdents;
              RAST._IExpr _out3871;
              DCOMPUTF16._IOwnership _out3872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3873;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3871, out _out3872, out _out3873);
              _7553_recursiveGen = _out3871;
              _7554_recOwned = _out3872;
              _7555_recIdents = _out3873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7553_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3874;
              DCOMPUTF16._IOwnership _out3875;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3874, out _out3875);
              r = _out3874;
              resultingOwnership = _out3875;
              readIdents = _7555_recIdents;
            }
          } else if (_source281.is_Set) {
            DAST._IType _7556___mcc_h768 = _source281.dtor_element;
            {
              RAST._IExpr _7557_recursiveGen;
              DCOMPUTF16._IOwnership _7558_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7559_recIdents;
              RAST._IExpr _out3876;
              DCOMPUTF16._IOwnership _out3877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3878;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3876, out _out3877, out _out3878);
              _7557_recursiveGen = _out3876;
              _7558_recOwned = _out3877;
              _7559_recIdents = _out3878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7557_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3879;
              DCOMPUTF16._IOwnership _out3880;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3879, out _out3880);
              r = _out3879;
              resultingOwnership = _out3880;
              readIdents = _7559_recIdents;
            }
          } else if (_source281.is_Multiset) {
            DAST._IType _7560___mcc_h770 = _source281.dtor_element;
            {
              RAST._IExpr _7561_recursiveGen;
              DCOMPUTF16._IOwnership _7562_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7563_recIdents;
              RAST._IExpr _out3881;
              DCOMPUTF16._IOwnership _out3882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3883;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3881, out _out3882, out _out3883);
              _7561_recursiveGen = _out3881;
              _7562_recOwned = _out3882;
              _7563_recIdents = _out3883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7561_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3884;
              DCOMPUTF16._IOwnership _out3885;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3884, out _out3885);
              r = _out3884;
              resultingOwnership = _out3885;
              readIdents = _7563_recIdents;
            }
          } else if (_source281.is_Map) {
            DAST._IType _7564___mcc_h772 = _source281.dtor_key;
            DAST._IType _7565___mcc_h773 = _source281.dtor_value;
            {
              RAST._IExpr _7566_recursiveGen;
              DCOMPUTF16._IOwnership _7567_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7568_recIdents;
              RAST._IExpr _out3886;
              DCOMPUTF16._IOwnership _out3887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3888;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3886, out _out3887, out _out3888);
              _7566_recursiveGen = _out3886;
              _7567_recOwned = _out3887;
              _7568_recIdents = _out3888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7566_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3889;
              DCOMPUTF16._IOwnership _out3890;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3889, out _out3890);
              r = _out3889;
              resultingOwnership = _out3890;
              readIdents = _7568_recIdents;
            }
          } else if (_source281.is_SetBuilder) {
            DAST._IType _7569___mcc_h776 = _source281.dtor_element;
            {
              RAST._IExpr _7570_recursiveGen;
              DCOMPUTF16._IOwnership _7571_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7572_recIdents;
              RAST._IExpr _out3891;
              DCOMPUTF16._IOwnership _out3892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3893;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3891, out _out3892, out _out3893);
              _7570_recursiveGen = _out3891;
              _7571_recOwned = _out3892;
              _7572_recIdents = _out3893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7570_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3894;
              DCOMPUTF16._IOwnership _out3895;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3894, out _out3895);
              r = _out3894;
              resultingOwnership = _out3895;
              readIdents = _7572_recIdents;
            }
          } else if (_source281.is_MapBuilder) {
            DAST._IType _7573___mcc_h778 = _source281.dtor_key;
            DAST._IType _7574___mcc_h779 = _source281.dtor_value;
            {
              RAST._IExpr _7575_recursiveGen;
              DCOMPUTF16._IOwnership _7576_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7577_recIdents;
              RAST._IExpr _out3896;
              DCOMPUTF16._IOwnership _out3897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3898;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3896, out _out3897, out _out3898);
              _7575_recursiveGen = _out3896;
              _7576_recOwned = _out3897;
              _7577_recIdents = _out3898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7575_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3899;
              DCOMPUTF16._IOwnership _out3900;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3899, out _out3900);
              r = _out3899;
              resultingOwnership = _out3900;
              readIdents = _7577_recIdents;
            }
          } else if (_source281.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7578___mcc_h782 = _source281.dtor_args;
            DAST._IType _7579___mcc_h783 = _source281.dtor_result;
            {
              RAST._IExpr _7580_recursiveGen;
              DCOMPUTF16._IOwnership _7581_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7582_recIdents;
              RAST._IExpr _out3901;
              DCOMPUTF16._IOwnership _out3902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3903;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3901, out _out3902, out _out3903);
              _7580_recursiveGen = _out3901;
              _7581_recOwned = _out3902;
              _7582_recIdents = _out3903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7580_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3904;
              DCOMPUTF16._IOwnership _out3905;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3904, out _out3905);
              r = _out3904;
              resultingOwnership = _out3905;
              readIdents = _7582_recIdents;
            }
          } else if (_source281.is_Primitive) {
            DAST._IPrimitive _7583___mcc_h786 = _source281.dtor_Primitive_a0;
            {
              RAST._IExpr _7584_recursiveGen;
              DCOMPUTF16._IOwnership _7585_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7586_recIdents;
              RAST._IExpr _out3906;
              DCOMPUTF16._IOwnership _out3907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3908;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3906, out _out3907, out _out3908);
              _7584_recursiveGen = _out3906;
              _7585_recOwned = _out3907;
              _7586_recIdents = _out3908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7584_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3909;
              DCOMPUTF16._IOwnership _out3910;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3909, out _out3910);
              r = _out3909;
              resultingOwnership = _out3910;
              readIdents = _7586_recIdents;
            }
          } else if (_source281.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7587___mcc_h788 = _source281.dtor_Passthrough_a0;
            {
              RAST._IExpr _7588_recursiveGen;
              DCOMPUTF16._IOwnership _7589_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7590_recIdents;
              RAST._IExpr _out3911;
              DCOMPUTF16._IOwnership _out3912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3913;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3911, out _out3912, out _out3913);
              _7588_recursiveGen = _out3911;
              _7589_recOwned = _out3912;
              _7590_recIdents = _out3913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7588_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3914;
              DCOMPUTF16._IOwnership _out3915;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3914, out _out3915);
              r = _out3914;
              resultingOwnership = _out3915;
              readIdents = _7590_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7591___mcc_h790 = _source281.dtor_TypeArg_a0;
            {
              RAST._IExpr _7592_recursiveGen;
              DCOMPUTF16._IOwnership _7593_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7594_recIdents;
              RAST._IExpr _out3916;
              DCOMPUTF16._IOwnership _out3917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3918;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3916, out _out3917, out _out3918);
              _7592_recursiveGen = _out3916;
              _7593_recOwned = _out3917;
              _7594_recIdents = _out3918;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7592_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3919;
              DCOMPUTF16._IOwnership _out3920;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3919, out _out3920);
              r = _out3919;
              resultingOwnership = _out3920;
              readIdents = _7594_recIdents;
            }
          }
        } else if (_source244.is_Primitive) {
          DAST._IPrimitive _7595___mcc_h792 = _source244.dtor_Primitive_a0;
          DAST._IPrimitive _source284 = _7595___mcc_h792;
          if (_source284.is_Int) {
            DAST._IType _source285 = _6469___mcc_h1;
            if (_source285.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7596___mcc_h796 = _source285.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7597___mcc_h797 = _source285.dtor_typeArgs;
              DAST._IResolvedType _7598___mcc_h798 = _source285.dtor_resolved;
              DAST._IResolvedType _source286 = _7598___mcc_h798;
              if (_source286.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7599___mcc_h802 = _source286.dtor_path;
                {
                  RAST._IExpr _7600_recursiveGen;
                  DCOMPUTF16._IOwnership _7601_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7602_recIdents;
                  RAST._IExpr _out3921;
                  DCOMPUTF16._IOwnership _out3922;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3923;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3921, out _out3922, out _out3923);
                  _7600_recursiveGen = _out3921;
                  _7601_recOwned = _out3922;
                  _7602_recIdents = _out3923;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7600_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out3924;
                  DCOMPUTF16._IOwnership _out3925;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3924, out _out3925);
                  r = _out3924;
                  resultingOwnership = _out3925;
                  readIdents = _7602_recIdents;
                }
              } else if (_source286.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7603___mcc_h804 = _source286.dtor_path;
                {
                  RAST._IExpr _7604_recursiveGen;
                  DCOMPUTF16._IOwnership _7605_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7606_recIdents;
                  RAST._IExpr _out3926;
                  DCOMPUTF16._IOwnership _out3927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3928;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3926, out _out3927, out _out3928);
                  _7604_recursiveGen = _out3926;
                  _7605_recOwned = _out3927;
                  _7606_recIdents = _out3928;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7604_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out3929;
                  DCOMPUTF16._IOwnership _out3930;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3929, out _out3930);
                  r = _out3929;
                  resultingOwnership = _out3930;
                  readIdents = _7606_recIdents;
                }
              } else {
                DAST._IType _7607___mcc_h806 = _source286.dtor_baseType;
                DAST._INewtypeRange _7608___mcc_h807 = _source286.dtor_range;
                bool _7609___mcc_h808 = _source286.dtor_erase;
                bool _7610_erase = _7609___mcc_h808;
                DAST._INewtypeRange _7611_range = _7608___mcc_h807;
                DAST._IType _7612_b = _7607___mcc_h806;
                {
                  if (object.Equals(_6463_fromTpe, _7612_b)) {
                    RAST._IExpr _7613_recursiveGen;
                    DCOMPUTF16._IOwnership _7614_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7615_recIdents;
                    RAST._IExpr _out3931;
                    DCOMPUTF16._IOwnership _out3932;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3933;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3931, out _out3932, out _out3933);
                    _7613_recursiveGen = _out3931;
                    _7614_recOwned = _out3932;
                    _7615_recIdents = _out3933;
                    Std.Wrappers._IOption<RAST._IType> _7616_potentialRhsType;
                    _7616_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7612_b, _7611_range);
                    Std.Wrappers._IOption<RAST._IType> _source287 = _7616_potentialRhsType;
                    if (_source287.is_None) {
                      if (_7610_erase) {
                        r = _7613_recursiveGen;
                      } else {
                        RAST._IType _7617_rhsType;
                        RAST._IType _out3934;
                        _out3934 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _7617_rhsType = _out3934;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7617_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7613_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3935;
                      DCOMPUTF16._IOwnership _out3936;
                      DCOMPUTF16.COMP.FromOwnership(r, _7614_recOwned, expectedOwnership, out _out3935, out _out3936);
                      r = _out3935;
                      resultingOwnership = _out3936;
                    } else {
                      RAST._IType _7618___mcc_h1166 = _source287.dtor_value;
                      RAST._IType _7619_v = _7618___mcc_h1166;
                      r = RAST.Expr.create_ConversionNum(_7619_v, _7613_recursiveGen);
                      RAST._IExpr _out3937;
                      DCOMPUTF16._IOwnership _out3938;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3937, out _out3938);
                      r = _out3937;
                      resultingOwnership = _out3938;
                    }
                    readIdents = _7615_recIdents;
                  } else {
                    RAST._IExpr _out3939;
                    DCOMPUTF16._IOwnership _out3940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3941;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7612_b), _7612_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out3939, out _out3940, out _out3941);
                    r = _out3939;
                    resultingOwnership = _out3940;
                    readIdents = _out3941;
                  }
                }
              }
            } else if (_source285.is_Nullable) {
              DAST._IType _7620___mcc_h812 = _source285.dtor_Nullable_a0;
              {
                RAST._IExpr _7621_recursiveGen;
                DCOMPUTF16._IOwnership _7622_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7623_recIdents;
                RAST._IExpr _out3942;
                DCOMPUTF16._IOwnership _out3943;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3944;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3942, out _out3943, out _out3944);
                _7621_recursiveGen = _out3942;
                _7622_recOwned = _out3943;
                _7623_recIdents = _out3944;
                Dafny.ISequence<Dafny.Rune> _7624_s;
                _7624_s = (_7621_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7622_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7624_s = Dafny.Sequence<Dafny.Rune>.Concat(_7624_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7624_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7624_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7624_s);
                RAST._IExpr _out3945;
                DCOMPUTF16._IOwnership _out3946;
                DCOMPUTF16.COMP.FromOwnership(r, _7622_recOwned, expectedOwnership, out _out3945, out _out3946);
                r = _out3945;
                resultingOwnership = _out3946;
                readIdents = _7623_recIdents;
              }
            } else if (_source285.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7625___mcc_h814 = _source285.dtor_Tuple_a0;
              {
                RAST._IExpr _7626_recursiveGen;
                DCOMPUTF16._IOwnership _7627_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7628_recIdents;
                RAST._IExpr _out3947;
                DCOMPUTF16._IOwnership _out3948;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3949;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3947, out _out3948, out _out3949);
                _7626_recursiveGen = _out3947;
                _7627_recOwned = _out3948;
                _7628_recIdents = _out3949;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7626_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3950;
                DCOMPUTF16._IOwnership _out3951;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3950, out _out3951);
                r = _out3950;
                resultingOwnership = _out3951;
                readIdents = _7628_recIdents;
              }
            } else if (_source285.is_Array) {
              DAST._IType _7629___mcc_h816 = _source285.dtor_element;
              BigInteger _7630___mcc_h817 = _source285.dtor_dims;
              {
                RAST._IExpr _7631_recursiveGen;
                DCOMPUTF16._IOwnership _7632_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7633_recIdents;
                RAST._IExpr _out3952;
                DCOMPUTF16._IOwnership _out3953;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3954;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3952, out _out3953, out _out3954);
                _7631_recursiveGen = _out3952;
                _7632_recOwned = _out3953;
                _7633_recIdents = _out3954;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7631_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3955;
                DCOMPUTF16._IOwnership _out3956;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3955, out _out3956);
                r = _out3955;
                resultingOwnership = _out3956;
                readIdents = _7633_recIdents;
              }
            } else if (_source285.is_Seq) {
              DAST._IType _7634___mcc_h820 = _source285.dtor_element;
              {
                RAST._IExpr _7635_recursiveGen;
                DCOMPUTF16._IOwnership _7636_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7637_recIdents;
                RAST._IExpr _out3957;
                DCOMPUTF16._IOwnership _out3958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3959;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3957, out _out3958, out _out3959);
                _7635_recursiveGen = _out3957;
                _7636_recOwned = _out3958;
                _7637_recIdents = _out3959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7635_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3960;
                DCOMPUTF16._IOwnership _out3961;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3960, out _out3961);
                r = _out3960;
                resultingOwnership = _out3961;
                readIdents = _7637_recIdents;
              }
            } else if (_source285.is_Set) {
              DAST._IType _7638___mcc_h822 = _source285.dtor_element;
              {
                RAST._IExpr _7639_recursiveGen;
                DCOMPUTF16._IOwnership _7640_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7641_recIdents;
                RAST._IExpr _out3962;
                DCOMPUTF16._IOwnership _out3963;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3964;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3962, out _out3963, out _out3964);
                _7639_recursiveGen = _out3962;
                _7640_recOwned = _out3963;
                _7641_recIdents = _out3964;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7639_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3965;
                DCOMPUTF16._IOwnership _out3966;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3965, out _out3966);
                r = _out3965;
                resultingOwnership = _out3966;
                readIdents = _7641_recIdents;
              }
            } else if (_source285.is_Multiset) {
              DAST._IType _7642___mcc_h824 = _source285.dtor_element;
              {
                RAST._IExpr _7643_recursiveGen;
                DCOMPUTF16._IOwnership _7644_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7645_recIdents;
                RAST._IExpr _out3967;
                DCOMPUTF16._IOwnership _out3968;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3969;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3967, out _out3968, out _out3969);
                _7643_recursiveGen = _out3967;
                _7644_recOwned = _out3968;
                _7645_recIdents = _out3969;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7643_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3970;
                DCOMPUTF16._IOwnership _out3971;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3970, out _out3971);
                r = _out3970;
                resultingOwnership = _out3971;
                readIdents = _7645_recIdents;
              }
            } else if (_source285.is_Map) {
              DAST._IType _7646___mcc_h826 = _source285.dtor_key;
              DAST._IType _7647___mcc_h827 = _source285.dtor_value;
              {
                RAST._IExpr _7648_recursiveGen;
                DCOMPUTF16._IOwnership _7649_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7650_recIdents;
                RAST._IExpr _out3972;
                DCOMPUTF16._IOwnership _out3973;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3974;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3972, out _out3973, out _out3974);
                _7648_recursiveGen = _out3972;
                _7649_recOwned = _out3973;
                _7650_recIdents = _out3974;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7648_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3975;
                DCOMPUTF16._IOwnership _out3976;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3975, out _out3976);
                r = _out3975;
                resultingOwnership = _out3976;
                readIdents = _7650_recIdents;
              }
            } else if (_source285.is_SetBuilder) {
              DAST._IType _7651___mcc_h830 = _source285.dtor_element;
              {
                RAST._IExpr _7652_recursiveGen;
                DCOMPUTF16._IOwnership _7653_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7654_recIdents;
                RAST._IExpr _out3977;
                DCOMPUTF16._IOwnership _out3978;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3979;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3977, out _out3978, out _out3979);
                _7652_recursiveGen = _out3977;
                _7653_recOwned = _out3978;
                _7654_recIdents = _out3979;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7652_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3980;
                DCOMPUTF16._IOwnership _out3981;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3980, out _out3981);
                r = _out3980;
                resultingOwnership = _out3981;
                readIdents = _7654_recIdents;
              }
            } else if (_source285.is_MapBuilder) {
              DAST._IType _7655___mcc_h832 = _source285.dtor_key;
              DAST._IType _7656___mcc_h833 = _source285.dtor_value;
              {
                RAST._IExpr _7657_recursiveGen;
                DCOMPUTF16._IOwnership _7658_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7659_recIdents;
                RAST._IExpr _out3982;
                DCOMPUTF16._IOwnership _out3983;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3984;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3982, out _out3983, out _out3984);
                _7657_recursiveGen = _out3982;
                _7658_recOwned = _out3983;
                _7659_recIdents = _out3984;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7657_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3985;
                DCOMPUTF16._IOwnership _out3986;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3985, out _out3986);
                r = _out3985;
                resultingOwnership = _out3986;
                readIdents = _7659_recIdents;
              }
            } else if (_source285.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7660___mcc_h836 = _source285.dtor_args;
              DAST._IType _7661___mcc_h837 = _source285.dtor_result;
              {
                RAST._IExpr _7662_recursiveGen;
                DCOMPUTF16._IOwnership _7663_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7664_recIdents;
                RAST._IExpr _out3987;
                DCOMPUTF16._IOwnership _out3988;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3989;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3987, out _out3988, out _out3989);
                _7662_recursiveGen = _out3987;
                _7663_recOwned = _out3988;
                _7664_recIdents = _out3989;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7662_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3990;
                DCOMPUTF16._IOwnership _out3991;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3990, out _out3991);
                r = _out3990;
                resultingOwnership = _out3991;
                readIdents = _7664_recIdents;
              }
            } else if (_source285.is_Primitive) {
              DAST._IPrimitive _7665___mcc_h840 = _source285.dtor_Primitive_a0;
              DAST._IPrimitive _source288 = _7665___mcc_h840;
              if (_source288.is_Int) {
                {
                  RAST._IExpr _7666_recursiveGen;
                  DCOMPUTF16._IOwnership _7667_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7668_recIdents;
                  RAST._IExpr _out3992;
                  DCOMPUTF16._IOwnership _out3993;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3994;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out3992, out _out3993, out _out3994);
                  _7666_recursiveGen = _out3992;
                  _7667_recOwned = _out3993;
                  _7668_recIdents = _out3994;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7666_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out3995;
                  DCOMPUTF16._IOwnership _out3996;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3995, out _out3996);
                  r = _out3995;
                  resultingOwnership = _out3996;
                  readIdents = _7668_recIdents;
                }
              } else if (_source288.is_Real) {
                {
                  RAST._IExpr _7669_recursiveGen;
                  DCOMPUTF16._IOwnership _7670___v75;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7671_recIdents;
                  RAST._IExpr _out3997;
                  DCOMPUTF16._IOwnership _out3998;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3999;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3997, out _out3998, out _out3999);
                  _7669_recursiveGen = _out3997;
                  _7670___v75 = _out3998;
                  _7671_recIdents = _out3999;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_7669_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out4000;
                  DCOMPUTF16._IOwnership _out4001;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4000, out _out4001);
                  r = _out4000;
                  resultingOwnership = _out4001;
                  readIdents = _7671_recIdents;
                }
              } else if (_source288.is_String) {
                {
                  RAST._IExpr _7672_recursiveGen;
                  DCOMPUTF16._IOwnership _7673_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7674_recIdents;
                  RAST._IExpr _out4002;
                  DCOMPUTF16._IOwnership _out4003;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4004;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4002, out _out4003, out _out4004);
                  _7672_recursiveGen = _out4002;
                  _7673_recOwned = _out4003;
                  _7674_recIdents = _out4004;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7672_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4005;
                  DCOMPUTF16._IOwnership _out4006;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4005, out _out4006);
                  r = _out4005;
                  resultingOwnership = _out4006;
                  readIdents = _7674_recIdents;
                }
              } else if (_source288.is_Bool) {
                {
                  RAST._IExpr _7675_recursiveGen;
                  DCOMPUTF16._IOwnership _7676_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7677_recIdents;
                  RAST._IExpr _out4007;
                  DCOMPUTF16._IOwnership _out4008;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4009;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4007, out _out4008, out _out4009);
                  _7675_recursiveGen = _out4007;
                  _7676_recOwned = _out4008;
                  _7677_recIdents = _out4009;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7675_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4010;
                  DCOMPUTF16._IOwnership _out4011;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4010, out _out4011);
                  r = _out4010;
                  resultingOwnership = _out4011;
                  readIdents = _7677_recIdents;
                }
              } else {
                {
                  RAST._IType _7678_rhsType;
                  RAST._IType _out4012;
                  _out4012 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                  _7678_rhsType = _out4012;
                  RAST._IExpr _7679_recursiveGen;
                  DCOMPUTF16._IOwnership _7680___v81;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7681_recIdents;
                  RAST._IExpr _out4013;
                  DCOMPUTF16._IOwnership _out4014;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4015;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4013, out _out4014, out _out4015);
                  _7679_recursiveGen = _out4013;
                  _7680___v81 = _out4014;
                  _7681_recIdents = _out4015;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_7679_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out4016;
                  DCOMPUTF16._IOwnership _out4017;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4016, out _out4017);
                  r = _out4016;
                  resultingOwnership = _out4017;
                  readIdents = _7681_recIdents;
                }
              }
            } else if (_source285.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7682___mcc_h842 = _source285.dtor_Passthrough_a0;
              {
                RAST._IType _7683_rhsType;
                RAST._IType _out4018;
                _out4018 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                _7683_rhsType = _out4018;
                RAST._IExpr _7684_recursiveGen;
                DCOMPUTF16._IOwnership _7685___v78;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7686_recIdents;
                RAST._IExpr _out4019;
                DCOMPUTF16._IOwnership _out4020;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4021;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4019, out _out4020, out _out4021);
                _7684_recursiveGen = _out4019;
                _7685___v78 = _out4020;
                _7686_recIdents = _out4021;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_7683_rhsType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_7684_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out4022;
                DCOMPUTF16._IOwnership _out4023;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4022, out _out4023);
                r = _out4022;
                resultingOwnership = _out4023;
                readIdents = _7686_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7687___mcc_h844 = _source285.dtor_TypeArg_a0;
              {
                RAST._IExpr _7688_recursiveGen;
                DCOMPUTF16._IOwnership _7689_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7690_recIdents;
                RAST._IExpr _out4024;
                DCOMPUTF16._IOwnership _out4025;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4026;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4024, out _out4025, out _out4026);
                _7688_recursiveGen = _out4024;
                _7689_recOwned = _out4025;
                _7690_recIdents = _out4026;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7688_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4027;
                DCOMPUTF16._IOwnership _out4028;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4027, out _out4028);
                r = _out4027;
                resultingOwnership = _out4028;
                readIdents = _7690_recIdents;
              }
            }
          } else if (_source284.is_Real) {
            DAST._IType _source289 = _6469___mcc_h1;
            if (_source289.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7691___mcc_h846 = _source289.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7692___mcc_h847 = _source289.dtor_typeArgs;
              DAST._IResolvedType _7693___mcc_h848 = _source289.dtor_resolved;
              DAST._IResolvedType _source290 = _7693___mcc_h848;
              if (_source290.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7694___mcc_h852 = _source290.dtor_path;
                {
                  RAST._IExpr _7695_recursiveGen;
                  DCOMPUTF16._IOwnership _7696_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7697_recIdents;
                  RAST._IExpr _out4029;
                  DCOMPUTF16._IOwnership _out4030;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4031;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4029, out _out4030, out _out4031);
                  _7695_recursiveGen = _out4029;
                  _7696_recOwned = _out4030;
                  _7697_recIdents = _out4031;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7695_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4032;
                  DCOMPUTF16._IOwnership _out4033;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4032, out _out4033);
                  r = _out4032;
                  resultingOwnership = _out4033;
                  readIdents = _7697_recIdents;
                }
              } else if (_source290.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7698___mcc_h854 = _source290.dtor_path;
                {
                  RAST._IExpr _7699_recursiveGen;
                  DCOMPUTF16._IOwnership _7700_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7701_recIdents;
                  RAST._IExpr _out4034;
                  DCOMPUTF16._IOwnership _out4035;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4036;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4034, out _out4035, out _out4036);
                  _7699_recursiveGen = _out4034;
                  _7700_recOwned = _out4035;
                  _7701_recIdents = _out4036;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7699_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4037;
                  DCOMPUTF16._IOwnership _out4038;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4037, out _out4038);
                  r = _out4037;
                  resultingOwnership = _out4038;
                  readIdents = _7701_recIdents;
                }
              } else {
                DAST._IType _7702___mcc_h856 = _source290.dtor_baseType;
                DAST._INewtypeRange _7703___mcc_h857 = _source290.dtor_range;
                bool _7704___mcc_h858 = _source290.dtor_erase;
                bool _7705_erase = _7704___mcc_h858;
                DAST._INewtypeRange _7706_range = _7703___mcc_h857;
                DAST._IType _7707_b = _7702___mcc_h856;
                {
                  if (object.Equals(_6463_fromTpe, _7707_b)) {
                    RAST._IExpr _7708_recursiveGen;
                    DCOMPUTF16._IOwnership _7709_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7710_recIdents;
                    RAST._IExpr _out4039;
                    DCOMPUTF16._IOwnership _out4040;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4041;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4039, out _out4040, out _out4041);
                    _7708_recursiveGen = _out4039;
                    _7709_recOwned = _out4040;
                    _7710_recIdents = _out4041;
                    Std.Wrappers._IOption<RAST._IType> _7711_potentialRhsType;
                    _7711_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7707_b, _7706_range);
                    Std.Wrappers._IOption<RAST._IType> _source291 = _7711_potentialRhsType;
                    if (_source291.is_None) {
                      if (_7705_erase) {
                        r = _7708_recursiveGen;
                      } else {
                        RAST._IType _7712_rhsType;
                        RAST._IType _out4042;
                        _out4042 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _7712_rhsType = _out4042;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7712_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7708_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4043;
                      DCOMPUTF16._IOwnership _out4044;
                      DCOMPUTF16.COMP.FromOwnership(r, _7709_recOwned, expectedOwnership, out _out4043, out _out4044);
                      r = _out4043;
                      resultingOwnership = _out4044;
                    } else {
                      RAST._IType _7713___mcc_h1167 = _source291.dtor_value;
                      RAST._IType _7714_v = _7713___mcc_h1167;
                      r = RAST.Expr.create_ConversionNum(_7714_v, _7708_recursiveGen);
                      RAST._IExpr _out4045;
                      DCOMPUTF16._IOwnership _out4046;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4045, out _out4046);
                      r = _out4045;
                      resultingOwnership = _out4046;
                    }
                    readIdents = _7710_recIdents;
                  } else {
                    RAST._IExpr _out4047;
                    DCOMPUTF16._IOwnership _out4048;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4049;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7707_b), _7707_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out4047, out _out4048, out _out4049);
                    r = _out4047;
                    resultingOwnership = _out4048;
                    readIdents = _out4049;
                  }
                }
              }
            } else if (_source289.is_Nullable) {
              DAST._IType _7715___mcc_h862 = _source289.dtor_Nullable_a0;
              {
                RAST._IExpr _7716_recursiveGen;
                DCOMPUTF16._IOwnership _7717_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7718_recIdents;
                RAST._IExpr _out4050;
                DCOMPUTF16._IOwnership _out4051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4052;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4050, out _out4051, out _out4052);
                _7716_recursiveGen = _out4050;
                _7717_recOwned = _out4051;
                _7718_recIdents = _out4052;
                Dafny.ISequence<Dafny.Rune> _7719_s;
                _7719_s = (_7716_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7717_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7719_s = Dafny.Sequence<Dafny.Rune>.Concat(_7719_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7719_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7719_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7719_s);
                RAST._IExpr _out4053;
                DCOMPUTF16._IOwnership _out4054;
                DCOMPUTF16.COMP.FromOwnership(r, _7717_recOwned, expectedOwnership, out _out4053, out _out4054);
                r = _out4053;
                resultingOwnership = _out4054;
                readIdents = _7718_recIdents;
              }
            } else if (_source289.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7720___mcc_h864 = _source289.dtor_Tuple_a0;
              {
                RAST._IExpr _7721_recursiveGen;
                DCOMPUTF16._IOwnership _7722_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7723_recIdents;
                RAST._IExpr _out4055;
                DCOMPUTF16._IOwnership _out4056;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4057;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4055, out _out4056, out _out4057);
                _7721_recursiveGen = _out4055;
                _7722_recOwned = _out4056;
                _7723_recIdents = _out4057;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7721_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4058;
                DCOMPUTF16._IOwnership _out4059;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4058, out _out4059);
                r = _out4058;
                resultingOwnership = _out4059;
                readIdents = _7723_recIdents;
              }
            } else if (_source289.is_Array) {
              DAST._IType _7724___mcc_h866 = _source289.dtor_element;
              BigInteger _7725___mcc_h867 = _source289.dtor_dims;
              {
                RAST._IExpr _7726_recursiveGen;
                DCOMPUTF16._IOwnership _7727_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7728_recIdents;
                RAST._IExpr _out4060;
                DCOMPUTF16._IOwnership _out4061;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4062;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4060, out _out4061, out _out4062);
                _7726_recursiveGen = _out4060;
                _7727_recOwned = _out4061;
                _7728_recIdents = _out4062;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7726_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4063;
                DCOMPUTF16._IOwnership _out4064;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4063, out _out4064);
                r = _out4063;
                resultingOwnership = _out4064;
                readIdents = _7728_recIdents;
              }
            } else if (_source289.is_Seq) {
              DAST._IType _7729___mcc_h870 = _source289.dtor_element;
              {
                RAST._IExpr _7730_recursiveGen;
                DCOMPUTF16._IOwnership _7731_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7732_recIdents;
                RAST._IExpr _out4065;
                DCOMPUTF16._IOwnership _out4066;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4067;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4065, out _out4066, out _out4067);
                _7730_recursiveGen = _out4065;
                _7731_recOwned = _out4066;
                _7732_recIdents = _out4067;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7730_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4068;
                DCOMPUTF16._IOwnership _out4069;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4068, out _out4069);
                r = _out4068;
                resultingOwnership = _out4069;
                readIdents = _7732_recIdents;
              }
            } else if (_source289.is_Set) {
              DAST._IType _7733___mcc_h872 = _source289.dtor_element;
              {
                RAST._IExpr _7734_recursiveGen;
                DCOMPUTF16._IOwnership _7735_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7736_recIdents;
                RAST._IExpr _out4070;
                DCOMPUTF16._IOwnership _out4071;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4072;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4070, out _out4071, out _out4072);
                _7734_recursiveGen = _out4070;
                _7735_recOwned = _out4071;
                _7736_recIdents = _out4072;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7734_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4073;
                DCOMPUTF16._IOwnership _out4074;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4073, out _out4074);
                r = _out4073;
                resultingOwnership = _out4074;
                readIdents = _7736_recIdents;
              }
            } else if (_source289.is_Multiset) {
              DAST._IType _7737___mcc_h874 = _source289.dtor_element;
              {
                RAST._IExpr _7738_recursiveGen;
                DCOMPUTF16._IOwnership _7739_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7740_recIdents;
                RAST._IExpr _out4075;
                DCOMPUTF16._IOwnership _out4076;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4077;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4075, out _out4076, out _out4077);
                _7738_recursiveGen = _out4075;
                _7739_recOwned = _out4076;
                _7740_recIdents = _out4077;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7738_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4078;
                DCOMPUTF16._IOwnership _out4079;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4078, out _out4079);
                r = _out4078;
                resultingOwnership = _out4079;
                readIdents = _7740_recIdents;
              }
            } else if (_source289.is_Map) {
              DAST._IType _7741___mcc_h876 = _source289.dtor_key;
              DAST._IType _7742___mcc_h877 = _source289.dtor_value;
              {
                RAST._IExpr _7743_recursiveGen;
                DCOMPUTF16._IOwnership _7744_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7745_recIdents;
                RAST._IExpr _out4080;
                DCOMPUTF16._IOwnership _out4081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4082;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4080, out _out4081, out _out4082);
                _7743_recursiveGen = _out4080;
                _7744_recOwned = _out4081;
                _7745_recIdents = _out4082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7743_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4083;
                DCOMPUTF16._IOwnership _out4084;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4083, out _out4084);
                r = _out4083;
                resultingOwnership = _out4084;
                readIdents = _7745_recIdents;
              }
            } else if (_source289.is_SetBuilder) {
              DAST._IType _7746___mcc_h880 = _source289.dtor_element;
              {
                RAST._IExpr _7747_recursiveGen;
                DCOMPUTF16._IOwnership _7748_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7749_recIdents;
                RAST._IExpr _out4085;
                DCOMPUTF16._IOwnership _out4086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4087;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4085, out _out4086, out _out4087);
                _7747_recursiveGen = _out4085;
                _7748_recOwned = _out4086;
                _7749_recIdents = _out4087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7747_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4088;
                DCOMPUTF16._IOwnership _out4089;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4088, out _out4089);
                r = _out4088;
                resultingOwnership = _out4089;
                readIdents = _7749_recIdents;
              }
            } else if (_source289.is_MapBuilder) {
              DAST._IType _7750___mcc_h882 = _source289.dtor_key;
              DAST._IType _7751___mcc_h883 = _source289.dtor_value;
              {
                RAST._IExpr _7752_recursiveGen;
                DCOMPUTF16._IOwnership _7753_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7754_recIdents;
                RAST._IExpr _out4090;
                DCOMPUTF16._IOwnership _out4091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4092;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4090, out _out4091, out _out4092);
                _7752_recursiveGen = _out4090;
                _7753_recOwned = _out4091;
                _7754_recIdents = _out4092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7752_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4093;
                DCOMPUTF16._IOwnership _out4094;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4093, out _out4094);
                r = _out4093;
                resultingOwnership = _out4094;
                readIdents = _7754_recIdents;
              }
            } else if (_source289.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7755___mcc_h886 = _source289.dtor_args;
              DAST._IType _7756___mcc_h887 = _source289.dtor_result;
              {
                RAST._IExpr _7757_recursiveGen;
                DCOMPUTF16._IOwnership _7758_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7759_recIdents;
                RAST._IExpr _out4095;
                DCOMPUTF16._IOwnership _out4096;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4097;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4095, out _out4096, out _out4097);
                _7757_recursiveGen = _out4095;
                _7758_recOwned = _out4096;
                _7759_recIdents = _out4097;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7757_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4098;
                DCOMPUTF16._IOwnership _out4099;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4098, out _out4099);
                r = _out4098;
                resultingOwnership = _out4099;
                readIdents = _7759_recIdents;
              }
            } else if (_source289.is_Primitive) {
              DAST._IPrimitive _7760___mcc_h890 = _source289.dtor_Primitive_a0;
              DAST._IPrimitive _source292 = _7760___mcc_h890;
              if (_source292.is_Int) {
                {
                  RAST._IExpr _7761_recursiveGen;
                  DCOMPUTF16._IOwnership _7762___v76;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7763_recIdents;
                  RAST._IExpr _out4100;
                  DCOMPUTF16._IOwnership _out4101;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4102;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4100, out _out4101, out _out4102);
                  _7761_recursiveGen = _out4100;
                  _7762___v76 = _out4101;
                  _7763_recIdents = _out4102;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_7761_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out4103;
                  DCOMPUTF16._IOwnership _out4104;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4103, out _out4104);
                  r = _out4103;
                  resultingOwnership = _out4104;
                  readIdents = _7763_recIdents;
                }
              } else if (_source292.is_Real) {
                {
                  RAST._IExpr _7764_recursiveGen;
                  DCOMPUTF16._IOwnership _7765_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7766_recIdents;
                  RAST._IExpr _out4105;
                  DCOMPUTF16._IOwnership _out4106;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4107;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4105, out _out4106, out _out4107);
                  _7764_recursiveGen = _out4105;
                  _7765_recOwned = _out4106;
                  _7766_recIdents = _out4107;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7764_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4108;
                  DCOMPUTF16._IOwnership _out4109;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4108, out _out4109);
                  r = _out4108;
                  resultingOwnership = _out4109;
                  readIdents = _7766_recIdents;
                }
              } else if (_source292.is_String) {
                {
                  RAST._IExpr _7767_recursiveGen;
                  DCOMPUTF16._IOwnership _7768_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7769_recIdents;
                  RAST._IExpr _out4110;
                  DCOMPUTF16._IOwnership _out4111;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4112;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4110, out _out4111, out _out4112);
                  _7767_recursiveGen = _out4110;
                  _7768_recOwned = _out4111;
                  _7769_recIdents = _out4112;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7767_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4113;
                  DCOMPUTF16._IOwnership _out4114;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4113, out _out4114);
                  r = _out4113;
                  resultingOwnership = _out4114;
                  readIdents = _7769_recIdents;
                }
              } else if (_source292.is_Bool) {
                {
                  RAST._IExpr _7770_recursiveGen;
                  DCOMPUTF16._IOwnership _7771_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7772_recIdents;
                  RAST._IExpr _out4115;
                  DCOMPUTF16._IOwnership _out4116;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4117;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4115, out _out4116, out _out4117);
                  _7770_recursiveGen = _out4115;
                  _7771_recOwned = _out4116;
                  _7772_recIdents = _out4117;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7770_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4118;
                  DCOMPUTF16._IOwnership _out4119;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4118, out _out4119);
                  r = _out4118;
                  resultingOwnership = _out4119;
                  readIdents = _7772_recIdents;
                }
              } else {
                {
                  RAST._IExpr _7773_recursiveGen;
                  DCOMPUTF16._IOwnership _7774_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7775_recIdents;
                  RAST._IExpr _out4120;
                  DCOMPUTF16._IOwnership _out4121;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4122;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4120, out _out4121, out _out4122);
                  _7773_recursiveGen = _out4120;
                  _7774_recOwned = _out4121;
                  _7775_recIdents = _out4122;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7773_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4123;
                  DCOMPUTF16._IOwnership _out4124;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4123, out _out4124);
                  r = _out4123;
                  resultingOwnership = _out4124;
                  readIdents = _7775_recIdents;
                }
              }
            } else if (_source289.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7776___mcc_h892 = _source289.dtor_Passthrough_a0;
              {
                RAST._IExpr _7777_recursiveGen;
                DCOMPUTF16._IOwnership _7778_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7779_recIdents;
                RAST._IExpr _out4125;
                DCOMPUTF16._IOwnership _out4126;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4127;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4125, out _out4126, out _out4127);
                _7777_recursiveGen = _out4125;
                _7778_recOwned = _out4126;
                _7779_recIdents = _out4127;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7777_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4128;
                DCOMPUTF16._IOwnership _out4129;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4128, out _out4129);
                r = _out4128;
                resultingOwnership = _out4129;
                readIdents = _7779_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7780___mcc_h894 = _source289.dtor_TypeArg_a0;
              {
                RAST._IExpr _7781_recursiveGen;
                DCOMPUTF16._IOwnership _7782_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7783_recIdents;
                RAST._IExpr _out4130;
                DCOMPUTF16._IOwnership _out4131;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4132;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4130, out _out4131, out _out4132);
                _7781_recursiveGen = _out4130;
                _7782_recOwned = _out4131;
                _7783_recIdents = _out4132;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7781_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4133;
                DCOMPUTF16._IOwnership _out4134;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4133, out _out4134);
                r = _out4133;
                resultingOwnership = _out4134;
                readIdents = _7783_recIdents;
              }
            }
          } else if (_source284.is_String) {
            DAST._IType _source293 = _6469___mcc_h1;
            if (_source293.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7784___mcc_h896 = _source293.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7785___mcc_h897 = _source293.dtor_typeArgs;
              DAST._IResolvedType _7786___mcc_h898 = _source293.dtor_resolved;
              DAST._IResolvedType _source294 = _7786___mcc_h898;
              if (_source294.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7787___mcc_h902 = _source294.dtor_path;
                {
                  RAST._IExpr _7788_recursiveGen;
                  DCOMPUTF16._IOwnership _7789_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7790_recIdents;
                  RAST._IExpr _out4135;
                  DCOMPUTF16._IOwnership _out4136;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4137;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4135, out _out4136, out _out4137);
                  _7788_recursiveGen = _out4135;
                  _7789_recOwned = _out4136;
                  _7790_recIdents = _out4137;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7788_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4138;
                  DCOMPUTF16._IOwnership _out4139;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4138, out _out4139);
                  r = _out4138;
                  resultingOwnership = _out4139;
                  readIdents = _7790_recIdents;
                }
              } else if (_source294.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7791___mcc_h904 = _source294.dtor_path;
                {
                  RAST._IExpr _7792_recursiveGen;
                  DCOMPUTF16._IOwnership _7793_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7794_recIdents;
                  RAST._IExpr _out4140;
                  DCOMPUTF16._IOwnership _out4141;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4142;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4140, out _out4141, out _out4142);
                  _7792_recursiveGen = _out4140;
                  _7793_recOwned = _out4141;
                  _7794_recIdents = _out4142;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7792_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4143;
                  DCOMPUTF16._IOwnership _out4144;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4143, out _out4144);
                  r = _out4143;
                  resultingOwnership = _out4144;
                  readIdents = _7794_recIdents;
                }
              } else {
                DAST._IType _7795___mcc_h906 = _source294.dtor_baseType;
                DAST._INewtypeRange _7796___mcc_h907 = _source294.dtor_range;
                bool _7797___mcc_h908 = _source294.dtor_erase;
                bool _7798_erase = _7797___mcc_h908;
                DAST._INewtypeRange _7799_range = _7796___mcc_h907;
                DAST._IType _7800_b = _7795___mcc_h906;
                {
                  if (object.Equals(_6463_fromTpe, _7800_b)) {
                    RAST._IExpr _7801_recursiveGen;
                    DCOMPUTF16._IOwnership _7802_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7803_recIdents;
                    RAST._IExpr _out4145;
                    DCOMPUTF16._IOwnership _out4146;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4147;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4145, out _out4146, out _out4147);
                    _7801_recursiveGen = _out4145;
                    _7802_recOwned = _out4146;
                    _7803_recIdents = _out4147;
                    Std.Wrappers._IOption<RAST._IType> _7804_potentialRhsType;
                    _7804_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7800_b, _7799_range);
                    Std.Wrappers._IOption<RAST._IType> _source295 = _7804_potentialRhsType;
                    if (_source295.is_None) {
                      if (_7798_erase) {
                        r = _7801_recursiveGen;
                      } else {
                        RAST._IType _7805_rhsType;
                        RAST._IType _out4148;
                        _out4148 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _7805_rhsType = _out4148;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7805_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7801_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4149;
                      DCOMPUTF16._IOwnership _out4150;
                      DCOMPUTF16.COMP.FromOwnership(r, _7802_recOwned, expectedOwnership, out _out4149, out _out4150);
                      r = _out4149;
                      resultingOwnership = _out4150;
                    } else {
                      RAST._IType _7806___mcc_h1168 = _source295.dtor_value;
                      RAST._IType _7807_v = _7806___mcc_h1168;
                      r = RAST.Expr.create_ConversionNum(_7807_v, _7801_recursiveGen);
                      RAST._IExpr _out4151;
                      DCOMPUTF16._IOwnership _out4152;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4151, out _out4152);
                      r = _out4151;
                      resultingOwnership = _out4152;
                    }
                    readIdents = _7803_recIdents;
                  } else {
                    RAST._IExpr _out4153;
                    DCOMPUTF16._IOwnership _out4154;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4155;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7800_b), _7800_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out4153, out _out4154, out _out4155);
                    r = _out4153;
                    resultingOwnership = _out4154;
                    readIdents = _out4155;
                  }
                }
              }
            } else if (_source293.is_Nullable) {
              DAST._IType _7808___mcc_h912 = _source293.dtor_Nullable_a0;
              {
                RAST._IExpr _7809_recursiveGen;
                DCOMPUTF16._IOwnership _7810_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7811_recIdents;
                RAST._IExpr _out4156;
                DCOMPUTF16._IOwnership _out4157;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4158;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4156, out _out4157, out _out4158);
                _7809_recursiveGen = _out4156;
                _7810_recOwned = _out4157;
                _7811_recIdents = _out4158;
                Dafny.ISequence<Dafny.Rune> _7812_s;
                _7812_s = (_7809_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7810_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7812_s = Dafny.Sequence<Dafny.Rune>.Concat(_7812_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7812_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7812_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7812_s);
                RAST._IExpr _out4159;
                DCOMPUTF16._IOwnership _out4160;
                DCOMPUTF16.COMP.FromOwnership(r, _7810_recOwned, expectedOwnership, out _out4159, out _out4160);
                r = _out4159;
                resultingOwnership = _out4160;
                readIdents = _7811_recIdents;
              }
            } else if (_source293.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7813___mcc_h914 = _source293.dtor_Tuple_a0;
              {
                RAST._IExpr _7814_recursiveGen;
                DCOMPUTF16._IOwnership _7815_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7816_recIdents;
                RAST._IExpr _out4161;
                DCOMPUTF16._IOwnership _out4162;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4163;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4161, out _out4162, out _out4163);
                _7814_recursiveGen = _out4161;
                _7815_recOwned = _out4162;
                _7816_recIdents = _out4163;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7814_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4164;
                DCOMPUTF16._IOwnership _out4165;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4164, out _out4165);
                r = _out4164;
                resultingOwnership = _out4165;
                readIdents = _7816_recIdents;
              }
            } else if (_source293.is_Array) {
              DAST._IType _7817___mcc_h916 = _source293.dtor_element;
              BigInteger _7818___mcc_h917 = _source293.dtor_dims;
              {
                RAST._IExpr _7819_recursiveGen;
                DCOMPUTF16._IOwnership _7820_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7821_recIdents;
                RAST._IExpr _out4166;
                DCOMPUTF16._IOwnership _out4167;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4168;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4166, out _out4167, out _out4168);
                _7819_recursiveGen = _out4166;
                _7820_recOwned = _out4167;
                _7821_recIdents = _out4168;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7819_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4169;
                DCOMPUTF16._IOwnership _out4170;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4169, out _out4170);
                r = _out4169;
                resultingOwnership = _out4170;
                readIdents = _7821_recIdents;
              }
            } else if (_source293.is_Seq) {
              DAST._IType _7822___mcc_h920 = _source293.dtor_element;
              {
                RAST._IExpr _7823_recursiveGen;
                DCOMPUTF16._IOwnership _7824_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7825_recIdents;
                RAST._IExpr _out4171;
                DCOMPUTF16._IOwnership _out4172;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4173;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4171, out _out4172, out _out4173);
                _7823_recursiveGen = _out4171;
                _7824_recOwned = _out4172;
                _7825_recIdents = _out4173;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7823_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4174;
                DCOMPUTF16._IOwnership _out4175;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4174, out _out4175);
                r = _out4174;
                resultingOwnership = _out4175;
                readIdents = _7825_recIdents;
              }
            } else if (_source293.is_Set) {
              DAST._IType _7826___mcc_h922 = _source293.dtor_element;
              {
                RAST._IExpr _7827_recursiveGen;
                DCOMPUTF16._IOwnership _7828_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7829_recIdents;
                RAST._IExpr _out4176;
                DCOMPUTF16._IOwnership _out4177;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4178;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4176, out _out4177, out _out4178);
                _7827_recursiveGen = _out4176;
                _7828_recOwned = _out4177;
                _7829_recIdents = _out4178;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7827_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4179;
                DCOMPUTF16._IOwnership _out4180;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4179, out _out4180);
                r = _out4179;
                resultingOwnership = _out4180;
                readIdents = _7829_recIdents;
              }
            } else if (_source293.is_Multiset) {
              DAST._IType _7830___mcc_h924 = _source293.dtor_element;
              {
                RAST._IExpr _7831_recursiveGen;
                DCOMPUTF16._IOwnership _7832_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7833_recIdents;
                RAST._IExpr _out4181;
                DCOMPUTF16._IOwnership _out4182;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4183;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4181, out _out4182, out _out4183);
                _7831_recursiveGen = _out4181;
                _7832_recOwned = _out4182;
                _7833_recIdents = _out4183;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7831_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4184;
                DCOMPUTF16._IOwnership _out4185;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4184, out _out4185);
                r = _out4184;
                resultingOwnership = _out4185;
                readIdents = _7833_recIdents;
              }
            } else if (_source293.is_Map) {
              DAST._IType _7834___mcc_h926 = _source293.dtor_key;
              DAST._IType _7835___mcc_h927 = _source293.dtor_value;
              {
                RAST._IExpr _7836_recursiveGen;
                DCOMPUTF16._IOwnership _7837_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7838_recIdents;
                RAST._IExpr _out4186;
                DCOMPUTF16._IOwnership _out4187;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4188;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4186, out _out4187, out _out4188);
                _7836_recursiveGen = _out4186;
                _7837_recOwned = _out4187;
                _7838_recIdents = _out4188;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7836_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4189;
                DCOMPUTF16._IOwnership _out4190;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4189, out _out4190);
                r = _out4189;
                resultingOwnership = _out4190;
                readIdents = _7838_recIdents;
              }
            } else if (_source293.is_SetBuilder) {
              DAST._IType _7839___mcc_h930 = _source293.dtor_element;
              {
                RAST._IExpr _7840_recursiveGen;
                DCOMPUTF16._IOwnership _7841_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7842_recIdents;
                RAST._IExpr _out4191;
                DCOMPUTF16._IOwnership _out4192;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4193;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4191, out _out4192, out _out4193);
                _7840_recursiveGen = _out4191;
                _7841_recOwned = _out4192;
                _7842_recIdents = _out4193;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7840_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4194;
                DCOMPUTF16._IOwnership _out4195;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4194, out _out4195);
                r = _out4194;
                resultingOwnership = _out4195;
                readIdents = _7842_recIdents;
              }
            } else if (_source293.is_MapBuilder) {
              DAST._IType _7843___mcc_h932 = _source293.dtor_key;
              DAST._IType _7844___mcc_h933 = _source293.dtor_value;
              {
                RAST._IExpr _7845_recursiveGen;
                DCOMPUTF16._IOwnership _7846_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7847_recIdents;
                RAST._IExpr _out4196;
                DCOMPUTF16._IOwnership _out4197;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4198;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4196, out _out4197, out _out4198);
                _7845_recursiveGen = _out4196;
                _7846_recOwned = _out4197;
                _7847_recIdents = _out4198;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7845_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4199;
                DCOMPUTF16._IOwnership _out4200;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4199, out _out4200);
                r = _out4199;
                resultingOwnership = _out4200;
                readIdents = _7847_recIdents;
              }
            } else if (_source293.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7848___mcc_h936 = _source293.dtor_args;
              DAST._IType _7849___mcc_h937 = _source293.dtor_result;
              {
                RAST._IExpr _7850_recursiveGen;
                DCOMPUTF16._IOwnership _7851_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7852_recIdents;
                RAST._IExpr _out4201;
                DCOMPUTF16._IOwnership _out4202;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4203;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4201, out _out4202, out _out4203);
                _7850_recursiveGen = _out4201;
                _7851_recOwned = _out4202;
                _7852_recIdents = _out4203;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7850_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4204;
                DCOMPUTF16._IOwnership _out4205;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4204, out _out4205);
                r = _out4204;
                resultingOwnership = _out4205;
                readIdents = _7852_recIdents;
              }
            } else if (_source293.is_Primitive) {
              DAST._IPrimitive _7853___mcc_h940 = _source293.dtor_Primitive_a0;
              {
                RAST._IExpr _7854_recursiveGen;
                DCOMPUTF16._IOwnership _7855_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7856_recIdents;
                RAST._IExpr _out4206;
                DCOMPUTF16._IOwnership _out4207;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4208;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4206, out _out4207, out _out4208);
                _7854_recursiveGen = _out4206;
                _7855_recOwned = _out4207;
                _7856_recIdents = _out4208;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7854_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4209;
                DCOMPUTF16._IOwnership _out4210;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4209, out _out4210);
                r = _out4209;
                resultingOwnership = _out4210;
                readIdents = _7856_recIdents;
              }
            } else if (_source293.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7857___mcc_h942 = _source293.dtor_Passthrough_a0;
              {
                RAST._IExpr _7858_recursiveGen;
                DCOMPUTF16._IOwnership _7859_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7860_recIdents;
                RAST._IExpr _out4211;
                DCOMPUTF16._IOwnership _out4212;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4213;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4211, out _out4212, out _out4213);
                _7858_recursiveGen = _out4211;
                _7859_recOwned = _out4212;
                _7860_recIdents = _out4213;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7858_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4214;
                DCOMPUTF16._IOwnership _out4215;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4214, out _out4215);
                r = _out4214;
                resultingOwnership = _out4215;
                readIdents = _7860_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7861___mcc_h944 = _source293.dtor_TypeArg_a0;
              {
                RAST._IExpr _7862_recursiveGen;
                DCOMPUTF16._IOwnership _7863_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7864_recIdents;
                RAST._IExpr _out4216;
                DCOMPUTF16._IOwnership _out4217;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4218;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4216, out _out4217, out _out4218);
                _7862_recursiveGen = _out4216;
                _7863_recOwned = _out4217;
                _7864_recIdents = _out4218;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7862_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4219;
                DCOMPUTF16._IOwnership _out4220;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4219, out _out4220);
                r = _out4219;
                resultingOwnership = _out4220;
                readIdents = _7864_recIdents;
              }
            }
          } else if (_source284.is_Bool) {
            DAST._IType _source296 = _6469___mcc_h1;
            if (_source296.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7865___mcc_h946 = _source296.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7866___mcc_h947 = _source296.dtor_typeArgs;
              DAST._IResolvedType _7867___mcc_h948 = _source296.dtor_resolved;
              DAST._IResolvedType _source297 = _7867___mcc_h948;
              if (_source297.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7868___mcc_h952 = _source297.dtor_path;
                {
                  RAST._IExpr _7869_recursiveGen;
                  DCOMPUTF16._IOwnership _7870_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7871_recIdents;
                  RAST._IExpr _out4221;
                  DCOMPUTF16._IOwnership _out4222;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4223;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4221, out _out4222, out _out4223);
                  _7869_recursiveGen = _out4221;
                  _7870_recOwned = _out4222;
                  _7871_recIdents = _out4223;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7869_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4224;
                  DCOMPUTF16._IOwnership _out4225;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4224, out _out4225);
                  r = _out4224;
                  resultingOwnership = _out4225;
                  readIdents = _7871_recIdents;
                }
              } else if (_source297.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7872___mcc_h954 = _source297.dtor_path;
                {
                  RAST._IExpr _7873_recursiveGen;
                  DCOMPUTF16._IOwnership _7874_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7875_recIdents;
                  RAST._IExpr _out4226;
                  DCOMPUTF16._IOwnership _out4227;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4228;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4226, out _out4227, out _out4228);
                  _7873_recursiveGen = _out4226;
                  _7874_recOwned = _out4227;
                  _7875_recIdents = _out4228;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7873_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4229;
                  DCOMPUTF16._IOwnership _out4230;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4229, out _out4230);
                  r = _out4229;
                  resultingOwnership = _out4230;
                  readIdents = _7875_recIdents;
                }
              } else {
                DAST._IType _7876___mcc_h956 = _source297.dtor_baseType;
                DAST._INewtypeRange _7877___mcc_h957 = _source297.dtor_range;
                bool _7878___mcc_h958 = _source297.dtor_erase;
                bool _7879_erase = _7878___mcc_h958;
                DAST._INewtypeRange _7880_range = _7877___mcc_h957;
                DAST._IType _7881_b = _7876___mcc_h956;
                {
                  if (object.Equals(_6463_fromTpe, _7881_b)) {
                    RAST._IExpr _7882_recursiveGen;
                    DCOMPUTF16._IOwnership _7883_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7884_recIdents;
                    RAST._IExpr _out4231;
                    DCOMPUTF16._IOwnership _out4232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4233;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4231, out _out4232, out _out4233);
                    _7882_recursiveGen = _out4231;
                    _7883_recOwned = _out4232;
                    _7884_recIdents = _out4233;
                    Std.Wrappers._IOption<RAST._IType> _7885_potentialRhsType;
                    _7885_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7881_b, _7880_range);
                    Std.Wrappers._IOption<RAST._IType> _source298 = _7885_potentialRhsType;
                    if (_source298.is_None) {
                      if (_7879_erase) {
                        r = _7882_recursiveGen;
                      } else {
                        RAST._IType _7886_rhsType;
                        RAST._IType _out4234;
                        _out4234 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _7886_rhsType = _out4234;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7886_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7882_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4235;
                      DCOMPUTF16._IOwnership _out4236;
                      DCOMPUTF16.COMP.FromOwnership(r, _7883_recOwned, expectedOwnership, out _out4235, out _out4236);
                      r = _out4235;
                      resultingOwnership = _out4236;
                    } else {
                      RAST._IType _7887___mcc_h1169 = _source298.dtor_value;
                      RAST._IType _7888_v = _7887___mcc_h1169;
                      r = RAST.Expr.create_ConversionNum(_7888_v, _7882_recursiveGen);
                      RAST._IExpr _out4237;
                      DCOMPUTF16._IOwnership _out4238;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4237, out _out4238);
                      r = _out4237;
                      resultingOwnership = _out4238;
                    }
                    readIdents = _7884_recIdents;
                  } else {
                    RAST._IExpr _out4239;
                    DCOMPUTF16._IOwnership _out4240;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4241;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7881_b), _7881_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out4239, out _out4240, out _out4241);
                    r = _out4239;
                    resultingOwnership = _out4240;
                    readIdents = _out4241;
                  }
                }
              }
            } else if (_source296.is_Nullable) {
              DAST._IType _7889___mcc_h962 = _source296.dtor_Nullable_a0;
              {
                RAST._IExpr _7890_recursiveGen;
                DCOMPUTF16._IOwnership _7891_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7892_recIdents;
                RAST._IExpr _out4242;
                DCOMPUTF16._IOwnership _out4243;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4244;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4242, out _out4243, out _out4244);
                _7890_recursiveGen = _out4242;
                _7891_recOwned = _out4243;
                _7892_recIdents = _out4244;
                Dafny.ISequence<Dafny.Rune> _7893_s;
                _7893_s = (_7890_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7891_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7893_s = Dafny.Sequence<Dafny.Rune>.Concat(_7893_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7893_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7893_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7893_s);
                RAST._IExpr _out4245;
                DCOMPUTF16._IOwnership _out4246;
                DCOMPUTF16.COMP.FromOwnership(r, _7891_recOwned, expectedOwnership, out _out4245, out _out4246);
                r = _out4245;
                resultingOwnership = _out4246;
                readIdents = _7892_recIdents;
              }
            } else if (_source296.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7894___mcc_h964 = _source296.dtor_Tuple_a0;
              {
                RAST._IExpr _7895_recursiveGen;
                DCOMPUTF16._IOwnership _7896_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7897_recIdents;
                RAST._IExpr _out4247;
                DCOMPUTF16._IOwnership _out4248;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4249;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4247, out _out4248, out _out4249);
                _7895_recursiveGen = _out4247;
                _7896_recOwned = _out4248;
                _7897_recIdents = _out4249;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7895_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4250;
                DCOMPUTF16._IOwnership _out4251;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4250, out _out4251);
                r = _out4250;
                resultingOwnership = _out4251;
                readIdents = _7897_recIdents;
              }
            } else if (_source296.is_Array) {
              DAST._IType _7898___mcc_h966 = _source296.dtor_element;
              BigInteger _7899___mcc_h967 = _source296.dtor_dims;
              {
                RAST._IExpr _7900_recursiveGen;
                DCOMPUTF16._IOwnership _7901_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7902_recIdents;
                RAST._IExpr _out4252;
                DCOMPUTF16._IOwnership _out4253;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4254;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4252, out _out4253, out _out4254);
                _7900_recursiveGen = _out4252;
                _7901_recOwned = _out4253;
                _7902_recIdents = _out4254;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7900_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4255;
                DCOMPUTF16._IOwnership _out4256;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4255, out _out4256);
                r = _out4255;
                resultingOwnership = _out4256;
                readIdents = _7902_recIdents;
              }
            } else if (_source296.is_Seq) {
              DAST._IType _7903___mcc_h970 = _source296.dtor_element;
              {
                RAST._IExpr _7904_recursiveGen;
                DCOMPUTF16._IOwnership _7905_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7906_recIdents;
                RAST._IExpr _out4257;
                DCOMPUTF16._IOwnership _out4258;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4259;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4257, out _out4258, out _out4259);
                _7904_recursiveGen = _out4257;
                _7905_recOwned = _out4258;
                _7906_recIdents = _out4259;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7904_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4260;
                DCOMPUTF16._IOwnership _out4261;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4260, out _out4261);
                r = _out4260;
                resultingOwnership = _out4261;
                readIdents = _7906_recIdents;
              }
            } else if (_source296.is_Set) {
              DAST._IType _7907___mcc_h972 = _source296.dtor_element;
              {
                RAST._IExpr _7908_recursiveGen;
                DCOMPUTF16._IOwnership _7909_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7910_recIdents;
                RAST._IExpr _out4262;
                DCOMPUTF16._IOwnership _out4263;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4264;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4262, out _out4263, out _out4264);
                _7908_recursiveGen = _out4262;
                _7909_recOwned = _out4263;
                _7910_recIdents = _out4264;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7908_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4265;
                DCOMPUTF16._IOwnership _out4266;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4265, out _out4266);
                r = _out4265;
                resultingOwnership = _out4266;
                readIdents = _7910_recIdents;
              }
            } else if (_source296.is_Multiset) {
              DAST._IType _7911___mcc_h974 = _source296.dtor_element;
              {
                RAST._IExpr _7912_recursiveGen;
                DCOMPUTF16._IOwnership _7913_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7914_recIdents;
                RAST._IExpr _out4267;
                DCOMPUTF16._IOwnership _out4268;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4269;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4267, out _out4268, out _out4269);
                _7912_recursiveGen = _out4267;
                _7913_recOwned = _out4268;
                _7914_recIdents = _out4269;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7912_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4270;
                DCOMPUTF16._IOwnership _out4271;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4270, out _out4271);
                r = _out4270;
                resultingOwnership = _out4271;
                readIdents = _7914_recIdents;
              }
            } else if (_source296.is_Map) {
              DAST._IType _7915___mcc_h976 = _source296.dtor_key;
              DAST._IType _7916___mcc_h977 = _source296.dtor_value;
              {
                RAST._IExpr _7917_recursiveGen;
                DCOMPUTF16._IOwnership _7918_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7919_recIdents;
                RAST._IExpr _out4272;
                DCOMPUTF16._IOwnership _out4273;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4274;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4272, out _out4273, out _out4274);
                _7917_recursiveGen = _out4272;
                _7918_recOwned = _out4273;
                _7919_recIdents = _out4274;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7917_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4275;
                DCOMPUTF16._IOwnership _out4276;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4275, out _out4276);
                r = _out4275;
                resultingOwnership = _out4276;
                readIdents = _7919_recIdents;
              }
            } else if (_source296.is_SetBuilder) {
              DAST._IType _7920___mcc_h980 = _source296.dtor_element;
              {
                RAST._IExpr _7921_recursiveGen;
                DCOMPUTF16._IOwnership _7922_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7923_recIdents;
                RAST._IExpr _out4277;
                DCOMPUTF16._IOwnership _out4278;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4279;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4277, out _out4278, out _out4279);
                _7921_recursiveGen = _out4277;
                _7922_recOwned = _out4278;
                _7923_recIdents = _out4279;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7921_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4280;
                DCOMPUTF16._IOwnership _out4281;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4280, out _out4281);
                r = _out4280;
                resultingOwnership = _out4281;
                readIdents = _7923_recIdents;
              }
            } else if (_source296.is_MapBuilder) {
              DAST._IType _7924___mcc_h982 = _source296.dtor_key;
              DAST._IType _7925___mcc_h983 = _source296.dtor_value;
              {
                RAST._IExpr _7926_recursiveGen;
                DCOMPUTF16._IOwnership _7927_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7928_recIdents;
                RAST._IExpr _out4282;
                DCOMPUTF16._IOwnership _out4283;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4284;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4282, out _out4283, out _out4284);
                _7926_recursiveGen = _out4282;
                _7927_recOwned = _out4283;
                _7928_recIdents = _out4284;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7926_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4285;
                DCOMPUTF16._IOwnership _out4286;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4285, out _out4286);
                r = _out4285;
                resultingOwnership = _out4286;
                readIdents = _7928_recIdents;
              }
            } else if (_source296.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7929___mcc_h986 = _source296.dtor_args;
              DAST._IType _7930___mcc_h987 = _source296.dtor_result;
              {
                RAST._IExpr _7931_recursiveGen;
                DCOMPUTF16._IOwnership _7932_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7933_recIdents;
                RAST._IExpr _out4287;
                DCOMPUTF16._IOwnership _out4288;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4289;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4287, out _out4288, out _out4289);
                _7931_recursiveGen = _out4287;
                _7932_recOwned = _out4288;
                _7933_recIdents = _out4289;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7931_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4290;
                DCOMPUTF16._IOwnership _out4291;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4290, out _out4291);
                r = _out4290;
                resultingOwnership = _out4291;
                readIdents = _7933_recIdents;
              }
            } else if (_source296.is_Primitive) {
              DAST._IPrimitive _7934___mcc_h990 = _source296.dtor_Primitive_a0;
              {
                RAST._IExpr _7935_recursiveGen;
                DCOMPUTF16._IOwnership _7936_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7937_recIdents;
                RAST._IExpr _out4292;
                DCOMPUTF16._IOwnership _out4293;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4294;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4292, out _out4293, out _out4294);
                _7935_recursiveGen = _out4292;
                _7936_recOwned = _out4293;
                _7937_recIdents = _out4294;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7935_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4295;
                DCOMPUTF16._IOwnership _out4296;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4295, out _out4296);
                r = _out4295;
                resultingOwnership = _out4296;
                readIdents = _7937_recIdents;
              }
            } else if (_source296.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7938___mcc_h992 = _source296.dtor_Passthrough_a0;
              {
                RAST._IExpr _7939_recursiveGen;
                DCOMPUTF16._IOwnership _7940_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7941_recIdents;
                RAST._IExpr _out4297;
                DCOMPUTF16._IOwnership _out4298;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4299;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4297, out _out4298, out _out4299);
                _7939_recursiveGen = _out4297;
                _7940_recOwned = _out4298;
                _7941_recIdents = _out4299;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7939_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4300;
                DCOMPUTF16._IOwnership _out4301;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4300, out _out4301);
                r = _out4300;
                resultingOwnership = _out4301;
                readIdents = _7941_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7942___mcc_h994 = _source296.dtor_TypeArg_a0;
              {
                RAST._IExpr _7943_recursiveGen;
                DCOMPUTF16._IOwnership _7944_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7945_recIdents;
                RAST._IExpr _out4302;
                DCOMPUTF16._IOwnership _out4303;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4304;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4302, out _out4303, out _out4304);
                _7943_recursiveGen = _out4302;
                _7944_recOwned = _out4303;
                _7945_recIdents = _out4304;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7943_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4305;
                DCOMPUTF16._IOwnership _out4306;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4305, out _out4306);
                r = _out4305;
                resultingOwnership = _out4306;
                readIdents = _7945_recIdents;
              }
            }
          } else {
            DAST._IType _source299 = _6469___mcc_h1;
            if (_source299.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7946___mcc_h996 = _source299.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7947___mcc_h997 = _source299.dtor_typeArgs;
              DAST._IResolvedType _7948___mcc_h998 = _source299.dtor_resolved;
              DAST._IResolvedType _source300 = _7948___mcc_h998;
              if (_source300.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7949___mcc_h1002 = _source300.dtor_path;
                {
                  RAST._IExpr _7950_recursiveGen;
                  DCOMPUTF16._IOwnership _7951_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7952_recIdents;
                  RAST._IExpr _out4307;
                  DCOMPUTF16._IOwnership _out4308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4309;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4307, out _out4308, out _out4309);
                  _7950_recursiveGen = _out4307;
                  _7951_recOwned = _out4308;
                  _7952_recIdents = _out4309;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7950_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4310;
                  DCOMPUTF16._IOwnership _out4311;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4310, out _out4311);
                  r = _out4310;
                  resultingOwnership = _out4311;
                  readIdents = _7952_recIdents;
                }
              } else if (_source300.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7953___mcc_h1004 = _source300.dtor_path;
                {
                  RAST._IExpr _7954_recursiveGen;
                  DCOMPUTF16._IOwnership _7955_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7956_recIdents;
                  RAST._IExpr _out4312;
                  DCOMPUTF16._IOwnership _out4313;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4314;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4312, out _out4313, out _out4314);
                  _7954_recursiveGen = _out4312;
                  _7955_recOwned = _out4313;
                  _7956_recIdents = _out4314;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7954_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4315;
                  DCOMPUTF16._IOwnership _out4316;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4315, out _out4316);
                  r = _out4315;
                  resultingOwnership = _out4316;
                  readIdents = _7956_recIdents;
                }
              } else {
                DAST._IType _7957___mcc_h1006 = _source300.dtor_baseType;
                DAST._INewtypeRange _7958___mcc_h1007 = _source300.dtor_range;
                bool _7959___mcc_h1008 = _source300.dtor_erase;
                bool _7960_erase = _7959___mcc_h1008;
                DAST._INewtypeRange _7961_range = _7958___mcc_h1007;
                DAST._IType _7962_b = _7957___mcc_h1006;
                {
                  if (object.Equals(_6463_fromTpe, _7962_b)) {
                    RAST._IExpr _7963_recursiveGen;
                    DCOMPUTF16._IOwnership _7964_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7965_recIdents;
                    RAST._IExpr _out4317;
                    DCOMPUTF16._IOwnership _out4318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4319;
                    DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4317, out _out4318, out _out4319);
                    _7963_recursiveGen = _out4317;
                    _7964_recOwned = _out4318;
                    _7965_recIdents = _out4319;
                    Std.Wrappers._IOption<RAST._IType> _7966_potentialRhsType;
                    _7966_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7962_b, _7961_range);
                    Std.Wrappers._IOption<RAST._IType> _source301 = _7966_potentialRhsType;
                    if (_source301.is_None) {
                      if (_7960_erase) {
                        r = _7963_recursiveGen;
                      } else {
                        RAST._IType _7967_rhsType;
                        RAST._IType _out4320;
                        _out4320 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                        _7967_rhsType = _out4320;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7967_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7963_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4321;
                      DCOMPUTF16._IOwnership _out4322;
                      DCOMPUTF16.COMP.FromOwnership(r, _7964_recOwned, expectedOwnership, out _out4321, out _out4322);
                      r = _out4321;
                      resultingOwnership = _out4322;
                    } else {
                      RAST._IType _7968___mcc_h1170 = _source301.dtor_value;
                      RAST._IType _7969_v = _7968___mcc_h1170;
                      r = RAST.Expr.create_ConversionNum(_7969_v, _7963_recursiveGen);
                      RAST._IExpr _out4323;
                      DCOMPUTF16._IOwnership _out4324;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4323, out _out4324);
                      r = _out4323;
                      resultingOwnership = _out4324;
                    }
                    readIdents = _7965_recIdents;
                  } else {
                    RAST._IExpr _out4325;
                    DCOMPUTF16._IOwnership _out4326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4327;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _7962_b), _7962_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out4325, out _out4326, out _out4327);
                    r = _out4325;
                    resultingOwnership = _out4326;
                    readIdents = _out4327;
                  }
                }
              }
            } else if (_source299.is_Nullable) {
              DAST._IType _7970___mcc_h1012 = _source299.dtor_Nullable_a0;
              {
                RAST._IExpr _7971_recursiveGen;
                DCOMPUTF16._IOwnership _7972_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7973_recIdents;
                RAST._IExpr _out4328;
                DCOMPUTF16._IOwnership _out4329;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4330;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4328, out _out4329, out _out4330);
                _7971_recursiveGen = _out4328;
                _7972_recOwned = _out4329;
                _7973_recIdents = _out4330;
                Dafny.ISequence<Dafny.Rune> _7974_s;
                _7974_s = (_7971_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7972_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7974_s = Dafny.Sequence<Dafny.Rune>.Concat(_7974_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7974_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7974_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7974_s);
                RAST._IExpr _out4331;
                DCOMPUTF16._IOwnership _out4332;
                DCOMPUTF16.COMP.FromOwnership(r, _7972_recOwned, expectedOwnership, out _out4331, out _out4332);
                r = _out4331;
                resultingOwnership = _out4332;
                readIdents = _7973_recIdents;
              }
            } else if (_source299.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7975___mcc_h1014 = _source299.dtor_Tuple_a0;
              {
                RAST._IExpr _7976_recursiveGen;
                DCOMPUTF16._IOwnership _7977_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7978_recIdents;
                RAST._IExpr _out4333;
                DCOMPUTF16._IOwnership _out4334;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4335;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4333, out _out4334, out _out4335);
                _7976_recursiveGen = _out4333;
                _7977_recOwned = _out4334;
                _7978_recIdents = _out4335;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7976_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4336;
                DCOMPUTF16._IOwnership _out4337;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4336, out _out4337);
                r = _out4336;
                resultingOwnership = _out4337;
                readIdents = _7978_recIdents;
              }
            } else if (_source299.is_Array) {
              DAST._IType _7979___mcc_h1016 = _source299.dtor_element;
              BigInteger _7980___mcc_h1017 = _source299.dtor_dims;
              {
                RAST._IExpr _7981_recursiveGen;
                DCOMPUTF16._IOwnership _7982_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7983_recIdents;
                RAST._IExpr _out4338;
                DCOMPUTF16._IOwnership _out4339;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4340;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4338, out _out4339, out _out4340);
                _7981_recursiveGen = _out4338;
                _7982_recOwned = _out4339;
                _7983_recIdents = _out4340;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7981_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4341;
                DCOMPUTF16._IOwnership _out4342;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4341, out _out4342);
                r = _out4341;
                resultingOwnership = _out4342;
                readIdents = _7983_recIdents;
              }
            } else if (_source299.is_Seq) {
              DAST._IType _7984___mcc_h1020 = _source299.dtor_element;
              {
                RAST._IExpr _7985_recursiveGen;
                DCOMPUTF16._IOwnership _7986_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7987_recIdents;
                RAST._IExpr _out4343;
                DCOMPUTF16._IOwnership _out4344;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4345;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4343, out _out4344, out _out4345);
                _7985_recursiveGen = _out4343;
                _7986_recOwned = _out4344;
                _7987_recIdents = _out4345;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7985_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4346;
                DCOMPUTF16._IOwnership _out4347;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4346, out _out4347);
                r = _out4346;
                resultingOwnership = _out4347;
                readIdents = _7987_recIdents;
              }
            } else if (_source299.is_Set) {
              DAST._IType _7988___mcc_h1022 = _source299.dtor_element;
              {
                RAST._IExpr _7989_recursiveGen;
                DCOMPUTF16._IOwnership _7990_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7991_recIdents;
                RAST._IExpr _out4348;
                DCOMPUTF16._IOwnership _out4349;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4350;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4348, out _out4349, out _out4350);
                _7989_recursiveGen = _out4348;
                _7990_recOwned = _out4349;
                _7991_recIdents = _out4350;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7989_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4351;
                DCOMPUTF16._IOwnership _out4352;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4351, out _out4352);
                r = _out4351;
                resultingOwnership = _out4352;
                readIdents = _7991_recIdents;
              }
            } else if (_source299.is_Multiset) {
              DAST._IType _7992___mcc_h1024 = _source299.dtor_element;
              {
                RAST._IExpr _7993_recursiveGen;
                DCOMPUTF16._IOwnership _7994_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7995_recIdents;
                RAST._IExpr _out4353;
                DCOMPUTF16._IOwnership _out4354;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4355;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4353, out _out4354, out _out4355);
                _7993_recursiveGen = _out4353;
                _7994_recOwned = _out4354;
                _7995_recIdents = _out4355;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7993_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4356;
                DCOMPUTF16._IOwnership _out4357;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4356, out _out4357);
                r = _out4356;
                resultingOwnership = _out4357;
                readIdents = _7995_recIdents;
              }
            } else if (_source299.is_Map) {
              DAST._IType _7996___mcc_h1026 = _source299.dtor_key;
              DAST._IType _7997___mcc_h1027 = _source299.dtor_value;
              {
                RAST._IExpr _7998_recursiveGen;
                DCOMPUTF16._IOwnership _7999_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8000_recIdents;
                RAST._IExpr _out4358;
                DCOMPUTF16._IOwnership _out4359;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4360;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4358, out _out4359, out _out4360);
                _7998_recursiveGen = _out4358;
                _7999_recOwned = _out4359;
                _8000_recIdents = _out4360;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7998_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4361;
                DCOMPUTF16._IOwnership _out4362;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4361, out _out4362);
                r = _out4361;
                resultingOwnership = _out4362;
                readIdents = _8000_recIdents;
              }
            } else if (_source299.is_SetBuilder) {
              DAST._IType _8001___mcc_h1030 = _source299.dtor_element;
              {
                RAST._IExpr _8002_recursiveGen;
                DCOMPUTF16._IOwnership _8003_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8004_recIdents;
                RAST._IExpr _out4363;
                DCOMPUTF16._IOwnership _out4364;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4365;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4363, out _out4364, out _out4365);
                _8002_recursiveGen = _out4363;
                _8003_recOwned = _out4364;
                _8004_recIdents = _out4365;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8002_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4366;
                DCOMPUTF16._IOwnership _out4367;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4366, out _out4367);
                r = _out4366;
                resultingOwnership = _out4367;
                readIdents = _8004_recIdents;
              }
            } else if (_source299.is_MapBuilder) {
              DAST._IType _8005___mcc_h1032 = _source299.dtor_key;
              DAST._IType _8006___mcc_h1033 = _source299.dtor_value;
              {
                RAST._IExpr _8007_recursiveGen;
                DCOMPUTF16._IOwnership _8008_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8009_recIdents;
                RAST._IExpr _out4368;
                DCOMPUTF16._IOwnership _out4369;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4370;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4368, out _out4369, out _out4370);
                _8007_recursiveGen = _out4368;
                _8008_recOwned = _out4369;
                _8009_recIdents = _out4370;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8007_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4371;
                DCOMPUTF16._IOwnership _out4372;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4371, out _out4372);
                r = _out4371;
                resultingOwnership = _out4372;
                readIdents = _8009_recIdents;
              }
            } else if (_source299.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8010___mcc_h1036 = _source299.dtor_args;
              DAST._IType _8011___mcc_h1037 = _source299.dtor_result;
              {
                RAST._IExpr _8012_recursiveGen;
                DCOMPUTF16._IOwnership _8013_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8014_recIdents;
                RAST._IExpr _out4373;
                DCOMPUTF16._IOwnership _out4374;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4375;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4373, out _out4374, out _out4375);
                _8012_recursiveGen = _out4373;
                _8013_recOwned = _out4374;
                _8014_recIdents = _out4375;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8012_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4376;
                DCOMPUTF16._IOwnership _out4377;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4376, out _out4377);
                r = _out4376;
                resultingOwnership = _out4377;
                readIdents = _8014_recIdents;
              }
            } else if (_source299.is_Primitive) {
              DAST._IPrimitive _8015___mcc_h1040 = _source299.dtor_Primitive_a0;
              DAST._IPrimitive _source302 = _8015___mcc_h1040;
              if (_source302.is_Int) {
                {
                  RAST._IType _8016_rhsType;
                  RAST._IType _out4378;
                  _out4378 = DCOMPUTF16.COMP.GenType(_6463_fromTpe, true, false);
                  _8016_rhsType = _out4378;
                  RAST._IExpr _8017_recursiveGen;
                  DCOMPUTF16._IOwnership _8018___v82;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8019_recIdents;
                  RAST._IExpr _out4379;
                  DCOMPUTF16._IOwnership _out4380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4381;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4379, out _out4380, out _out4381);
                  _8017_recursiveGen = _out4379;
                  _8018___v82 = _out4380;
                  _8019_recIdents = _out4381;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_8017_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out4382;
                  DCOMPUTF16._IOwnership _out4383;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4382, out _out4383);
                  r = _out4382;
                  resultingOwnership = _out4383;
                  readIdents = _8019_recIdents;
                }
              } else if (_source302.is_Real) {
                {
                  RAST._IExpr _8020_recursiveGen;
                  DCOMPUTF16._IOwnership _8021_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8022_recIdents;
                  RAST._IExpr _out4384;
                  DCOMPUTF16._IOwnership _out4385;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4386;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4384, out _out4385, out _out4386);
                  _8020_recursiveGen = _out4384;
                  _8021_recOwned = _out4385;
                  _8022_recIdents = _out4386;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8020_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4387;
                  DCOMPUTF16._IOwnership _out4388;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4387, out _out4388);
                  r = _out4387;
                  resultingOwnership = _out4388;
                  readIdents = _8022_recIdents;
                }
              } else if (_source302.is_String) {
                {
                  RAST._IExpr _8023_recursiveGen;
                  DCOMPUTF16._IOwnership _8024_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8025_recIdents;
                  RAST._IExpr _out4389;
                  DCOMPUTF16._IOwnership _out4390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4391;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4389, out _out4390, out _out4391);
                  _8023_recursiveGen = _out4389;
                  _8024_recOwned = _out4390;
                  _8025_recIdents = _out4391;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8023_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4392;
                  DCOMPUTF16._IOwnership _out4393;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4392, out _out4393);
                  r = _out4392;
                  resultingOwnership = _out4393;
                  readIdents = _8025_recIdents;
                }
              } else if (_source302.is_Bool) {
                {
                  RAST._IExpr _8026_recursiveGen;
                  DCOMPUTF16._IOwnership _8027_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8028_recIdents;
                  RAST._IExpr _out4394;
                  DCOMPUTF16._IOwnership _out4395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4396;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4394, out _out4395, out _out4396);
                  _8026_recursiveGen = _out4394;
                  _8027_recOwned = _out4395;
                  _8028_recIdents = _out4396;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8026_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4397;
                  DCOMPUTF16._IOwnership _out4398;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4397, out _out4398);
                  r = _out4397;
                  resultingOwnership = _out4398;
                  readIdents = _8028_recIdents;
                }
              } else {
                {
                  RAST._IExpr _8029_recursiveGen;
                  DCOMPUTF16._IOwnership _8030_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8031_recIdents;
                  RAST._IExpr _out4399;
                  DCOMPUTF16._IOwnership _out4400;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4401;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4399, out _out4400, out _out4401);
                  _8029_recursiveGen = _out4399;
                  _8030_recOwned = _out4400;
                  _8031_recIdents = _out4401;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8029_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4402;
                  DCOMPUTF16._IOwnership _out4403;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4402, out _out4403);
                  r = _out4402;
                  resultingOwnership = _out4403;
                  readIdents = _8031_recIdents;
                }
              }
            } else if (_source299.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8032___mcc_h1042 = _source299.dtor_Passthrough_a0;
              {
                RAST._IExpr _8033_recursiveGen;
                DCOMPUTF16._IOwnership _8034_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8035_recIdents;
                RAST._IExpr _out4404;
                DCOMPUTF16._IOwnership _out4405;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4406;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4404, out _out4405, out _out4406);
                _8033_recursiveGen = _out4404;
                _8034_recOwned = _out4405;
                _8035_recIdents = _out4406;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8033_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4407;
                DCOMPUTF16._IOwnership _out4408;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4407, out _out4408);
                r = _out4407;
                resultingOwnership = _out4408;
                readIdents = _8035_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8036___mcc_h1044 = _source299.dtor_TypeArg_a0;
              {
                RAST._IExpr _8037_recursiveGen;
                DCOMPUTF16._IOwnership _8038_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8039_recIdents;
                RAST._IExpr _out4409;
                DCOMPUTF16._IOwnership _out4410;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4411;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4409, out _out4410, out _out4411);
                _8037_recursiveGen = _out4409;
                _8038_recOwned = _out4410;
                _8039_recIdents = _out4411;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8037_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4412;
                DCOMPUTF16._IOwnership _out4413;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4412, out _out4413);
                r = _out4412;
                resultingOwnership = _out4413;
                readIdents = _8039_recIdents;
              }
            }
          }
        } else if (_source244.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _8040___mcc_h1046 = _source244.dtor_Passthrough_a0;
          DAST._IType _source303 = _6469___mcc_h1;
          if (_source303.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8041___mcc_h1050 = _source303.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8042___mcc_h1051 = _source303.dtor_typeArgs;
            DAST._IResolvedType _8043___mcc_h1052 = _source303.dtor_resolved;
            DAST._IResolvedType _source304 = _8043___mcc_h1052;
            if (_source304.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8044___mcc_h1056 = _source304.dtor_path;
              {
                RAST._IExpr _8045_recursiveGen;
                DCOMPUTF16._IOwnership _8046_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8047_recIdents;
                RAST._IExpr _out4414;
                DCOMPUTF16._IOwnership _out4415;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4416;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4414, out _out4415, out _out4416);
                _8045_recursiveGen = _out4414;
                _8046_recOwned = _out4415;
                _8047_recIdents = _out4416;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8045_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4417;
                DCOMPUTF16._IOwnership _out4418;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4417, out _out4418);
                r = _out4417;
                resultingOwnership = _out4418;
                readIdents = _8047_recIdents;
              }
            } else if (_source304.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8048___mcc_h1058 = _source304.dtor_path;
              {
                RAST._IExpr _8049_recursiveGen;
                DCOMPUTF16._IOwnership _8050_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8051_recIdents;
                RAST._IExpr _out4419;
                DCOMPUTF16._IOwnership _out4420;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4421;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4419, out _out4420, out _out4421);
                _8049_recursiveGen = _out4419;
                _8050_recOwned = _out4420;
                _8051_recIdents = _out4421;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8049_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4422;
                DCOMPUTF16._IOwnership _out4423;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4422, out _out4423);
                r = _out4422;
                resultingOwnership = _out4423;
                readIdents = _8051_recIdents;
              }
            } else {
              DAST._IType _8052___mcc_h1060 = _source304.dtor_baseType;
              DAST._INewtypeRange _8053___mcc_h1061 = _source304.dtor_range;
              bool _8054___mcc_h1062 = _source304.dtor_erase;
              bool _8055_erase = _8054___mcc_h1062;
              DAST._INewtypeRange _8056_range = _8053___mcc_h1061;
              DAST._IType _8057_b = _8052___mcc_h1060;
              {
                if (object.Equals(_6463_fromTpe, _8057_b)) {
                  RAST._IExpr _8058_recursiveGen;
                  DCOMPUTF16._IOwnership _8059_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8060_recIdents;
                  RAST._IExpr _out4424;
                  DCOMPUTF16._IOwnership _out4425;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4426;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4424, out _out4425, out _out4426);
                  _8058_recursiveGen = _out4424;
                  _8059_recOwned = _out4425;
                  _8060_recIdents = _out4426;
                  Std.Wrappers._IOption<RAST._IType> _8061_potentialRhsType;
                  _8061_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8057_b, _8056_range);
                  Std.Wrappers._IOption<RAST._IType> _source305 = _8061_potentialRhsType;
                  if (_source305.is_None) {
                    if (_8055_erase) {
                      r = _8058_recursiveGen;
                    } else {
                      RAST._IType _8062_rhsType;
                      RAST._IType _out4427;
                      _out4427 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _8062_rhsType = _out4427;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8062_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8058_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4428;
                    DCOMPUTF16._IOwnership _out4429;
                    DCOMPUTF16.COMP.FromOwnership(r, _8059_recOwned, expectedOwnership, out _out4428, out _out4429);
                    r = _out4428;
                    resultingOwnership = _out4429;
                  } else {
                    RAST._IType _8063___mcc_h1171 = _source305.dtor_value;
                    RAST._IType _8064_v = _8063___mcc_h1171;
                    r = RAST.Expr.create_ConversionNum(_8064_v, _8058_recursiveGen);
                    RAST._IExpr _out4430;
                    DCOMPUTF16._IOwnership _out4431;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4430, out _out4431);
                    r = _out4430;
                    resultingOwnership = _out4431;
                  }
                  readIdents = _8060_recIdents;
                } else {
                  RAST._IExpr _out4432;
                  DCOMPUTF16._IOwnership _out4433;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4434;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _8057_b), _8057_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out4432, out _out4433, out _out4434);
                  r = _out4432;
                  resultingOwnership = _out4433;
                  readIdents = _out4434;
                }
              }
            }
          } else if (_source303.is_Nullable) {
            DAST._IType _8065___mcc_h1066 = _source303.dtor_Nullable_a0;
            {
              RAST._IExpr _8066_recursiveGen;
              DCOMPUTF16._IOwnership _8067_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8068_recIdents;
              RAST._IExpr _out4435;
              DCOMPUTF16._IOwnership _out4436;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4437;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4435, out _out4436, out _out4437);
              _8066_recursiveGen = _out4435;
              _8067_recOwned = _out4436;
              _8068_recIdents = _out4437;
              Dafny.ISequence<Dafny.Rune> _8069_s;
              _8069_s = (_8066_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_8067_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _8069_s = Dafny.Sequence<Dafny.Rune>.Concat(_8069_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _8069_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _8069_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_8069_s);
              RAST._IExpr _out4438;
              DCOMPUTF16._IOwnership _out4439;
              DCOMPUTF16.COMP.FromOwnership(r, _8067_recOwned, expectedOwnership, out _out4438, out _out4439);
              r = _out4438;
              resultingOwnership = _out4439;
              readIdents = _8068_recIdents;
            }
          } else if (_source303.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8070___mcc_h1068 = _source303.dtor_Tuple_a0;
            {
              RAST._IExpr _8071_recursiveGen;
              DCOMPUTF16._IOwnership _8072_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8073_recIdents;
              RAST._IExpr _out4440;
              DCOMPUTF16._IOwnership _out4441;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4442;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4440, out _out4441, out _out4442);
              _8071_recursiveGen = _out4440;
              _8072_recOwned = _out4441;
              _8073_recIdents = _out4442;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8071_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4443;
              DCOMPUTF16._IOwnership _out4444;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4443, out _out4444);
              r = _out4443;
              resultingOwnership = _out4444;
              readIdents = _8073_recIdents;
            }
          } else if (_source303.is_Array) {
            DAST._IType _8074___mcc_h1070 = _source303.dtor_element;
            BigInteger _8075___mcc_h1071 = _source303.dtor_dims;
            {
              RAST._IExpr _8076_recursiveGen;
              DCOMPUTF16._IOwnership _8077_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8078_recIdents;
              RAST._IExpr _out4445;
              DCOMPUTF16._IOwnership _out4446;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4447;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4445, out _out4446, out _out4447);
              _8076_recursiveGen = _out4445;
              _8077_recOwned = _out4446;
              _8078_recIdents = _out4447;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8076_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4448;
              DCOMPUTF16._IOwnership _out4449;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4448, out _out4449);
              r = _out4448;
              resultingOwnership = _out4449;
              readIdents = _8078_recIdents;
            }
          } else if (_source303.is_Seq) {
            DAST._IType _8079___mcc_h1074 = _source303.dtor_element;
            {
              RAST._IExpr _8080_recursiveGen;
              DCOMPUTF16._IOwnership _8081_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8082_recIdents;
              RAST._IExpr _out4450;
              DCOMPUTF16._IOwnership _out4451;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4452;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4450, out _out4451, out _out4452);
              _8080_recursiveGen = _out4450;
              _8081_recOwned = _out4451;
              _8082_recIdents = _out4452;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8080_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4453;
              DCOMPUTF16._IOwnership _out4454;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4453, out _out4454);
              r = _out4453;
              resultingOwnership = _out4454;
              readIdents = _8082_recIdents;
            }
          } else if (_source303.is_Set) {
            DAST._IType _8083___mcc_h1076 = _source303.dtor_element;
            {
              RAST._IExpr _8084_recursiveGen;
              DCOMPUTF16._IOwnership _8085_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8086_recIdents;
              RAST._IExpr _out4455;
              DCOMPUTF16._IOwnership _out4456;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4457;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4455, out _out4456, out _out4457);
              _8084_recursiveGen = _out4455;
              _8085_recOwned = _out4456;
              _8086_recIdents = _out4457;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8084_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4458;
              DCOMPUTF16._IOwnership _out4459;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4458, out _out4459);
              r = _out4458;
              resultingOwnership = _out4459;
              readIdents = _8086_recIdents;
            }
          } else if (_source303.is_Multiset) {
            DAST._IType _8087___mcc_h1078 = _source303.dtor_element;
            {
              RAST._IExpr _8088_recursiveGen;
              DCOMPUTF16._IOwnership _8089_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8090_recIdents;
              RAST._IExpr _out4460;
              DCOMPUTF16._IOwnership _out4461;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4462;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4460, out _out4461, out _out4462);
              _8088_recursiveGen = _out4460;
              _8089_recOwned = _out4461;
              _8090_recIdents = _out4462;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8088_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4463;
              DCOMPUTF16._IOwnership _out4464;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4463, out _out4464);
              r = _out4463;
              resultingOwnership = _out4464;
              readIdents = _8090_recIdents;
            }
          } else if (_source303.is_Map) {
            DAST._IType _8091___mcc_h1080 = _source303.dtor_key;
            DAST._IType _8092___mcc_h1081 = _source303.dtor_value;
            {
              RAST._IExpr _8093_recursiveGen;
              DCOMPUTF16._IOwnership _8094_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8095_recIdents;
              RAST._IExpr _out4465;
              DCOMPUTF16._IOwnership _out4466;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4467;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4465, out _out4466, out _out4467);
              _8093_recursiveGen = _out4465;
              _8094_recOwned = _out4466;
              _8095_recIdents = _out4467;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8093_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4468;
              DCOMPUTF16._IOwnership _out4469;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4468, out _out4469);
              r = _out4468;
              resultingOwnership = _out4469;
              readIdents = _8095_recIdents;
            }
          } else if (_source303.is_SetBuilder) {
            DAST._IType _8096___mcc_h1084 = _source303.dtor_element;
            {
              RAST._IExpr _8097_recursiveGen;
              DCOMPUTF16._IOwnership _8098_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8099_recIdents;
              RAST._IExpr _out4470;
              DCOMPUTF16._IOwnership _out4471;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4472;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4470, out _out4471, out _out4472);
              _8097_recursiveGen = _out4470;
              _8098_recOwned = _out4471;
              _8099_recIdents = _out4472;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8097_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4473;
              DCOMPUTF16._IOwnership _out4474;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4473, out _out4474);
              r = _out4473;
              resultingOwnership = _out4474;
              readIdents = _8099_recIdents;
            }
          } else if (_source303.is_MapBuilder) {
            DAST._IType _8100___mcc_h1086 = _source303.dtor_key;
            DAST._IType _8101___mcc_h1087 = _source303.dtor_value;
            {
              RAST._IExpr _8102_recursiveGen;
              DCOMPUTF16._IOwnership _8103_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8104_recIdents;
              RAST._IExpr _out4475;
              DCOMPUTF16._IOwnership _out4476;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4477;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4475, out _out4476, out _out4477);
              _8102_recursiveGen = _out4475;
              _8103_recOwned = _out4476;
              _8104_recIdents = _out4477;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8102_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4478;
              DCOMPUTF16._IOwnership _out4479;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4478, out _out4479);
              r = _out4478;
              resultingOwnership = _out4479;
              readIdents = _8104_recIdents;
            }
          } else if (_source303.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8105___mcc_h1090 = _source303.dtor_args;
            DAST._IType _8106___mcc_h1091 = _source303.dtor_result;
            {
              RAST._IExpr _8107_recursiveGen;
              DCOMPUTF16._IOwnership _8108_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8109_recIdents;
              RAST._IExpr _out4480;
              DCOMPUTF16._IOwnership _out4481;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4482;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4480, out _out4481, out _out4482);
              _8107_recursiveGen = _out4480;
              _8108_recOwned = _out4481;
              _8109_recIdents = _out4482;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8107_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4483;
              DCOMPUTF16._IOwnership _out4484;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4483, out _out4484);
              r = _out4483;
              resultingOwnership = _out4484;
              readIdents = _8109_recIdents;
            }
          } else if (_source303.is_Primitive) {
            DAST._IPrimitive _8110___mcc_h1094 = _source303.dtor_Primitive_a0;
            DAST._IPrimitive _source306 = _8110___mcc_h1094;
            if (_source306.is_Int) {
              {
                RAST._IType _8111_rhsType;
                RAST._IType _out4485;
                _out4485 = DCOMPUTF16.COMP.GenType(_6463_fromTpe, true, false);
                _8111_rhsType = _out4485;
                RAST._IExpr _8112_recursiveGen;
                DCOMPUTF16._IOwnership _8113___v80;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8114_recIdents;
                RAST._IExpr _out4486;
                DCOMPUTF16._IOwnership _out4487;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4488;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4486, out _out4487, out _out4488);
                _8112_recursiveGen = _out4486;
                _8113___v80 = _out4487;
                _8114_recIdents = _out4488;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_8112_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out4489;
                DCOMPUTF16._IOwnership _out4490;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4489, out _out4490);
                r = _out4489;
                resultingOwnership = _out4490;
                readIdents = _8114_recIdents;
              }
            } else if (_source306.is_Real) {
              {
                RAST._IExpr _8115_recursiveGen;
                DCOMPUTF16._IOwnership _8116_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8117_recIdents;
                RAST._IExpr _out4491;
                DCOMPUTF16._IOwnership _out4492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4493;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4491, out _out4492, out _out4493);
                _8115_recursiveGen = _out4491;
                _8116_recOwned = _out4492;
                _8117_recIdents = _out4493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8115_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4494;
                DCOMPUTF16._IOwnership _out4495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4494, out _out4495);
                r = _out4494;
                resultingOwnership = _out4495;
                readIdents = _8117_recIdents;
              }
            } else if (_source306.is_String) {
              {
                RAST._IExpr _8118_recursiveGen;
                DCOMPUTF16._IOwnership _8119_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8120_recIdents;
                RAST._IExpr _out4496;
                DCOMPUTF16._IOwnership _out4497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4498;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4496, out _out4497, out _out4498);
                _8118_recursiveGen = _out4496;
                _8119_recOwned = _out4497;
                _8120_recIdents = _out4498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8118_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4499;
                DCOMPUTF16._IOwnership _out4500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4499, out _out4500);
                r = _out4499;
                resultingOwnership = _out4500;
                readIdents = _8120_recIdents;
              }
            } else if (_source306.is_Bool) {
              {
                RAST._IExpr _8121_recursiveGen;
                DCOMPUTF16._IOwnership _8122_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8123_recIdents;
                RAST._IExpr _out4501;
                DCOMPUTF16._IOwnership _out4502;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4503;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4501, out _out4502, out _out4503);
                _8121_recursiveGen = _out4501;
                _8122_recOwned = _out4502;
                _8123_recIdents = _out4503;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8121_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4504;
                DCOMPUTF16._IOwnership _out4505;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4504, out _out4505);
                r = _out4504;
                resultingOwnership = _out4505;
                readIdents = _8123_recIdents;
              }
            } else {
              {
                RAST._IExpr _8124_recursiveGen;
                DCOMPUTF16._IOwnership _8125_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8126_recIdents;
                RAST._IExpr _out4506;
                DCOMPUTF16._IOwnership _out4507;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4508;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4506, out _out4507, out _out4508);
                _8124_recursiveGen = _out4506;
                _8125_recOwned = _out4507;
                _8126_recIdents = _out4508;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8124_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4509;
                DCOMPUTF16._IOwnership _out4510;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4509, out _out4510);
                r = _out4509;
                resultingOwnership = _out4510;
                readIdents = _8126_recIdents;
              }
            }
          } else if (_source303.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8127___mcc_h1096 = _source303.dtor_Passthrough_a0;
            {
              RAST._IExpr _8128_recursiveGen;
              DCOMPUTF16._IOwnership _8129___v85;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8130_recIdents;
              RAST._IExpr _out4511;
              DCOMPUTF16._IOwnership _out4512;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4513;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4511, out _out4512, out _out4513);
              _8128_recursiveGen = _out4511;
              _8129___v85 = _out4512;
              _8130_recIdents = _out4513;
              RAST._IType _8131_toTpeGen;
              RAST._IType _out4514;
              _out4514 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
              _8131_toTpeGen = _out4514;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_8128_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_8131_toTpeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out4515;
              DCOMPUTF16._IOwnership _out4516;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4515, out _out4516);
              r = _out4515;
              resultingOwnership = _out4516;
              readIdents = _8130_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8132___mcc_h1098 = _source303.dtor_TypeArg_a0;
            {
              RAST._IExpr _8133_recursiveGen;
              DCOMPUTF16._IOwnership _8134_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8135_recIdents;
              RAST._IExpr _out4517;
              DCOMPUTF16._IOwnership _out4518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4519;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4517, out _out4518, out _out4519);
              _8133_recursiveGen = _out4517;
              _8134_recOwned = _out4518;
              _8135_recIdents = _out4519;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8133_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4520;
              DCOMPUTF16._IOwnership _out4521;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4520, out _out4521);
              r = _out4520;
              resultingOwnership = _out4521;
              readIdents = _8135_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _8136___mcc_h1100 = _source244.dtor_TypeArg_a0;
          DAST._IType _source307 = _6469___mcc_h1;
          if (_source307.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8137___mcc_h1104 = _source307.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8138___mcc_h1105 = _source307.dtor_typeArgs;
            DAST._IResolvedType _8139___mcc_h1106 = _source307.dtor_resolved;
            DAST._IResolvedType _source308 = _8139___mcc_h1106;
            if (_source308.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8140___mcc_h1110 = _source308.dtor_path;
              {
                RAST._IExpr _8141_recursiveGen;
                DCOMPUTF16._IOwnership _8142_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8143_recIdents;
                RAST._IExpr _out4522;
                DCOMPUTF16._IOwnership _out4523;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4524;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4522, out _out4523, out _out4524);
                _8141_recursiveGen = _out4522;
                _8142_recOwned = _out4523;
                _8143_recIdents = _out4524;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8141_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4525;
                DCOMPUTF16._IOwnership _out4526;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4525, out _out4526);
                r = _out4525;
                resultingOwnership = _out4526;
                readIdents = _8143_recIdents;
              }
            } else if (_source308.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8144___mcc_h1112 = _source308.dtor_path;
              {
                RAST._IExpr _8145_recursiveGen;
                DCOMPUTF16._IOwnership _8146_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8147_recIdents;
                RAST._IExpr _out4527;
                DCOMPUTF16._IOwnership _out4528;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4529;
                DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4527, out _out4528, out _out4529);
                _8145_recursiveGen = _out4527;
                _8146_recOwned = _out4528;
                _8147_recIdents = _out4529;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8145_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4530;
                DCOMPUTF16._IOwnership _out4531;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4530, out _out4531);
                r = _out4530;
                resultingOwnership = _out4531;
                readIdents = _8147_recIdents;
              }
            } else {
              DAST._IType _8148___mcc_h1114 = _source308.dtor_baseType;
              DAST._INewtypeRange _8149___mcc_h1115 = _source308.dtor_range;
              bool _8150___mcc_h1116 = _source308.dtor_erase;
              bool _8151_erase = _8150___mcc_h1116;
              DAST._INewtypeRange _8152_range = _8149___mcc_h1115;
              DAST._IType _8153_b = _8148___mcc_h1114;
              {
                if (object.Equals(_6463_fromTpe, _8153_b)) {
                  RAST._IExpr _8154_recursiveGen;
                  DCOMPUTF16._IOwnership _8155_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8156_recIdents;
                  RAST._IExpr _out4532;
                  DCOMPUTF16._IOwnership _out4533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4534;
                  DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4532, out _out4533, out _out4534);
                  _8154_recursiveGen = _out4532;
                  _8155_recOwned = _out4533;
                  _8156_recIdents = _out4534;
                  Std.Wrappers._IOption<RAST._IType> _8157_potentialRhsType;
                  _8157_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8153_b, _8152_range);
                  Std.Wrappers._IOption<RAST._IType> _source309 = _8157_potentialRhsType;
                  if (_source309.is_None) {
                    if (_8151_erase) {
                      r = _8154_recursiveGen;
                    } else {
                      RAST._IType _8158_rhsType;
                      RAST._IType _out4535;
                      _out4535 = DCOMPUTF16.COMP.GenType(_6464_toTpe, true, false);
                      _8158_rhsType = _out4535;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8158_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8154_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4536;
                    DCOMPUTF16._IOwnership _out4537;
                    DCOMPUTF16.COMP.FromOwnership(r, _8155_recOwned, expectedOwnership, out _out4536, out _out4537);
                    r = _out4536;
                    resultingOwnership = _out4537;
                  } else {
                    RAST._IType _8159___mcc_h1172 = _source309.dtor_value;
                    RAST._IType _8160_v = _8159___mcc_h1172;
                    r = RAST.Expr.create_ConversionNum(_8160_v, _8154_recursiveGen);
                    RAST._IExpr _out4538;
                    DCOMPUTF16._IOwnership _out4539;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4538, out _out4539);
                    r = _out4538;
                    resultingOwnership = _out4539;
                  }
                  readIdents = _8156_recIdents;
                } else {
                  RAST._IExpr _out4540;
                  DCOMPUTF16._IOwnership _out4541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4542;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6462_expr, _6463_fromTpe, _8153_b), _8153_b, _6464_toTpe), selfIdent, @params, expectedOwnership, out _out4540, out _out4541, out _out4542);
                  r = _out4540;
                  resultingOwnership = _out4541;
                  readIdents = _out4542;
                }
              }
            }
          } else if (_source307.is_Nullable) {
            DAST._IType _8161___mcc_h1120 = _source307.dtor_Nullable_a0;
            {
              RAST._IExpr _8162_recursiveGen;
              DCOMPUTF16._IOwnership _8163_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8164_recIdents;
              RAST._IExpr _out4543;
              DCOMPUTF16._IOwnership _out4544;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4545;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4543, out _out4544, out _out4545);
              _8162_recursiveGen = _out4543;
              _8163_recOwned = _out4544;
              _8164_recIdents = _out4545;
              Dafny.ISequence<Dafny.Rune> _8165_s;
              _8165_s = (_8162_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_8163_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _8165_s = Dafny.Sequence<Dafny.Rune>.Concat(_8165_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _8165_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _8165_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_8165_s);
              RAST._IExpr _out4546;
              DCOMPUTF16._IOwnership _out4547;
              DCOMPUTF16.COMP.FromOwnership(r, _8163_recOwned, expectedOwnership, out _out4546, out _out4547);
              r = _out4546;
              resultingOwnership = _out4547;
              readIdents = _8164_recIdents;
            }
          } else if (_source307.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8166___mcc_h1122 = _source307.dtor_Tuple_a0;
            {
              RAST._IExpr _8167_recursiveGen;
              DCOMPUTF16._IOwnership _8168_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8169_recIdents;
              RAST._IExpr _out4548;
              DCOMPUTF16._IOwnership _out4549;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4550;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4548, out _out4549, out _out4550);
              _8167_recursiveGen = _out4548;
              _8168_recOwned = _out4549;
              _8169_recIdents = _out4550;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8167_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4551;
              DCOMPUTF16._IOwnership _out4552;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4551, out _out4552);
              r = _out4551;
              resultingOwnership = _out4552;
              readIdents = _8169_recIdents;
            }
          } else if (_source307.is_Array) {
            DAST._IType _8170___mcc_h1124 = _source307.dtor_element;
            BigInteger _8171___mcc_h1125 = _source307.dtor_dims;
            {
              RAST._IExpr _8172_recursiveGen;
              DCOMPUTF16._IOwnership _8173_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8174_recIdents;
              RAST._IExpr _out4553;
              DCOMPUTF16._IOwnership _out4554;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4555;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4553, out _out4554, out _out4555);
              _8172_recursiveGen = _out4553;
              _8173_recOwned = _out4554;
              _8174_recIdents = _out4555;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8172_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4556;
              DCOMPUTF16._IOwnership _out4557;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4556, out _out4557);
              r = _out4556;
              resultingOwnership = _out4557;
              readIdents = _8174_recIdents;
            }
          } else if (_source307.is_Seq) {
            DAST._IType _8175___mcc_h1128 = _source307.dtor_element;
            {
              RAST._IExpr _8176_recursiveGen;
              DCOMPUTF16._IOwnership _8177_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8178_recIdents;
              RAST._IExpr _out4558;
              DCOMPUTF16._IOwnership _out4559;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4560;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4558, out _out4559, out _out4560);
              _8176_recursiveGen = _out4558;
              _8177_recOwned = _out4559;
              _8178_recIdents = _out4560;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8176_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4561;
              DCOMPUTF16._IOwnership _out4562;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4561, out _out4562);
              r = _out4561;
              resultingOwnership = _out4562;
              readIdents = _8178_recIdents;
            }
          } else if (_source307.is_Set) {
            DAST._IType _8179___mcc_h1130 = _source307.dtor_element;
            {
              RAST._IExpr _8180_recursiveGen;
              DCOMPUTF16._IOwnership _8181_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8182_recIdents;
              RAST._IExpr _out4563;
              DCOMPUTF16._IOwnership _out4564;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4565;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4563, out _out4564, out _out4565);
              _8180_recursiveGen = _out4563;
              _8181_recOwned = _out4564;
              _8182_recIdents = _out4565;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8180_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4566;
              DCOMPUTF16._IOwnership _out4567;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4566, out _out4567);
              r = _out4566;
              resultingOwnership = _out4567;
              readIdents = _8182_recIdents;
            }
          } else if (_source307.is_Multiset) {
            DAST._IType _8183___mcc_h1132 = _source307.dtor_element;
            {
              RAST._IExpr _8184_recursiveGen;
              DCOMPUTF16._IOwnership _8185_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8186_recIdents;
              RAST._IExpr _out4568;
              DCOMPUTF16._IOwnership _out4569;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4570;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4568, out _out4569, out _out4570);
              _8184_recursiveGen = _out4568;
              _8185_recOwned = _out4569;
              _8186_recIdents = _out4570;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8184_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4571;
              DCOMPUTF16._IOwnership _out4572;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4571, out _out4572);
              r = _out4571;
              resultingOwnership = _out4572;
              readIdents = _8186_recIdents;
            }
          } else if (_source307.is_Map) {
            DAST._IType _8187___mcc_h1134 = _source307.dtor_key;
            DAST._IType _8188___mcc_h1135 = _source307.dtor_value;
            {
              RAST._IExpr _8189_recursiveGen;
              DCOMPUTF16._IOwnership _8190_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8191_recIdents;
              RAST._IExpr _out4573;
              DCOMPUTF16._IOwnership _out4574;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4575;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4573, out _out4574, out _out4575);
              _8189_recursiveGen = _out4573;
              _8190_recOwned = _out4574;
              _8191_recIdents = _out4575;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8189_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4576;
              DCOMPUTF16._IOwnership _out4577;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4576, out _out4577);
              r = _out4576;
              resultingOwnership = _out4577;
              readIdents = _8191_recIdents;
            }
          } else if (_source307.is_SetBuilder) {
            DAST._IType _8192___mcc_h1138 = _source307.dtor_element;
            {
              RAST._IExpr _8193_recursiveGen;
              DCOMPUTF16._IOwnership _8194_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8195_recIdents;
              RAST._IExpr _out4578;
              DCOMPUTF16._IOwnership _out4579;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4580;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4578, out _out4579, out _out4580);
              _8193_recursiveGen = _out4578;
              _8194_recOwned = _out4579;
              _8195_recIdents = _out4580;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8193_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4581;
              DCOMPUTF16._IOwnership _out4582;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4581, out _out4582);
              r = _out4581;
              resultingOwnership = _out4582;
              readIdents = _8195_recIdents;
            }
          } else if (_source307.is_MapBuilder) {
            DAST._IType _8196___mcc_h1140 = _source307.dtor_key;
            DAST._IType _8197___mcc_h1141 = _source307.dtor_value;
            {
              RAST._IExpr _8198_recursiveGen;
              DCOMPUTF16._IOwnership _8199_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8200_recIdents;
              RAST._IExpr _out4583;
              DCOMPUTF16._IOwnership _out4584;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4585;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4583, out _out4584, out _out4585);
              _8198_recursiveGen = _out4583;
              _8199_recOwned = _out4584;
              _8200_recIdents = _out4585;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8198_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4586;
              DCOMPUTF16._IOwnership _out4587;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4586, out _out4587);
              r = _out4586;
              resultingOwnership = _out4587;
              readIdents = _8200_recIdents;
            }
          } else if (_source307.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8201___mcc_h1144 = _source307.dtor_args;
            DAST._IType _8202___mcc_h1145 = _source307.dtor_result;
            {
              RAST._IExpr _8203_recursiveGen;
              DCOMPUTF16._IOwnership _8204_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8205_recIdents;
              RAST._IExpr _out4588;
              DCOMPUTF16._IOwnership _out4589;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4590;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4588, out _out4589, out _out4590);
              _8203_recursiveGen = _out4588;
              _8204_recOwned = _out4589;
              _8205_recIdents = _out4590;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8203_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4591;
              DCOMPUTF16._IOwnership _out4592;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4591, out _out4592);
              r = _out4591;
              resultingOwnership = _out4592;
              readIdents = _8205_recIdents;
            }
          } else if (_source307.is_Primitive) {
            DAST._IPrimitive _8206___mcc_h1148 = _source307.dtor_Primitive_a0;
            {
              RAST._IExpr _8207_recursiveGen;
              DCOMPUTF16._IOwnership _8208_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8209_recIdents;
              RAST._IExpr _out4593;
              DCOMPUTF16._IOwnership _out4594;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4595;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4593, out _out4594, out _out4595);
              _8207_recursiveGen = _out4593;
              _8208_recOwned = _out4594;
              _8209_recIdents = _out4595;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8207_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4596;
              DCOMPUTF16._IOwnership _out4597;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4596, out _out4597);
              r = _out4596;
              resultingOwnership = _out4597;
              readIdents = _8209_recIdents;
            }
          } else if (_source307.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8210___mcc_h1150 = _source307.dtor_Passthrough_a0;
            {
              RAST._IExpr _8211_recursiveGen;
              DCOMPUTF16._IOwnership _8212_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8213_recIdents;
              RAST._IExpr _out4598;
              DCOMPUTF16._IOwnership _out4599;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4600;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4598, out _out4599, out _out4600);
              _8211_recursiveGen = _out4598;
              _8212_recOwned = _out4599;
              _8213_recIdents = _out4600;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8211_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4601;
              DCOMPUTF16._IOwnership _out4602;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4601, out _out4602);
              r = _out4601;
              resultingOwnership = _out4602;
              readIdents = _8213_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8214___mcc_h1152 = _source307.dtor_TypeArg_a0;
            {
              RAST._IExpr _8215_recursiveGen;
              DCOMPUTF16._IOwnership _8216_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8217_recIdents;
              RAST._IExpr _out4603;
              DCOMPUTF16._IOwnership _out4604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4605;
              DCOMPUTF16.COMP.GenExpr(_6462_expr, selfIdent, @params, expectedOwnership, out _out4603, out _out4604, out _out4605);
              _8215_recursiveGen = _out4603;
              _8216_recOwned = _out4604;
              _8217_recIdents = _out4605;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8215_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4606;
              DCOMPUTF16._IOwnership _out4607;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4606, out _out4607);
              r = _out4606;
              resultingOwnership = _out4607;
              readIdents = _8217_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source310 = e;
      if (_source310.is_Literal) {
        DAST._ILiteral _8218___mcc_h0 = _source310.dtor_Literal_a0;
        RAST._IExpr _out4608;
        DCOMPUTF16._IOwnership _out4609;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4610;
        DCOMPUTF16.COMP.GenExprLiteral(e, selfIdent, @params, expectedOwnership, out _out4608, out _out4609, out _out4610);
        r = _out4608;
        resultingOwnership = _out4609;
        readIdents = _out4610;
      } else if (_source310.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _8219___mcc_h1 = _source310.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _8220_name = _8219___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_8220_name));
          bool _8221_currentlyBorrowed;
          _8221_currentlyBorrowed = (@params).Contains(_8220_name);
          if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (_8221_currentlyBorrowed) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8220_name);
          return ;
        }
      } else if (_source310.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8222___mcc_h2 = _source310.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8223_path = _8222___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _8224_p;
          Dafny.ISequence<Dafny.Rune> _out4611;
          _out4611 = DCOMPUTF16.COMP.GenPath(_8223_path);
          _8224_p = _out4611;
          r = RAST.Expr.create_RawExpr(_8224_p);
          RAST._IExpr _out4612;
          DCOMPUTF16._IOwnership _out4613;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4612, out _out4613);
          r = _out4612;
          resultingOwnership = _out4613;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source310.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _8225___mcc_h3 = _source310.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _8226_values = _8225___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _8227_s;
          _8227_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8228_i;
          _8228_i = BigInteger.Zero;
          while ((_8228_i) < (new BigInteger((_8226_values).Count))) {
            if ((_8228_i).Sign == 1) {
              _8227_s = Dafny.Sequence<Dafny.Rune>.Concat(_8227_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _8229_recursiveGen;
            DCOMPUTF16._IOwnership _8230___v88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8231_recIdents;
            RAST._IExpr _out4614;
            DCOMPUTF16._IOwnership _out4615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4616;
            DCOMPUTF16.COMP.GenExpr((_8226_values).Select(_8228_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4614, out _out4615, out _out4616);
            _8229_recursiveGen = _out4614;
            _8230___v88 = _out4615;
            _8231_recIdents = _out4616;
            _8227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8227_s, (_8229_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8231_recIdents);
            _8228_i = (_8228_i) + (BigInteger.One);
          }
          _8227_s = Dafny.Sequence<Dafny.Rune>.Concat(_8227_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_8227_s);
          RAST._IExpr _out4617;
          DCOMPUTF16._IOwnership _out4618;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4617, out _out4618);
          r = _out4617;
          resultingOwnership = _out4618;
          return ;
        }
      } else if (_source310.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8232___mcc_h4 = _source310.dtor_path;
        Dafny.ISequence<DAST._IType> _8233___mcc_h5 = _source310.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _8234___mcc_h6 = _source310.dtor_args;
        Dafny.ISequence<DAST._IExpression> _8235_args = _8234___mcc_h6;
        Dafny.ISequence<DAST._IType> _8236_typeArgs = _8233___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8237_path = _8232___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _8238_path;
          Dafny.ISequence<Dafny.Rune> _out4619;
          _out4619 = DCOMPUTF16.COMP.GenPath(_8237_path);
          _8238_path = _out4619;
          Dafny.ISequence<Dafny.Rune> _8239_s;
          _8239_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _8238_path);
          if ((new BigInteger((_8236_typeArgs).Count)).Sign == 1) {
            BigInteger _8240_i;
            _8240_i = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _8241_typeExprs;
            _8241_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_8240_i) < (new BigInteger((_8236_typeArgs).Count))) {
              RAST._IType _8242_typeExpr;
              RAST._IType _out4620;
              _out4620 = DCOMPUTF16.COMP.GenType((_8236_typeArgs).Select(_8240_i), false, false);
              _8242_typeExpr = _out4620;
              _8241_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_8241_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_8242_typeExpr));
              _8240_i = (_8240_i) + (BigInteger.One);
            }
            _8239_s = Dafny.Sequence<Dafny.Rune>.Concat(_8239_s, (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _8241_typeExprs))._ToString(DCOMPUTF16.__default.IND));
          }
          _8239_s = Dafny.Sequence<Dafny.Rune>.Concat(_8239_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8243_i;
          _8243_i = BigInteger.Zero;
          while ((_8243_i) < (new BigInteger((_8235_args).Count))) {
            if ((_8243_i).Sign == 1) {
              _8239_s = Dafny.Sequence<Dafny.Rune>.Concat(_8239_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _8244_recursiveGen;
            DCOMPUTF16._IOwnership _8245___v89;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8246_recIdents;
            RAST._IExpr _out4621;
            DCOMPUTF16._IOwnership _out4622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4623;
            DCOMPUTF16.COMP.GenExpr((_8235_args).Select(_8243_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4621, out _out4622, out _out4623);
            _8244_recursiveGen = _out4621;
            _8245___v89 = _out4622;
            _8246_recIdents = _out4623;
            _8239_s = Dafny.Sequence<Dafny.Rune>.Concat(_8239_s, (_8244_recursiveGen)._ToString(DCOMPUTF16.__default.IND));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8246_recIdents);
            _8243_i = (_8243_i) + (BigInteger.One);
          }
          _8239_s = Dafny.Sequence<Dafny.Rune>.Concat(_8239_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          r = RAST.Expr.create_RawExpr(_8239_s);
          RAST._IExpr _out4624;
          DCOMPUTF16._IOwnership _out4625;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4624, out _out4625);
          r = _out4624;
          resultingOwnership = _out4625;
          return ;
        }
      } else if (_source310.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _8247___mcc_h7 = _source310.dtor_dims;
        DAST._IType _8248___mcc_h8 = _source310.dtor_typ;
        DAST._IType _8249_typ = _8248___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _8250_dims = _8247___mcc_h7;
        {
          BigInteger _8251_i;
          _8251_i = (new BigInteger((_8250_dims).Count)) - (BigInteger.One);
          RAST._IType _8252_genTyp;
          RAST._IType _out4626;
          _out4626 = DCOMPUTF16.COMP.GenType(_8249_typ, false, false);
          _8252_genTyp = _out4626;
          Dafny.ISequence<Dafny.Rune> _8253_s;
          _8253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_8252_genTyp)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_8251_i).Sign != -1) {
            RAST._IExpr _8254_recursiveGen;
            DCOMPUTF16._IOwnership _8255___v90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8256_recIdents;
            RAST._IExpr _out4627;
            DCOMPUTF16._IOwnership _out4628;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4629;
            DCOMPUTF16.COMP.GenExpr((_8250_dims).Select(_8251_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4627, out _out4628, out _out4629);
            _8254_recursiveGen = _out4627;
            _8255___v90 = _out4628;
            _8256_recIdents = _out4629;
            _8253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _8253_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_8254_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8256_recIdents);
            _8251_i = (_8251_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_8253_s);
          RAST._IExpr _out4630;
          DCOMPUTF16._IOwnership _out4631;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4630, out _out4631);
          r = _out4630;
          resultingOwnership = _out4631;
          return ;
        }
      } else if (_source310.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8257___mcc_h9 = _source310.dtor_path;
        Dafny.ISequence<DAST._IType> _8258___mcc_h10 = _source310.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _8259___mcc_h11 = _source310.dtor_variant;
        bool _8260___mcc_h12 = _source310.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8261___mcc_h13 = _source310.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8262_values = _8261___mcc_h13;
        bool _8263_isCo = _8260___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _8264_variant = _8259___mcc_h11;
        Dafny.ISequence<DAST._IType> _8265_typeArgs = _8258___mcc_h10;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8266_path = _8257___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _8267_path;
          Dafny.ISequence<Dafny.Rune> _out4632;
          _out4632 = DCOMPUTF16.COMP.GenPath(_8266_path);
          _8267_path = _out4632;
          Dafny.ISequence<Dafny.Rune> _8268_s;
          _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _8267_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_8265_typeArgs).Count)).Sign == 1) {
            _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _8269_i;
            _8269_i = BigInteger.Zero;
            while ((_8269_i) < (new BigInteger((_8265_typeArgs).Count))) {
              if ((_8269_i).Sign == 1) {
                _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              RAST._IType _8270_typeExpr;
              RAST._IType _out4633;
              _out4633 = DCOMPUTF16.COMP.GenType((_8265_typeArgs).Select(_8269_i), false, false);
              _8270_typeExpr = _out4633;
              _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, (_8270_typeExpr)._ToString(DCOMPUTF16.__default.IND));
              _8269_i = (_8269_i) + (BigInteger.One);
            }
            _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, DCOMPUTF16.__default.escapeIdent(_8264_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8271_i;
          _8271_i = BigInteger.Zero;
          _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_8271_i) < (new BigInteger((_8262_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs54 = (_8262_values).Select(_8271_i);
            Dafny.ISequence<Dafny.Rune> _8272_name = _let_tmp_rhs54.dtor__0;
            DAST._IExpression _8273_value = _let_tmp_rhs54.dtor__1;
            if ((_8271_i).Sign == 1) {
              _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_8263_isCo) {
              RAST._IExpr _8274_recursiveGen;
              DCOMPUTF16._IOwnership _8275___v91;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8276_recIdents;
              RAST._IExpr _out4634;
              DCOMPUTF16._IOwnership _out4635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4636;
              DCOMPUTF16.COMP.GenExpr(_8273_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4634, out _out4635, out _out4636);
              _8274_recursiveGen = _out4634;
              _8275___v91 = _out4635;
              _8276_recIdents = _out4636;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8276_recIdents);
              Dafny.ISequence<Dafny.Rune> _8277_allReadCloned;
              _8277_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_8276_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _8278_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_4 in (_8276_recIdents).Elements) {
                  _8278_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_4;
                  if ((_8276_recIdents).Contains(_8278_next)) {
                    goto after__ASSIGN_SUCH_THAT_4;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2765)");
              after__ASSIGN_SUCH_THAT_4: ;
                _8277_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8277_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_8278_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_8278_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _8276_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_8276_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8278_next));
              }
              _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, DCOMPUTF16.__default.escapeIdent(_8272_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _8277_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_8274_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              RAST._IExpr _8279_recursiveGen;
              DCOMPUTF16._IOwnership _8280___v92;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8281_recIdents;
              RAST._IExpr _out4637;
              DCOMPUTF16._IOwnership _out4638;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4639;
              DCOMPUTF16.COMP.GenExpr(_8273_value, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4637, out _out4638, out _out4639);
              _8279_recursiveGen = _out4637;
              _8280___v92 = _out4638;
              _8281_recIdents = _out4639;
              _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, DCOMPUTF16.__default.escapeIdent(_8272_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8279_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8281_recIdents);
            }
            _8271_i = (_8271_i) + (BigInteger.One);
          }
          _8268_s = Dafny.Sequence<Dafny.Rune>.Concat(_8268_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          r = RAST.Expr.create_RawExpr(_8268_s);
          RAST._IExpr _out4640;
          DCOMPUTF16._IOwnership _out4641;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4640, out _out4641);
          r = _out4640;
          resultingOwnership = _out4641;
          return ;
        }
      } else if (_source310.is_Convert) {
        DAST._IExpression _8282___mcc_h14 = _source310.dtor_value;
        DAST._IType _8283___mcc_h15 = _source310.dtor_from;
        DAST._IType _8284___mcc_h16 = _source310.dtor_typ;
        {
          RAST._IExpr _out4642;
          DCOMPUTF16._IOwnership _out4643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4644;
          DCOMPUTF16.COMP.GenExprConvert(e, selfIdent, @params, expectedOwnership, out _out4642, out _out4643, out _out4644);
          r = _out4642;
          resultingOwnership = _out4643;
          readIdents = _out4644;
        }
      } else if (_source310.is_SeqConstruct) {
        DAST._IExpression _8285___mcc_h17 = _source310.dtor_length;
        DAST._IExpression _8286___mcc_h18 = _source310.dtor_elem;
        DAST._IExpression _8287_expr = _8286___mcc_h18;
        DAST._IExpression _8288_length = _8285___mcc_h17;
        {
          RAST._IExpr _8289_recursiveGen;
          DCOMPUTF16._IOwnership _8290___v96;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8291_recIdents;
          RAST._IExpr _out4645;
          DCOMPUTF16._IOwnership _out4646;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4647;
          DCOMPUTF16.COMP.GenExpr(_8287_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4645, out _out4646, out _out4647);
          _8289_recursiveGen = _out4645;
          _8290___v96 = _out4646;
          _8291_recIdents = _out4647;
          RAST._IExpr _8292_lengthGen;
          DCOMPUTF16._IOwnership _8293___v97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8294_lengthIdents;
          RAST._IExpr _out4648;
          DCOMPUTF16._IOwnership _out4649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4650;
          DCOMPUTF16.COMP.GenExpr(_8288_length, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4648, out _out4649, out _out4650);
          _8292_lengthGen = _out4648;
          _8293___v97 = _out4649;
          _8294_lengthIdents = _out4650;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_8289_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_8292_lengthGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8291_recIdents, _8294_lengthIdents);
          RAST._IExpr _out4651;
          DCOMPUTF16._IOwnership _out4652;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4651, out _out4652);
          r = _out4651;
          resultingOwnership = _out4652;
          return ;
        }
      } else if (_source310.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _8295___mcc_h19 = _source310.dtor_elements;
        DAST._IType _8296___mcc_h20 = _source310.dtor_typ;
        DAST._IType _8297_typ = _8296___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _8298_exprs = _8295___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _8299_genTpe;
          RAST._IType _out4653;
          _out4653 = DCOMPUTF16.COMP.GenType(_8297_typ, false, false);
          _8299_genTpe = _out4653;
          BigInteger _8300_i;
          _8300_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _8301_args;
          _8301_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_8300_i) < (new BigInteger((_8298_exprs).Count))) {
            RAST._IExpr _8302_recursiveGen;
            DCOMPUTF16._IOwnership _8303___v98;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8304_recIdents;
            RAST._IExpr _out4654;
            DCOMPUTF16._IOwnership _out4655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4656;
            DCOMPUTF16.COMP.GenExpr((_8298_exprs).Select(_8300_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4654, out _out4655, out _out4656);
            _8302_recursiveGen = _out4654;
            _8303___v98 = _out4655;
            _8304_recIdents = _out4656;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8304_recIdents);
            _8301_args = Dafny.Sequence<RAST._IExpr>.Concat(_8301_args, Dafny.Sequence<RAST._IExpr>.FromElements(_8302_recursiveGen));
            _8300_i = (_8300_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _8301_args);
          if ((new BigInteger((_8301_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_8299_genTpe));
          }
          RAST._IExpr _out4657;
          DCOMPUTF16._IOwnership _out4658;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4657, out _out4658);
          r = _out4657;
          resultingOwnership = _out4658;
          return ;
        }
      } else if (_source310.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _8305___mcc_h21 = _source310.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _8306_exprs = _8305___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _8307_generatedValues;
          _8307_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8308_i;
          _8308_i = BigInteger.Zero;
          while ((_8308_i) < (new BigInteger((_8306_exprs).Count))) {
            RAST._IExpr _8309_recursiveGen;
            DCOMPUTF16._IOwnership _8310___v99;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8311_recIdents;
            RAST._IExpr _out4659;
            DCOMPUTF16._IOwnership _out4660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4661;
            DCOMPUTF16.COMP.GenExpr((_8306_exprs).Select(_8308_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4659, out _out4660, out _out4661);
            _8309_recursiveGen = _out4659;
            _8310___v99 = _out4660;
            _8311_recIdents = _out4661;
            _8307_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_8307_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_8309_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8311_recIdents);
            _8308_i = (_8308_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _8307_generatedValues);
          RAST._IExpr _out4662;
          DCOMPUTF16._IOwnership _out4663;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4662, out _out4663);
          r = _out4662;
          resultingOwnership = _out4663;
          return ;
        }
      } else if (_source310.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _8312___mcc_h22 = _source310.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _8313_exprs = _8312___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _8314_generatedValues;
          _8314_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8315_i;
          _8315_i = BigInteger.Zero;
          while ((_8315_i) < (new BigInteger((_8313_exprs).Count))) {
            RAST._IExpr _8316_recursiveGen;
            DCOMPUTF16._IOwnership _8317___v100;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8318_recIdents;
            RAST._IExpr _out4664;
            DCOMPUTF16._IOwnership _out4665;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4666;
            DCOMPUTF16.COMP.GenExpr((_8313_exprs).Select(_8315_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4664, out _out4665, out _out4666);
            _8316_recursiveGen = _out4664;
            _8317___v100 = _out4665;
            _8318_recIdents = _out4666;
            _8314_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_8314_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_8316_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8318_recIdents);
            _8315_i = (_8315_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _8314_generatedValues);
          RAST._IExpr _out4667;
          DCOMPUTF16._IOwnership _out4668;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4667, out _out4668);
          r = _out4667;
          resultingOwnership = _out4668;
          return ;
        }
      } else if (_source310.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8319___mcc_h23 = _source310.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8320_mapElems = _8319___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _8321_generatedValues;
          _8321_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8322_i;
          _8322_i = BigInteger.Zero;
          while ((_8322_i) < (new BigInteger((_8320_mapElems).Count))) {
            RAST._IExpr _8323_recursiveGenKey;
            DCOMPUTF16._IOwnership _8324___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8325_recIdentsKey;
            RAST._IExpr _out4669;
            DCOMPUTF16._IOwnership _out4670;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4671;
            DCOMPUTF16.COMP.GenExpr(((_8320_mapElems).Select(_8322_i)).dtor__0, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4669, out _out4670, out _out4671);
            _8323_recursiveGenKey = _out4669;
            _8324___v102 = _out4670;
            _8325_recIdentsKey = _out4671;
            RAST._IExpr _8326_recursiveGenValue;
            DCOMPUTF16._IOwnership _8327___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8328_recIdentsValue;
            RAST._IExpr _out4672;
            DCOMPUTF16._IOwnership _out4673;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4674;
            DCOMPUTF16.COMP.GenExpr(((_8320_mapElems).Select(_8322_i)).dtor__1, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4672, out _out4673, out _out4674);
            _8326_recursiveGenValue = _out4672;
            _8327___v103 = _out4673;
            _8328_recIdentsValue = _out4674;
            _8321_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_8321_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_8323_recursiveGenKey, _8326_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8325_recIdentsKey), _8328_recIdentsValue);
            _8322_i = (_8322_i) + (BigInteger.One);
          }
          _8322_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _8329_arguments;
          _8329_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_8322_i) < (new BigInteger((_8321_generatedValues).Count))) {
            RAST._IExpr _8330_genKey;
            _8330_genKey = ((_8321_generatedValues).Select(_8322_i)).dtor__0;
            RAST._IExpr _8331_genValue;
            _8331_genValue = ((_8321_generatedValues).Select(_8322_i)).dtor__1;
            _8329_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8329_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _8330_genKey, _8331_genValue, DAST.Format.BinaryOpFormat.create_NoFormat())));
            _8322_i = (_8322_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _8329_arguments);
          RAST._IExpr _out4675;
          DCOMPUTF16._IOwnership _out4676;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4675, out _out4676);
          r = _out4675;
          resultingOwnership = _out4676;
          return ;
        }
      } else if (_source310.is_MapBuilder) {
        DAST._IType _8332___mcc_h24 = _source310.dtor_keyType;
        DAST._IType _8333___mcc_h25 = _source310.dtor_valueType;
        DAST._IType _8334_valueType = _8333___mcc_h25;
        DAST._IType _8335_keyType = _8332___mcc_h24;
        {
          RAST._IType _8336_kType;
          RAST._IType _out4677;
          _out4677 = DCOMPUTF16.COMP.GenType(_8335_keyType, false, false);
          _8336_kType = _out4677;
          RAST._IType _8337_vType;
          RAST._IType _out4678;
          _out4678 = DCOMPUTF16.COMP.GenType(_8334_valueType, false, false);
          _8337_vType = _out4678;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_8336_kType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_8337_vType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out4679;
          DCOMPUTF16._IOwnership _out4680;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4679, out _out4680);
          r = _out4679;
          resultingOwnership = _out4680;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source310.is_SeqUpdate) {
        DAST._IExpression _8338___mcc_h26 = _source310.dtor_expr;
        DAST._IExpression _8339___mcc_h27 = _source310.dtor_indexExpr;
        DAST._IExpression _8340___mcc_h28 = _source310.dtor_value;
        DAST._IExpression _8341_value = _8340___mcc_h28;
        DAST._IExpression _8342_index = _8339___mcc_h27;
        DAST._IExpression _8343_expr = _8338___mcc_h26;
        {
          RAST._IExpr _8344_exprR;
          DCOMPUTF16._IOwnership _8345___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8346_exprIdents;
          RAST._IExpr _out4681;
          DCOMPUTF16._IOwnership _out4682;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4683;
          DCOMPUTF16.COMP.GenExpr(_8343_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4681, out _out4682, out _out4683);
          _8344_exprR = _out4681;
          _8345___v104 = _out4682;
          _8346_exprIdents = _out4683;
          RAST._IExpr _8347_indexR;
          DCOMPUTF16._IOwnership _8348_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8349_indexIdents;
          RAST._IExpr _out4684;
          DCOMPUTF16._IOwnership _out4685;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4686;
          DCOMPUTF16.COMP.GenExpr(_8342_index, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4684, out _out4685, out _out4686);
          _8347_indexR = _out4684;
          _8348_indexOwnership = _out4685;
          _8349_indexIdents = _out4686;
          RAST._IExpr _8350_valueR;
          DCOMPUTF16._IOwnership _8351_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8352_valueIdents;
          RAST._IExpr _out4687;
          DCOMPUTF16._IOwnership _out4688;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4689;
          DCOMPUTF16.COMP.GenExpr(_8341_value, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4687, out _out4688, out _out4689);
          _8350_valueR = _out4687;
          _8351_valueOwnership = _out4688;
          _8352_valueIdents = _out4689;
          r = ((_8344_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_8347_indexR, _8350_valueR));
          RAST._IExpr _out4690;
          DCOMPUTF16._IOwnership _out4691;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4690, out _out4691);
          r = _out4690;
          resultingOwnership = _out4691;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8346_exprIdents, _8349_indexIdents), _8352_valueIdents);
          return ;
        }
      } else if (_source310.is_MapUpdate) {
        DAST._IExpression _8353___mcc_h29 = _source310.dtor_expr;
        DAST._IExpression _8354___mcc_h30 = _source310.dtor_indexExpr;
        DAST._IExpression _8355___mcc_h31 = _source310.dtor_value;
        DAST._IExpression _8356_value = _8355___mcc_h31;
        DAST._IExpression _8357_index = _8354___mcc_h30;
        DAST._IExpression _8358_expr = _8353___mcc_h29;
        {
          RAST._IExpr _8359_exprR;
          DCOMPUTF16._IOwnership _8360___v105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8361_exprIdents;
          RAST._IExpr _out4692;
          DCOMPUTF16._IOwnership _out4693;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4694;
          DCOMPUTF16.COMP.GenExpr(_8358_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4692, out _out4693, out _out4694);
          _8359_exprR = _out4692;
          _8360___v105 = _out4693;
          _8361_exprIdents = _out4694;
          RAST._IExpr _8362_indexR;
          DCOMPUTF16._IOwnership _8363_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8364_indexIdents;
          RAST._IExpr _out4695;
          DCOMPUTF16._IOwnership _out4696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4697;
          DCOMPUTF16.COMP.GenExpr(_8357_index, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4695, out _out4696, out _out4697);
          _8362_indexR = _out4695;
          _8363_indexOwnership = _out4696;
          _8364_indexIdents = _out4697;
          RAST._IExpr _8365_valueR;
          DCOMPUTF16._IOwnership _8366_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8367_valueIdents;
          RAST._IExpr _out4698;
          DCOMPUTF16._IOwnership _out4699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4700;
          DCOMPUTF16.COMP.GenExpr(_8356_value, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4698, out _out4699, out _out4700);
          _8365_valueR = _out4698;
          _8366_valueOwnership = _out4699;
          _8367_valueIdents = _out4700;
          r = ((_8359_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_8362_indexR, _8365_valueR));
          RAST._IExpr _out4701;
          DCOMPUTF16._IOwnership _out4702;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4701, out _out4702);
          r = _out4701;
          resultingOwnership = _out4702;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8361_exprIdents, _8364_indexIdents), _8367_valueIdents);
          return ;
        }
      } else if (_source310.is_SetBuilder) {
        DAST._IType _8368___mcc_h32 = _source310.dtor_elemType;
        DAST._IType _8369_elemType = _8368___mcc_h32;
        {
          RAST._IType _8370_eType;
          RAST._IType _out4703;
          _out4703 = DCOMPUTF16.COMP.GenType(_8369_elemType, false, false);
          _8370_eType = _out4703;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_8370_eType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out4704;
          DCOMPUTF16._IOwnership _out4705;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4704, out _out4705);
          r = _out4704;
          resultingOwnership = _out4705;
          return ;
        }
      } else if (_source310.is_ToMultiset) {
        DAST._IExpression _8371___mcc_h33 = _source310.dtor_ToMultiset_a0;
        DAST._IExpression _8372_expr = _8371___mcc_h33;
        {
          RAST._IExpr _8373_recursiveGen;
          DCOMPUTF16._IOwnership _8374___v101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8375_recIdents;
          RAST._IExpr _out4706;
          DCOMPUTF16._IOwnership _out4707;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4708;
          DCOMPUTF16.COMP.GenExpr(_8372_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4706, out _out4707, out _out4708);
          _8373_recursiveGen = _out4706;
          _8374___v101 = _out4707;
          _8375_recIdents = _out4708;
          r = ((_8373_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _8375_recIdents;
          RAST._IExpr _out4709;
          DCOMPUTF16._IOwnership _out4710;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4709, out _out4710);
          r = _out4709;
          resultingOwnership = _out4710;
          return ;
        }
      } else if (_source310.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source311 = selfIdent;
          if (_source311.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out4711;
              DCOMPUTF16._IOwnership _out4712;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4711, out _out4712);
              r = _out4711;
              resultingOwnership = _out4712;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8376___mcc_h273 = _source311.dtor_value;
            Dafny.ISequence<Dafny.Rune> _8377_id = _8376___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_8377_id);
              if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_8377_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_8377_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8377_id);
            }
          }
          return ;
        }
      } else if (_source310.is_Ite) {
        DAST._IExpression _8378___mcc_h34 = _source310.dtor_cond;
        DAST._IExpression _8379___mcc_h35 = _source310.dtor_thn;
        DAST._IExpression _8380___mcc_h36 = _source310.dtor_els;
        DAST._IExpression _8381_f = _8380___mcc_h36;
        DAST._IExpression _8382_t = _8379___mcc_h35;
        DAST._IExpression _8383_cond = _8378___mcc_h34;
        {
          RAST._IExpr _8384_cond;
          DCOMPUTF16._IOwnership _8385___v106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8386_recIdentsCond;
          RAST._IExpr _out4713;
          DCOMPUTF16._IOwnership _out4714;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4715;
          DCOMPUTF16.COMP.GenExpr(_8383_cond, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4713, out _out4714, out _out4715);
          _8384_cond = _out4713;
          _8385___v106 = _out4714;
          _8386_recIdentsCond = _out4715;
          Dafny.ISequence<Dafny.Rune> _8387_condString;
          _8387_condString = (_8384_cond)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _8388___v107;
          DCOMPUTF16._IOwnership _8389_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8390___v108;
          RAST._IExpr _out4716;
          DCOMPUTF16._IOwnership _out4717;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4718;
          DCOMPUTF16.COMP.GenExpr(_8382_t, selfIdent, @params, expectedOwnership, out _out4716, out _out4717, out _out4718);
          _8388___v107 = _out4716;
          _8389_tHasToBeOwned = _out4717;
          _8390___v108 = _out4718;
          RAST._IExpr _8391_fExpr;
          DCOMPUTF16._IOwnership _8392_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8393_recIdentsF;
          RAST._IExpr _out4719;
          DCOMPUTF16._IOwnership _out4720;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4721;
          DCOMPUTF16.COMP.GenExpr(_8381_f, selfIdent, @params, _8389_tHasToBeOwned, out _out4719, out _out4720, out _out4721);
          _8391_fExpr = _out4719;
          _8392_fOwned = _out4720;
          _8393_recIdentsF = _out4721;
          Dafny.ISequence<Dafny.Rune> _8394_fString;
          _8394_fString = (_8391_fExpr)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _8395_tExpr;
          DCOMPUTF16._IOwnership _8396___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8397_recIdentsT;
          RAST._IExpr _out4722;
          DCOMPUTF16._IOwnership _out4723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4724;
          DCOMPUTF16.COMP.GenExpr(_8382_t, selfIdent, @params, _8392_fOwned, out _out4722, out _out4723, out _out4724);
          _8395_tExpr = _out4722;
          _8396___v109 = _out4723;
          _8397_recIdentsT = _out4724;
          Dafny.ISequence<Dafny.Rune> _8398_tString;
          _8398_tString = (_8395_tExpr)._ToString(DCOMPUTF16.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _8387_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _8398_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _8394_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out4725;
          DCOMPUTF16._IOwnership _out4726;
          DCOMPUTF16.COMP.FromOwnership(r, _8392_fOwned, expectedOwnership, out _out4725, out _out4726);
          r = _out4725;
          resultingOwnership = _out4726;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8386_recIdentsCond, _8397_recIdentsT), _8393_recIdentsF);
          return ;
        }
      } else if (_source310.is_UnOp) {
        DAST._IUnaryOp _8399___mcc_h37 = _source310.dtor_unOp;
        DAST._IExpression _8400___mcc_h38 = _source310.dtor_expr;
        DAST.Format._IUnaryOpFormat _8401___mcc_h39 = _source310.dtor_format1;
        DAST._IUnaryOp _source312 = _8399___mcc_h37;
        if (_source312.is_Not) {
          DAST.Format._IUnaryOpFormat _8402_format = _8401___mcc_h39;
          DAST._IExpression _8403_e = _8400___mcc_h38;
          {
            RAST._IExpr _8404_recursiveGen;
            DCOMPUTF16._IOwnership _8405___v110;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8406_recIdents;
            RAST._IExpr _out4727;
            DCOMPUTF16._IOwnership _out4728;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4729;
            DCOMPUTF16.COMP.GenExpr(_8403_e, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4727, out _out4728, out _out4729);
            _8404_recursiveGen = _out4727;
            _8405___v110 = _out4728;
            _8406_recIdents = _out4729;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _8404_recursiveGen, _8402_format);
            RAST._IExpr _out4730;
            DCOMPUTF16._IOwnership _out4731;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4730, out _out4731);
            r = _out4730;
            resultingOwnership = _out4731;
            readIdents = _8406_recIdents;
            return ;
          }
        } else if (_source312.is_BitwiseNot) {
          DAST.Format._IUnaryOpFormat _8407_format = _8401___mcc_h39;
          DAST._IExpression _8408_e = _8400___mcc_h38;
          {
            RAST._IExpr _8409_recursiveGen;
            DCOMPUTF16._IOwnership _8410___v111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8411_recIdents;
            RAST._IExpr _out4732;
            DCOMPUTF16._IOwnership _out4733;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4734;
            DCOMPUTF16.COMP.GenExpr(_8408_e, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4732, out _out4733, out _out4734);
            _8409_recursiveGen = _out4732;
            _8410___v111 = _out4733;
            _8411_recIdents = _out4734;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _8409_recursiveGen, _8407_format);
            RAST._IExpr _out4735;
            DCOMPUTF16._IOwnership _out4736;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4735, out _out4736);
            r = _out4735;
            resultingOwnership = _out4736;
            readIdents = _8411_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnaryOpFormat _8412_format = _8401___mcc_h39;
          DAST._IExpression _8413_e = _8400___mcc_h38;
          {
            RAST._IExpr _8414_recursiveGen;
            DCOMPUTF16._IOwnership _8415_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8416_recIdents;
            RAST._IExpr _out4737;
            DCOMPUTF16._IOwnership _out4738;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4739;
            DCOMPUTF16.COMP.GenExpr(_8413_e, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4737, out _out4738, out _out4739);
            _8414_recursiveGen = _out4737;
            _8415_recOwned = _out4738;
            _8416_recIdents = _out4739;
            r = ((_8414_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out4740;
            DCOMPUTF16._IOwnership _out4741;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4740, out _out4741);
            r = _out4740;
            resultingOwnership = _out4741;
            readIdents = _8416_recIdents;
            return ;
          }
        }
      } else if (_source310.is_BinOp) {
        DAST._IBinOp _8417___mcc_h40 = _source310.dtor_op;
        DAST._IExpression _8418___mcc_h41 = _source310.dtor_left;
        DAST._IExpression _8419___mcc_h42 = _source310.dtor_right;
        DAST.Format._IBinaryOpFormat _8420___mcc_h43 = _source310.dtor_format2;
        RAST._IExpr _out4742;
        DCOMPUTF16._IOwnership _out4743;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4744;
        DCOMPUTF16.COMP.GenExprBinary(e, selfIdent, @params, expectedOwnership, out _out4742, out _out4743, out _out4744);
        r = _out4742;
        resultingOwnership = _out4743;
        readIdents = _out4744;
      } else if (_source310.is_ArrayLen) {
        DAST._IExpression _8421___mcc_h44 = _source310.dtor_expr;
        BigInteger _8422___mcc_h45 = _source310.dtor_dim;
        BigInteger _8423_dim = _8422___mcc_h45;
        DAST._IExpression _8424_expr = _8421___mcc_h44;
        {
          RAST._IExpr _8425_recursiveGen;
          DCOMPUTF16._IOwnership _8426___v116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8427_recIdents;
          RAST._IExpr _out4745;
          DCOMPUTF16._IOwnership _out4746;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4747;
          DCOMPUTF16.COMP.GenExpr(_8424_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4745, out _out4746, out _out4747);
          _8425_recursiveGen = _out4745;
          _8426___v116 = _out4746;
          _8427_recIdents = _out4747;
          if ((_8423_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_8425_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _8428_s;
            _8428_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMPUTF16.__default.IND);
            BigInteger _8429_i;
            _8429_i = BigInteger.One;
            while ((_8429_i) < (_8423_dim)) {
              _8428_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _8428_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _8429_i = (_8429_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8425_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _8428_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out4748;
          DCOMPUTF16._IOwnership _out4749;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4748, out _out4749);
          r = _out4748;
          resultingOwnership = _out4749;
          readIdents = _8427_recIdents;
          return ;
        }
      } else if (_source310.is_MapKeys) {
        DAST._IExpression _8430___mcc_h46 = _source310.dtor_expr;
        DAST._IExpression _8431_expr = _8430___mcc_h46;
        {
          RAST._IExpr _8432_recursiveGen;
          DCOMPUTF16._IOwnership _8433___v117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8434_recIdents;
          RAST._IExpr _out4750;
          DCOMPUTF16._IOwnership _out4751;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4752;
          DCOMPUTF16.COMP.GenExpr(_8431_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4750, out _out4751, out _out4752);
          _8432_recursiveGen = _out4750;
          _8433___v117 = _out4751;
          _8434_recIdents = _out4752;
          readIdents = _8434_recIdents;
          r = RAST.Expr.create_Call((_8432_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out4753;
          DCOMPUTF16._IOwnership _out4754;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4753, out _out4754);
          r = _out4753;
          resultingOwnership = _out4754;
          return ;
        }
      } else if (_source310.is_MapValues) {
        DAST._IExpression _8435___mcc_h47 = _source310.dtor_expr;
        DAST._IExpression _8436_expr = _8435___mcc_h47;
        {
          RAST._IExpr _8437_recursiveGen;
          DCOMPUTF16._IOwnership _8438___v118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8439_recIdents;
          RAST._IExpr _out4755;
          DCOMPUTF16._IOwnership _out4756;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4757;
          DCOMPUTF16.COMP.GenExpr(_8436_expr, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4755, out _out4756, out _out4757);
          _8437_recursiveGen = _out4755;
          _8438___v118 = _out4756;
          _8439_recIdents = _out4757;
          readIdents = _8439_recIdents;
          r = RAST.Expr.create_Call((_8437_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out4758;
          DCOMPUTF16._IOwnership _out4759;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4758, out _out4759);
          r = _out4758;
          resultingOwnership = _out4759;
          return ;
        }
      } else if (_source310.is_Select) {
        DAST._IExpression _8440___mcc_h48 = _source310.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _8441___mcc_h49 = _source310.dtor_field;
        bool _8442___mcc_h50 = _source310.dtor_isConstant;
        bool _8443___mcc_h51 = _source310.dtor_onDatatype;
        DAST._IExpression _source313 = _8440___mcc_h48;
        if (_source313.is_Literal) {
          DAST._ILiteral _8444___mcc_h52 = _source313.dtor_Literal_a0;
          bool _8445_isDatatype = _8443___mcc_h51;
          bool _8446_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8447_field = _8441___mcc_h49;
          DAST._IExpression _8448_on = _8440___mcc_h48;
          {
            RAST._IExpr _8449_onExpr;
            DCOMPUTF16._IOwnership _8450_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8451_recIdents;
            RAST._IExpr _out4760;
            DCOMPUTF16._IOwnership _out4761;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4762;
            DCOMPUTF16.COMP.GenExpr(_8448_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4760, out _out4761, out _out4762);
            _8449_onExpr = _out4760;
            _8450_onOwned = _out4761;
            _8451_recIdents = _out4762;
            if ((_8445_isDatatype) || (_8446_isConstant)) {
              r = RAST.Expr.create_Call((_8449_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8447_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4763;
              DCOMPUTF16._IOwnership _out4764;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4763, out _out4764);
              r = _out4763;
              resultingOwnership = _out4764;
            } else {
              Dafny.ISequence<Dafny.Rune> _8452_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8452_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8449_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8447_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4765;
              DCOMPUTF16._IOwnership _out4766;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8452_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4765, out _out4766);
              r = _out4765;
              resultingOwnership = _out4766;
            }
            readIdents = _8451_recIdents;
            return ;
          }
        } else if (_source313.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _8453___mcc_h54 = _source313.dtor_Ident_a0;
          bool _8454_isDatatype = _8443___mcc_h51;
          bool _8455_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8456_field = _8441___mcc_h49;
          DAST._IExpression _8457_on = _8440___mcc_h48;
          {
            RAST._IExpr _8458_onExpr;
            DCOMPUTF16._IOwnership _8459_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8460_recIdents;
            RAST._IExpr _out4767;
            DCOMPUTF16._IOwnership _out4768;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4769;
            DCOMPUTF16.COMP.GenExpr(_8457_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4767, out _out4768, out _out4769);
            _8458_onExpr = _out4767;
            _8459_onOwned = _out4768;
            _8460_recIdents = _out4769;
            if ((_8454_isDatatype) || (_8455_isConstant)) {
              r = RAST.Expr.create_Call((_8458_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8456_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4770;
              DCOMPUTF16._IOwnership _out4771;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4770, out _out4771);
              r = _out4770;
              resultingOwnership = _out4771;
            } else {
              Dafny.ISequence<Dafny.Rune> _8461_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8461_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8458_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8456_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4772;
              DCOMPUTF16._IOwnership _out4773;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8461_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4772, out _out4773);
              r = _out4772;
              resultingOwnership = _out4773;
            }
            readIdents = _8460_recIdents;
            return ;
          }
        } else if (_source313.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8462___mcc_h56 = _source313.dtor_Companion_a0;
          bool _8463_isDatatype = _8443___mcc_h51;
          bool _8464_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8465_field = _8441___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8466_c = _8462___mcc_h56;
          {
            RAST._IExpr _8467_onExpr;
            DCOMPUTF16._IOwnership _8468_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8469_recIdents;
            RAST._IExpr _out4774;
            DCOMPUTF16._IOwnership _out4775;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4776;
            DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Companion(_8466_c), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4774, out _out4775, out _out4776);
            _8467_onExpr = _out4774;
            _8468_onOwned = _out4775;
            _8469_recIdents = _out4776;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8467_onExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_8465_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out4777;
            DCOMPUTF16._IOwnership _out4778;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4777, out _out4778);
            r = _out4777;
            resultingOwnership = _out4778;
            readIdents = _8469_recIdents;
            return ;
          }
        } else if (_source313.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _8470___mcc_h58 = _source313.dtor_Tuple_a0;
          bool _8471_isDatatype = _8443___mcc_h51;
          bool _8472_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8473_field = _8441___mcc_h49;
          DAST._IExpression _8474_on = _8440___mcc_h48;
          {
            RAST._IExpr _8475_onExpr;
            DCOMPUTF16._IOwnership _8476_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8477_recIdents;
            RAST._IExpr _out4779;
            DCOMPUTF16._IOwnership _out4780;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4781;
            DCOMPUTF16.COMP.GenExpr(_8474_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4779, out _out4780, out _out4781);
            _8475_onExpr = _out4779;
            _8476_onOwned = _out4780;
            _8477_recIdents = _out4781;
            if ((_8471_isDatatype) || (_8472_isConstant)) {
              r = RAST.Expr.create_Call((_8475_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8473_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4782;
              DCOMPUTF16._IOwnership _out4783;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4782, out _out4783);
              r = _out4782;
              resultingOwnership = _out4783;
            } else {
              Dafny.ISequence<Dafny.Rune> _8478_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8478_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8475_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8473_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4784;
              DCOMPUTF16._IOwnership _out4785;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8478_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4784, out _out4785);
              r = _out4784;
              resultingOwnership = _out4785;
            }
            readIdents = _8477_recIdents;
            return ;
          }
        } else if (_source313.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8479___mcc_h60 = _source313.dtor_path;
          Dafny.ISequence<DAST._IType> _8480___mcc_h61 = _source313.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _8481___mcc_h62 = _source313.dtor_args;
          bool _8482_isDatatype = _8443___mcc_h51;
          bool _8483_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8484_field = _8441___mcc_h49;
          DAST._IExpression _8485_on = _8440___mcc_h48;
          {
            RAST._IExpr _8486_onExpr;
            DCOMPUTF16._IOwnership _8487_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8488_recIdents;
            RAST._IExpr _out4786;
            DCOMPUTF16._IOwnership _out4787;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4788;
            DCOMPUTF16.COMP.GenExpr(_8485_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4786, out _out4787, out _out4788);
            _8486_onExpr = _out4786;
            _8487_onOwned = _out4787;
            _8488_recIdents = _out4788;
            if ((_8482_isDatatype) || (_8483_isConstant)) {
              r = RAST.Expr.create_Call((_8486_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8484_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4789;
              DCOMPUTF16._IOwnership _out4790;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4789, out _out4790);
              r = _out4789;
              resultingOwnership = _out4790;
            } else {
              Dafny.ISequence<Dafny.Rune> _8489_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8489_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8486_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8484_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4791;
              DCOMPUTF16._IOwnership _out4792;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8489_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4791, out _out4792);
              r = _out4791;
              resultingOwnership = _out4792;
            }
            readIdents = _8488_recIdents;
            return ;
          }
        } else if (_source313.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _8490___mcc_h66 = _source313.dtor_dims;
          DAST._IType _8491___mcc_h67 = _source313.dtor_typ;
          bool _8492_isDatatype = _8443___mcc_h51;
          bool _8493_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8494_field = _8441___mcc_h49;
          DAST._IExpression _8495_on = _8440___mcc_h48;
          {
            RAST._IExpr _8496_onExpr;
            DCOMPUTF16._IOwnership _8497_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8498_recIdents;
            RAST._IExpr _out4793;
            DCOMPUTF16._IOwnership _out4794;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4795;
            DCOMPUTF16.COMP.GenExpr(_8495_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4793, out _out4794, out _out4795);
            _8496_onExpr = _out4793;
            _8497_onOwned = _out4794;
            _8498_recIdents = _out4795;
            if ((_8492_isDatatype) || (_8493_isConstant)) {
              r = RAST.Expr.create_Call((_8496_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8494_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4796;
              DCOMPUTF16._IOwnership _out4797;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4796, out _out4797);
              r = _out4796;
              resultingOwnership = _out4797;
            } else {
              Dafny.ISequence<Dafny.Rune> _8499_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8499_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8496_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8494_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4798;
              DCOMPUTF16._IOwnership _out4799;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8499_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4798, out _out4799);
              r = _out4798;
              resultingOwnership = _out4799;
            }
            readIdents = _8498_recIdents;
            return ;
          }
        } else if (_source313.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8500___mcc_h70 = _source313.dtor_path;
          Dafny.ISequence<DAST._IType> _8501___mcc_h71 = _source313.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _8502___mcc_h72 = _source313.dtor_variant;
          bool _8503___mcc_h73 = _source313.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8504___mcc_h74 = _source313.dtor_contents;
          bool _8505_isDatatype = _8443___mcc_h51;
          bool _8506_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8507_field = _8441___mcc_h49;
          DAST._IExpression _8508_on = _8440___mcc_h48;
          {
            RAST._IExpr _8509_onExpr;
            DCOMPUTF16._IOwnership _8510_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8511_recIdents;
            RAST._IExpr _out4800;
            DCOMPUTF16._IOwnership _out4801;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4802;
            DCOMPUTF16.COMP.GenExpr(_8508_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4800, out _out4801, out _out4802);
            _8509_onExpr = _out4800;
            _8510_onOwned = _out4801;
            _8511_recIdents = _out4802;
            if ((_8505_isDatatype) || (_8506_isConstant)) {
              r = RAST.Expr.create_Call((_8509_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8507_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4803;
              DCOMPUTF16._IOwnership _out4804;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4803, out _out4804);
              r = _out4803;
              resultingOwnership = _out4804;
            } else {
              Dafny.ISequence<Dafny.Rune> _8512_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8512_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8509_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8507_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4805;
              DCOMPUTF16._IOwnership _out4806;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8512_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4805, out _out4806);
              r = _out4805;
              resultingOwnership = _out4806;
            }
            readIdents = _8511_recIdents;
            return ;
          }
        } else if (_source313.is_Convert) {
          DAST._IExpression _8513___mcc_h80 = _source313.dtor_value;
          DAST._IType _8514___mcc_h81 = _source313.dtor_from;
          DAST._IType _8515___mcc_h82 = _source313.dtor_typ;
          bool _8516_isDatatype = _8443___mcc_h51;
          bool _8517_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8518_field = _8441___mcc_h49;
          DAST._IExpression _8519_on = _8440___mcc_h48;
          {
            RAST._IExpr _8520_onExpr;
            DCOMPUTF16._IOwnership _8521_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8522_recIdents;
            RAST._IExpr _out4807;
            DCOMPUTF16._IOwnership _out4808;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4809;
            DCOMPUTF16.COMP.GenExpr(_8519_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4807, out _out4808, out _out4809);
            _8520_onExpr = _out4807;
            _8521_onOwned = _out4808;
            _8522_recIdents = _out4809;
            if ((_8516_isDatatype) || (_8517_isConstant)) {
              r = RAST.Expr.create_Call((_8520_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8518_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4810;
              DCOMPUTF16._IOwnership _out4811;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4810, out _out4811);
              r = _out4810;
              resultingOwnership = _out4811;
            } else {
              Dafny.ISequence<Dafny.Rune> _8523_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8523_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8520_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8518_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4812;
              DCOMPUTF16._IOwnership _out4813;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8523_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4812, out _out4813);
              r = _out4812;
              resultingOwnership = _out4813;
            }
            readIdents = _8522_recIdents;
            return ;
          }
        } else if (_source313.is_SeqConstruct) {
          DAST._IExpression _8524___mcc_h86 = _source313.dtor_length;
          DAST._IExpression _8525___mcc_h87 = _source313.dtor_elem;
          bool _8526_isDatatype = _8443___mcc_h51;
          bool _8527_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8528_field = _8441___mcc_h49;
          DAST._IExpression _8529_on = _8440___mcc_h48;
          {
            RAST._IExpr _8530_onExpr;
            DCOMPUTF16._IOwnership _8531_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8532_recIdents;
            RAST._IExpr _out4814;
            DCOMPUTF16._IOwnership _out4815;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4816;
            DCOMPUTF16.COMP.GenExpr(_8529_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4814, out _out4815, out _out4816);
            _8530_onExpr = _out4814;
            _8531_onOwned = _out4815;
            _8532_recIdents = _out4816;
            if ((_8526_isDatatype) || (_8527_isConstant)) {
              r = RAST.Expr.create_Call((_8530_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8528_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4817;
              DCOMPUTF16._IOwnership _out4818;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4817, out _out4818);
              r = _out4817;
              resultingOwnership = _out4818;
            } else {
              Dafny.ISequence<Dafny.Rune> _8533_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8533_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8530_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8528_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4819;
              DCOMPUTF16._IOwnership _out4820;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8533_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4819, out _out4820);
              r = _out4819;
              resultingOwnership = _out4820;
            }
            readIdents = _8532_recIdents;
            return ;
          }
        } else if (_source313.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _8534___mcc_h90 = _source313.dtor_elements;
          DAST._IType _8535___mcc_h91 = _source313.dtor_typ;
          bool _8536_isDatatype = _8443___mcc_h51;
          bool _8537_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8538_field = _8441___mcc_h49;
          DAST._IExpression _8539_on = _8440___mcc_h48;
          {
            RAST._IExpr _8540_onExpr;
            DCOMPUTF16._IOwnership _8541_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8542_recIdents;
            RAST._IExpr _out4821;
            DCOMPUTF16._IOwnership _out4822;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4823;
            DCOMPUTF16.COMP.GenExpr(_8539_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4821, out _out4822, out _out4823);
            _8540_onExpr = _out4821;
            _8541_onOwned = _out4822;
            _8542_recIdents = _out4823;
            if ((_8536_isDatatype) || (_8537_isConstant)) {
              r = RAST.Expr.create_Call((_8540_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8538_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4824;
              DCOMPUTF16._IOwnership _out4825;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4824, out _out4825);
              r = _out4824;
              resultingOwnership = _out4825;
            } else {
              Dafny.ISequence<Dafny.Rune> _8543_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8543_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8540_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8538_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4826;
              DCOMPUTF16._IOwnership _out4827;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8543_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4826, out _out4827);
              r = _out4826;
              resultingOwnership = _out4827;
            }
            readIdents = _8542_recIdents;
            return ;
          }
        } else if (_source313.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _8544___mcc_h94 = _source313.dtor_elements;
          bool _8545_isDatatype = _8443___mcc_h51;
          bool _8546_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8547_field = _8441___mcc_h49;
          DAST._IExpression _8548_on = _8440___mcc_h48;
          {
            RAST._IExpr _8549_onExpr;
            DCOMPUTF16._IOwnership _8550_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8551_recIdents;
            RAST._IExpr _out4828;
            DCOMPUTF16._IOwnership _out4829;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4830;
            DCOMPUTF16.COMP.GenExpr(_8548_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4828, out _out4829, out _out4830);
            _8549_onExpr = _out4828;
            _8550_onOwned = _out4829;
            _8551_recIdents = _out4830;
            if ((_8545_isDatatype) || (_8546_isConstant)) {
              r = RAST.Expr.create_Call((_8549_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8547_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4831;
              DCOMPUTF16._IOwnership _out4832;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4831, out _out4832);
              r = _out4831;
              resultingOwnership = _out4832;
            } else {
              Dafny.ISequence<Dafny.Rune> _8552_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8552_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8549_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8547_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4833;
              DCOMPUTF16._IOwnership _out4834;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8552_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4833, out _out4834);
              r = _out4833;
              resultingOwnership = _out4834;
            }
            readIdents = _8551_recIdents;
            return ;
          }
        } else if (_source313.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _8553___mcc_h96 = _source313.dtor_elements;
          bool _8554_isDatatype = _8443___mcc_h51;
          bool _8555_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8556_field = _8441___mcc_h49;
          DAST._IExpression _8557_on = _8440___mcc_h48;
          {
            RAST._IExpr _8558_onExpr;
            DCOMPUTF16._IOwnership _8559_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8560_recIdents;
            RAST._IExpr _out4835;
            DCOMPUTF16._IOwnership _out4836;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4837;
            DCOMPUTF16.COMP.GenExpr(_8557_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4835, out _out4836, out _out4837);
            _8558_onExpr = _out4835;
            _8559_onOwned = _out4836;
            _8560_recIdents = _out4837;
            if ((_8554_isDatatype) || (_8555_isConstant)) {
              r = RAST.Expr.create_Call((_8558_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8556_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4838;
              DCOMPUTF16._IOwnership _out4839;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4838, out _out4839);
              r = _out4838;
              resultingOwnership = _out4839;
            } else {
              Dafny.ISequence<Dafny.Rune> _8561_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8561_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8558_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8556_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4840;
              DCOMPUTF16._IOwnership _out4841;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8561_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4840, out _out4841);
              r = _out4840;
              resultingOwnership = _out4841;
            }
            readIdents = _8560_recIdents;
            return ;
          }
        } else if (_source313.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8562___mcc_h98 = _source313.dtor_mapElems;
          bool _8563_isDatatype = _8443___mcc_h51;
          bool _8564_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8565_field = _8441___mcc_h49;
          DAST._IExpression _8566_on = _8440___mcc_h48;
          {
            RAST._IExpr _8567_onExpr;
            DCOMPUTF16._IOwnership _8568_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8569_recIdents;
            RAST._IExpr _out4842;
            DCOMPUTF16._IOwnership _out4843;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4844;
            DCOMPUTF16.COMP.GenExpr(_8566_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4842, out _out4843, out _out4844);
            _8567_onExpr = _out4842;
            _8568_onOwned = _out4843;
            _8569_recIdents = _out4844;
            if ((_8563_isDatatype) || (_8564_isConstant)) {
              r = RAST.Expr.create_Call((_8567_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8565_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4845;
              DCOMPUTF16._IOwnership _out4846;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4845, out _out4846);
              r = _out4845;
              resultingOwnership = _out4846;
            } else {
              Dafny.ISequence<Dafny.Rune> _8570_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8570_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8567_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8565_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4847;
              DCOMPUTF16._IOwnership _out4848;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8570_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4847, out _out4848);
              r = _out4847;
              resultingOwnership = _out4848;
            }
            readIdents = _8569_recIdents;
            return ;
          }
        } else if (_source313.is_MapBuilder) {
          DAST._IType _8571___mcc_h100 = _source313.dtor_keyType;
          DAST._IType _8572___mcc_h101 = _source313.dtor_valueType;
          bool _8573_isDatatype = _8443___mcc_h51;
          bool _8574_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8575_field = _8441___mcc_h49;
          DAST._IExpression _8576_on = _8440___mcc_h48;
          {
            RAST._IExpr _8577_onExpr;
            DCOMPUTF16._IOwnership _8578_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8579_recIdents;
            RAST._IExpr _out4849;
            DCOMPUTF16._IOwnership _out4850;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4851;
            DCOMPUTF16.COMP.GenExpr(_8576_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4849, out _out4850, out _out4851);
            _8577_onExpr = _out4849;
            _8578_onOwned = _out4850;
            _8579_recIdents = _out4851;
            if ((_8573_isDatatype) || (_8574_isConstant)) {
              r = RAST.Expr.create_Call((_8577_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8575_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4852;
              DCOMPUTF16._IOwnership _out4853;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4852, out _out4853);
              r = _out4852;
              resultingOwnership = _out4853;
            } else {
              Dafny.ISequence<Dafny.Rune> _8580_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8580_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8577_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8575_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4854;
              DCOMPUTF16._IOwnership _out4855;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8580_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4854, out _out4855);
              r = _out4854;
              resultingOwnership = _out4855;
            }
            readIdents = _8579_recIdents;
            return ;
          }
        } else if (_source313.is_SeqUpdate) {
          DAST._IExpression _8581___mcc_h104 = _source313.dtor_expr;
          DAST._IExpression _8582___mcc_h105 = _source313.dtor_indexExpr;
          DAST._IExpression _8583___mcc_h106 = _source313.dtor_value;
          bool _8584_isDatatype = _8443___mcc_h51;
          bool _8585_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8586_field = _8441___mcc_h49;
          DAST._IExpression _8587_on = _8440___mcc_h48;
          {
            RAST._IExpr _8588_onExpr;
            DCOMPUTF16._IOwnership _8589_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8590_recIdents;
            RAST._IExpr _out4856;
            DCOMPUTF16._IOwnership _out4857;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4858;
            DCOMPUTF16.COMP.GenExpr(_8587_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4856, out _out4857, out _out4858);
            _8588_onExpr = _out4856;
            _8589_onOwned = _out4857;
            _8590_recIdents = _out4858;
            if ((_8584_isDatatype) || (_8585_isConstant)) {
              r = RAST.Expr.create_Call((_8588_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8586_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4859;
              DCOMPUTF16._IOwnership _out4860;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4859, out _out4860);
              r = _out4859;
              resultingOwnership = _out4860;
            } else {
              Dafny.ISequence<Dafny.Rune> _8591_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8591_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8588_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8586_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4861;
              DCOMPUTF16._IOwnership _out4862;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8591_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4861, out _out4862);
              r = _out4861;
              resultingOwnership = _out4862;
            }
            readIdents = _8590_recIdents;
            return ;
          }
        } else if (_source313.is_MapUpdate) {
          DAST._IExpression _8592___mcc_h110 = _source313.dtor_expr;
          DAST._IExpression _8593___mcc_h111 = _source313.dtor_indexExpr;
          DAST._IExpression _8594___mcc_h112 = _source313.dtor_value;
          bool _8595_isDatatype = _8443___mcc_h51;
          bool _8596_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8597_field = _8441___mcc_h49;
          DAST._IExpression _8598_on = _8440___mcc_h48;
          {
            RAST._IExpr _8599_onExpr;
            DCOMPUTF16._IOwnership _8600_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8601_recIdents;
            RAST._IExpr _out4863;
            DCOMPUTF16._IOwnership _out4864;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4865;
            DCOMPUTF16.COMP.GenExpr(_8598_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4863, out _out4864, out _out4865);
            _8599_onExpr = _out4863;
            _8600_onOwned = _out4864;
            _8601_recIdents = _out4865;
            if ((_8595_isDatatype) || (_8596_isConstant)) {
              r = RAST.Expr.create_Call((_8599_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8597_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4866;
              DCOMPUTF16._IOwnership _out4867;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4866, out _out4867);
              r = _out4866;
              resultingOwnership = _out4867;
            } else {
              Dafny.ISequence<Dafny.Rune> _8602_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8602_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8599_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8597_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4868;
              DCOMPUTF16._IOwnership _out4869;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8602_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4868, out _out4869);
              r = _out4868;
              resultingOwnership = _out4869;
            }
            readIdents = _8601_recIdents;
            return ;
          }
        } else if (_source313.is_SetBuilder) {
          DAST._IType _8603___mcc_h116 = _source313.dtor_elemType;
          bool _8604_isDatatype = _8443___mcc_h51;
          bool _8605_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8606_field = _8441___mcc_h49;
          DAST._IExpression _8607_on = _8440___mcc_h48;
          {
            RAST._IExpr _8608_onExpr;
            DCOMPUTF16._IOwnership _8609_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8610_recIdents;
            RAST._IExpr _out4870;
            DCOMPUTF16._IOwnership _out4871;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4872;
            DCOMPUTF16.COMP.GenExpr(_8607_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4870, out _out4871, out _out4872);
            _8608_onExpr = _out4870;
            _8609_onOwned = _out4871;
            _8610_recIdents = _out4872;
            if ((_8604_isDatatype) || (_8605_isConstant)) {
              r = RAST.Expr.create_Call((_8608_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8606_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4873;
              DCOMPUTF16._IOwnership _out4874;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4873, out _out4874);
              r = _out4873;
              resultingOwnership = _out4874;
            } else {
              Dafny.ISequence<Dafny.Rune> _8611_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8611_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8608_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4875;
              DCOMPUTF16._IOwnership _out4876;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8611_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4875, out _out4876);
              r = _out4875;
              resultingOwnership = _out4876;
            }
            readIdents = _8610_recIdents;
            return ;
          }
        } else if (_source313.is_ToMultiset) {
          DAST._IExpression _8612___mcc_h118 = _source313.dtor_ToMultiset_a0;
          bool _8613_isDatatype = _8443___mcc_h51;
          bool _8614_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8615_field = _8441___mcc_h49;
          DAST._IExpression _8616_on = _8440___mcc_h48;
          {
            RAST._IExpr _8617_onExpr;
            DCOMPUTF16._IOwnership _8618_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8619_recIdents;
            RAST._IExpr _out4877;
            DCOMPUTF16._IOwnership _out4878;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4879;
            DCOMPUTF16.COMP.GenExpr(_8616_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4877, out _out4878, out _out4879);
            _8617_onExpr = _out4877;
            _8618_onOwned = _out4878;
            _8619_recIdents = _out4879;
            if ((_8613_isDatatype) || (_8614_isConstant)) {
              r = RAST.Expr.create_Call((_8617_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8615_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4880;
              DCOMPUTF16._IOwnership _out4881;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4880, out _out4881);
              r = _out4880;
              resultingOwnership = _out4881;
            } else {
              Dafny.ISequence<Dafny.Rune> _8620_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8620_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8617_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8615_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4882;
              DCOMPUTF16._IOwnership _out4883;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8620_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4882, out _out4883);
              r = _out4882;
              resultingOwnership = _out4883;
            }
            readIdents = _8619_recIdents;
            return ;
          }
        } else if (_source313.is_This) {
          bool _8621_isDatatype = _8443___mcc_h51;
          bool _8622_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8623_field = _8441___mcc_h49;
          DAST._IExpression _8624_on = _8440___mcc_h48;
          {
            RAST._IExpr _8625_onExpr;
            DCOMPUTF16._IOwnership _8626_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8627_recIdents;
            RAST._IExpr _out4884;
            DCOMPUTF16._IOwnership _out4885;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4886;
            DCOMPUTF16.COMP.GenExpr(_8624_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4884, out _out4885, out _out4886);
            _8625_onExpr = _out4884;
            _8626_onOwned = _out4885;
            _8627_recIdents = _out4886;
            if ((_8621_isDatatype) || (_8622_isConstant)) {
              r = RAST.Expr.create_Call((_8625_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8623_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4887;
              DCOMPUTF16._IOwnership _out4888;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4887, out _out4888);
              r = _out4887;
              resultingOwnership = _out4888;
            } else {
              Dafny.ISequence<Dafny.Rune> _8628_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8628_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8625_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8623_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4889;
              DCOMPUTF16._IOwnership _out4890;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8628_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4889, out _out4890);
              r = _out4889;
              resultingOwnership = _out4890;
            }
            readIdents = _8627_recIdents;
            return ;
          }
        } else if (_source313.is_Ite) {
          DAST._IExpression _8629___mcc_h120 = _source313.dtor_cond;
          DAST._IExpression _8630___mcc_h121 = _source313.dtor_thn;
          DAST._IExpression _8631___mcc_h122 = _source313.dtor_els;
          bool _8632_isDatatype = _8443___mcc_h51;
          bool _8633_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8634_field = _8441___mcc_h49;
          DAST._IExpression _8635_on = _8440___mcc_h48;
          {
            RAST._IExpr _8636_onExpr;
            DCOMPUTF16._IOwnership _8637_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8638_recIdents;
            RAST._IExpr _out4891;
            DCOMPUTF16._IOwnership _out4892;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4893;
            DCOMPUTF16.COMP.GenExpr(_8635_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4891, out _out4892, out _out4893);
            _8636_onExpr = _out4891;
            _8637_onOwned = _out4892;
            _8638_recIdents = _out4893;
            if ((_8632_isDatatype) || (_8633_isConstant)) {
              r = RAST.Expr.create_Call((_8636_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8634_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4894;
              DCOMPUTF16._IOwnership _out4895;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4894, out _out4895);
              r = _out4894;
              resultingOwnership = _out4895;
            } else {
              Dafny.ISequence<Dafny.Rune> _8639_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8639_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8636_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8634_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4896;
              DCOMPUTF16._IOwnership _out4897;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8639_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4896, out _out4897);
              r = _out4896;
              resultingOwnership = _out4897;
            }
            readIdents = _8638_recIdents;
            return ;
          }
        } else if (_source313.is_UnOp) {
          DAST._IUnaryOp _8640___mcc_h126 = _source313.dtor_unOp;
          DAST._IExpression _8641___mcc_h127 = _source313.dtor_expr;
          DAST.Format._IUnaryOpFormat _8642___mcc_h128 = _source313.dtor_format1;
          bool _8643_isDatatype = _8443___mcc_h51;
          bool _8644_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8645_field = _8441___mcc_h49;
          DAST._IExpression _8646_on = _8440___mcc_h48;
          {
            RAST._IExpr _8647_onExpr;
            DCOMPUTF16._IOwnership _8648_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8649_recIdents;
            RAST._IExpr _out4898;
            DCOMPUTF16._IOwnership _out4899;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4900;
            DCOMPUTF16.COMP.GenExpr(_8646_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4898, out _out4899, out _out4900);
            _8647_onExpr = _out4898;
            _8648_onOwned = _out4899;
            _8649_recIdents = _out4900;
            if ((_8643_isDatatype) || (_8644_isConstant)) {
              r = RAST.Expr.create_Call((_8647_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8645_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4901;
              DCOMPUTF16._IOwnership _out4902;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4901, out _out4902);
              r = _out4901;
              resultingOwnership = _out4902;
            } else {
              Dafny.ISequence<Dafny.Rune> _8650_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8650_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8647_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8645_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4903;
              DCOMPUTF16._IOwnership _out4904;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8650_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4903, out _out4904);
              r = _out4903;
              resultingOwnership = _out4904;
            }
            readIdents = _8649_recIdents;
            return ;
          }
        } else if (_source313.is_BinOp) {
          DAST._IBinOp _8651___mcc_h132 = _source313.dtor_op;
          DAST._IExpression _8652___mcc_h133 = _source313.dtor_left;
          DAST._IExpression _8653___mcc_h134 = _source313.dtor_right;
          DAST.Format._IBinaryOpFormat _8654___mcc_h135 = _source313.dtor_format2;
          bool _8655_isDatatype = _8443___mcc_h51;
          bool _8656_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8657_field = _8441___mcc_h49;
          DAST._IExpression _8658_on = _8440___mcc_h48;
          {
            RAST._IExpr _8659_onExpr;
            DCOMPUTF16._IOwnership _8660_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8661_recIdents;
            RAST._IExpr _out4905;
            DCOMPUTF16._IOwnership _out4906;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4907;
            DCOMPUTF16.COMP.GenExpr(_8658_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4905, out _out4906, out _out4907);
            _8659_onExpr = _out4905;
            _8660_onOwned = _out4906;
            _8661_recIdents = _out4907;
            if ((_8655_isDatatype) || (_8656_isConstant)) {
              r = RAST.Expr.create_Call((_8659_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8657_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4908;
              DCOMPUTF16._IOwnership _out4909;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4908, out _out4909);
              r = _out4908;
              resultingOwnership = _out4909;
            } else {
              Dafny.ISequence<Dafny.Rune> _8662_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8662_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8659_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8657_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4910;
              DCOMPUTF16._IOwnership _out4911;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8662_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4910, out _out4911);
              r = _out4910;
              resultingOwnership = _out4911;
            }
            readIdents = _8661_recIdents;
            return ;
          }
        } else if (_source313.is_ArrayLen) {
          DAST._IExpression _8663___mcc_h140 = _source313.dtor_expr;
          BigInteger _8664___mcc_h141 = _source313.dtor_dim;
          bool _8665_isDatatype = _8443___mcc_h51;
          bool _8666_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8667_field = _8441___mcc_h49;
          DAST._IExpression _8668_on = _8440___mcc_h48;
          {
            RAST._IExpr _8669_onExpr;
            DCOMPUTF16._IOwnership _8670_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8671_recIdents;
            RAST._IExpr _out4912;
            DCOMPUTF16._IOwnership _out4913;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4914;
            DCOMPUTF16.COMP.GenExpr(_8668_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4912, out _out4913, out _out4914);
            _8669_onExpr = _out4912;
            _8670_onOwned = _out4913;
            _8671_recIdents = _out4914;
            if ((_8665_isDatatype) || (_8666_isConstant)) {
              r = RAST.Expr.create_Call((_8669_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8667_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4915;
              DCOMPUTF16._IOwnership _out4916;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4915, out _out4916);
              r = _out4915;
              resultingOwnership = _out4916;
            } else {
              Dafny.ISequence<Dafny.Rune> _8672_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8672_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8669_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8667_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4917;
              DCOMPUTF16._IOwnership _out4918;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8672_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4917, out _out4918);
              r = _out4917;
              resultingOwnership = _out4918;
            }
            readIdents = _8671_recIdents;
            return ;
          }
        } else if (_source313.is_MapKeys) {
          DAST._IExpression _8673___mcc_h144 = _source313.dtor_expr;
          bool _8674_isDatatype = _8443___mcc_h51;
          bool _8675_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8676_field = _8441___mcc_h49;
          DAST._IExpression _8677_on = _8440___mcc_h48;
          {
            RAST._IExpr _8678_onExpr;
            DCOMPUTF16._IOwnership _8679_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8680_recIdents;
            RAST._IExpr _out4919;
            DCOMPUTF16._IOwnership _out4920;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4921;
            DCOMPUTF16.COMP.GenExpr(_8677_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4919, out _out4920, out _out4921);
            _8678_onExpr = _out4919;
            _8679_onOwned = _out4920;
            _8680_recIdents = _out4921;
            if ((_8674_isDatatype) || (_8675_isConstant)) {
              r = RAST.Expr.create_Call((_8678_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8676_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4922;
              DCOMPUTF16._IOwnership _out4923;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4922, out _out4923);
              r = _out4922;
              resultingOwnership = _out4923;
            } else {
              Dafny.ISequence<Dafny.Rune> _8681_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8681_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8678_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8676_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4924;
              DCOMPUTF16._IOwnership _out4925;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8681_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4924, out _out4925);
              r = _out4924;
              resultingOwnership = _out4925;
            }
            readIdents = _8680_recIdents;
            return ;
          }
        } else if (_source313.is_MapValues) {
          DAST._IExpression _8682___mcc_h146 = _source313.dtor_expr;
          bool _8683_isDatatype = _8443___mcc_h51;
          bool _8684_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8685_field = _8441___mcc_h49;
          DAST._IExpression _8686_on = _8440___mcc_h48;
          {
            RAST._IExpr _8687_onExpr;
            DCOMPUTF16._IOwnership _8688_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8689_recIdents;
            RAST._IExpr _out4926;
            DCOMPUTF16._IOwnership _out4927;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4928;
            DCOMPUTF16.COMP.GenExpr(_8686_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4926, out _out4927, out _out4928);
            _8687_onExpr = _out4926;
            _8688_onOwned = _out4927;
            _8689_recIdents = _out4928;
            if ((_8683_isDatatype) || (_8684_isConstant)) {
              r = RAST.Expr.create_Call((_8687_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8685_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4929;
              DCOMPUTF16._IOwnership _out4930;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4929, out _out4930);
              r = _out4929;
              resultingOwnership = _out4930;
            } else {
              Dafny.ISequence<Dafny.Rune> _8690_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8690_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8687_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4931;
              DCOMPUTF16._IOwnership _out4932;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8690_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4931, out _out4932);
              r = _out4931;
              resultingOwnership = _out4932;
            }
            readIdents = _8689_recIdents;
            return ;
          }
        } else if (_source313.is_Select) {
          DAST._IExpression _8691___mcc_h148 = _source313.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8692___mcc_h149 = _source313.dtor_field;
          bool _8693___mcc_h150 = _source313.dtor_isConstant;
          bool _8694___mcc_h151 = _source313.dtor_onDatatype;
          bool _8695_isDatatype = _8443___mcc_h51;
          bool _8696_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8697_field = _8441___mcc_h49;
          DAST._IExpression _8698_on = _8440___mcc_h48;
          {
            RAST._IExpr _8699_onExpr;
            DCOMPUTF16._IOwnership _8700_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8701_recIdents;
            RAST._IExpr _out4933;
            DCOMPUTF16._IOwnership _out4934;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4935;
            DCOMPUTF16.COMP.GenExpr(_8698_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4933, out _out4934, out _out4935);
            _8699_onExpr = _out4933;
            _8700_onOwned = _out4934;
            _8701_recIdents = _out4935;
            if ((_8695_isDatatype) || (_8696_isConstant)) {
              r = RAST.Expr.create_Call((_8699_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8697_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4936;
              DCOMPUTF16._IOwnership _out4937;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4936, out _out4937);
              r = _out4936;
              resultingOwnership = _out4937;
            } else {
              Dafny.ISequence<Dafny.Rune> _8702_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8702_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8699_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8697_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4938;
              DCOMPUTF16._IOwnership _out4939;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8702_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4938, out _out4939);
              r = _out4938;
              resultingOwnership = _out4939;
            }
            readIdents = _8701_recIdents;
            return ;
          }
        } else if (_source313.is_SelectFn) {
          DAST._IExpression _8703___mcc_h156 = _source313.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8704___mcc_h157 = _source313.dtor_field;
          bool _8705___mcc_h158 = _source313.dtor_onDatatype;
          bool _8706___mcc_h159 = _source313.dtor_isStatic;
          BigInteger _8707___mcc_h160 = _source313.dtor_arity;
          bool _8708_isDatatype = _8443___mcc_h51;
          bool _8709_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8710_field = _8441___mcc_h49;
          DAST._IExpression _8711_on = _8440___mcc_h48;
          {
            RAST._IExpr _8712_onExpr;
            DCOMPUTF16._IOwnership _8713_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8714_recIdents;
            RAST._IExpr _out4940;
            DCOMPUTF16._IOwnership _out4941;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4942;
            DCOMPUTF16.COMP.GenExpr(_8711_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4940, out _out4941, out _out4942);
            _8712_onExpr = _out4940;
            _8713_onOwned = _out4941;
            _8714_recIdents = _out4942;
            if ((_8708_isDatatype) || (_8709_isConstant)) {
              r = RAST.Expr.create_Call((_8712_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8710_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4943;
              DCOMPUTF16._IOwnership _out4944;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4943, out _out4944);
              r = _out4943;
              resultingOwnership = _out4944;
            } else {
              Dafny.ISequence<Dafny.Rune> _8715_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8715_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8712_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8710_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4945;
              DCOMPUTF16._IOwnership _out4946;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8715_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4945, out _out4946);
              r = _out4945;
              resultingOwnership = _out4946;
            }
            readIdents = _8714_recIdents;
            return ;
          }
        } else if (_source313.is_Index) {
          DAST._IExpression _8716___mcc_h166 = _source313.dtor_expr;
          DAST._ICollKind _8717___mcc_h167 = _source313.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _8718___mcc_h168 = _source313.dtor_indices;
          bool _8719_isDatatype = _8443___mcc_h51;
          bool _8720_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8721_field = _8441___mcc_h49;
          DAST._IExpression _8722_on = _8440___mcc_h48;
          {
            RAST._IExpr _8723_onExpr;
            DCOMPUTF16._IOwnership _8724_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8725_recIdents;
            RAST._IExpr _out4947;
            DCOMPUTF16._IOwnership _out4948;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4949;
            DCOMPUTF16.COMP.GenExpr(_8722_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4947, out _out4948, out _out4949);
            _8723_onExpr = _out4947;
            _8724_onOwned = _out4948;
            _8725_recIdents = _out4949;
            if ((_8719_isDatatype) || (_8720_isConstant)) {
              r = RAST.Expr.create_Call((_8723_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8721_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4950;
              DCOMPUTF16._IOwnership _out4951;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4950, out _out4951);
              r = _out4950;
              resultingOwnership = _out4951;
            } else {
              Dafny.ISequence<Dafny.Rune> _8726_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8726_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8723_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8721_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4952;
              DCOMPUTF16._IOwnership _out4953;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8726_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4952, out _out4953);
              r = _out4952;
              resultingOwnership = _out4953;
            }
            readIdents = _8725_recIdents;
            return ;
          }
        } else if (_source313.is_IndexRange) {
          DAST._IExpression _8727___mcc_h172 = _source313.dtor_expr;
          bool _8728___mcc_h173 = _source313.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _8729___mcc_h174 = _source313.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _8730___mcc_h175 = _source313.dtor_high;
          bool _8731_isDatatype = _8443___mcc_h51;
          bool _8732_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8733_field = _8441___mcc_h49;
          DAST._IExpression _8734_on = _8440___mcc_h48;
          {
            RAST._IExpr _8735_onExpr;
            DCOMPUTF16._IOwnership _8736_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8737_recIdents;
            RAST._IExpr _out4954;
            DCOMPUTF16._IOwnership _out4955;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4956;
            DCOMPUTF16.COMP.GenExpr(_8734_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4954, out _out4955, out _out4956);
            _8735_onExpr = _out4954;
            _8736_onOwned = _out4955;
            _8737_recIdents = _out4956;
            if ((_8731_isDatatype) || (_8732_isConstant)) {
              r = RAST.Expr.create_Call((_8735_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8733_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4957;
              DCOMPUTF16._IOwnership _out4958;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4957, out _out4958);
              r = _out4957;
              resultingOwnership = _out4958;
            } else {
              Dafny.ISequence<Dafny.Rune> _8738_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8738_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8735_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8733_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4959;
              DCOMPUTF16._IOwnership _out4960;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8738_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4959, out _out4960);
              r = _out4959;
              resultingOwnership = _out4960;
            }
            readIdents = _8737_recIdents;
            return ;
          }
        } else if (_source313.is_TupleSelect) {
          DAST._IExpression _8739___mcc_h180 = _source313.dtor_expr;
          BigInteger _8740___mcc_h181 = _source313.dtor_index;
          bool _8741_isDatatype = _8443___mcc_h51;
          bool _8742_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8743_field = _8441___mcc_h49;
          DAST._IExpression _8744_on = _8440___mcc_h48;
          {
            RAST._IExpr _8745_onExpr;
            DCOMPUTF16._IOwnership _8746_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8747_recIdents;
            RAST._IExpr _out4961;
            DCOMPUTF16._IOwnership _out4962;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4963;
            DCOMPUTF16.COMP.GenExpr(_8744_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4961, out _out4962, out _out4963);
            _8745_onExpr = _out4961;
            _8746_onOwned = _out4962;
            _8747_recIdents = _out4963;
            if ((_8741_isDatatype) || (_8742_isConstant)) {
              r = RAST.Expr.create_Call((_8745_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8743_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4964;
              DCOMPUTF16._IOwnership _out4965;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4964, out _out4965);
              r = _out4964;
              resultingOwnership = _out4965;
            } else {
              Dafny.ISequence<Dafny.Rune> _8748_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8748_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8745_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8743_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4966;
              DCOMPUTF16._IOwnership _out4967;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8748_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4966, out _out4967);
              r = _out4966;
              resultingOwnership = _out4967;
            }
            readIdents = _8747_recIdents;
            return ;
          }
        } else if (_source313.is_Call) {
          DAST._IExpression _8749___mcc_h184 = _source313.dtor_on;
          DAST._ICallName _8750___mcc_h185 = _source313.dtor_callName;
          Dafny.ISequence<DAST._IType> _8751___mcc_h186 = _source313.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _8752___mcc_h187 = _source313.dtor_args;
          bool _8753_isDatatype = _8443___mcc_h51;
          bool _8754_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8755_field = _8441___mcc_h49;
          DAST._IExpression _8756_on = _8440___mcc_h48;
          {
            RAST._IExpr _8757_onExpr;
            DCOMPUTF16._IOwnership _8758_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8759_recIdents;
            RAST._IExpr _out4968;
            DCOMPUTF16._IOwnership _out4969;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4970;
            DCOMPUTF16.COMP.GenExpr(_8756_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4968, out _out4969, out _out4970);
            _8757_onExpr = _out4968;
            _8758_onOwned = _out4969;
            _8759_recIdents = _out4970;
            if ((_8753_isDatatype) || (_8754_isConstant)) {
              r = RAST.Expr.create_Call((_8757_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8755_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4971;
              DCOMPUTF16._IOwnership _out4972;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4971, out _out4972);
              r = _out4971;
              resultingOwnership = _out4972;
            } else {
              Dafny.ISequence<Dafny.Rune> _8760_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8760_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8757_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4973;
              DCOMPUTF16._IOwnership _out4974;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8760_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4973, out _out4974);
              r = _out4973;
              resultingOwnership = _out4974;
            }
            readIdents = _8759_recIdents;
            return ;
          }
        } else if (_source313.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _8761___mcc_h192 = _source313.dtor_params;
          DAST._IType _8762___mcc_h193 = _source313.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _8763___mcc_h194 = _source313.dtor_body;
          bool _8764_isDatatype = _8443___mcc_h51;
          bool _8765_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8766_field = _8441___mcc_h49;
          DAST._IExpression _8767_on = _8440___mcc_h48;
          {
            RAST._IExpr _8768_onExpr;
            DCOMPUTF16._IOwnership _8769_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8770_recIdents;
            RAST._IExpr _out4975;
            DCOMPUTF16._IOwnership _out4976;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4977;
            DCOMPUTF16.COMP.GenExpr(_8767_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4975, out _out4976, out _out4977);
            _8768_onExpr = _out4975;
            _8769_onOwned = _out4976;
            _8770_recIdents = _out4977;
            if ((_8764_isDatatype) || (_8765_isConstant)) {
              r = RAST.Expr.create_Call((_8768_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8766_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4978;
              DCOMPUTF16._IOwnership _out4979;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4978, out _out4979);
              r = _out4978;
              resultingOwnership = _out4979;
            } else {
              Dafny.ISequence<Dafny.Rune> _8771_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8771_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8768_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8766_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4980;
              DCOMPUTF16._IOwnership _out4981;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8771_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4980, out _out4981);
              r = _out4980;
              resultingOwnership = _out4981;
            }
            readIdents = _8770_recIdents;
            return ;
          }
        } else if (_source313.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _8772___mcc_h198 = _source313.dtor_values;
          DAST._IType _8773___mcc_h199 = _source313.dtor_retType;
          DAST._IExpression _8774___mcc_h200 = _source313.dtor_expr;
          bool _8775_isDatatype = _8443___mcc_h51;
          bool _8776_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8777_field = _8441___mcc_h49;
          DAST._IExpression _8778_on = _8440___mcc_h48;
          {
            RAST._IExpr _8779_onExpr;
            DCOMPUTF16._IOwnership _8780_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8781_recIdents;
            RAST._IExpr _out4982;
            DCOMPUTF16._IOwnership _out4983;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4984;
            DCOMPUTF16.COMP.GenExpr(_8778_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4982, out _out4983, out _out4984);
            _8779_onExpr = _out4982;
            _8780_onOwned = _out4983;
            _8781_recIdents = _out4984;
            if ((_8775_isDatatype) || (_8776_isConstant)) {
              r = RAST.Expr.create_Call((_8779_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8777_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4985;
              DCOMPUTF16._IOwnership _out4986;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4985, out _out4986);
              r = _out4985;
              resultingOwnership = _out4986;
            } else {
              Dafny.ISequence<Dafny.Rune> _8782_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8782_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8779_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8777_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4987;
              DCOMPUTF16._IOwnership _out4988;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8782_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4987, out _out4988);
              r = _out4987;
              resultingOwnership = _out4988;
            }
            readIdents = _8781_recIdents;
            return ;
          }
        } else if (_source313.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _8783___mcc_h204 = _source313.dtor_name;
          DAST._IType _8784___mcc_h205 = _source313.dtor_typ;
          DAST._IExpression _8785___mcc_h206 = _source313.dtor_value;
          DAST._IExpression _8786___mcc_h207 = _source313.dtor_iifeBody;
          bool _8787_isDatatype = _8443___mcc_h51;
          bool _8788_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8789_field = _8441___mcc_h49;
          DAST._IExpression _8790_on = _8440___mcc_h48;
          {
            RAST._IExpr _8791_onExpr;
            DCOMPUTF16._IOwnership _8792_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8793_recIdents;
            RAST._IExpr _out4989;
            DCOMPUTF16._IOwnership _out4990;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4991;
            DCOMPUTF16.COMP.GenExpr(_8790_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4989, out _out4990, out _out4991);
            _8791_onExpr = _out4989;
            _8792_onOwned = _out4990;
            _8793_recIdents = _out4991;
            if ((_8787_isDatatype) || (_8788_isConstant)) {
              r = RAST.Expr.create_Call((_8791_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8789_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4992;
              DCOMPUTF16._IOwnership _out4993;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4992, out _out4993);
              r = _out4992;
              resultingOwnership = _out4993;
            } else {
              Dafny.ISequence<Dafny.Rune> _8794_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8794_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8791_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8789_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4994;
              DCOMPUTF16._IOwnership _out4995;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8794_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4994, out _out4995);
              r = _out4994;
              resultingOwnership = _out4995;
            }
            readIdents = _8793_recIdents;
            return ;
          }
        } else if (_source313.is_Apply) {
          DAST._IExpression _8795___mcc_h212 = _source313.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _8796___mcc_h213 = _source313.dtor_args;
          bool _8797_isDatatype = _8443___mcc_h51;
          bool _8798_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8799_field = _8441___mcc_h49;
          DAST._IExpression _8800_on = _8440___mcc_h48;
          {
            RAST._IExpr _8801_onExpr;
            DCOMPUTF16._IOwnership _8802_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8803_recIdents;
            RAST._IExpr _out4996;
            DCOMPUTF16._IOwnership _out4997;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4998;
            DCOMPUTF16.COMP.GenExpr(_8800_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4996, out _out4997, out _out4998);
            _8801_onExpr = _out4996;
            _8802_onOwned = _out4997;
            _8803_recIdents = _out4998;
            if ((_8797_isDatatype) || (_8798_isConstant)) {
              r = RAST.Expr.create_Call((_8801_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8799_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4999;
              DCOMPUTF16._IOwnership _out5000;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4999, out _out5000);
              r = _out4999;
              resultingOwnership = _out5000;
            } else {
              Dafny.ISequence<Dafny.Rune> _8804_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8804_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8801_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8799_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5001;
              DCOMPUTF16._IOwnership _out5002;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8804_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5001, out _out5002);
              r = _out5001;
              resultingOwnership = _out5002;
            }
            readIdents = _8803_recIdents;
            return ;
          }
        } else if (_source313.is_TypeTest) {
          DAST._IExpression _8805___mcc_h216 = _source313.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8806___mcc_h217 = _source313.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _8807___mcc_h218 = _source313.dtor_variant;
          bool _8808_isDatatype = _8443___mcc_h51;
          bool _8809_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8810_field = _8441___mcc_h49;
          DAST._IExpression _8811_on = _8440___mcc_h48;
          {
            RAST._IExpr _8812_onExpr;
            DCOMPUTF16._IOwnership _8813_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8814_recIdents;
            RAST._IExpr _out5003;
            DCOMPUTF16._IOwnership _out5004;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5005;
            DCOMPUTF16.COMP.GenExpr(_8811_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5003, out _out5004, out _out5005);
            _8812_onExpr = _out5003;
            _8813_onOwned = _out5004;
            _8814_recIdents = _out5005;
            if ((_8808_isDatatype) || (_8809_isConstant)) {
              r = RAST.Expr.create_Call((_8812_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8810_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5006;
              DCOMPUTF16._IOwnership _out5007;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5006, out _out5007);
              r = _out5006;
              resultingOwnership = _out5007;
            } else {
              Dafny.ISequence<Dafny.Rune> _8815_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8815_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8812_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8810_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5008;
              DCOMPUTF16._IOwnership _out5009;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8815_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5008, out _out5009);
              r = _out5008;
              resultingOwnership = _out5009;
            }
            readIdents = _8814_recIdents;
            return ;
          }
        } else if (_source313.is_InitializationValue) {
          DAST._IType _8816___mcc_h222 = _source313.dtor_typ;
          bool _8817_isDatatype = _8443___mcc_h51;
          bool _8818_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8819_field = _8441___mcc_h49;
          DAST._IExpression _8820_on = _8440___mcc_h48;
          {
            RAST._IExpr _8821_onExpr;
            DCOMPUTF16._IOwnership _8822_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8823_recIdents;
            RAST._IExpr _out5010;
            DCOMPUTF16._IOwnership _out5011;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5012;
            DCOMPUTF16.COMP.GenExpr(_8820_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5010, out _out5011, out _out5012);
            _8821_onExpr = _out5010;
            _8822_onOwned = _out5011;
            _8823_recIdents = _out5012;
            if ((_8817_isDatatype) || (_8818_isConstant)) {
              r = RAST.Expr.create_Call((_8821_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8819_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5013;
              DCOMPUTF16._IOwnership _out5014;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5013, out _out5014);
              r = _out5013;
              resultingOwnership = _out5014;
            } else {
              Dafny.ISequence<Dafny.Rune> _8824_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8824_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8821_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8819_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5015;
              DCOMPUTF16._IOwnership _out5016;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8824_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5015, out _out5016);
              r = _out5015;
              resultingOwnership = _out5016;
            }
            readIdents = _8823_recIdents;
            return ;
          }
        } else if (_source313.is_BoolBoundedPool) {
          bool _8825_isDatatype = _8443___mcc_h51;
          bool _8826_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8827_field = _8441___mcc_h49;
          DAST._IExpression _8828_on = _8440___mcc_h48;
          {
            RAST._IExpr _8829_onExpr;
            DCOMPUTF16._IOwnership _8830_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8831_recIdents;
            RAST._IExpr _out5017;
            DCOMPUTF16._IOwnership _out5018;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5019;
            DCOMPUTF16.COMP.GenExpr(_8828_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5017, out _out5018, out _out5019);
            _8829_onExpr = _out5017;
            _8830_onOwned = _out5018;
            _8831_recIdents = _out5019;
            if ((_8825_isDatatype) || (_8826_isConstant)) {
              r = RAST.Expr.create_Call((_8829_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8827_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5020;
              DCOMPUTF16._IOwnership _out5021;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5020, out _out5021);
              r = _out5020;
              resultingOwnership = _out5021;
            } else {
              Dafny.ISequence<Dafny.Rune> _8832_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8832_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8829_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8827_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5022;
              DCOMPUTF16._IOwnership _out5023;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8832_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5022, out _out5023);
              r = _out5022;
              resultingOwnership = _out5023;
            }
            readIdents = _8831_recIdents;
            return ;
          }
        } else if (_source313.is_SetBoundedPool) {
          DAST._IExpression _8833___mcc_h224 = _source313.dtor_of;
          bool _8834_isDatatype = _8443___mcc_h51;
          bool _8835_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8836_field = _8441___mcc_h49;
          DAST._IExpression _8837_on = _8440___mcc_h48;
          {
            RAST._IExpr _8838_onExpr;
            DCOMPUTF16._IOwnership _8839_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8840_recIdents;
            RAST._IExpr _out5024;
            DCOMPUTF16._IOwnership _out5025;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5026;
            DCOMPUTF16.COMP.GenExpr(_8837_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5024, out _out5025, out _out5026);
            _8838_onExpr = _out5024;
            _8839_onOwned = _out5025;
            _8840_recIdents = _out5026;
            if ((_8834_isDatatype) || (_8835_isConstant)) {
              r = RAST.Expr.create_Call((_8838_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8836_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5027;
              DCOMPUTF16._IOwnership _out5028;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5027, out _out5028);
              r = _out5027;
              resultingOwnership = _out5028;
            } else {
              Dafny.ISequence<Dafny.Rune> _8841_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8841_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8838_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8836_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5029;
              DCOMPUTF16._IOwnership _out5030;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8841_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5029, out _out5030);
              r = _out5029;
              resultingOwnership = _out5030;
            }
            readIdents = _8840_recIdents;
            return ;
          }
        } else if (_source313.is_SeqBoundedPool) {
          DAST._IExpression _8842___mcc_h226 = _source313.dtor_of;
          bool _8843___mcc_h227 = _source313.dtor_includeDuplicates;
          bool _8844_isDatatype = _8443___mcc_h51;
          bool _8845_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8846_field = _8441___mcc_h49;
          DAST._IExpression _8847_on = _8440___mcc_h48;
          {
            RAST._IExpr _8848_onExpr;
            DCOMPUTF16._IOwnership _8849_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8850_recIdents;
            RAST._IExpr _out5031;
            DCOMPUTF16._IOwnership _out5032;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5033;
            DCOMPUTF16.COMP.GenExpr(_8847_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5031, out _out5032, out _out5033);
            _8848_onExpr = _out5031;
            _8849_onOwned = _out5032;
            _8850_recIdents = _out5033;
            if ((_8844_isDatatype) || (_8845_isConstant)) {
              r = RAST.Expr.create_Call((_8848_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8846_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5034;
              DCOMPUTF16._IOwnership _out5035;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5034, out _out5035);
              r = _out5034;
              resultingOwnership = _out5035;
            } else {
              Dafny.ISequence<Dafny.Rune> _8851_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8851_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8848_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8846_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5036;
              DCOMPUTF16._IOwnership _out5037;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8851_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5036, out _out5037);
              r = _out5036;
              resultingOwnership = _out5037;
            }
            readIdents = _8850_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _8852___mcc_h230 = _source313.dtor_lo;
          DAST._IExpression _8853___mcc_h231 = _source313.dtor_hi;
          bool _8854_isDatatype = _8443___mcc_h51;
          bool _8855_isConstant = _8442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8856_field = _8441___mcc_h49;
          DAST._IExpression _8857_on = _8440___mcc_h48;
          {
            RAST._IExpr _8858_onExpr;
            DCOMPUTF16._IOwnership _8859_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8860_recIdents;
            RAST._IExpr _out5038;
            DCOMPUTF16._IOwnership _out5039;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5040;
            DCOMPUTF16.COMP.GenExpr(_8857_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5038, out _out5039, out _out5040);
            _8858_onExpr = _out5038;
            _8859_onOwned = _out5039;
            _8860_recIdents = _out5040;
            if ((_8854_isDatatype) || (_8855_isConstant)) {
              r = RAST.Expr.create_Call((_8858_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8856_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5041;
              DCOMPUTF16._IOwnership _out5042;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5041, out _out5042);
              r = _out5041;
              resultingOwnership = _out5042;
            } else {
              Dafny.ISequence<Dafny.Rune> _8861_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8861_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8858_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8856_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5043;
              DCOMPUTF16._IOwnership _out5044;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8861_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5043, out _out5044);
              r = _out5043;
              resultingOwnership = _out5044;
            }
            readIdents = _8860_recIdents;
            return ;
          }
        }
      } else if (_source310.is_SelectFn) {
        DAST._IExpression _8862___mcc_h234 = _source310.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _8863___mcc_h235 = _source310.dtor_field;
        bool _8864___mcc_h236 = _source310.dtor_onDatatype;
        bool _8865___mcc_h237 = _source310.dtor_isStatic;
        BigInteger _8866___mcc_h238 = _source310.dtor_arity;
        BigInteger _8867_arity = _8866___mcc_h238;
        bool _8868_isStatic = _8865___mcc_h237;
        bool _8869_isDatatype = _8864___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _8870_field = _8863___mcc_h235;
        DAST._IExpression _8871_on = _8862___mcc_h234;
        {
          RAST._IExpr _8872_onExpr;
          DCOMPUTF16._IOwnership _8873_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8874_recIdents;
          RAST._IExpr _out5045;
          DCOMPUTF16._IOwnership _out5046;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5047;
          DCOMPUTF16.COMP.GenExpr(_8871_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5045, out _out5046, out _out5047);
          _8872_onExpr = _out5045;
          _8873_onOwned = _out5046;
          _8874_recIdents = _out5047;
          Dafny.ISequence<Dafny.Rune> _8875_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _8876_onString;
          _8876_onString = (_8872_onExpr)._ToString(DCOMPUTF16.__default.IND);
          if (_8868_isStatic) {
            _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8876_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_8870_field));
          } else {
            _8875_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _8876_onString), ((object.Equals(_8873_onOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _8877_args;
            _8877_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _8878_i;
            _8878_i = BigInteger.Zero;
            while ((_8878_i) < (_8867_arity)) {
              if ((_8878_i).Sign == 1) {
                _8877_args = Dafny.Sequence<Dafny.Rune>.Concat(_8877_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _8877_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8877_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_8878_i));
              _8878_i = (_8878_i) + (BigInteger.One);
            }
            _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _8877_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _8870_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _8877_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(_8875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(_8875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _8879_typeShape;
          _8879_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _8880_i;
          _8880_i = BigInteger.Zero;
          while ((_8880_i) < (_8867_arity)) {
            if ((_8880_i).Sign == 1) {
              _8879_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_8879_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _8879_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_8879_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _8880_i = (_8880_i) + (BigInteger.One);
          }
          _8879_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_8879_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _8875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _8875_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _8879_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_8875_s);
          RAST._IExpr _out5048;
          DCOMPUTF16._IOwnership _out5049;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5048, out _out5049);
          r = _out5048;
          resultingOwnership = _out5049;
          readIdents = _8874_recIdents;
          return ;
        }
      } else if (_source310.is_Index) {
        DAST._IExpression _8881___mcc_h239 = _source310.dtor_expr;
        DAST._ICollKind _8882___mcc_h240 = _source310.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _8883___mcc_h241 = _source310.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _8884_indices = _8883___mcc_h241;
        DAST._ICollKind _8885_collKind = _8882___mcc_h240;
        DAST._IExpression _8886_on = _8881___mcc_h239;
        {
          RAST._IExpr _8887_onExpr;
          DCOMPUTF16._IOwnership _8888_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8889_recIdents;
          RAST._IExpr _out5050;
          DCOMPUTF16._IOwnership _out5051;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5052;
          DCOMPUTF16.COMP.GenExpr(_8886_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5050, out _out5051, out _out5052);
          _8887_onExpr = _out5050;
          _8888_onOwned = _out5051;
          _8889_recIdents = _out5052;
          readIdents = _8889_recIdents;
          r = _8887_onExpr;
          BigInteger _8890_i;
          _8890_i = BigInteger.Zero;
          while ((_8890_i) < (new BigInteger((_8884_indices).Count))) {
            if (object.Equals(_8885_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _8891_idx;
            DCOMPUTF16._IOwnership _8892_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8893_recIdentsIdx;
            RAST._IExpr _out5053;
            DCOMPUTF16._IOwnership _out5054;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5055;
            DCOMPUTF16.COMP.GenExpr((_8884_indices).Select(_8890_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5053, out _out5054, out _out5055);
            _8891_idx = _out5053;
            _8892_idxOwned = _out5054;
            _8893_recIdentsIdx = _out5055;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_8891_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8893_recIdentsIdx);
            _8890_i = (_8890_i) + (BigInteger.One);
          }
          RAST._IExpr _out5056;
          DCOMPUTF16._IOwnership _out5057;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5056, out _out5057);
          r = _out5056;
          resultingOwnership = _out5057;
          return ;
        }
      } else if (_source310.is_IndexRange) {
        DAST._IExpression _8894___mcc_h242 = _source310.dtor_expr;
        bool _8895___mcc_h243 = _source310.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _8896___mcc_h244 = _source310.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _8897___mcc_h245 = _source310.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _8898_high = _8897___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _8899_low = _8896___mcc_h244;
        bool _8900_isArray = _8895___mcc_h243;
        DAST._IExpression _8901_on = _8894___mcc_h242;
        {
          RAST._IExpr _8902_onExpr;
          DCOMPUTF16._IOwnership _8903_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8904_recIdents;
          RAST._IExpr _out5058;
          DCOMPUTF16._IOwnership _out5059;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5060;
          DCOMPUTF16.COMP.GenExpr(_8901_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5058, out _out5059, out _out5060);
          _8902_onExpr = _out5058;
          _8903_onOwned = _out5059;
          _8904_recIdents = _out5060;
          readIdents = _8904_recIdents;
          Dafny.ISequence<Dafny.Rune> _8905_methodName;
          _8905_methodName = (((_8899_low).is_Some) ? ((((_8898_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_8898_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _8906_arguments;
          _8906_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source314 = _8899_low;
          if (_source314.is_None) {
          } else {
            DAST._IExpression _8907___mcc_h274 = _source314.dtor_value;
            DAST._IExpression _8908_l = _8907___mcc_h274;
            {
              RAST._IExpr _8909_lExpr;
              DCOMPUTF16._IOwnership _8910___v119;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8911_recIdentsL;
              RAST._IExpr _out5061;
              DCOMPUTF16._IOwnership _out5062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5063;
              DCOMPUTF16.COMP.GenExpr(_8908_l, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5061, out _out5062, out _out5063);
              _8909_lExpr = _out5061;
              _8910___v119 = _out5062;
              _8911_recIdentsL = _out5063;
              _8906_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8906_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_8909_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8911_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source315 = _8898_high;
          if (_source315.is_None) {
          } else {
            DAST._IExpression _8912___mcc_h275 = _source315.dtor_value;
            DAST._IExpression _8913_h = _8912___mcc_h275;
            {
              RAST._IExpr _8914_hExpr;
              DCOMPUTF16._IOwnership _8915___v120;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8916_recIdentsH;
              RAST._IExpr _out5064;
              DCOMPUTF16._IOwnership _out5065;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5066;
              DCOMPUTF16.COMP.GenExpr(_8913_h, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5064, out _out5065, out _out5066);
              _8914_hExpr = _out5064;
              _8915___v120 = _out5065;
              _8916_recIdentsH = _out5066;
              _8906_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8906_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_8914_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8916_recIdentsH);
            }
          }
          r = _8902_onExpr;
          if (_8900_isArray) {
            if (!(_8905_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _8905_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _8905_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _8905_methodName))).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _8906_arguments);
          } else {
            if (!(_8905_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_8905_methodName)).Apply(Dafny.Sequence<RAST._IType>.FromElements(), _8906_arguments);
            }
          }
          RAST._IExpr _out5067;
          DCOMPUTF16._IOwnership _out5068;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5067, out _out5068);
          r = _out5067;
          resultingOwnership = _out5068;
          return ;
        }
      } else if (_source310.is_TupleSelect) {
        DAST._IExpression _8917___mcc_h246 = _source310.dtor_expr;
        BigInteger _8918___mcc_h247 = _source310.dtor_index;
        BigInteger _8919_idx = _8918___mcc_h247;
        DAST._IExpression _8920_on = _8917___mcc_h246;
        {
          RAST._IExpr _8921_onExpr;
          DCOMPUTF16._IOwnership _8922_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8923_recIdents;
          RAST._IExpr _out5069;
          DCOMPUTF16._IOwnership _out5070;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5071;
          DCOMPUTF16.COMP.GenExpr(_8920_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5069, out _out5070, out _out5071);
          _8921_onExpr = _out5069;
          _8922_onOwnership = _out5070;
          _8923_recIdents = _out5071;
          r = (_8921_onExpr).Sel(Std.Strings.__default.OfNat(_8919_idx));
          RAST._IExpr _out5072;
          DCOMPUTF16._IOwnership _out5073;
          DCOMPUTF16.COMP.FromOwnership(r, _8922_onOwnership, expectedOwnership, out _out5072, out _out5073);
          r = _out5072;
          resultingOwnership = _out5073;
          readIdents = _8923_recIdents;
          return ;
        }
      } else if (_source310.is_Call) {
        DAST._IExpression _8924___mcc_h248 = _source310.dtor_on;
        DAST._ICallName _8925___mcc_h249 = _source310.dtor_callName;
        Dafny.ISequence<DAST._IType> _8926___mcc_h250 = _source310.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _8927___mcc_h251 = _source310.dtor_args;
        Dafny.ISequence<DAST._IExpression> _8928_args = _8927___mcc_h251;
        Dafny.ISequence<DAST._IType> _8929_typeArgs = _8926___mcc_h250;
        DAST._ICallName _8930_name = _8925___mcc_h249;
        DAST._IExpression _8931_on = _8924___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _8932_typeExprs;
          _8932_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_8929_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _8933_typeI;
            _8933_typeI = BigInteger.Zero;
            while ((_8933_typeI) < (new BigInteger((_8929_typeArgs).Count))) {
              RAST._IType _8934_typeExpr;
              RAST._IType _out5074;
              _out5074 = DCOMPUTF16.COMP.GenType((_8929_typeArgs).Select(_8933_typeI), false, false);
              _8934_typeExpr = _out5074;
              _8932_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_8932_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_8934_typeExpr));
              _8933_typeI = (_8933_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _8935_argExprs;
          _8935_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _8936_i;
          _8936_i = BigInteger.Zero;
          while ((_8936_i) < (new BigInteger((_8928_args).Count))) {
            RAST._IExpr _8937_argExpr;
            DCOMPUTF16._IOwnership _8938_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8939_argIdents;
            RAST._IExpr _out5075;
            DCOMPUTF16._IOwnership _out5076;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5077;
            DCOMPUTF16.COMP.GenExpr((_8928_args).Select(_8936_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5075, out _out5076, out _out5077);
            _8937_argExpr = _out5075;
            _8938_argOwnership = _out5076;
            _8939_argIdents = _out5077;
            _8935_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_8935_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_8937_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8939_argIdents);
            _8936_i = (_8936_i) + (BigInteger.One);
          }
          RAST._IExpr _8940_onExpr;
          DCOMPUTF16._IOwnership _8941___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8942_recIdents;
          RAST._IExpr _out5078;
          DCOMPUTF16._IOwnership _out5079;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5080;
          DCOMPUTF16.COMP.GenExpr(_8931_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5078, out _out5079, out _out5080);
          _8940_onExpr = _out5078;
          _8941___v121 = _out5079;
          _8942_recIdents = _out5080;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8942_recIdents);
          Dafny.ISequence<Dafny.Rune> _8943_renderedName;
          _8943_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source316) => {
            if (_source316.is_Name) {
              Dafny.ISequence<Dafny.Rune> _8944___mcc_h276 = _source316.dtor_name;
              Dafny.ISequence<Dafny.Rune> _8945_ident = _8944___mcc_h276;
              return DCOMPUTF16.__default.escapeIdent(_8945_ident);
            } else if (_source316.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source316.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source316.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_8930_name);
          DAST._IExpression _source317 = _8931_on;
          if (_source317.is_Literal) {
            DAST._ILiteral _8946___mcc_h277 = _source317.dtor_Literal_a0;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _8947___mcc_h279 = _source317.dtor_Ident_a0;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8948___mcc_h281 = _source317.dtor_Companion_a0;
            {
              _8940_onExpr = (_8940_onExpr).MSel(_8943_renderedName);
            }
          } else if (_source317.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _8949___mcc_h283 = _source317.dtor_Tuple_a0;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8950___mcc_h285 = _source317.dtor_path;
            Dafny.ISequence<DAST._IType> _8951___mcc_h286 = _source317.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _8952___mcc_h287 = _source317.dtor_args;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _8953___mcc_h291 = _source317.dtor_dims;
            DAST._IType _8954___mcc_h292 = _source317.dtor_typ;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8955___mcc_h295 = _source317.dtor_path;
            Dafny.ISequence<DAST._IType> _8956___mcc_h296 = _source317.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _8957___mcc_h297 = _source317.dtor_variant;
            bool _8958___mcc_h298 = _source317.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8959___mcc_h299 = _source317.dtor_contents;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Convert) {
            DAST._IExpression _8960___mcc_h305 = _source317.dtor_value;
            DAST._IType _8961___mcc_h306 = _source317.dtor_from;
            DAST._IType _8962___mcc_h307 = _source317.dtor_typ;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SeqConstruct) {
            DAST._IExpression _8963___mcc_h311 = _source317.dtor_length;
            DAST._IExpression _8964___mcc_h312 = _source317.dtor_elem;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _8965___mcc_h315 = _source317.dtor_elements;
            DAST._IType _8966___mcc_h316 = _source317.dtor_typ;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _8967___mcc_h319 = _source317.dtor_elements;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _8968___mcc_h321 = _source317.dtor_elements;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8969___mcc_h323 = _source317.dtor_mapElems;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_MapBuilder) {
            DAST._IType _8970___mcc_h325 = _source317.dtor_keyType;
            DAST._IType _8971___mcc_h326 = _source317.dtor_valueType;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SeqUpdate) {
            DAST._IExpression _8972___mcc_h329 = _source317.dtor_expr;
            DAST._IExpression _8973___mcc_h330 = _source317.dtor_indexExpr;
            DAST._IExpression _8974___mcc_h331 = _source317.dtor_value;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_MapUpdate) {
            DAST._IExpression _8975___mcc_h335 = _source317.dtor_expr;
            DAST._IExpression _8976___mcc_h336 = _source317.dtor_indexExpr;
            DAST._IExpression _8977___mcc_h337 = _source317.dtor_value;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SetBuilder) {
            DAST._IType _8978___mcc_h341 = _source317.dtor_elemType;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_ToMultiset) {
            DAST._IExpression _8979___mcc_h343 = _source317.dtor_ToMultiset_a0;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_This) {
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Ite) {
            DAST._IExpression _8980___mcc_h345 = _source317.dtor_cond;
            DAST._IExpression _8981___mcc_h346 = _source317.dtor_thn;
            DAST._IExpression _8982___mcc_h347 = _source317.dtor_els;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_UnOp) {
            DAST._IUnaryOp _8983___mcc_h351 = _source317.dtor_unOp;
            DAST._IExpression _8984___mcc_h352 = _source317.dtor_expr;
            DAST.Format._IUnaryOpFormat _8985___mcc_h353 = _source317.dtor_format1;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_BinOp) {
            DAST._IBinOp _8986___mcc_h357 = _source317.dtor_op;
            DAST._IExpression _8987___mcc_h358 = _source317.dtor_left;
            DAST._IExpression _8988___mcc_h359 = _source317.dtor_right;
            DAST.Format._IBinaryOpFormat _8989___mcc_h360 = _source317.dtor_format2;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_ArrayLen) {
            DAST._IExpression _8990___mcc_h365 = _source317.dtor_expr;
            BigInteger _8991___mcc_h366 = _source317.dtor_dim;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_MapKeys) {
            DAST._IExpression _8992___mcc_h369 = _source317.dtor_expr;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_MapValues) {
            DAST._IExpression _8993___mcc_h371 = _source317.dtor_expr;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Select) {
            DAST._IExpression _8994___mcc_h373 = _source317.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _8995___mcc_h374 = _source317.dtor_field;
            bool _8996___mcc_h375 = _source317.dtor_isConstant;
            bool _8997___mcc_h376 = _source317.dtor_onDatatype;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SelectFn) {
            DAST._IExpression _8998___mcc_h381 = _source317.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _8999___mcc_h382 = _source317.dtor_field;
            bool _9000___mcc_h383 = _source317.dtor_onDatatype;
            bool _9001___mcc_h384 = _source317.dtor_isStatic;
            BigInteger _9002___mcc_h385 = _source317.dtor_arity;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Index) {
            DAST._IExpression _9003___mcc_h391 = _source317.dtor_expr;
            DAST._ICollKind _9004___mcc_h392 = _source317.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _9005___mcc_h393 = _source317.dtor_indices;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_IndexRange) {
            DAST._IExpression _9006___mcc_h397 = _source317.dtor_expr;
            bool _9007___mcc_h398 = _source317.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _9008___mcc_h399 = _source317.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _9009___mcc_h400 = _source317.dtor_high;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_TupleSelect) {
            DAST._IExpression _9010___mcc_h405 = _source317.dtor_expr;
            BigInteger _9011___mcc_h406 = _source317.dtor_index;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Call) {
            DAST._IExpression _9012___mcc_h409 = _source317.dtor_on;
            DAST._ICallName _9013___mcc_h410 = _source317.dtor_callName;
            Dafny.ISequence<DAST._IType> _9014___mcc_h411 = _source317.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _9015___mcc_h412 = _source317.dtor_args;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _9016___mcc_h417 = _source317.dtor_params;
            DAST._IType _9017___mcc_h418 = _source317.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _9018___mcc_h419 = _source317.dtor_body;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9019___mcc_h423 = _source317.dtor_values;
            DAST._IType _9020___mcc_h424 = _source317.dtor_retType;
            DAST._IExpression _9021___mcc_h425 = _source317.dtor_expr;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _9022___mcc_h429 = _source317.dtor_name;
            DAST._IType _9023___mcc_h430 = _source317.dtor_typ;
            DAST._IExpression _9024___mcc_h431 = _source317.dtor_value;
            DAST._IExpression _9025___mcc_h432 = _source317.dtor_iifeBody;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_Apply) {
            DAST._IExpression _9026___mcc_h437 = _source317.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _9027___mcc_h438 = _source317.dtor_args;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_TypeTest) {
            DAST._IExpression _9028___mcc_h441 = _source317.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9029___mcc_h442 = _source317.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _9030___mcc_h443 = _source317.dtor_variant;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_InitializationValue) {
            DAST._IType _9031___mcc_h447 = _source317.dtor_typ;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_BoolBoundedPool) {
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SetBoundedPool) {
            DAST._IExpression _9032___mcc_h449 = _source317.dtor_of;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else if (_source317.is_SeqBoundedPool) {
            DAST._IExpression _9033___mcc_h451 = _source317.dtor_of;
            bool _9034___mcc_h452 = _source317.dtor_includeDuplicates;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          } else {
            DAST._IExpression _9035___mcc_h455 = _source317.dtor_lo;
            DAST._IExpression _9036___mcc_h456 = _source317.dtor_hi;
            {
              _8940_onExpr = (_8940_onExpr).Sel(_8943_renderedName);
            }
          }
          r = RAST.Expr.create_Call(_8940_onExpr, _8932_typeExprs, _8935_argExprs);
          RAST._IExpr _out5081;
          DCOMPUTF16._IOwnership _out5082;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5081, out _out5082);
          r = _out5081;
          resultingOwnership = _out5082;
          return ;
        }
      } else if (_source310.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _9037___mcc_h252 = _source310.dtor_params;
        DAST._IType _9038___mcc_h253 = _source310.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _9039___mcc_h254 = _source310.dtor_body;
        Dafny.ISequence<DAST._IStatement> _9040_body = _9039___mcc_h254;
        DAST._IType _9041_retType = _9038___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _9042_params = _9037___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9043_paramNames;
          _9043_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _9044_i;
          _9044_i = BigInteger.Zero;
          while ((_9044_i) < (new BigInteger((_9042_params).Count))) {
            _9043_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_9043_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_9042_params).Select(_9044_i)).dtor_name));
            _9044_i = (_9044_i) + (BigInteger.One);
          }
          RAST._IExpr _9045_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9046_recIdents;
          RAST._IExpr _out5083;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5084;
          DCOMPUTF16.COMP.GenStmts(_9040_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _9043_paramNames, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out5083, out _out5084);
          _9045_recursiveGen = _out5083;
          _9046_recIdents = _out5084;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _9047_allReadCloned;
          _9047_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_9046_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _9048_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_5 in (_9046_recIdents).Elements) {
              _9048_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_5;
              if ((_9046_recIdents).Contains(_9048_next)) {
                goto after__ASSIGN_SUCH_THAT_5;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3199)");
          after__ASSIGN_SUCH_THAT_5: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_9048_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _9047_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_9047_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_9043_paramNames).Contains(_9048_next))) {
              _9047_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9047_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_9048_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_9048_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9048_next));
            }
            _9046_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9046_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9048_next));
          }
          Dafny.ISequence<Dafny.Rune> _9049_paramsString;
          _9049_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _9050_paramTypes;
          _9050_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _9044_i = BigInteger.Zero;
          while ((_9044_i) < (new BigInteger((_9042_params).Count))) {
            if ((_9044_i).Sign == 1) {
              _9049_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_9049_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _9050_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_9050_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _9051_typStr;
            RAST._IType _out5085;
            _out5085 = DCOMPUTF16.COMP.GenType(((_9042_params).Select(_9044_i)).dtor_typ, false, true);
            _9051_typStr = _out5085;
            _9049_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9049_paramsString, DCOMPUTF16.__default.escapeIdent(((_9042_params).Select(_9044_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_9051_typStr))._ToString(DCOMPUTF16.__default.IND));
            _9050_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_9050_paramTypes, (RAST.Type.create_Borrowed(_9051_typStr))._ToString(DCOMPUTF16.__default.IND));
            _9044_i = (_9044_i) + (BigInteger.One);
          }
          RAST._IType _9052_retTypeGen;
          RAST._IType _out5086;
          _out5086 = DCOMPUTF16.COMP.GenType(_9041_retType, false, true);
          _9052_retTypeGen = _out5086;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _9050_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_9052_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _9047_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _9049_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_9052_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_9045_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out5087;
          DCOMPUTF16._IOwnership _out5088;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5087, out _out5088);
          r = _out5087;
          resultingOwnership = _out5088;
          return ;
        }
      } else if (_source310.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9053___mcc_h255 = _source310.dtor_values;
        DAST._IType _9054___mcc_h256 = _source310.dtor_retType;
        DAST._IExpression _9055___mcc_h257 = _source310.dtor_expr;
        DAST._IExpression _9056_expr = _9055___mcc_h257;
        DAST._IType _9057_retType = _9054___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9058_values = _9053___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9059_paramNames;
          _9059_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9060_paramNamesSet;
          _9060_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _9061_i;
          _9061_i = BigInteger.Zero;
          while ((_9061_i) < (new BigInteger((_9058_values).Count))) {
            _9059_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_9059_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_9058_values).Select(_9061_i)).dtor__0).dtor_name));
            _9060_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_9060_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_9058_values).Select(_9061_i)).dtor__0).dtor_name));
            _9061_i = (_9061_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _9062_s;
          _9062_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _9063_paramsString;
          _9063_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _9061_i = BigInteger.Zero;
          while ((_9061_i) < (new BigInteger((_9058_values).Count))) {
            if ((_9061_i).Sign == 1) {
              _9063_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_9063_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _9064_typStr;
            RAST._IType _out5089;
            _out5089 = DCOMPUTF16.COMP.GenType((((_9058_values).Select(_9061_i)).dtor__0).dtor_typ, false, true);
            _9064_typStr = _out5089;
            RAST._IExpr _9065_valueGen;
            DCOMPUTF16._IOwnership _9066___v124;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9067_recIdents;
            RAST._IExpr _out5090;
            DCOMPUTF16._IOwnership _out5091;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5092;
            DCOMPUTF16.COMP.GenExpr(((_9058_values).Select(_9061_i)).dtor__1, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5090, out _out5091, out _out5092);
            _9065_valueGen = _out5090;
            _9066___v124 = _out5091;
            _9067_recIdents = _out5092;
            _9062_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9062_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent((((_9058_values).Select(_9061_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_9064_typStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9067_recIdents);
            _9062_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9062_s, (_9065_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _9061_i = (_9061_i) + (BigInteger.One);
          }
          RAST._IExpr _9068_recGen;
          DCOMPUTF16._IOwnership _9069_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9070_recIdents;
          RAST._IExpr _out5093;
          DCOMPUTF16._IOwnership _out5094;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5095;
          DCOMPUTF16.COMP.GenExpr(_9056_expr, selfIdent, _9059_paramNames, expectedOwnership, out _out5093, out _out5094, out _out5095);
          _9068_recGen = _out5093;
          _9069_recOwned = _out5094;
          _9070_recIdents = _out5095;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9070_recIdents, _9060_paramNamesSet);
          _9062_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9062_s, (_9068_recGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_9062_s);
          RAST._IExpr _out5096;
          DCOMPUTF16._IOwnership _out5097;
          DCOMPUTF16.COMP.FromOwnership(r, _9069_recOwned, expectedOwnership, out _out5096, out _out5097);
          r = _out5096;
          resultingOwnership = _out5097;
          return ;
        }
      } else if (_source310.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _9071___mcc_h258 = _source310.dtor_name;
        DAST._IType _9072___mcc_h259 = _source310.dtor_typ;
        DAST._IExpression _9073___mcc_h260 = _source310.dtor_value;
        DAST._IExpression _9074___mcc_h261 = _source310.dtor_iifeBody;
        DAST._IExpression _9075_iifeBody = _9074___mcc_h261;
        DAST._IExpression _9076_value = _9073___mcc_h260;
        DAST._IType _9077_tpe = _9072___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _9078_name = _9071___mcc_h258;
        {
          RAST._IExpr _9079_valueGen;
          DCOMPUTF16._IOwnership _9080___v125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9081_recIdents;
          RAST._IExpr _out5098;
          DCOMPUTF16._IOwnership _out5099;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5100;
          DCOMPUTF16.COMP.GenExpr(_9076_value, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5098, out _out5099, out _out5100);
          _9079_valueGen = _out5098;
          _9080___v125 = _out5099;
          _9081_recIdents = _out5100;
          readIdents = _9081_recIdents;
          RAST._IType _9082_valueTypeGen;
          RAST._IType _out5101;
          _out5101 = DCOMPUTF16.COMP.GenType(_9077_tpe, false, true);
          _9082_valueTypeGen = _out5101;
          RAST._IExpr _9083_bodyGen;
          DCOMPUTF16._IOwnership _9084___v126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9085_bodyIdents;
          RAST._IExpr _out5102;
          DCOMPUTF16._IOwnership _out5103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5104;
          DCOMPUTF16.COMP.GenExpr(_9075_iifeBody, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5102, out _out5103, out _out5104);
          _9083_bodyGen = _out5102;
          _9084___v126 = _out5103;
          _9085_bodyIdents = _out5104;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9085_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_9078_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMPUTF16.__default.escapeIdent((_9078_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_9082_valueTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_9079_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_9083_bodyGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out5105;
          DCOMPUTF16._IOwnership _out5106;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5105, out _out5106);
          r = _out5105;
          resultingOwnership = _out5106;
          return ;
        }
      } else if (_source310.is_Apply) {
        DAST._IExpression _9086___mcc_h262 = _source310.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _9087___mcc_h263 = _source310.dtor_args;
        Dafny.ISequence<DAST._IExpression> _9088_args = _9087___mcc_h263;
        DAST._IExpression _9089_func = _9086___mcc_h262;
        {
          RAST._IExpr _9090_funcExpr;
          DCOMPUTF16._IOwnership _9091___v127;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9092_recIdents;
          RAST._IExpr _out5107;
          DCOMPUTF16._IOwnership _out5108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5109;
          DCOMPUTF16.COMP.GenExpr(_9089_func, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5107, out _out5108, out _out5109);
          _9090_funcExpr = _out5107;
          _9091___v127 = _out5108;
          _9092_recIdents = _out5109;
          readIdents = _9092_recIdents;
          Dafny.ISequence<Dafny.Rune> _9093_argString;
          _9093_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _9094_i;
          _9094_i = BigInteger.Zero;
          while ((_9094_i) < (new BigInteger((_9088_args).Count))) {
            if ((_9094_i).Sign == 1) {
              _9093_argString = Dafny.Sequence<Dafny.Rune>.Concat(_9093_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _9095_argExpr;
            DCOMPUTF16._IOwnership _9096_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9097_argIdents;
            RAST._IExpr _out5110;
            DCOMPUTF16._IOwnership _out5111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5112;
            DCOMPUTF16.COMP.GenExpr((_9088_args).Select(_9094_i), selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5110, out _out5111, out _out5112);
            _9095_argExpr = _out5110;
            _9096_argOwned = _out5111;
            _9097_argIdents = _out5112;
            Dafny.ISequence<Dafny.Rune> _9098_argExprString;
            _9098_argExprString = (_9095_argExpr)._ToString(DCOMPUTF16.__default.IND);
            if (object.Equals(_9096_argOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
              _9098_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _9098_argExprString);
            }
            _9093_argString = Dafny.Sequence<Dafny.Rune>.Concat(_9093_argString, _9098_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9097_argIdents);
            _9094_i = (_9094_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_9090_funcExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _9093_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out5113;
          DCOMPUTF16._IOwnership _out5114;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5113, out _out5114);
          r = _out5113;
          resultingOwnership = _out5114;
          return ;
        }
      } else if (_source310.is_TypeTest) {
        DAST._IExpression _9099___mcc_h264 = _source310.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9100___mcc_h265 = _source310.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _9101___mcc_h266 = _source310.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _9102_variant = _9101___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9103_dType = _9100___mcc_h265;
        DAST._IExpression _9104_on = _9099___mcc_h264;
        {
          RAST._IExpr _9105_exprGen;
          DCOMPUTF16._IOwnership _9106___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9107_recIdents;
          RAST._IExpr _out5115;
          DCOMPUTF16._IOwnership _out5116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5117;
          DCOMPUTF16.COMP.GenExpr(_9104_on, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5115, out _out5116, out _out5117);
          _9105_exprGen = _out5115;
          _9106___v128 = _out5116;
          _9107_recIdents = _out5117;
          Dafny.ISequence<Dafny.Rune> _9108_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out5118;
          _out5118 = DCOMPUTF16.COMP.GenPath(_9103_dType);
          _9108_dTypePath = _out5118;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_9105_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _9108_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_9102_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          RAST._IExpr _out5119;
          DCOMPUTF16._IOwnership _out5120;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5119, out _out5120);
          r = _out5119;
          resultingOwnership = _out5120;
          readIdents = _9107_recIdents;
          return ;
        }
      } else if (_source310.is_InitializationValue) {
        DAST._IType _9109___mcc_h267 = _source310.dtor_typ;
        DAST._IType _9110_typ = _9109___mcc_h267;
        {
          RAST._IType _9111_typExpr;
          RAST._IType _out5121;
          _out5121 = DCOMPUTF16.COMP.GenType(_9110_typ, false, false);
          _9111_typExpr = _out5121;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_9111_typExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out5122;
          DCOMPUTF16._IOwnership _out5123;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5122, out _out5123);
          r = _out5122;
          resultingOwnership = _out5123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source310.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out5124;
          DCOMPUTF16._IOwnership _out5125;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5124, out _out5125);
          r = _out5124;
          resultingOwnership = _out5125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source310.is_SetBoundedPool) {
        DAST._IExpression _9112___mcc_h268 = _source310.dtor_of;
        DAST._IExpression _9113_of = _9112___mcc_h268;
        {
          RAST._IExpr _9114_exprGen;
          DCOMPUTF16._IOwnership _9115___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9116_recIdents;
          RAST._IExpr _out5126;
          DCOMPUTF16._IOwnership _out5127;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5128;
          DCOMPUTF16.COMP.GenExpr(_9113_of, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5126, out _out5127, out _out5128);
          _9114_exprGen = _out5126;
          _9115___v129 = _out5127;
          _9116_recIdents = _out5128;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9114_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out5129;
          DCOMPUTF16._IOwnership _out5130;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5129, out _out5130);
          r = _out5129;
          resultingOwnership = _out5130;
          readIdents = _9116_recIdents;
          return ;
        }
      } else if (_source310.is_SeqBoundedPool) {
        DAST._IExpression _9117___mcc_h269 = _source310.dtor_of;
        bool _9118___mcc_h270 = _source310.dtor_includeDuplicates;
        bool _9119_includeDuplicates = _9118___mcc_h270;
        DAST._IExpression _9120_of = _9117___mcc_h269;
        {
          RAST._IExpr _9121_exprGen;
          DCOMPUTF16._IOwnership _9122___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9123_recIdents;
          RAST._IExpr _out5131;
          DCOMPUTF16._IOwnership _out5132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5133;
          DCOMPUTF16.COMP.GenExpr(_9120_of, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5131, out _out5132, out _out5133);
          _9121_exprGen = _out5131;
          _9122___v130 = _out5132;
          _9123_recIdents = _out5133;
          Dafny.ISequence<Dafny.Rune> _9124_s;
          _9124_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9121_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_9119_includeDuplicates)) {
            _9124_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _9124_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_9124_s);
          RAST._IExpr _out5134;
          DCOMPUTF16._IOwnership _out5135;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5134, out _out5135);
          r = _out5134;
          resultingOwnership = _out5135;
          readIdents = _9123_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _9125___mcc_h271 = _source310.dtor_lo;
        DAST._IExpression _9126___mcc_h272 = _source310.dtor_hi;
        DAST._IExpression _9127_hi = _9126___mcc_h272;
        DAST._IExpression _9128_lo = _9125___mcc_h271;
        {
          RAST._IExpr _9129_lo;
          DCOMPUTF16._IOwnership _9130___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9131_recIdentsLo;
          RAST._IExpr _out5136;
          DCOMPUTF16._IOwnership _out5137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5138;
          DCOMPUTF16.COMP.GenExpr(_9128_lo, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5136, out _out5137, out _out5138);
          _9129_lo = _out5136;
          _9130___v131 = _out5137;
          _9131_recIdentsLo = _out5138;
          RAST._IExpr _9132_hi;
          DCOMPUTF16._IOwnership _9133___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9134_recIdentsHi;
          RAST._IExpr _out5139;
          DCOMPUTF16._IOwnership _out5140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5141;
          DCOMPUTF16.COMP.GenExpr(_9127_hi, selfIdent, @params, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5139, out _out5140, out _out5141);
          _9132_hi = _out5139;
          _9133___v132 = _out5140;
          _9134_recIdentsHi = _out5141;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_9129_lo)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_9132_hi)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out5142;
          DCOMPUTF16._IOwnership _out5143;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5142, out _out5143);
          r = _out5142;
          resultingOwnership = _out5143;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_9131_recIdentsLo, _9134_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _9135_i;
      _9135_i = BigInteger.Zero;
      while ((_9135_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _9136_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _9137_m;
        RAST._IMod _out5144;
        _out5144 = DCOMPUTF16.COMP.GenModule((p).Select(_9135_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _9137_m = _out5144;
        _9136_generated = (_9137_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_9135_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _9136_generated);
        _9135_i = (_9135_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _9138_i;
      _9138_i = BigInteger.Zero;
      while ((_9138_i) < (new BigInteger((fullName).Count))) {
        if ((_9138_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMPUTF16.__default.escapeIdent((fullName).Select(_9138_i)));
        _9138_i = (_9138_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMPUTF16

