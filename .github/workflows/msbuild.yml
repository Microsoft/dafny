name: Build and Test

on:
  workflow_dispatch:
  pull_request:
    branches: [ master, main-* ]

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  dotnet-version: 6.0.x # SDK Version for building Dafny

jobs:
  singletons:
    needs: check-deep-tests
    if: always() && (( github.event_name == 'pull_request' && (needs.check-deep-tests.result == 'success' || contains(github.event.pull_request.labels.*.name, 'run-deep-tests'))) || ( github.event_name == 'push' && ( github.ref_name == 'master' || vars.TEST_ON_FORK == 'true' )))
    runs-on: ubuntu-20.04
    steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.dotnet-version}}
    - name: Checkout Dafny
      uses: actions/checkout@v3
      with:
        path: dafny
    - name: Restore tools
      working-directory: dafny
      run: dotnet tool restore
    - name: Get Boogie Version
      run: |
        sudo apt-get install -qq libxml2-utils
        echo "boogieVersion=`xmllint --xpath "//PackageReference[@Include='Boogie.ExecutionEngine']/@Version" dafny/Source/DafnyCore/DafnyCore.csproj | grep -Po 'Version="\K.*?(?=")'`" >> $GITHUB_ENV
    - name: Attempt custom Boogie patch
      working-directory: dafny
      run: git apply customBoogie.patch
    - name: Checkout Boogie
      uses: actions/checkout@v3
      with:
        repository: boogie-org/boogie
        path: dafny/boogie
        ref: v${{ env.boogieVersion }}
    - name: Build Dafny with local Boogie
      working-directory: dafny
      run: dotnet build Source/Dafny.sln
    - name: Check whitespace and style
      working-directory: dafny
      run: dotnet tool run dotnet-format -w -s error --check Source/Dafny.sln --exclude DafnyCore/Scanner.cs --exclude DafnyCore/Parser.cs
    - name: Create NuGet package (just to make sure it works)
      run: dotnet pack --no-build dafny/Source/Dafny.sln

  check-deep-tests:
    uses: ./.github/workflows/check-deep-tests-reusable.yml
    with:
      branch: master

  integration-tests:
    needs: check-deep-tests
    if: always() && (( github.event_name == 'pull_request' && (needs.check-deep-tests.result == 'success' || contains(github.event.pull_request.labels.*.name, 'run-deep-tests'))) || ( github.event_name == 'push' && ( github.ref_name == 'master' || vars.TEST_ON_FORK == 'true' )))
    uses: ./.github/workflows/integration-tests-reusable.yml
    with:
      # By default run only on one platform, but run on all platforms if the PR has the "run-deep-tests"
      # label, and skip checking the nightly build above.
      # This is the best way to fix an issue in master that was only caught by the nightly build.
      all_platforms: ${{ contains(github.event.pull_request.labels.*.name, 'run-deep-tests') || contains(github.event.push.labels.*.name, 'run-deep-tests')}}
      num_shards: 5

  test-coverage-analysis:
    runs-on: ubuntu-20.04
    needs: integration-tests
    steps:
      # Check out Dafny so that highlighted source is possible
      - name: Checkout Dafny
        uses: actions/checkout@v3
        with:
          path: dafny

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.dotnet-version}}

      - name: Install dotnet-reportgenerator and coverage
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install dotnet-coverage

      - name: Download integration test artifacts
        uses: actions/download-artifact@v3
        with:
          name: integration-test-results-ubuntu-20.04

      - name: Download unit test artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
           pr: ${{github.event.pull_request.number}}
           workflow: xunit-tests.yml
           workflow_conclusion: success
           name: unit-test-results-ubuntu-20.04

      - name: Show files
        run: ls -lR

      - name: Merge reports
        run: |
          dotnet coverage merge DafnyLanguageServer.Test.coverage -o DafnyLanguageServer.Test.cobertura.xml -f cobertura
          reportgenerator -reports:"./**/coverage.cobertura.xml;*.cobertura.xml" -reporttypes:Cobertura -targetdir:coverage-cobertura
          reportgenerator -reports:"./coverage-cobertura/Cobertura.xml" -reporttypes:Html -targetdir:coverage-html

      - name: Code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./coverage-cobertura/Cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '70 80'

      - uses: actions/upload-artifact@v3
        with:
          name: test-coverage-results
          path: |
            coverage-cobertura
            coverage-html
